//! A peephole optimization (baseline) pass.

use crate::cursor::{Cursor, FuncCursor};
// use crate::isa::TargetIsa;
use crate::timing;
use crate::ir::Inst;
use crate::ir::instructions::Opcode;
//use crate::ir::condcodes::IntCC;
//use cranelift_codegen_shared::condcodes::IntCC;
use crate::ir::dfg::ValueDef;
use crate::ir::{Function, InstBuilder, InstructionData};
use crate::ir::types::{I32, I64};

fn superopt_1(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_2 == -2 {
if rhs_1 == 1 {
pos.func.dfg.replace(inst).bnot(arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_2(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == 4611686018427387904 {
if rhs_1 == 0 {
let rep_insts = pos.func.dfg.inst_results(inst);
let rep_insts_0 = rep_insts[0];
pos.func.dfg.change_to_alias(arg_0, rep_insts_0);
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_3(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
if rhs_1 == 1 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
if rhs_4 == 1 {
if rhs_3 == 0 {
if arg_1 == arg_3 {
pos.func.dfg.replace(inst).iconst(I64, 1_u64 as i64); 
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_4(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 1 {
if rhs_1 == 2 {
pos.func.dfg.replace(inst).imul_imm(arg_1, 8_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_5(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 1 {
if rhs_1 == 4 {
pos.func.dfg.replace(inst).irsub_imm(arg_1, 3_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_6(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == -2 {
if rhs_1 == 1 {
pos.func.dfg.replace(inst).bor_imm(arg_1, 1_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_7(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
if rhs_1 == 7 {
pos.func.dfg.replace(inst).band_imm(arg_1, 7_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_8(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -1 {
if rhs_1 == 0 {
pos.func.dfg.replace(inst).irsub_imm(arg_1, 1_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_9(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
if rhs_2 == 1 {
if rhs_1 == 0 {
let rhs_inst_4 = pos.ins().iconst(I64, 1_u64 as i64);
pos.func.dfg.replace(inst).bor_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_10(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -1 {
if rhs_1 == 1 {
pos.func.dfg.replace(inst).irsub_imm(arg_1, 2_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_11(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -8 {
if rhs_1 == 7 {
pos.func.dfg.replace(inst).band_imm(arg_1, 7_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_12(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 2 {
if rhs_2 == 2 {
if rhs_1 == 2 {
let rep_insts = pos.func.dfg.inst_results(inst);
let rep_insts_0 = rep_insts[0];
pos.func.dfg.change_to_alias(arg_1, rep_insts_0);
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_13(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 3 {
if rhs_2 == 3 {
if rhs_1 == 3 {
let rep_insts = pos.func.dfg.inst_results(inst);
let rep_insts_0 = rep_insts[0];
pos.func.dfg.change_to_alias(arg_1, rep_insts_0);
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_14(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -2 {
if rhs_1 == 1 {
pos.func.dfg.replace(inst).band_imm(arg_1, 1_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_15(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
if rhs_2 == 3 {
if rhs_1 == 2 {
pos.func.dfg.replace(inst).imul_imm(arg_1, 12_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_16(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 1 {
if rhs_1 == 12 {
pos.func.dfg.replace(inst).imul_imm(arg_1, 24_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_17(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -1 {
if rhs_1 == -1 {
pos.func.dfg.replace(inst).irsub_imm(arg_1, 0_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_18(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_2 == 2 {
if rhs_1 == 16 {
pos.func.dfg.replace(inst).irsub_imm(arg_1, 18_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_19(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bxor => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == -512 {
if arg_1 == arg_0[0] {
pos.func.dfg.replace(inst).band_imm(arg_1, 511_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_20(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_2 == 6 {
if rhs_1 == 16 {
pos.func.dfg.replace(inst).irsub_imm(arg_1, 22_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_21(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -68 {
if rhs_1 == 3 {
pos.func.dfg.replace(inst).band_imm(arg_1, 3_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_22(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -12 {
if rhs_1 == 1 {
pos.func.dfg.replace(inst).band_imm(arg_1, 1_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_23(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_2 == 63 {
if rhs_1 == -1 {
pos.func.dfg.replace(inst).irsub_imm(arg_1, 62_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_24(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 1 {
if rhs_1 == 1 {
let rhs_inst_4 = pos.ins().iconst(I32, 1_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_25(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -1 {
if rhs_1 == 17 {
pos.func.dfg.replace(inst).irsub_imm(arg_1, 18_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_26(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == 1 {
if rhs_1 == 1 {
let rhs_inst_4 = pos.ins().iconst(I32, 1_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_27(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -142 {
if rhs_1 == 1 {
pos.func.dfg.replace(inst).band_imm(arg_1, 1_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_28(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_2 == 64 {
if rhs_1 == -1 {
pos.func.dfg.replace(inst).irsub_imm(arg_1, 63_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_29(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_2 == 4 {
if rhs_1 == 1 {
pos.func.dfg.replace(inst).sshr_imm(arg_1, 5_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_30(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_2 == 2 {
if rhs_1 == 1 {
pos.func.dfg.replace(inst).sshr_imm(arg_1, 3_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_31(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_2 == 3 {
if rhs_1 == 1 {
pos.func.dfg.replace(inst).sshr_imm(arg_1, 4_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_32(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -1 {
if rhs_1 == 16 {
pos.func.dfg.replace(inst).irsub_imm(arg_1, 17_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_33(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 1900 {
if rhs_1 == 3 {
pos.func.dfg.replace(inst).band_imm(arg_1, 3_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_34(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 3 {
if rhs_1 == 3 {
let rhs_inst_4 = pos.ins().iconst(I32, 3_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_35(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -454 {
if rhs_1 == 1 {
pos.func.dfg.replace(inst).band_imm(arg_1, 1_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_36(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Unary { opcode, arg } => {
let arg_2 = arg;
match opcode {
Opcode::Clz => {
if rhs_2 == 64 {
if rhs_1 == 4294967295 {
let rep_insts = pos.func.dfg.inst_results(inst);
let rep_insts_0 = rep_insts[0];
pos.func.dfg.change_to_alias(arg_0, rep_insts_0);
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_37(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_2 == 2 {
if rhs_1 == 2 {
let rhs_inst_4 = pos.ins().iconst(I32, 3_u64 as i64);
pos.func.dfg.replace(inst).band_not(arg_1, rhs_inst_4);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_38(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == 4 {
let rhs_inst_4 = pos.ins().iconst(I32, 4_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_39(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == 1 {
let rhs_inst_4 = pos.ins().iconst(I64, 1_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_40(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Unary { opcode, arg } => {
let arg_2 = arg;
match opcode {
Opcode::Ctz => {
if rhs_2 == 64 {
if rhs_1 == 4294967295 {
let rep_insts = pos.func.dfg.inst_results(inst);
let rep_insts_0 = rep_insts[0];
pos.func.dfg.change_to_alias(arg_0, rep_insts_0);
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_41(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == 1 {
let rhs_inst_4 = pos.ins().iconst(I32, 1_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_42(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_2 == 1 {
if rhs_1 == 1 {
let rhs_inst_4 = pos.ins().iconst(I32, 1_u64 as i64);
pos.func.dfg.replace(inst).band_not(arg_1, rhs_inst_4);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_43(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_2 == 2 {
if rhs_1 == 63 {
pos.func.dfg.replace(inst).ushr_imm(arg_1, 63_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_44(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_2 == 2 {
if rhs_1 == 31 {
pos.func.dfg.replace(inst).ushr_imm(arg_1, 31_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_45(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_2 == 3 {
if rhs_1 == 31 {
pos.func.dfg.replace(inst).ushr_imm(arg_1, 31_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_46(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -35 {
if rhs_1 == 1 {
let rhs_inst_4 = pos.ins().iconst(I32, 1_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_47(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -19 {
if rhs_1 == 1 {
let rhs_inst_4 = pos.ins().iconst(I32, 1_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_48(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Ishl => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Sshr => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Ishl => {
if arg_2[0] != arg_1[1] && arg_2[0] != arg_0[1] && arg_2[0] != arg_2[1] && arg_1[1] == arg_0[1] && arg_1[1] == arg_2[1] && arg_0[1] == arg_2[1] {
let rep_insts = pos.func.dfg.inst_results(inst);
let rep_insts_0 = rep_insts[0];
pos.func.dfg.change_to_alias(arg_1[0], rep_insts_0);
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_49(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_2 == 1 {
if rhs_1 == 63 {
pos.func.dfg.replace(inst).ushr_imm(arg_1, 63_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_50(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_2 == 7 {
if rhs_1 == 63 {
pos.func.dfg.replace(inst).ushr_imm(arg_1, 63_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_51(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_2 == 4 {
if rhs_1 == 31 {
pos.func.dfg.replace(inst).ushr_imm(arg_1, 31_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_52(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_2 == 7 {
if rhs_1 == 31 {
pos.func.dfg.replace(inst).ushr_imm(arg_1, 31_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_53(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_2 == 6 {
if rhs_1 == 31 {
pos.func.dfg.replace(inst).ushr_imm(arg_1, 31_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_54(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_2 == 5 {
if rhs_1 == 31 {
pos.func.dfg.replace(inst).ushr_imm(arg_1, 31_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_55(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_2 == 1 {
if rhs_1 == 31 {
pos.func.dfg.replace(inst).ushr_imm(arg_1, 31_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_56(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_2 == 26 {
if rhs_1 == 63 {
pos.func.dfg.replace(inst).ushr_imm(arg_1, 63_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_57(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == 33 {
let rhs_inst_4 = pos.ins().iconst(I64, 33_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_58(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 15 {
if rhs_1 == 15 {
let rhs_inst_4 = pos.ins().iconst(I32, 15_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_59(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -143 {
if rhs_1 == 1 {
let rhs_inst_4 = pos.ins().iconst(I32, 1_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_60(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_2 == 15 {
if rhs_1 == 63 {
pos.func.dfg.replace(inst).ushr_imm(arg_1, 63_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_61(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_2 == 13 {
if rhs_1 == 63 {
pos.func.dfg.replace(inst).ushr_imm(arg_1, 63_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_62(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 31 {
if rhs_1 == 31 {
let rhs_inst_4 = pos.ins().iconst(I32, 31_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_63(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -544 {
if rhs_1 == -2 {
pos.func.dfg.replace(inst).irsub_imm(arg_1, 542_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_64(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_2 == 18 {
if rhs_1 == 63 {
pos.func.dfg.replace(inst).ushr_imm(arg_1, 63_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_65(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 63 {
if rhs_1 == 63 {
let rhs_inst_4 = pos.ins().iconst(I32, 63_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_66(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bxor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Band => {
if arg_1[1] != arg_1[0] && arg_1[1] != arg_0[1] && arg_1[0] == arg_0[1] {
pos.func.dfg.replace(inst).band_not(arg_1[0], arg_1[1]);

}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_67(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bxor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Band => {
if arg_0[1] != arg_1[0] && arg_0[1] == arg_1[1] && arg_1[0] != arg_1[1] {
pos.func.dfg.replace(inst).band_not(arg_1[1], arg_1[0]);

}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_68(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bxor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Band => {
if arg_0[1] == arg_1[0] && arg_0[1] != arg_1[1] && arg_1[0] != arg_1[1] {
pos.func.dfg.replace(inst).band_not(arg_1[0], arg_1[1]);

}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_69(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_1 == 0 {
if arg_0[0] != arg_1 {
pos.func.dfg.replace(inst).isub(arg_1, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_70(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bxor => {
if arg_0[1] != arg_1[0] && arg_0[1] == arg_1[1] && arg_1[0] != arg_1[1] {
pos.func.dfg.replace(inst).band_not(arg_1[1], arg_1[0]);

}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_71(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_1 == 0 {
if arg_1 != arg_0[1] {
pos.func.dfg.replace(inst).isub(arg_0[1], arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_72(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == 255 {
let rhs_inst_4 = pos.ins().iconst(I32, 255_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_73(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == 144 {
let rhs_inst_4 = pos.ins().iconst(I64, 144_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_74(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == 128 {
let rhs_inst_4 = pos.ins().iconst(I64, 128_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_75(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == 257 {
let rhs_inst_4 = pos.ins().iconst(I64, 257_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_76(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 2147483647 {
if rhs_1 == 2 {
pos.func.dfg.replace(inst).imul_imm(arg_1, 4_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_77(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_1 == -1 {
if arg_1 != arg_0[1] {
pos.func.dfg.replace(inst).bor_not(arg_0[1], arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_78(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 2147483647 {
if rhs_1 == 3 {
pos.func.dfg.replace(inst).imul_imm(arg_1, 8_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_79(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 1073741823 {
if rhs_1 == 2 {
pos.func.dfg.replace(inst).imul_imm(arg_1, 4_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_80(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_1 == -1 {
if arg_1 != arg_0[0] {
pos.func.dfg.replace(inst).bor_not(arg_1, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_81(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_2 == 0 {
if rhs_1 == 3 {
pos.func.dfg.replace(inst).imul_imm(arg_1, 4294967288_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_82(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 4 {
if rhs_1 == 0 {
pos.func.dfg.replace(inst).imul_imm(arg_1, 4294967280_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_83(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_2 == 0 {
if rhs_1 == 2 {
pos.func.dfg.replace(inst).imul_imm(arg_1, 4294967292_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_84(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 2 {
if rhs_1 == 0 {
pos.func.dfg.replace(inst).imul_imm(arg_1, 4294967292_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_85(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 3 {
if rhs_1 == 0 {
pos.func.dfg.replace(inst).imul_imm(arg_1, 4294967288_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_86(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 1 {
if rhs_1 == 0 {
pos.func.dfg.replace(inst).imul_imm(arg_1, 4294967294_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_87(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == 31 {
if arg_0[0] != arg_1 {
pos.func.dfg.replace(inst).ushr(arg_1, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_88(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_2 == 6 {
if rhs_1 == 6 {
pos.func.dfg.replace(inst).band_imm(arg_1, 4294967232_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_89(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_2 == 3 {
if rhs_1 == 3 {
pos.func.dfg.replace(inst).band_imm(arg_1, 4294967288_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_90(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -1073741824 {
if rhs_1 == 2 {
pos.func.dfg.replace(inst).imul_imm(arg_1, 4_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_91(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_2 == 4 {
if rhs_1 == 4 {
pos.func.dfg.replace(inst).band_imm(arg_1, 4294967280_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_92(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_2 == 5 {
if rhs_1 == 5 {
pos.func.dfg.replace(inst).band_imm(arg_1, 4294967264_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_93(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 2147483647 {
if rhs_1 == 5 {
pos.func.dfg.replace(inst).imul_imm(arg_1, 32_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_94(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_2 == 1 {
if rhs_1 == 1 {
pos.func.dfg.replace(inst).band_imm(arg_1, 4294967294_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_95(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_2 == 8 {
if rhs_1 == 8 {
pos.func.dfg.replace(inst).band_imm(arg_1, 4294967040_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_96(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_2 == 0 {
if rhs_1 == 24 {
pos.func.dfg.replace(inst).imul_imm(arg_1, 4294967272_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_97(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_2 == 2 {
if rhs_1 == 2 {
pos.func.dfg.replace(inst).band_imm(arg_1, 4294967292_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_98(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_2 == 5 {
if rhs_1 == 5 {
pos.func.dfg.replace(inst).band_imm(arg_1, 4294967264_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_99(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == 4096 {
let rhs_inst_4 = pos.ins().iconst(I64, 4096_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_100(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_2 == 3 {
if rhs_1 == 3 {
pos.func.dfg.replace(inst).band_imm(arg_1, 4294967288_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_101(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_2 == 0 {
if rhs_1 == 12 {
pos.func.dfg.replace(inst).imul_imm(arg_1, 4294967284_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_102(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == 4224 {
let rhs_inst_4 = pos.ins().iconst(I64, 4224_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_103(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 2147483647 {
if rhs_1 == 28 {
pos.func.dfg.replace(inst).imul_imm(arg_1, 28_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_104(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_1 == -1 {
if arg_1 != arg_0[0] {
pos.func.dfg.replace(inst).band_not(arg_1, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_105(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -65536 {
if rhs_1 == 1023 {
pos.func.dfg.replace(inst).band_imm(arg_1, 1023_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_106(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 1073741823 {
if rhs_1 == 80 {
pos.func.dfg.replace(inst).imul_imm(arg_1, 80_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_107(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 2147483647 {
if rhs_1 == 12 {
pos.func.dfg.replace(inst).imul_imm(arg_1, 12_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_108(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 2147483647 {
if rhs_1 == 40 {
pos.func.dfg.replace(inst).imul_imm(arg_1, 40_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_109(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_1 == -1 {
if arg_0[0] != arg_1 {
pos.func.dfg.replace(inst).band_not(arg_1, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_110(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 2147483647 {
if rhs_1 == 24 {
pos.func.dfg.replace(inst).imul_imm(arg_1, 24_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_111(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_2 == -2 {
if rhs_1 == -3 {
pos.func.dfg.replace(inst).iadd_imm(arg_1, 4294967295_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_112(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == -7 {
pos.func.dfg.replace(inst).irsub_imm(arg_1, 4294967288_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_113(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_1 == -1 {
if arg_0[1] != arg_1 {
pos.func.dfg.replace(inst).band_not(arg_0[1], arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_114(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == 255 {
if arg_0[0] != arg_1 {
pos.func.dfg.replace(inst).ushr(arg_1, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_115(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_1 == -1 {
if arg_1 != arg_0[1] {
pos.func.dfg.replace(inst).band_not(arg_0[1], arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_116(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 127 {
if rhs_1 == -128 {
pos.func.dfg.replace(inst).bor_imm(arg_1, 4294967168_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_117(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == -8 {
let rhs_inst_4 = pos.ins().iconst(I32, 4294967288_u64 as i64);
pos.func.dfg.replace(inst).bor_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_118(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -1073741824 {
if rhs_1 == 31 {
pos.func.dfg.replace(inst).band_imm(arg_1, 31_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_119(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 4352 {
if rhs_1 == 4352 {
let rhs_inst_4 = pos.ins().iconst(I64, 4352_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_120(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == 65535 {
let rhs_inst_4 = pos.ins().iconst(I32, 65535_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_121(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_2 == 24 {
if rhs_1 == 24 {
pos.func.dfg.replace(inst).band_imm(arg_1, 4278190080_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_122(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 32767 {
if rhs_1 == -1 {
let rhs_inst_4 = pos.ins().iconst(I32, 4294934528_u64 as i64);
pos.func.dfg.replace(inst).bor_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_123(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 65535 {
if rhs_1 == -1 {
let rhs_inst_4 = pos.ins().iconst(I32, 4294901760_u64 as i64);
pos.func.dfg.replace(inst).bor_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_124(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == 2097280 {
let rhs_inst_4 = pos.ins().iconst(I64, 2097280_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_125(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Ishl => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == 4294967295 {
if arg_0[0] != arg_1 {
pos.func.dfg.replace(inst).ishl(arg_1, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_126(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == 2097168 {
let rhs_inst_4 = pos.ins().iconst(I64, 2097168_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_127(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == 134217727 {
if arg_0[0] != arg_1 {
pos.func.dfg.replace(inst).ushr(arg_1, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_128(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 1 {
if rhs_1 == 0 {
if arg_2 == arg_0[1] {
pos.func.dfg.replace(inst).imul(arg_2, arg_1);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_129(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_1 == 1 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 1 {
if arg_2 == arg_1 {
pos.func.dfg.replace(inst).isub(arg_2, arg_0[0]);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_130(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_1 == 1 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 1 {
if arg_1 == arg_2 {
pos.func.dfg.replace(inst).isub(arg_2, arg_0[0]);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_131(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == 67108992 {
let rhs_inst_4 = pos.ins().iconst(I64, 67108992_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_132(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 4294967295 {
if rhs_1 == 32 {
pos.func.dfg.replace(inst).imul_imm(arg_1, 4294967296_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_133(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 3 {
if rhs_1 == 0 {
pos.func.dfg.replace(inst).imul_imm(arg_1, 18446744073709551608_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_134(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 1 {
if rhs_1 == 0 {
pos.func.dfg.replace(inst).imul_imm(arg_1, 18446744073709551614_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_135(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == 2 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 1 {
if arg_1 == arg_2 {
pos.func.dfg.replace(inst).band_imm(arg_2, 3_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_136(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_2 == 3 {
if rhs_1 == 3 {
pos.func.dfg.replace(inst).band_imm(arg_1, 18446744073709551608_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_137(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 134217727 {
if rhs_1 == -1 {
let rhs_inst_4 = pos.ins().iconst(I32, 4160749568_u64 as i64);
pos.func.dfg.replace(inst).bor_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_138(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 32 {
if rhs_1 == 0 {
pos.func.dfg.replace(inst).imul_imm(arg_1, 18446744069414584320_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_139(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_1 == 2 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 3 {
if arg_2 == arg_1 {
pos.func.dfg.replace(inst).imul_imm(arg_2, 12_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_140(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == -2147483648 {
let rhs_inst_4 = pos.ins().iconst(I32, 2147483648_u64 as i64);
pos.func.dfg.replace(inst).bor_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_141(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 1 {
if rhs_2 == 2 {
if rhs_1 == 1 {
pos.func.dfg.replace(inst).iadd_imm(arg_1, 3_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_142(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Unary { opcode, arg } => {
let arg_3 = arg;
match opcode {
Opcode::Clz => {
if rhs_3 == 1 {
if rhs_2 == 64 {
if rhs_1 == 31870 {
let rep_insts = pos.func.dfg.inst_results(inst);
let rep_insts_0 = rep_insts[0];
pos.func.dfg.change_to_alias(arg_0, rep_insts_0);
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_143(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 1 {
if rhs_2 == 1 {
if rhs_1 == 1 {
pos.func.dfg.replace(inst).iadd_imm(arg_1, 2_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_144(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 255 {
if rhs_1 == 8 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_5 == 255 {
if arg_2 == arg_3 {
pos.func.dfg.replace(inst).imul_imm(arg_1, 257_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_145(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 255 {
if rhs_1 == -1 {
let rhs_inst_4 = pos.ins().iconst(I64, 18446744073709551360_u64 as i64);
pos.func.dfg.replace(inst).bor_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_146(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 1 {
if rhs_2 == 1 {
if rhs_1 == 16 {
pos.func.dfg.replace(inst).iadd_imm(arg_1, 17_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_147(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 1 {
if rhs_2 == 1 {
if rhs_1 == 63 {
pos.func.dfg.replace(inst).iadd_imm(arg_1, 64_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_148(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 4 {
if rhs_2 == 3 {
if rhs_1 == 4 {
pos.func.dfg.replace(inst).band_imm(arg_2, 48_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_149(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 3 {
if rhs_2 == 3 {
if rhs_1 == 3 {
pos.func.dfg.replace(inst).band_imm(arg_2, 24_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_150(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 2 {
if rhs_3 == -4 {
if rhs_2 == 2 {
if rhs_1 == 2 {
let rep_insts = pos.func.dfg.inst_results(inst);
let rep_insts_0 = rep_insts[0];
pos.func.dfg.change_to_alias(arg_1, rep_insts_0);
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_151(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 6 {
if rhs_2 == 7 {
if rhs_1 == 6 {
pos.func.dfg.replace(inst).band_imm(arg_2, 448_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_152(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
if rhs_2 == 4294967296 {
if rhs_1 == 4294967295 {
pos.func.dfg.replace(inst).band_imm(arg_1, 4294967295_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_153(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 4 {
if rhs_3 == -32 {
if rhs_2 == 4 {
if rhs_1 == 4 {
let rep_insts = pos.func.dfg.inst_results(inst);
let rep_insts_0 = rep_insts[0];
pos.func.dfg.change_to_alias(arg_1, rep_insts_0);
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_154(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == 549755818112 {
let rhs_inst_4 = pos.ins().iconst(I64, 549755818112_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_155(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
if rhs_2 == 42949672960 {
if rhs_1 == 4294967295 {
pos.func.dfg.replace(inst).band_imm(arg_1, 4294967295_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_156(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
if rhs_2 == 25769803776 {
if rhs_1 == 4294967295 {
pos.func.dfg.replace(inst).band_imm(arg_1, 4294967295_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_157(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == 2748779069440 {
let rhs_inst_4 = pos.ins().iconst(I64, 2748779069440_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_158(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == 2199023255808 {
let rhs_inst_4 = pos.ins().iconst(I64, 2199023255808_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_159(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 28 {
if rhs_2 == 28 {
if rhs_1 == 2 {
pos.func.dfg.replace(inst).sshr_imm(arg_1, 26_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_160(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == -8 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 4 {
if arg_2 == arg_1 {
pos.func.dfg.replace(inst).band_imm(arg_2, 4294967292_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_161(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_1 == -1 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -16843009 {
if arg_2 == arg_1 {
pos.func.dfg.replace(inst).band_not(arg_0[1], arg_2);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_162(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 32 {
if rhs_2 == 2 {
if rhs_1 == 32 {
pos.func.dfg.replace(inst).ushr_imm(arg_2, 62_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_163(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 32 {
if rhs_2 == 3 {
if rhs_1 == 32 {
pos.func.dfg.replace(inst).ushr_imm(arg_2, 61_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_164(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 17 {
if rhs_3 == 63 {
if rhs_2 == 17 {
if rhs_1 == 255 {
let rep_insts = pos.func.dfg.inst_results(inst);
let rep_insts_0 = rep_insts[0];
pos.func.dfg.change_to_alias(arg_0, rep_insts_0);
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_165(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == 37383395344384 {
let rhs_inst_4 = pos.ins().iconst(I64, 37383395344384_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_166(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 2147483647 {
if rhs_1 == 2147483647 {
let rhs_inst_4 = pos.ins().iconst(I32, 2147483647_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_167(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 1 {
if rhs_1 == 0 {
if arg_0[0] != arg_2 {
pos.func.dfg.replace(inst).imul(arg_2, arg_1);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_168(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 1 {
if rhs_1 == 0 {
if arg_2 != arg_0[1] {
pos.func.dfg.replace(inst).imul(arg_0[1], arg_1);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_169(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 13 {
if rhs_2 == 3 {
if rhs_1 == 13 {
pos.func.dfg.replace(inst).band_imm(arg_2, 24576_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_170(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 3 {
if rhs_2 == 8191 {
if rhs_1 == 3 {
pos.func.dfg.replace(inst).band_imm(arg_2, 65528_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_171(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_1 == 8 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_3 == 0 {
if arg_2 != arg_1 {
pos.func.dfg.replace(inst).isub(arg_0[0], arg_2);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_172(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 4 {
if rhs_2 == 1023 {
if rhs_1 == 4 {
pos.func.dfg.replace(inst).band_imm(arg_2, 16368_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_173(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -8 {
if rhs_1 == 8 {
if arg_1[0] != arg_2 {
pos.func.dfg.replace(inst).iadd(arg_2, arg_2);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_174(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
if rhs_1 == -8 {
if arg_1[0] != arg_2 {
pos.func.dfg.replace(inst).iadd(arg_2, arg_2);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_175(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 127 {
if rhs_2 == -128 {
if rhs_1 == 255 {
pos.func.dfg.replace(inst).iadd_imm(arg_1, 128_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_176(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_1 == 1 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if arg_1 != arg_3 && arg_1 == arg_2[0] && arg_3 != arg_2[0] {
let rep_insts = pos.func.dfg.inst_results(inst);
let rep_insts_0 = rep_insts[0];
pos.func.dfg.change_to_alias(arg_3, rep_insts_0);
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_177(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -1 {
if rhs_1 == 1 {
if arg_2 != arg_1[1] {
pos.func.dfg.replace(inst).iadd(arg_2, arg_1[1]);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_178(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -4 {
if rhs_1 == 4 {
if arg_1[0] != arg_2 {
pos.func.dfg.replace(inst).iadd(arg_2, arg_2);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_179(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 1 {
if rhs_1 == -1 {
if arg_2 != arg_1[0] {
pos.func.dfg.replace(inst).iadd(arg_2, arg_2);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_180(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == 422212465065984 {
let rhs_inst_4 = pos.ins().iconst(I64, 422212465065984_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_181(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -1 {
if rhs_1 == -1 {
if arg_2 != arg_0[1] {
pos.func.dfg.replace(inst).isub(arg_0[1], arg_2);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_182(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 5 {
if rhs_1 == -1 {
if arg_0[0] != arg_2 {
pos.func.dfg.replace(inst).bor_not(arg_2, arg_1);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_183(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 2 {
if rhs_1 == 28 {
if arg_2 != arg_0[0] {
pos.func.dfg.replace(inst).ushr(arg_2, arg_1);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_184(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 16 {
if rhs_1 == 8 {
if arg_1[0] != arg_2 {
pos.func.dfg.replace(inst).band_imm(arg_2, 8_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_185(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 96 {
if rhs_1 == -96 {
if arg_1[0] != arg_2 {
pos.func.dfg.replace(inst).iadd(arg_2, arg_2);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_186(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 8 {
if rhs_2 == 4095 {
if rhs_1 == 8 {
pos.func.dfg.replace(inst).band_imm(arg_2, 1048320_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_187(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bxor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_1 == 63 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 63 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_4 = args;
match opcode {
Opcode::Bxor => {
match pos.func.dfg.value_def(arg_4[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_5 == 63 {
match pos.func.dfg.value_def(arg_4[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_7 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_7 == 63 {
if arg_2 != arg_3 && arg_2 == arg_5 && arg_2 != arg_6 && arg_3 != arg_5 && arg_3 == arg_6 && arg_5 != arg_6 {
let rep_insts = pos.func.dfg.inst_results(inst);
let rep_insts_0 = rep_insts[0];
pos.func.dfg.change_to_alias(arg_0[0], rep_insts_0);
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_188(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 92 {
if rhs_1 == -92 {
if arg_2 != arg_1[0] {
pos.func.dfg.replace(inst).iadd(arg_2, arg_2);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_189(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -12 {
if rhs_1 == 12 {
if arg_1[0] != arg_2 {
pos.func.dfg.replace(inst).iadd(arg_2, arg_2);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_190(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Iadd => {
if rhs_2 == 8 {
if rhs_1 == 7 {
if arg_2[0] != arg_2[1] {
pos.func.dfg.replace(inst).band_imm(arg_1, 7_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_191(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 16 {
if rhs_1 == 1 {
if arg_1[0] != arg_2 {
pos.func.dfg.replace(inst).band_imm(arg_2, 1_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_192(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 1 {
if rhs_2 == 1 {
if rhs_1 == -2 {
if arg_3 != arg_2[1] {
let rep_insts = pos.func.dfg.inst_results(inst);
let rep_insts_0 = rep_insts[0];
pos.func.dfg.change_to_alias(arg_0, rep_insts_0);
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_193(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 40 {
if rhs_1 == -40 {
if arg_1[0] != arg_2 {
pos.func.dfg.replace(inst).iadd(arg_2, arg_2);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_194(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_1 == 3 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_3 == -1 {
if arg_1 != arg_2 {
pos.func.dfg.replace(inst).bor_not(arg_0[0], arg_2);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_195(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 16 {
if rhs_1 == -16 {
if arg_2 != arg_1[1] {
pos.func.dfg.replace(inst).iadd(arg_2, arg_1[1]);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_196(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 16 {
if rhs_1 == -16 {
if arg_2 != arg_1[0] {
pos.func.dfg.replace(inst).iadd(arg_2, arg_2);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_197(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 88 {
if rhs_1 == -88 {
if arg_1[0] != arg_2 {
pos.func.dfg.replace(inst).iadd(arg_2, arg_2);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_198(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_3 == 1 {
if rhs_2 == 0 {
if rhs_1 == 12 {
pos.func.dfg.replace(inst).imul_imm(arg_1, 4294967284_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_199(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -56 {
if rhs_1 == 56 {
if arg_1[0] != arg_2 {
pos.func.dfg.replace(inst).iadd(arg_2, arg_2);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_200(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 28 {
if rhs_1 == -28 {
if arg_1[0] != arg_2 {
pos.func.dfg.replace(inst).iadd(arg_2, arg_2);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_201(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 48 {
if rhs_1 == -48 {
if arg_2 != arg_1[0] {
pos.func.dfg.replace(inst).iadd(arg_2, arg_2);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_202(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -16 {
if rhs_1 == 16 {
if arg_2 != arg_1[0] {
pos.func.dfg.replace(inst).iadd(arg_2, arg_2);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_203(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 16 {
if rhs_1 == 2 {
if arg_1[0] != arg_2 {
pos.func.dfg.replace(inst).band_imm(arg_2, 2_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_204(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 32 {
if rhs_1 == 1 {
if arg_1[0] != arg_2 {
pos.func.dfg.replace(inst).band_imm(arg_2, 1_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_205(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 24 {
if rhs_1 == -24 {
if arg_1[0] != arg_2 {
pos.func.dfg.replace(inst).iadd(arg_2, arg_2);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_206(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_2 == 23 {
if rhs_1 == -1 {
if arg_2 != arg_0[1] {
pos.func.dfg.replace(inst).bor_not(arg_0[1], arg_1);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_207(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == 6755399441055744 {
let rhs_inst_4 = pos.ins().iconst(I64, 6755399441055744_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_4, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_208(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 16 {
if rhs_1 == 32 {
if arg_2 != arg_1[0] {
pos.func.dfg.replace(inst).band_imm(arg_2, 32_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_209(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_2 == 7 {
if rhs_1 == -1 {
if arg_0[1] != arg_2 {
pos.func.dfg.replace(inst).band_not(arg_0[1], arg_1);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_210(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 5 {
if rhs_1 == 31 {
if arg_2 != arg_1[0] {
pos.func.dfg.replace(inst).band_imm(arg_2, 31_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_211(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 223 {
if rhs_2 == 32 {
if rhs_1 == -97 {
pos.func.dfg.replace(inst).iadd_imm(arg_1, 4294967231_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_212(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == 255 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 255 {
if arg_2 != arg_1 {
pos.func.dfg.replace(inst).sshr(arg_0[0], arg_2);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_213(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 5 {
if rhs_2 == -1 {
if rhs_1 == 5 {
let rhs_inst_5 = pos.ins().iconst(I32, 4294967264_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_5, arg_2);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_214(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 16 {
if rhs_1 == 512 {
if arg_2 != arg_1[0] {
pos.func.dfg.replace(inst).band_imm(arg_2, 512_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_215(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 6 {
if rhs_2 == -1 {
if rhs_1 == 6 {
let rhs_inst_5 = pos.ins().iconst(I32, 4294967232_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_5, arg_2);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_216(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 16 {
if rhs_1 == 128 {
if arg_2 != arg_1[0] {
pos.func.dfg.replace(inst).band_imm(arg_2, 128_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_217(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 16 {
if rhs_1 == 256 {
if arg_2 != arg_1[0] {
pos.func.dfg.replace(inst).band_imm(arg_2, 256_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_218(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 3 {
if rhs_2 == 3 {
if rhs_1 == -8 {
let rhs_inst_5 = pos.ins().iconst(I32, 4294967288_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_5, arg_2);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_219(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 4 {
if rhs_2 == -1 {
if rhs_1 == 4 {
let rhs_inst_5 = pos.ins().iconst(I32, 4294967280_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_5, arg_2);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_220(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 2 {
if rhs_2 == -1 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().iconst(I32, 4294967292_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_5, arg_2);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_221(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 1 {
if rhs_2 == -1 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().iconst(I32, 4294967294_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_5, arg_2);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_222(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Iadd => {
if rhs_2 == 39 {
if rhs_1 == 7 {
if arg_2[0] != arg_2[1] {
let rhs_inst_6 = pos.ins().iconst(I32, 7_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_6, arg_1);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_223(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 3 {
if rhs_2 == -1 {
if rhs_1 == 3 {
let rhs_inst_5 = pos.ins().iconst(I32, 4294967288_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_5, arg_2);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_224(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Iadd => {
if rhs_2 == 8 {
if rhs_1 == 31 {
if arg_2[0] != arg_2[1] {
pos.func.dfg.replace(inst).ushr_imm(arg_1, 31_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_225(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Iadd => {
if rhs_2 == 6 {
if rhs_1 == 31 {
if arg_2[0] != arg_2[1] {
pos.func.dfg.replace(inst).ushr_imm(arg_1, 31_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_226(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Iadd => {
if rhs_2 == 4 {
if rhs_1 == 31 {
if arg_2[0] != arg_2[1] {
pos.func.dfg.replace(inst).ushr_imm(arg_1, 31_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_227(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Iadd => {
if rhs_2 == 5 {
if rhs_1 == 31 {
if arg_2[1] != arg_2[0] {
pos.func.dfg.replace(inst).ushr_imm(arg_1, 31_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_228(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 4294967295 {
if rhs_1 == 32 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_5 == 4294967295 {
if arg_3 == arg_2 {
pos.func.dfg.replace(inst).imul_imm(arg_1, 4294967297_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_229(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 3 {
if rhs_1 == 1073741823 {
if arg_2 == arg_0[1] {
pos.func.dfg.replace(inst).band_imm(arg_2, 1073741820_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_230(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Iadd => {
if rhs_2 == 2 {
if rhs_1 == 31 {
if arg_2[0] != arg_2[1] {
pos.func.dfg.replace(inst).ushr_imm(arg_1, 31_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_231(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 16 {
if rhs_2 == 32767 {
if rhs_1 == 16 {
pos.func.dfg.replace(inst).band_imm(arg_2, 2147418112_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_232(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bxor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bor => {
if arg_0[1] == arg_1[1] && arg_0[1] != arg_2[0] && arg_0[1] != arg_2[1] && arg_1[1] != arg_2[0] && arg_1[1] != arg_2[1] && arg_2[0] != arg_2[1] {
pos.func.dfg.replace(inst).band_not(arg_1[1], arg_1[0]);

}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_233(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Iadd => {
if rhs_2 == 15 {
if rhs_1 == 31 {
if arg_2[0] != arg_2[1] {
pos.func.dfg.replace(inst).ushr_imm(arg_1, 31_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_234(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Iadd => {
if rhs_2 == 11 {
if rhs_1 == 31 {
if arg_2[0] != arg_2[1] {
pos.func.dfg.replace(inst).ushr_imm(arg_1, 31_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_235(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 1 {
if rhs_2 == 134217727 {
if rhs_1 == 1 {
pos.func.dfg.replace(inst).band_imm(arg_2, 268435454_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_236(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == -1 {
if rhs_3 == -4 {
if rhs_2 == 3 {
if rhs_1 == 4 {
pos.func.dfg.replace(inst).bnot(arg_1);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_237(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 16 {
if rhs_1 == 65031 {
if arg_2 != arg_1[0] {
pos.func.dfg.replace(inst).band_imm(arg_2, 65031_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_238(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 268435455 {
if rhs_2 == 0 {
if rhs_1 == 12 {
pos.func.dfg.replace(inst).imul_imm(arg_1, 4294967284_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_239(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 16 {
if rhs_1 == 65535 {
if arg_1[0] != arg_2 {
pos.func.dfg.replace(inst).band_imm(arg_2, 65535_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_240(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 16 {
if rhs_1 == 16384 {
if arg_2 != arg_1[0] {
pos.func.dfg.replace(inst).band_imm(arg_2, 16384_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_241(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Band => {
if rhs_1 == -1 {
if arg_2[1] != arg_0[0] && arg_2[1] != arg_2[0] && arg_0[0] != arg_2[0] {
pos.func.dfg.replace(inst).bor_not(arg_1, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_242(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Band => {
if rhs_2 == 0 {
if rhs_1 == 12 {
if arg_2[0] != arg_2[1] {
pos.func.dfg.replace(inst).imul_imm(arg_1, 4294967284_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_243(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 196608 {
if rhs_1 == 1073741823 {
if arg_0[1] == arg_2 {
pos.func.dfg.replace(inst).band_imm(arg_2, 1073545215_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_244(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 32 {
if rhs_1 == 32 {
if arg_1[0] != arg_2 {
pos.func.dfg.replace(inst).imul_imm(arg_2, 4294967296_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_245(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Band => {
if rhs_1 == -1 {
if arg_0[0] != arg_2[1] && arg_0[0] != arg_2[0] && arg_2[1] != arg_2[0] {
pos.func.dfg.replace(inst).band_not(arg_1, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_246(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_2 == 32 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 32 {
if rhs_1 == 4294967295 {
if arg_3 != arg_2 {
let rep_insts = pos.func.dfg.inst_results(inst);
let rep_insts_0 = rep_insts[0];
pos.func.dfg.change_to_alias(arg_1[0], rep_insts_0);
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_247(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Band => {
if rhs_1 == -1 {
if arg_2[0] != arg_0[1] && arg_2[0] != arg_2[1] && arg_0[1] != arg_2[1] {
pos.func.dfg.replace(inst).band_not(arg_0[1], arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_248(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 1 {
if rhs_2 == 2 {
if rhs_1 == 4 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 8_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_249(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
if rhs_3 == 37 {
if rhs_2 == 4294967295 {
if rhs_1 == 32 {
pos.func.dfg.replace(inst).imul_imm(arg_2, 158913789952_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_250(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 1 {
if rhs_2 == 1 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 8_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_251(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 1 {
if rhs_2 == 1 {
if rhs_1 == 3 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 16_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 8_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_252(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 7 {
if rhs_2 == 3 {
if rhs_1 == 24 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 3_u64 as i64);
pos.func.dfg.replace(inst).imul_imm(rhs_inst_5, 8_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_253(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 2 {
if rhs_2 == 7 {
if rhs_1 == 7 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 1_u64 as i64);
let rhs_inst_6 = pos.ins().iconst(I32, 7_u64 as i64);
pos.func.dfg.replace(inst).sshr(rhs_inst_6, rhs_inst_5);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_254(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 16 {
if rhs_1 == 49 {
if arg_1[0] != arg_2 {
pos.func.dfg.replace(inst).imul_imm(arg_2, 562949953421312_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_255(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 1 {
if rhs_2 == 1 {
if rhs_1 == 12 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 24_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 12_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_256(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 1 {
if rhs_2 == 2 {
if rhs_1 == 24 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 28_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_257(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 16 {
if rhs_1 == 48 {
if arg_2 != arg_1[0] {
pos.func.dfg.replace(inst).imul_imm(arg_2, 281474976710656_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_258(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == 7 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == -8 {
if arg_2 == arg_3 && arg_2 != arg_1[1] && arg_3 != arg_1[1] {
pos.func.dfg.replace(inst).bor(arg_3, arg_1[1]);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_259(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 8 {
if rhs_2 == 1 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 6_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 4_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_260(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 3 {
if rhs_2 == 1 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 2_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 2_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_261(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 2 {
if rhs_2 == -1 {
if rhs_1 == 7 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 1_u64 as i64);
let rhs_inst_6 = pos.ins().iconst(I32, 7_u64 as i64);
pos.func.dfg.replace(inst).sshr(rhs_inst_6, rhs_inst_5);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_262(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 16 {
if rhs_1 == 53 {
if arg_1[0] != arg_2 {
pos.func.dfg.replace(inst).imul_imm(arg_2, 9007199254740992_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_263(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 16 {
if rhs_1 == 51 {
if arg_2 != arg_1[0] {
pos.func.dfg.replace(inst).imul_imm(arg_2, 2251799813685248_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_264(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 4 {
if rhs_2 == 3 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 2_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 12_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_265(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 16 {
if rhs_1 == 52 {
if arg_1[0] != arg_2 {
pos.func.dfg.replace(inst).imul_imm(arg_2, 4503599627370496_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_266(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 6 {
if rhs_2 == 7 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 28_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_267(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 5 {
if rhs_2 == 3 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 3_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 12_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_268(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 255 {
if rhs_2 == 2 {
if rhs_1 == 28 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 7_u64 as i64);
pos.func.dfg.replace(inst).imul_imm(rhs_inst_5, 4_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_269(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 7 {
if rhs_2 == 7 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 5_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 28_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_270(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 3 {
if rhs_2 == 3 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 1_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 12_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_271(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 6 {
if rhs_2 == 3 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 12_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_272(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 11 {
if rhs_2 == 1 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 9_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 4_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_273(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 1 {
if rhs_2 == 3 {
if rhs_1 == 12 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 24_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 36_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_274(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 1 {
if rhs_2 == 3 {
if rhs_1 == 3 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).sshr_imm(rhs_inst_5, 3_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_275(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 5 {
if rhs_2 == 7 {
if rhs_1 == 3 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 2_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 56_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_276(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 1 {
if rhs_2 == 2 {
if rhs_1 == 12 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 24_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 24_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_277(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 2 {
if rhs_2 == 1 {
if rhs_1 == 80 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).imul_imm(rhs_inst_5, 20_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_278(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 16 {
if rhs_1 == 50 {
if arg_1[0] != arg_2 {
pos.func.dfg.replace(inst).imul_imm(arg_2, 1125899906842624_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_279(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 3 {
if rhs_2 == 64 {
if rhs_1 == 3 {
let rhs_inst_5 = pos.ins().ushr_imm(arg_2, 6_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 8_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_280(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 255 {
if rhs_2 == 6 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 6_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 1_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_281(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 255 {
if rhs_2 == 4 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 1_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_282(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 2 {
if rhs_2 == -1 {
if rhs_1 == 4 {
let rhs_inst_5 = pos.ins().iconst(I32, 1_u64 as i64);
let rhs_inst_6 = pos.ins().band_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).imul_imm(rhs_inst_6, 4_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_283(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 255 {
if rhs_2 == 4 {
if rhs_1 == 8 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 8_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_284(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 3 {
if rhs_2 == 128 {
if rhs_1 == 7 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 1_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_285(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 254 {
if rhs_2 == 1 {
if rhs_1 == 4 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 1_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 4_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_286(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 16 {
if rhs_1 == 56 {
if arg_1[0] != arg_2 {
pos.func.dfg.replace(inst).imul_imm(arg_2, 72057594037927936_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_287(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 17 {
if rhs_2 == 1 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 15_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 4_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_288(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 254 {
if rhs_2 == 1 {
if rhs_1 == 8 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 1_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 8_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_289(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 255 {
if rhs_2 == 2 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 2_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 2_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_290(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 16 {
if rhs_1 == 55 {
if arg_1[0] != arg_2 {
pos.func.dfg.replace(inst).imul_imm(arg_2, 36028797018963968_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_291(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 16 {
if rhs_1 == 54 {
if arg_1[0] != arg_2 {
pos.func.dfg.replace(inst).imul_imm(arg_2, 18014398509481984_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_292(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 10 {
if rhs_2 == 3 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 8_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 12_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_293(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 8 {
if rhs_2 == 15 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 6_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 60_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_294(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 255 {
if rhs_2 == 5 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 5_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 1_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_295(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_1 == 2 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 2 {
if arg_3 != arg_1[0] && arg_3 == arg_2 && arg_1[0] != arg_2 {
let rhs_inst_6 = pos.ins().imul_imm(arg_3, 8_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_6);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_296(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 7 {
if rhs_1 == 7 {
if arg_2 != arg_1[0] {
let rhs_inst_6 = pos.ins().bor(arg_2, arg_2);
pos.func.dfg.replace(inst).band_imm(rhs_inst_6, 7_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_297(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == 7 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 7 {
if arg_2 != arg_1 {
let rhs_inst_6 = pos.ins().bor(arg_2, arg_2);
pos.func.dfg.replace(inst).band_imm(rhs_inst_6, 7_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_298(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 3 {
if rhs_1 == 2 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().bor(arg_2, arg_1[1]);
pos.func.dfg.replace(inst).band_imm(rhs_inst_6, 2_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_299(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 7 {
if rhs_1 == 1 {
if arg_1[0] != arg_2 {
let rhs_inst_6 = pos.ins().bor(arg_2, arg_2);
pos.func.dfg.replace(inst).band_imm(rhs_inst_6, 1_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_300(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 13 {
if rhs_2 == 7 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 11_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 28_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_301(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 2 {
if rhs_2 == 5 {
if rhs_1 == 64 {
let rhs_inst_5 = pos.ins().iconst(I32, 2_u64 as i64);
let rhs_inst_6 = pos.ins().band_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).imul_imm(rhs_inst_6, 32_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_302(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 15 {
if rhs_2 == 1 {
if rhs_1 == 8 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 7_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 256_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_303(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 8 {
if rhs_2 == 1 {
if rhs_1 == 13 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 256_u64 as i64);
pos.func.dfg.replace(inst).imul_imm(rhs_inst_5, 32_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_304(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == 1 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 1 {
if arg_2 != arg_1 {
let rhs_inst_6 = pos.ins().bor(arg_2, arg_2);
pos.func.dfg.replace(inst).band_imm(rhs_inst_6, 1_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_305(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 252 {
if rhs_2 == 5 {
if rhs_1 == 237 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 232_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 5_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_306(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 32 {
if rhs_1 == 4294966271 {
if arg_1[0] != arg_2 {
pos.func.dfg.replace(inst).band_imm(arg_2, 4294966271_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_307(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 16 {
if rhs_1 == 57 {
if arg_1[0] != arg_2 {
pos.func.dfg.replace(inst).imul_imm(arg_2, 144115188075855872_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_308(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 15 {
if rhs_2 == 1 {
if rhs_1 == 9 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 6_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 512_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_309(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 7 {
if rhs_1 == 2 {
if arg_1[0] != arg_2 {
let rhs_inst_6 = pos.ins().bor(arg_2, arg_2);
pos.func.dfg.replace(inst).band_imm(rhs_inst_6, 2_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_310(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 16 {
if rhs_1 == 63 {
if arg_1[0] != arg_2 {
pos.func.dfg.replace(inst).imul_imm(arg_2, 9223372036854775808_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_311(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 2 {
if rhs_2 == -1 {
if rhs_1 == 64 {
let rhs_inst_5 = pos.ins().iconst(I32, 16_u64 as i64);
let rhs_inst_6 = pos.ins().band_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).imul_imm(rhs_inst_6, 4_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_312(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 255 {
if rhs_2 == 2 {
if rhs_1 == 16 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 2_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 16_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_313(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 1 {
if rhs_2 == 1 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().bxor_imm(arg_2, 4294967292_u64 as i64);
pos.func.dfg.replace(inst).isub(arg_2, rhs_inst_5);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_314(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 255 {
if rhs_2 == 3 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 1_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 124_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_315(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 2 {
if rhs_2 == 1 {
if rhs_1 == 3 {
let rhs_inst_5 = pos.ins().bxor_imm(arg_2, 4294967288_u64 as i64);
pos.func.dfg.replace(inst).isub(arg_2, rhs_inst_5);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_316(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 254 {
if rhs_2 == 1 {
if rhs_1 == 16 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 1_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 16_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_317(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 254 {
if rhs_2 == 1 {
if rhs_1 == 32 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 1_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 32_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_318(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 65535 {
if rhs_2 == 9 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 9_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 1_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_319(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 65535 {
if rhs_2 == 8 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 8_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 1_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_320(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_2 == 0 {
if rhs_1 == 3 {
if arg_0[0] == arg_2 {
let rhs_inst_5 = pos.ins().iadd_imm(arg_2, 3_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 4294967292_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_321(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
if rhs_1 == 1 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 9_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_322(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_1 == 1 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 2 {
if arg_1 != arg_2 {
let rhs_inst_6 = pos.ins().irsub_imm(arg_2, 3_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_323(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 127 {
if rhs_2 == -16 {
if rhs_1 == 31 {
let rhs_inst_5 = pos.ins().iadd_imm(arg_2, 16_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 31_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_324(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 1 {
if rhs_1 == 2 {
if arg_1[0] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 3_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_325(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 16 {
if rhs_2 == 4 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().iconst(I32, 65535_u64 as i64);
let rhs_inst_6 = pos.ins().sshr(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).band_imm(rhs_inst_6, 1_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_326(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 3 {
if rhs_1 == 4 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 7_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_327(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 1048575 {
if rhs_2 == 1072693248 {
if rhs_1 == -1048576 {
pos.func.dfg.replace(inst).iadd_imm(arg_1, 1071644672_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_328(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 3 {
if rhs_2 == -1 {
if rhs_1 == 4 {
let rhs_inst_5 = pos.ins().iconst(I32, 33_u64 as i64);
let rhs_inst_6 = pos.ins().band_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).sshr_imm(rhs_inst_6, 3_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_329(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 1 {
if rhs_1 == 8 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 9_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_330(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 5 {
if rhs_2 == -1 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().iconst(I32, 45_u64 as i64);
let rhs_inst_6 = pos.ins().band_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).sshr_imm(rhs_inst_6, 5_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_331(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 17 {
if rhs_2 == 31 {
if rhs_1 == 3 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 14_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 248_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_332(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 1 {
if rhs_1 == 1 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 2_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_333(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 12 {
if rhs_2 == 63 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 10_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 252_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_334(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 25 {
if rhs_2 == 63 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 23_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 252_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_335(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 1 {
if rhs_1 == 2 {
if arg_0[0] != arg_2 {
let rhs_inst_6 = pos.ins().imul_imm(arg_2, 8_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_336(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 4 {
if rhs_2 == -1 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().iconst(I32, 65535_u64 as i64);
let rhs_inst_6 = pos.ins().sshr(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).band_imm(rhs_inst_6, 1_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_337(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 1 {
if rhs_1 == 4 {
if arg_2 != arg_0[0] {
let rhs_inst_6 = pos.ins().irsub_imm(arg_2, 3_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_338(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 1 {
if rhs_1 == 4 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 5_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_339(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_1 == 3 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 3 {
if arg_1 != arg_2 {
let rhs_inst_6 = pos.ins().iadd(arg_2, arg_2);
pos.func.dfg.replace(inst).imul_imm(rhs_inst_6, 8_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_340(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_2 == 0 {
if rhs_1 == -1 {
if arg_2 == arg_1[0] {
let rhs_inst_5 = pos.ins().iadd_imm(arg_2, 4294967295_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_5, arg_2);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_341(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 2 {
if rhs_1 == 4 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 6_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_342(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
if rhs_1 == 4 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 12_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_343(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 1 {
if rhs_2 == 0 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4294967294_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 1_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_344(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 1 {
if rhs_2 == -1 {
if rhs_1 == 12 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 558_u64 as i64);
let rhs_inst_6 = pos.ins().iconst(I32, 12_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_6, rhs_inst_5);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_345(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 255 {
if rhs_2 == 1 {
if rhs_1 == 124 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 1_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 124_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_346(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 5 {
if rhs_2 == 1023 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 3_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 4092_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_347(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 65535 {
if rhs_2 == 10 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 10_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 1_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_348(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 9 {
if rhs_2 == -1 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().iconst(I32, 721_u64 as i64);
let rhs_inst_6 = pos.ins().band_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).sshr_imm(rhs_inst_6, 9_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_349(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
if rhs_1 == -2 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 6_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_350(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 2 {
if rhs_1 == 8 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 10_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_351(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == 1 {
if rhs_1 == 1 {
if arg_2 != arg_1[0] {
let rhs_inst_6 = pos.ins().bor_not(arg_2, arg_2);
pos.func.dfg.replace(inst).band_imm(rhs_inst_6, 1_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_352(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 8 {
if rhs_2 == -1 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().iconst(I32, 349_u64 as i64);
let rhs_inst_6 = pos.ins().band_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).sshr_imm(rhs_inst_6, 8_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_353(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 4 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 2 {
if rhs_1 == -4 {
if arg_2 != arg_3 {
pos.func.dfg.replace(inst).iadd(arg_3, arg_1[1]);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_354(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 3 {
if rhs_2 == 3 {
if rhs_1 == 3 {
if arg_0[0] != arg_3 {
pos.func.dfg.replace(inst).iadd(arg_3, arg_2);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_355(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 65535 {
if rhs_2 == 11 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 11_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 1_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_356(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_2 == 1 {
if rhs_1 == 1 {
if arg_2 == arg_1[0] {
let rhs_inst_5 = pos.ins().iconst(I32, 2290649224_u64 as i64);
let rhs_inst_6 = pos.ins().sshr(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).band_imm(rhs_inst_6, 1_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_357(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Iadd => {
if rhs_2 == 1 {
if rhs_1 == -1 {
if arg_2[0] != arg_2[1] {
let rhs_inst_6 = pos.ins().irsub_imm(arg_2[1], 0_u64 as i64);
pos.func.dfg.replace(inst).isub(rhs_inst_6, arg_2[0]);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_358(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 1 {
if rhs_1 == 2147483646 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_6 == 30 {
if rhs_5 == 31 {
if arg_4 == arg_2 {
let rep_insts = pos.func.dfg.inst_results(inst);
let rep_insts_0 = rep_insts[0];
pos.func.dfg.change_to_alias(arg_1, rep_insts_0);
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_359(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 3 {
if rhs_1 == 8 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 11_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_360(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 18 {
if rhs_2 == 127 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 16_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 508_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_361(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 4 {
if rhs_2 == 1023 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 2_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 4092_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_362(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 16 {
if rhs_1 == 2 {
if arg_2 != arg_1[0] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 18_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_363(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
if rhs_1 == 16 {
if arg_1[0] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 24_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_364(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
if rhs_1 == 72 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 80_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_365(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 24 {
if rhs_1 == 8 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 32_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_366(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 32 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_3 == 4 {
if arg_1 != arg_2 {
let rhs_inst_6 = pos.ins().irsub_imm(arg_2, 36_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_367(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 16 {
if rhs_1 == 1 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 17_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_368(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 48 {
if rhs_1 == 8 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 56_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_369(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 16 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 1 {
if arg_1 != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 17_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_370(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 2 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 16 {
if arg_1 != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 18_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_371(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
if rhs_1 == 71 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 79_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_372(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 20 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 4 {
if arg_1 != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 24_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_373(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_2 == 5 {
if rhs_1 == -1 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_5 == 1 {
if arg_2 != arg_3 {
pos.func.dfg.replace(inst).iadd(arg_3, arg_1);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_374(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 3 {
if rhs_1 == 24 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 27_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_375(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
if rhs_1 == 59 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 67_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_376(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 128 {
if rhs_2 == 7 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().iconst(I32, 198_u64 as i64);
let rhs_inst_6 = pos.ins().band_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).sshr_imm(rhs_inst_6, 7_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_377(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
if rhs_1 == 48 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 56_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_378(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 32 {
if rhs_1 == 4 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 36_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_379(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 3 {
if rhs_1 == 20 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 23_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_380(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 32 {
if rhs_1 == 8 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 40_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_381(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_2 == 33 {
if rhs_1 == 32 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_6 == 1 {
if rhs_5 == 4294967295 {
if arg_2 == arg_4 {
let rep_insts = pos.func.dfg.inst_results(inst);
let rep_insts_0 = rep_insts[0];
pos.func.dfg.change_to_alias(arg_3, rep_insts_0);
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_382(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 32 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 4 {
if arg_1 != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 36_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_383(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 16 {
if rhs_1 == 1 {
if arg_1[0] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 17_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_384(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 32 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_3 == 8 {
if arg_2 != arg_1 {
let rhs_inst_6 = pos.ins().irsub_imm(arg_2, 40_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_385(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 16 {
if rhs_1 == 8 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 24_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_386(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 3 {
if rhs_1 == 28 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 31_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_387(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Band => {
if arg_1[0] != arg_2[1] && arg_1[0] != arg_2[0] && arg_1[0] != arg_0[1] && arg_2[1] != arg_2[0] && arg_2[1] == arg_0[1] && arg_2[0] != arg_0[1] {
let rhs_inst_7 = pos.ins().bor(arg_1[0], arg_2[0]);
pos.func.dfg.replace(inst).band(arg_2[1], rhs_inst_7);

}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_388(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 17 {
if rhs_2 == 255 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 15_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 1020_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_389(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 8 {
if rhs_2 == 4095 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 6_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 16380_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_390(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 80 {
if rhs_1 == 4 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 84_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_391(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 2 {
if rhs_1 == 12 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 14_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_392(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 1 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 16 {
if arg_1 != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 17_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_393(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
if rhs_1 == 84 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 92_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_394(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 3 {
if rhs_1 == 12 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 15_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_395(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 12 {
if rhs_1 == 8 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 20_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_396(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 3 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 16 {
if arg_2 != arg_1 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 19_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_397(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 16 {
if rhs_1 == -8 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 8_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_398(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 32 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_3 == 2 {
if arg_1 != arg_2 {
let rhs_inst_6 = pos.ins().irsub_imm(arg_2, 34_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_399(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 3 {
if rhs_1 == 16 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 19_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_400(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 28 {
if rhs_1 == 8 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 36_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_401(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -4 {
if rhs_1 == 12 {
if arg_1[0] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 8_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_402(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
if rhs_1 == 83 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 91_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_403(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == 1 {
if arg_1[0] != arg_2 {
let rhs_inst_6 = pos.ins().bor_not(arg_2, arg_2);
pos.func.dfg.replace(inst).band_imm(rhs_inst_6, 1_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_404(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 1 {
if rhs_1 == 12 {
if arg_2 != arg_0[0] {
let rhs_inst_6 = pos.ins().imul_imm(arg_2, 24_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_405(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
if rhs_1 == 60 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 68_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_406(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == 1 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().bor_not(arg_1[1], arg_2);
pos.func.dfg.replace(inst).band_imm(rhs_inst_6, 1_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_407(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 1 {
if rhs_1 == 12 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 13_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_408(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 16 {
if rhs_1 == 3 {
if arg_2 != arg_1[0] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 19_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_409(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 48 {
if rhs_1 == 24 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 72_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_410(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 32 {
if rhs_1 == 24 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 56_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_411(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 32 {
if rhs_1 == -8 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 24_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_412(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 40 {
if rhs_1 == 16 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 56_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_413(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 2 {
if rhs_2 == 1 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967292_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_414(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 24 {
if rhs_1 == 16 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 40_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_415(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 80 {
if rhs_2 == 4 {
if rhs_1 == 8 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 92_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_416(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 48 {
if rhs_1 == 16 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 64_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_417(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 1 {
if rhs_2 == -3 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 8_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967284_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_418(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 32 {
if rhs_1 == 21 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 53_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_419(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 32 {
if rhs_1 == 16 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 48_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_420(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 2 {
if rhs_2 == 1 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().iconst(I32, 858993459_u64 as i64);
let rhs_inst_6 = pos.ins().sshr(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).band_imm(rhs_inst_6, 1_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_421(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 32 {
if rhs_2 == 4 {
if rhs_1 == 8 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 44_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_422(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 96 {
if rhs_1 == -8 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 88_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_423(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 96 {
if rhs_1 == -4 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 92_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_424(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 32 {
if rhs_1 == -5 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 27_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_425(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -8 {
if rhs_1 == 24 {
if arg_2 != arg_1[0] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 16_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_426(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 2 {
if rhs_2 == 2 {
if rhs_1 == -4 {
let rhs_inst_5 = pos.ins().bor_imm(arg_2, 3_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967289_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_427(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 24 {
if rhs_1 == -4 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 20_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_428(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
if rhs_1 == 96 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 104_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_429(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 48 {
if rhs_1 == -39 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 9_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_430(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 4 {
if rhs_2 == 2 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().iconst(I32, 252645135_u64 as i64);
let rhs_inst_6 = pos.ins().sshr(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).band_imm(rhs_inst_6, 1_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_431(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 1 {
if rhs_1 == 1 {
if arg_2 != arg_0[0] {
let rhs_inst_6 = pos.ins().iconst(I32, 1_u64 as i64);
let rhs_inst_7 = pos.ins().band_not(rhs_inst_6, arg_2);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_432(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 48 {
if rhs_1 == 21 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 69_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_433(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 48 {
if rhs_1 == 20 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 68_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_434(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 2 {
if rhs_2 == -1 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().iconst(I32, 33423870_u64 as i64);
let rhs_inst_6 = pos.ins().sshr(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).band_imm(rhs_inst_6, 2_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_435(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 8 {
if rhs_2 == 4 {
if rhs_1 == 12 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 24_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_436(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 80 {
if rhs_1 == 17 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 97_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_437(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 40 {
if rhs_1 == -8 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 32_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_438(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 40 {
if rhs_1 == 24 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 64_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_439(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 48 {
if rhs_1 == 28 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 76_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_440(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 24 {
if rhs_2 == 4 {
if rhs_1 == 8 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 36_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_441(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 80 {
if rhs_1 == 16 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 96_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_442(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 92 {
if rhs_1 == -8 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 84_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_443(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 3 {
if rhs_2 == -1 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().iconst(I32, 16711935_u64 as i64);
let rhs_inst_6 = pos.ins().sshr(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).band_imm(rhs_inst_6, 1_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_444(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 16 {
if rhs_1 == 21 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 37_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_445(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 28 {
if rhs_1 == -4 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 24_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_446(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 40 {
if rhs_1 == 32 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 72_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_447(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 64 {
if rhs_1 == 21 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 85_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_448(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 2 {
if rhs_2 == 2 {
if rhs_1 == 4 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967292_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_449(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 56 {
if rhs_2 == 4 {
if rhs_1 == 3 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 63_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_450(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 64 {
if rhs_1 == -8 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 56_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_451(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 2 {
if rhs_1 == 260136 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 260132_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_452(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 32 {
if rhs_2 == 4 {
if rhs_1 == 16 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 52_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_453(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 11 {
if rhs_2 == -1 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().iconst(I32, 3345_u64 as i64);
let rhs_inst_6 = pos.ins().band_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).sshr_imm(rhs_inst_6, 11_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_454(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 180 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 1 {
if arg_2 != arg_1 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 181_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_455(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 2 {
if rhs_1 == 914536 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 914532_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_456(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 432 {
if rhs_1 == 9 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 441_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_457(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 2 {
if rhs_1 == 262796 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 262792_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_458(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 96 {
if rhs_1 == -56 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 40_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_459(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
if rhs_1 == 228 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 236_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_460(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
if rhs_1 == 52 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
if rhs_3 == -52 {
if arg_1 != arg_2 {
let rhs_inst_6 = pos.ins().isub(arg_2, arg_2);
pos.func.dfg.replace(inst).imul_imm(rhs_inst_6, 52_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_461(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -12 {
if rhs_1 == 36 {
if arg_1[0] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 24_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_462(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 24 {
if rhs_2 == 4 {
if rhs_1 == 16 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 44_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_463(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
if rhs_1 == 180 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 188_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_464(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 92 {
if rhs_1 == -16 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 76_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_465(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 24 {
if rhs_1 == -12 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 12_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_466(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 96 {
if rhs_1 == -48 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 48_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_467(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 464 {
if rhs_1 == 4 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 468_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_468(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 12 {
if rhs_2 == -1 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().iconst(I32, 4207_u64 as i64);
let rhs_inst_6 = pos.ins().band_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).sshr_imm(rhs_inst_6, 12_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_469(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 96 {
if rhs_1 == -12 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 84_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_470(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 1 {
if rhs_2 == 32767 {
if rhs_1 == 20 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 65534_u64 as i64);
pos.func.dfg.replace(inst).imul_imm(rhs_inst_5, 10_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_471(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
if rhs_1 == 131 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 139_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_472(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
if rhs_1 == 167 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 175_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_473(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 96 {
if rhs_1 == -40 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 56_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_474(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -3 {
if rhs_2 == 2 {
if rhs_1 == 104976 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 104964_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_475(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 1 {
if rhs_2 == -1 {
if rhs_1 == 3 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 16_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967288_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_476(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 2 {
if rhs_1 == 914524 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 914520_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_477(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
if rhs_1 == 155 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 163_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_478(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 288 {
if rhs_1 == 8 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 296_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_479(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
if rhs_1 == 216 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 224_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_480(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
if rhs_1 == 192 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 200_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_481(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 304 {
if rhs_1 == 4 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 308_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_482(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
if rhs_1 == 144 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 152_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_483(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
if rhs_1 == 107 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 115_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_484(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
if rhs_1 == 179 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 187_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_485(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == 7 {
if arg_1[0] != arg_2 {
let rhs_inst_6 = pos.ins().iconst(I32, 7_u64 as i64);
let rhs_inst_7 = pos.ins().band_not(rhs_inst_6, arg_2);
pos.func.dfg.replace(inst).band(arg_2, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_486(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 177 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 1 {
if arg_2 != arg_1 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 178_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_487(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_2 == 1 {
if rhs_1 == 1 {
if arg_2 != arg_0[0] {
let rhs_inst_6 = pos.ins().iconst(I32, 1_u64 as i64);
let rhs_inst_7 = pos.ins().band_not(arg_2, rhs_inst_6);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_488(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 4 {
if rhs_2 == 1 {
if rhs_1 == 4 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967280_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 16_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_489(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
if rhs_1 == 168 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 176_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_490(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 592 {
if rhs_1 == 8 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 600_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_491(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
if rhs_1 == 120 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 128_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_492(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 432 {
if rhs_1 == 8 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 440_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_493(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 96 {
if rhs_1 == 21 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 117_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_494(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_2 == 2 {
if rhs_1 == 2 {
if arg_0[0] != arg_2 {
let rhs_inst_6 = pos.ins().iconst(I32, 3_u64 as i64);
let rhs_inst_7 = pos.ins().band_not(arg_2, rhs_inst_6);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_495(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 272 {
if rhs_1 == 8 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 280_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_496(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 24 {
if rhs_2 == 4 {
if rhs_1 == 24 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 52_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_497(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 2 {
if rhs_1 == 761472 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 761468_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_498(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 56 {
if rhs_2 == 4 {
if rhs_1 == 12 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 72_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_499(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 32 {
if rhs_2 == 4 {
if rhs_1 == 24 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 60_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_500(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 88 {
if rhs_1 == 76 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 164_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_501(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_2 == 3 {
if rhs_1 == 3 {
if arg_2 != arg_0[0] {
let rhs_inst_6 = pos.ins().iconst(I32, 7_u64 as i64);
let rhs_inst_7 = pos.ins().band_not(arg_2, rhs_inst_6);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_502(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -6 {
if rhs_2 == 2 {
if rhs_1 == 914548 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 914524_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_503(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
if rhs_1 == 156 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 164_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_504(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 608 {
if rhs_1 == 4 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 612_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_505(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 2 {
if rhs_1 == 260124 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 260120_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_506(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 2 {
if rhs_2 == -1 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().iconst(I32, 252645135_u64 as i64);
let rhs_inst_6 = pos.ins().sshr(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).band_imm(rhs_inst_6, 1_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_507(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_2 == 2 {
if rhs_1 == 2 {
if arg_2 != arg_0[1] {
let rhs_inst_6 = pos.ins().iconst(I32, 3_u64 as i64);
let rhs_inst_7 = pos.ins().band_not(arg_2, rhs_inst_6);
pos.func.dfg.replace(inst).iadd(arg_0[1], rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_508(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 608 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 4 {
if arg_2 != arg_1 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 612_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_509(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 80 {
if rhs_1 == 21 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 101_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_510(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 1 {
if rhs_1 == -1 {
if arg_2 != arg_1[0] {
let rhs_inst_6 = pos.ins().iconst(I32, 1_u64 as i64);
let rhs_inst_7 = pos.ins().band_not(rhs_inst_6, arg_2);
pos.func.dfg.replace(inst).isub(arg_2, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_511(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
if rhs_1 == 203 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 211_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_512(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == 1 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().band_not(arg_1[1], arg_2);
pos.func.dfg.replace(inst).bxor_imm(rhs_inst_6, 1_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_513(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 7 {
if rhs_2 == -8 {
if rhs_1 == 8 {
let rhs_inst_5 = pos.ins().iadd_imm(arg_2, 15_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 4294967288_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_514(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
if rhs_1 == 24 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
if rhs_3 == -24 {
if arg_2 != arg_1 {
let rhs_inst_6 = pos.ins().isub(arg_2, arg_2);
pos.func.dfg.replace(inst).imul_imm(rhs_inst_6, 24_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_515(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 128 {
if rhs_1 == 4 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 132_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_516(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 28 {
if rhs_1 == -12 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 16_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_517(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 24 {
if rhs_2 == 4 {
if rhs_1 == 12 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 40_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_518(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -276 {
if rhs_2 == 2 {
if rhs_1 == 21804 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 20700_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_519(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 2 {
if rhs_1 == 875544 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 875540_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_520(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 88 {
if rhs_1 == 84 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 172_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_521(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 304 {
if rhs_1 == 8 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 312_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_522(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -20 {
if rhs_1 == 60 {
if arg_2 != arg_1[0] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 40_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_523(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
if rhs_1 == 132 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 140_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_524(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
if rhs_1 == 108 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 116_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_525(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 48 {
if rhs_1 == -24 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 24_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_526(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -24 {
if rhs_1 == 72 {
if arg_1[0] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 48_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_527(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 1 {
if rhs_2 == -1 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().iconst(I32, 505290270_u64 as i64);
let rhs_inst_6 = pos.ins().sshr(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).band_imm(rhs_inst_6, 2_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_528(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 32 {
if rhs_1 == -16 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 16_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_529(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 96 {
if rhs_1 == -24 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 72_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_530(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
if rhs_1 == 12 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
if rhs_3 == -12 {
if arg_1 != arg_2 {
let rhs_inst_6 = pos.ins().isub(arg_2, arg_2);
pos.func.dfg.replace(inst).imul_imm(rhs_inst_6, 12_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_531(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 40 {
if rhs_2 == 4 {
if rhs_1 == 24 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 68_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_532(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 96 {
if rhs_1 == -32 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 64_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_533(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
if rhs_1 == 119 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 127_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_534(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 177 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 3 {
if arg_2 != arg_1 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 180_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_535(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
if rhs_1 == 215 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 223_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_536(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 1 {
if rhs_1 == 177 {
if arg_2 != arg_1[0] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 178_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_537(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
if rhs_1 == 227 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 235_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_538(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 1 {
if rhs_2 == -1 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().iconst(I32, 858993459_u64 as i64);
let rhs_inst_6 = pos.ins().sshr(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).band_imm(rhs_inst_6, 1_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_539(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 40 {
if rhs_2 == 4 {
if rhs_1 == 12 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 56_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_540(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 336 {
if rhs_1 == 8 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 344_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_541(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
if rhs_1 == 204 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 212_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_542(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 288 {
if rhs_1 == 4 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 292_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_543(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 64 {
if rhs_1 == -16 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 48_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_544(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 64 {
if rhs_2 == 4 {
if rhs_1 == 12 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 80_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_545(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 177 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 2 {
if arg_1 != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 179_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_546(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -16 {
if rhs_1 == 48 {
if arg_1[0] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 32_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_547(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 96 {
if rhs_1 == -16 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 80_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_548(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 10 {
if rhs_2 == -1 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().iconst(I32, 1785_u64 as i64);
let rhs_inst_6 = pos.ins().band_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).sshr_imm(rhs_inst_6, 10_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_549(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 13 {
if rhs_2 == -1 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().iconst(I32, 14185_u64 as i64);
let rhs_inst_6 = pos.ins().band_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).sshr_imm(rhs_inst_6, 13_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_550(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 120 {
if rhs_2 == 4 {
if rhs_1 == 3 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 127_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_551(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 368 {
if rhs_1 == 12 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 380_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_552(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 208 {
if rhs_1 == 21 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 229_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_553(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 624 {
if rhs_2 == 4 {
if rhs_1 == 3 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 631_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_554(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 2 {
if rhs_2 == 8 {
if rhs_1 == 65280 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 10_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 65280_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_555(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 880 {
if rhs_1 == 21 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 901_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_556(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 324 {
if rhs_1 == 11 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 335_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_557(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 416 {
if rhs_1 == 21 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 437_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_558(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 368 {
if rhs_1 == 21 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 389_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_559(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 480 {
if rhs_1 == -8 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 472_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_560(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_2 == 371 {
if rhs_1 == -2 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().irsub_imm(arg_2, 369_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_561(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 272 {
if rhs_1 == 21 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 293_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_562(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 432 {
if rhs_1 == 35 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 467_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_563(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 8 {
if rhs_2 == 1 {
if rhs_1 == 14 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 1006633216_u64 as i64);
pos.func.dfg.replace(inst).imul_imm(rhs_inst_5, 64_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_564(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 128 {
if rhs_1 == 21 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 149_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_565(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 128 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if arg_2 != arg_1 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 127_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_566(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 432 {
if rhs_1 == 17 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 449_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_567(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -48 {
if rhs_1 == 144 {
if arg_1[0] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 96_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_568(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 336 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if arg_1 != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 335_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_569(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 432 {
if rhs_1 == 31 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 463_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_570(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bxor => {
if arg_0[1] == arg_2[1] && arg_0[1] != arg_2[0] && arg_0[1] != arg_1[0] && arg_2[1] != arg_2[0] && arg_2[1] != arg_1[0] && arg_2[0] != arg_1[0] {
let rhs_inst_7 = pos.ins().bor_not(arg_1[0], arg_2[0]);
pos.func.dfg.replace(inst).band(arg_2[1], rhs_inst_7);

}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_571(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 128 {
if rhs_1 == 20 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 148_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_572(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 112 {
if rhs_1 == -8 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 104_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_573(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 432 {
if rhs_1 == -5 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 427_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_574(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 65535 {
if rhs_2 == 3 {
if rhs_1 == 8188 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 3_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 8188_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_575(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 112 {
if rhs_2 == 4 {
if rhs_1 == 3 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 119_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_576(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 128 {
if rhs_1 == 11 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 139_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_577(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 488 {
if rhs_2 == 4 {
if rhs_1 == 8 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 500_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_578(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 80 {
if rhs_2 == 4 {
if rhs_1 == 24 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 108_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_579(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 640 {
if rhs_1 == 20 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 660_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_580(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 304 {
if rhs_1 == 16 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 320_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_581(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 640 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if arg_2 != arg_1 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 639_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_582(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 80 {
if rhs_2 == 4 {
if rhs_1 == 16 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 100_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_583(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 14 {
if rhs_2 == -1 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().iconst(I32, 35354_u64 as i64);
let rhs_inst_6 = pos.ins().band_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).sshr_imm(rhs_inst_6, 14_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_584(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 512 {
if rhs_2 == 4 {
if rhs_1 == 8 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 524_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_585(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 896 {
if rhs_1 == 17 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 913_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_586(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 432 {
if rhs_1 == 24 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 456_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_587(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 128 {
if rhs_1 == -1 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 127_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_588(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 720 {
if rhs_1 == 12 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 732_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_589(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 432 {
if rhs_1 == 32 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 464_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_590(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 464 {
if rhs_1 == -1 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 463_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_591(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 392 {
if rhs_2 == 4 {
if rhs_1 == 7 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 403_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_592(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 15 {
if rhs_2 == -16 {
if rhs_1 == 0 {
let rhs_inst_5 = pos.ins().irsub_imm(arg_2, 0_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 4294967280_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_593(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 520 {
if rhs_1 == -1 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 519_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_594(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 432 {
if rhs_1 == 28 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 460_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_595(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 324 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if arg_1 != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 323_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_596(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 160 {
if rhs_2 == 4 {
if rhs_1 == 8 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 172_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_597(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 248 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if arg_2 != arg_1 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 247_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_598(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 480 {
if rhs_2 == 4 {
if rhs_1 == 3 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 487_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_599(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 640 {
if rhs_1 == 21 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 661_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_600(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bor => {
if rhs_2 == 1 {
if rhs_1 == 1 {
if arg_2[0] != arg_2[1] {
let rhs_inst_6 = pos.ins().iconst(I32, 1_u64 as i64);
let rhs_inst_7 = pos.ins().band_not(rhs_inst_6, arg_2[1]);
pos.func.dfg.replace(inst).band_not(rhs_inst_7, arg_2[0]);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_601(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 304 {
if rhs_1 == 24 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 328_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_602(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 464 {
if rhs_1 == 11 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 475_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_603(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 304 {
if rhs_1 == 12 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 316_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_604(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 512 {
if rhs_1 == 21 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 533_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_605(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 768 {
if rhs_2 == 4 {
if rhs_1 == 3 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 775_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_606(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 720 {
if rhs_1 == 21 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 741_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_607(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 152 {
if rhs_2 == 4 {
if rhs_1 == 12 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 168_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_608(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 464 {
if rhs_1 == -12 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 452_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_609(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 256 {
if rhs_1 == -13 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 243_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_610(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 2 {
if rhs_1 == 2492784 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2492780_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_611(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 1 {
if rhs_2 == 1 {
if rhs_1 == -1 {
let rhs_inst_5 = pos.ins().iconst(I32, 3435973836_u64 as i64);
let rhs_inst_6 = pos.ins().ishl(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).sshr_imm(rhs_inst_6, 31_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_612(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 2 {
if rhs_1 == 2600640 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2600636_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_613(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 504 {
if rhs_1 == -28 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 476_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_614(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 63 {
if rhs_1 == 63 {
let rhs_inst_5 = pos.ins().irsub_imm(arg_2, 3758096192_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 63_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_615(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 304 {
if rhs_1 == -76 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 228_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_616(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == 96 {
if arg_1[0] != arg_2 {
let rhs_inst_6 = pos.ins().iconst(I32, 96_u64 as i64);
let rhs_inst_7 = pos.ins().band_not(rhs_inst_6, arg_2);
pos.func.dfg.replace(inst).band(arg_2, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_617(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -9 {
if rhs_2 == 2 {
if rhs_1 == 1876564 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 1876528_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_618(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 16 {
if rhs_2 == 32767 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 14_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 131068_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_619(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 296 {
if rhs_1 == -16 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 280_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_620(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -151 {
if rhs_2 == 2 {
if rhs_1 == 244496 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 243892_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_621(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 256 {
if rhs_1 == -24 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 232_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_622(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 392 {
if rhs_1 == -16 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 376_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_623(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 2 {
if rhs_1 == 2600528 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2600524_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_624(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 464 {
if rhs_2 == 4 {
if rhs_1 == 12 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 480_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_625(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 456 {
if rhs_2 == 4 {
if rhs_1 == 12 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 472_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_626(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -2 {
if rhs_2 == 2 {
if rhs_1 == 2388432 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2388424_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_627(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 1536 {
if rhs_1 == 4 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 1540_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_628(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 2 {
if rhs_1 == 1487000 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 1486996_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_629(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 178 {
if rhs_1 == 134 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 312_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_630(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bxor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == 512 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 512 {
if arg_2 != arg_1 {
let rhs_inst_6 = pos.ins().bxor(arg_2, arg_2);
pos.func.dfg.replace(inst).band_imm(rhs_inst_6, 512_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_631(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -8 {
if rhs_2 == 2 {
if rhs_1 == 2585872 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2585840_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_632(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 2 {
if rhs_1 == 2596936 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2596932_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_633(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 480 {
if rhs_1 == -24 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 456_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_634(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 179 {
if rhs_1 == 137 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 316_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_635(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 512 {
if rhs_2 == 4 {
if rhs_1 == 16 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 532_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_636(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == -1 {
if rhs_1 == 63 {
let rhs_inst_5 = pos.ins().irsub_imm(arg_2, 2147483456_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 63_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_637(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 392 {
if rhs_1 == -28 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 364_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_638(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_3 == 2 {
if rhs_2 == 16 {
if rhs_1 == -16 {
let rhs_inst_5 = pos.ins().irsub_imm(arg_2, 18_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 4294967280_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_639(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -2 {
if rhs_2 == 2 {
if rhs_1 == 2593092 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2593084_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_640(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -88 {
if rhs_1 == 240 {
if arg_2 != arg_1[0] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 152_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_641(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 432 {
if rhs_1 == -16 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 416_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_642(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -3 {
if rhs_2 == 2 {
if rhs_1 == 1490380 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 1490368_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_643(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 176 {
if rhs_2 == 4 {
if rhs_1 == 12 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 192_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_644(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 2 {
if rhs_1 == 1499452 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 1499448_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_645(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 400 {
if rhs_1 == -76 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 324_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_646(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -88 {
if rhs_1 == 208 {
if arg_1[0] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 120_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_647(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 2 {
if rhs_1 == 1780628 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 1780624_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_648(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -92 {
if rhs_1 == 276 {
if arg_1[0] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 184_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_649(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -4 {
if rhs_2 == 2 {
if rhs_1 == 1557704 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 1557688_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_650(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 2 {
if rhs_1 == 1806756 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 1806752_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_651(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 2 {
if rhs_1 == 2531884 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2531880_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_652(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 2 {
if rhs_1 == 2369392 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2369388_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_653(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 13 {
if rhs_2 == 1 {
if rhs_1 == 19 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 2080382976_u64 as i64);
pos.func.dfg.replace(inst).imul_imm(rhs_inst_5, 64_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_654(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 480 {
if rhs_1 == -40 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 440_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_655(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 2 {
if rhs_1 == 2561992 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2561988_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_656(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 3 {
if rhs_1 == 2388120 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 8_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2388112_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_657(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 2 {
if rhs_1 == 1888964 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 1888960_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_658(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 2 {
if rhs_1 == 1497924 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 1497920_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_659(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == 31 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iconst(I32, 31_u64 as i64);
let rhs_inst_7 = pos.ins().band_not(rhs_inst_6, arg_2);
pos.func.dfg.replace(inst).band(arg_1[1], rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_660(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -56 {
if rhs_1 == 168 {
if arg_1[0] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 112_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_661(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 400 {
if rhs_1 == -64 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 336_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_662(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 304 {
if rhs_1 == -64 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 240_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_663(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == -1 {
if rhs_1 == 31 {
let rhs_inst_5 = pos.ins().irsub_imm(arg_2, 4026531840_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 31_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_664(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -48 {
if rhs_1 == 177 {
if arg_1[0] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 129_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_665(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 2 {
if rhs_1 == 1526752 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 1526748_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_666(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 296 {
if rhs_1 == -28 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 268_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_667(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -2 {
if rhs_2 == 2 {
if rhs_1 == 1497908 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 1497900_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_668(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 520 {
if rhs_1 == -12 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 508_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_669(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 17 {
if rhs_2 == -1 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().iconst(I32, 240269_u64 as i64);
let rhs_inst_6 = pos.ins().band_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).sshr_imm(rhs_inst_6, 17_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_670(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -5 {
if rhs_2 == 2 {
if rhs_1 == 1457612 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 1457592_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_671(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 12 {
if rhs_2 == -1 {
if rhs_1 == 16 {
let rhs_inst_5 = pos.ins().iconst(I32, 69465_u64 as i64);
let rhs_inst_6 = pos.ins().band_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).sshr_imm(rhs_inst_6, 12_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_672(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == 63 {
if arg_2 != arg_1[0] {
let rhs_inst_6 = pos.ins().isub(arg_2, arg_2);
let rhs_inst_7 = pos.ins().iconst(I32, 63_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_7, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_673(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 2 {
if rhs_1 == 2595580 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2595576_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_674(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 2 {
if rhs_1 == 2595564 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2595560_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_675(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_3 == 6 {
if rhs_2 == 16 {
if rhs_1 == -16 {
let rhs_inst_5 = pos.ins().irsub_imm(arg_2, 22_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 4294967280_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_676(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 3 {
if rhs_1 == 1457656 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 8_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 1457648_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_677(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 3 {
if rhs_1 == 1495552 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 8_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 1495544_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_678(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -88 {
if rhs_1 == 192 {
if arg_2 != arg_1[0] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 104_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_679(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 2 {
if rhs_1 == 2386720 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2386716_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_680(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -88 {
if rhs_1 == 224 {
if arg_1[0] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 136_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_681(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 504 {
if rhs_1 == -16 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 488_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_682(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -4 {
if rhs_2 == 2 {
if rhs_1 == 1557772 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 1557756_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_683(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -5 {
if rhs_2 == 2 {
if rhs_1 == 2589852 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2589832_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_684(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 2 {
if rhs_1 == 2604716 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2604712_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_685(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 184 {
if rhs_2 == 4 {
if rhs_1 == 12 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 200_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_686(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 16 {
if rhs_2 == -1 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().iconst(I32, 100948_u64 as i64);
let rhs_inst_6 = pos.ins().band_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).sshr_imm(rhs_inst_6, 16_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_687(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -88 {
if rhs_1 == 256 {
if arg_2 != arg_1[0] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 168_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_688(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 128 {
if rhs_1 == -12 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 116_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_689(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 960 {
if rhs_1 == 240 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 1200_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_690(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 960 {
if rhs_1 == 264 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 1224_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_691(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Imul => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_1 == 0 {
if arg_2 != arg_0[0] && arg_2 != arg_1[1] && arg_0[0] != arg_1[1] {
let rhs_inst_7 = pos.ins().imul(arg_2, arg_1[1]);
pos.func.dfg.replace(inst).isub(arg_2, rhs_inst_7);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_692(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -20 {
if rhs_2 == 2 {
if rhs_1 == 2677880 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2677800_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_693(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 3696 {
if rhs_2 == 4 {
if rhs_1 == 3 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 3703_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_694(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 960 {
if rhs_1 == 275 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 1235_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_695(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 1456 {
if rhs_1 == 12 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 1468_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_696(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_1 == -1 {
if arg_1[0] != arg_2 && arg_1[0] != arg_0[1] && arg_2 != arg_0[1] {
let rhs_inst_7 = pos.ins().bor_not(arg_2, arg_2);
pos.func.dfg.replace(inst).bor(arg_0[1], rhs_inst_7);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_697(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 960 {
if rhs_1 == 252 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 1212_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_698(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 1536 {
if rhs_2 == 4 {
if rhs_1 == 3 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 1543_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_699(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_1 == 0 {
if arg_2 != arg_1[0] && arg_2 != arg_0[1] && arg_1[0] != arg_0[1] {
let rhs_inst_7 = pos.ins().isub(arg_2, arg_2);
pos.func.dfg.replace(inst).iadd(arg_0[1], rhs_inst_7);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_700(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 17 {
if rhs_1 == -16 {
let rhs_inst_5 = pos.ins().irsub_imm(arg_2, 18_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 4294967280_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_701(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 960 {
if rhs_1 == 251 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 1211_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_702(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -16 {
if rhs_2 == 1 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().iconst(I32, 4294967294_u64 as i64);
let rhs_inst_6 = pos.ins().band_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_6, 18_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_703(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 29 {
if rhs_2 == -1 {
if rhs_1 == 7 {
let rhs_inst_5 = pos.ins().iadd_imm(arg_2, 3758096384_u64 as i64);
pos.func.dfg.replace(inst).ushr_imm(rhs_inst_5, 29_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_704(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 24 {
if rhs_2 == 1 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().iconst(I32, 18252902_u64 as i64);
let rhs_inst_6 = pos.ins().band_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).sshr_imm(rhs_inst_6, 24_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_705(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -68 {
if rhs_2 == 2 {
if rhs_1 == 2472352 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2472080_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_706(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -48 {
if rhs_2 == 2 {
if rhs_1 == 2594888 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2594696_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_707(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 1712 {
if rhs_1 == 21 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 1733_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_708(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -44 {
if rhs_2 == 2 {
if rhs_1 == 2597956 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2597780_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_709(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 31 {
if rhs_2 == -32 {
if rhs_1 == 32 {
let rhs_inst_5 = pos.ins().iadd_imm(arg_2, 63_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 4294967264_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_710(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 255 {
if rhs_2 == -24 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 254_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967273_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_711(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 960 {
if rhs_1 == 276 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 1236_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_712(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -26 {
if rhs_2 == 2 {
if rhs_1 == 2472276 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2472172_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_713(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 5 {
if rhs_2 == 5 {
if rhs_1 == 0 {
let rhs_inst_5 = pos.ins().iconst(I32, 4294967264_u64 as i64);
let rhs_inst_6 = pos.ins().band_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_6, 32_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_714(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bxor => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Band => {
if arg_0[0] == arg_2[1] && arg_0[0] != arg_1[0] && arg_0[0] != arg_2[0] && arg_2[1] != arg_1[0] && arg_2[1] != arg_2[0] && arg_1[0] != arg_2[0] {
let rhs_inst_7 = pos.ins().band(arg_1[0], arg_2[0]);
pos.func.dfg.replace(inst).band_not(arg_2[1], rhs_inst_7);

}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_715(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 2720 {
if rhs_1 == 21 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 2741_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_716(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 4 {
if rhs_2 == 4 {
if rhs_1 == 0 {
let rhs_inst_5 = pos.ins().iconst(I32, 4294967280_u64 as i64);
let rhs_inst_6 = pos.ins().band_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_6, 16_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_717(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 960 {
if rhs_1 == 263 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 1223_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_718(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 16 {
if rhs_1 == -16 {
let rhs_inst_5 = pos.ins().irsub_imm(arg_2, 17_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 4294967280_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_719(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_1 == -1 {
if arg_2 != arg_1[0] && arg_2 != arg_0[0] && arg_1[0] != arg_0[0] {
let rhs_inst_7 = pos.ins().bor_not(arg_1[0], arg_2);
pos.func.dfg.replace(inst).bor(arg_2, rhs_inst_7);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_720(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 1888 {
if rhs_1 == 360 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 2248_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_721(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 1360 {
if rhs_1 == 564 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 1924_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_722(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 1360 {
if rhs_1 == 563 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 1923_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_723(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -452 {
if rhs_2 == 2 {
if rhs_1 == 2382484 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2380676_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_724(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 1360 {
if rhs_1 == 539 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 1899_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_725(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 1360 {
if rhs_1 == 540 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 1900_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_726(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Unary { opcode, arg } => {
let arg_2 = arg;
match opcode {
Opcode::Clz => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_4 = args;
match opcode {
Opcode::Iadd => {
if rhs_3 == -1 {
if rhs_2 == 64 {
if rhs_1 == 4294967295 {
if arg_4[1] != arg_4[0] {
let rep_insts = pos.func.dfg.inst_results(inst);
let rep_insts_0 = rep_insts[0];
pos.func.dfg.change_to_alias(arg_0, rep_insts_0);
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_727(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -194 {
if rhs_2 == 2 {
if rhs_1 == 2746000 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2745224_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_728(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 7 {
if rhs_1 == 8 {
if arg_0[1] != arg_2 {
let rhs_inst_6 = pos.ins().bor_imm(arg_2, 4294967288_u64 as i64);
pos.func.dfg.replace(inst).isub(arg_0[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_729(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 1888 {
if rhs_1 == 348 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 2236_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_730(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -360 {
if rhs_2 == 2 {
if rhs_1 == 2472516 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2471076_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_731(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 1888 {
if rhs_1 == 359 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 2247_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_732(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -395 {
if rhs_2 == 2 {
if rhs_1 == 2382360 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2380780_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_733(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 2 {
if rhs_2 == 1 {
if rhs_1 == 30 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 31_u64 as i64);
pos.func.dfg.replace(inst).imul_imm(rhs_inst_5, 4294967293_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_734(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 1360 {
if rhs_1 == 552 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 1912_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_735(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 1360 {
if rhs_1 == 528 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 1888_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_736(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 3 {
if rhs_2 == -1 {
if rhs_1 == -16 {
let rhs_inst_5 = pos.ins().iconst(I32, 4294967168_u64 as i64);
let rhs_inst_6 = pos.ins().bor_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).sshr_imm(rhs_inst_6, 3_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_737(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bxor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Band => {
if rhs_1 == 7 {
if arg_2[0] == arg_0[1] && arg_2[0] != arg_2[1] && arg_0[1] != arg_2[1] {
let rhs_inst_6 = pos.ins().iconst(I32, 4294967288_u64 as i64);
let rhs_inst_7 = pos.ins().bor_not(rhs_inst_6, arg_2[1]);
pos.func.dfg.replace(inst).band(arg_2[0], rhs_inst_7);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_738(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 1888 {
if rhs_1 == 371 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 2259_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_739(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -570 {
if rhs_2 == 2 {
if rhs_1 == 2382512 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2380232_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_740(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 1888 {
if rhs_1 == 372 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 2260_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_741(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -229 {
if rhs_2 == 2 {
if rhs_1 == 2472416 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2471500_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_742(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 1888 {
if rhs_1 == 347 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 2235_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_743(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -422 {
if rhs_2 == 2 {
if rhs_1 == 2382444 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2380756_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_744(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 25 {
if rhs_2 == -1 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().iconst(I32, 33554433_u64 as i64);
let rhs_inst_6 = pos.ins().band_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).sshr_imm(rhs_inst_6, 25_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_745(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 1888 {
if rhs_1 == 336 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 2224_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_746(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 24 {
if rhs_2 == -1 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().iconst(I32, 19996672_u64 as i64);
let rhs_inst_6 = pos.ins().band_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).sshr_imm(rhs_inst_6, 24_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_747(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 3 {
if rhs_2 == 1 {
if rhs_1 == 30 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 31_u64 as i64);
pos.func.dfg.replace(inst).imul_imm(rhs_inst_5, 4294967293_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_748(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -209 {
if rhs_2 == 2 {
if rhs_1 == 2472376 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2471540_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_749(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 1360 {
if rhs_1 == 551 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 1911_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_750(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 4 {
if rhs_2 == 1 {
if rhs_1 == 30 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 31_u64 as i64);
pos.func.dfg.replace(inst).imul_imm(rhs_inst_5, 4294967293_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_751(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 16384 {
if rhs_2 == 14 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().iconst(I32, 27088_u64 as i64);
let rhs_inst_6 = pos.ins().band_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).sshr_imm(rhs_inst_6, 14_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_752(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 3 {
if rhs_1 == 0 {
if arg_0[0] != arg_2 {
let rhs_inst_6 = pos.ins().imul_imm(arg_2, 4294967288_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_753(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_2 == 0 {
if rhs_1 == 3 {
if arg_0[0] != arg_2 {
let rhs_inst_6 = pos.ins().imul_imm(arg_2, 4294967288_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_754(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 2147483647 {
if rhs_1 == 2 {
if arg_2 != arg_0[0] {
let rhs_inst_6 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_755(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1008 {
if rhs_2 == 2 {
if rhs_1 == 2382560 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2378528_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_756(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -7296 {
if rhs_2 == 2 {
if rhs_1 == 2382604 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2353420_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_757(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1103 {
if rhs_2 == 2 {
if rhs_1 == 1486960 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 1482548_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_758(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_1 == -1 {
if arg_0[0] != arg_2 && arg_0[0] != arg_1[1] && arg_2 != arg_1[1] {
let rhs_inst_7 = pos.ins().band_not(arg_1[1], arg_2);
pos.func.dfg.replace(inst).bor(arg_2, rhs_inst_7);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_759(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1101 {
if rhs_2 == 2 {
if rhs_1 == 1486920 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 1482516_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_760(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_1 == -1 {
if arg_0[0] != arg_2 && arg_0[0] != arg_1[0] && arg_2 != arg_1[0] {
let rhs_inst_7 = pos.ins().bor_not(arg_1[0], arg_2);
pos.func.dfg.replace(inst).band(arg_2, rhs_inst_7);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_761(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 27 {
if rhs_2 == 16 {
if rhs_1 == -18 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 27_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967294_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_762(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 26 {
if rhs_2 == -1 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().iconst(I32, 133799032_u64 as i64);
let rhs_inst_6 = pos.ins().band_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).sshr_imm(rhs_inst_6, 26_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_763(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 2147483647 {
if rhs_1 == 3 {
if arg_2 != arg_0[0] {
let rhs_inst_6 = pos.ins().imul_imm(arg_2, 8_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_764(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -7301 {
if rhs_2 == 2 {
if rhs_1 == 2382616 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2353412_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_765(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_3 == -1 {
if rhs_2 == 1 {
if rhs_1 == 2743873 {
let rhs_inst_5 = pos.ins().iconst(I32, 1_u64 as i64);
let rhs_inst_6 = pos.ins().band_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_6, 2743873_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_766(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_1 == -1 {
if arg_1[0] != arg_0[1] && arg_1[0] != arg_2 && arg_0[1] != arg_2 {
let rhs_inst_7 = pos.ins().band_not(arg_2, arg_2);
pos.func.dfg.replace(inst).bor(arg_0[1], rhs_inst_7);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_767(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 30 {
if rhs_2 == -1 {
if rhs_1 == -2 {
let rhs_inst_5 = pos.ins().iconst(I32, 2147483648_u64 as i64);
let rhs_inst_6 = pos.ins().bor_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).sshr_imm(rhs_inst_6, 30_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_768(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -2051 {
if rhs_2 == 3 {
if rhs_1 == 1487024 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 8_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 1470616_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_769(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_2 == 0 {
if rhs_1 == 2 {
if arg_2 != arg_0[0] {
let rhs_inst_6 = pos.ins().imul_imm(arg_2, 4294967292_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_770(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 1073741823 {
if rhs_1 == 2 {
if arg_0[0] != arg_2 {
let rhs_inst_6 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_771(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 7 {
if rhs_2 == 8 {
if rhs_1 == 6 {
let rhs_inst_5 = pos.ins().bor_imm(arg_2, 2147483640_u64 as i64);
pos.func.dfg.replace(inst).imul_imm(rhs_inst_5, 4294967290_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_772(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -5532 {
if rhs_2 == 2 {
if rhs_1 == 21864 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967032_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_773(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 2147483647 {
if rhs_1 == 5 {
if arg_2 != arg_0[0] {
let rhs_inst_6 = pos.ins().imul_imm(arg_2, 32_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_774(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -7 {
if rhs_1 == 6 {
if arg_2 != arg_1[0] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967295_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_775(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -8 {
if rhs_1 == 4 {
if arg_1[0] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967292_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_776(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_2 == 6 {
if rhs_1 == 6 {
if arg_0[0] != arg_2 {
let rhs_inst_6 = pos.ins().band_imm(arg_2, 4294967232_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_777(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_2 == 1 {
if rhs_1 == 1 {
if arg_2 != arg_0[0] {
let rhs_inst_6 = pos.ins().band_imm(arg_2, 4294967294_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_778(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == -8 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 1 {
if arg_1 != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967289_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_779(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -11360 {
if rhs_2 == 2 {
if rhs_1 == 2382632 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2337192_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_780(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 1 {
if rhs_2 == 134217727 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 268435454_u64 as i64);
pos.func.dfg.replace(inst).imul_imm(rhs_inst_5, 2_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_781(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_2 == 0 {
if rhs_1 == 12 {
if arg_2 != arg_0[0] {
let rhs_inst_6 = pos.ins().imul_imm(arg_2, 4294967284_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_782(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
if rhs_3 == 256 {
if rhs_2 == -1537 {
if rhs_1 == 512 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294965503_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 768_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_783(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -5532 {
if rhs_2 == 2 {
if rhs_1 == 21852 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967020_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_784(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -11373 {
if rhs_2 == 2 {
if rhs_1 == 2382652 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2337160_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_785(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -1073741824 {
if rhs_1 == 2 {
if arg_2 != arg_0[0] {
let rhs_inst_6 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_786(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 63 {
if rhs_1 == 64 {
if arg_0[0] != arg_2 {
let rhs_inst_6 = pos.ins().bor_imm(arg_2, 4294967232_u64 as i64);
pos.func.dfg.replace(inst).isub(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_787(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_2 == 5 {
if rhs_1 == 5 {
if arg_0[0] != arg_2 {
let rhs_inst_6 = pos.ins().band_imm(arg_2, 4294967264_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_788(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_2 == 8 {
if rhs_1 == 8 {
if arg_0[0] != arg_2 {
let rhs_inst_6 = pos.ins().band_imm(arg_2, 4294967040_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_789(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_2 == 4 {
if rhs_1 == 4 {
if arg_0[0] != arg_2 {
let rhs_inst_6 = pos.ins().band_imm(arg_2, 4294967280_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_790(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -42922 {
if rhs_2 == 2 {
if rhs_1 == 2382668 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2210980_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_791(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -8 {
if rhs_1 == 2 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967290_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_792(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 127 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 1182269948_u64 as i64);
let rhs_inst_6 = pos.ins().iconst(I32, 508_u64 as i64);
pos.func.dfg.replace(inst).band_not(rhs_inst_6, rhs_inst_5);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_793(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -16 {
if rhs_1 == 1 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967281_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_794(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -32 {
if rhs_1 == 8 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967272_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_795(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -64 {
if rhs_1 == 4 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967236_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_796(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -16 {
if rhs_1 == 2 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967282_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_797(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -65536 {
if rhs_2 == 1023 {
if rhs_1 == 56320 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 1023_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 56320_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_798(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == -16 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 1 {
if arg_2 != arg_1 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967281_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_799(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 2147483647 {
if rhs_1 == 12 {
if arg_0[0] != arg_2 {
let rhs_inst_6 = pos.ins().imul_imm(arg_2, 12_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_800(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 2147483647 {
if rhs_1 == 28 {
if arg_0[0] != arg_2 {
let rhs_inst_6 = pos.ins().imul_imm(arg_2, 28_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_801(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -12 {
if rhs_1 == 8 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967292_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_802(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -8 {
if rhs_1 == -8 {
if arg_1[0] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967280_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_803(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -28 {
if rhs_1 == 8 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967276_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_804(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 1 {
if rhs_2 == 134217727 {
if rhs_1 == 10 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 268435454_u64 as i64);
pos.func.dfg.replace(inst).imul_imm(rhs_inst_5, 5_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_805(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_1 == -1 {
if arg_1[0] != arg_1[1] && arg_1[0] != arg_2 && arg_1[1] != arg_2 {
let rhs_inst_7 = pos.ins().band_not(arg_1[1], arg_2);
pos.func.dfg.replace(inst).band(arg_2, rhs_inst_7);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_806(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 2147483647 {
if rhs_1 == 24 {
if arg_0[0] != arg_2 {
let rhs_inst_6 = pos.ins().imul_imm(arg_2, 24_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_807(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -24 {
if rhs_1 == 8 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967280_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_808(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -4 {
if rhs_1 == -4 {
if arg_1[0] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967288_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_809(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_3 = args;
match opcode {
Opcode::Iadd => {
if rhs_2 == 1 {
if rhs_1 == -1 {
if arg_3[1] != arg_1[1] && arg_3[1] != arg_3[0] && arg_1[1] != arg_3[0] {
pos.func.dfg.replace(inst).iadd(arg_1[1], arg_2);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_810(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 1 {
if rhs_2 == 0 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 18446744073709551614_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 1_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_811(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_1 == -1 {
if arg_0[1] != arg_1[0] && arg_0[1] != arg_2 && arg_1[0] != arg_2 {
let rhs_inst_7 = pos.ins().band_not(arg_2, arg_2);
pos.func.dfg.replace(inst).band(arg_0[1], rhs_inst_7);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_812(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -16 {
if rhs_1 == 8 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967288_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_813(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 1073741823 {
if rhs_1 == 80 {
if arg_0[0] != arg_2 {
let rhs_inst_6 = pos.ins().imul_imm(arg_2, 80_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_814(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 2147483647 {
if rhs_1 == 40 {
if arg_0[0] != arg_2 {
let rhs_inst_6 = pos.ins().imul_imm(arg_2, 40_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_815(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 34 {
if rhs_2 == -1 {
if rhs_1 == 1 {
let rhs_inst_5 = pos.ins().iconst(I64, 26913404097_u64 as i64);
let rhs_inst_6 = pos.ins().band_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).sshr_imm(rhs_inst_6, 34_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_816(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -32 {
if rhs_1 == 21 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967285_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_817(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -464 {
if rhs_1 == 4 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294966836_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_818(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -32 {
if rhs_1 == 16 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967280_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_819(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 1073741823 {
if rhs_2 == 2 {
if rhs_1 == -4 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967292_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_820(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -256 {
if rhs_1 == 8 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967048_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_821(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -40 {
if rhs_2 == 4 {
if rhs_1 == 3 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967263_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_822(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -96 {
if rhs_2 == 4 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967206_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_823(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -56 {
if rhs_2 == 4 {
if rhs_1 == 8 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967252_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_824(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -80 {
if rhs_2 == 4 {
if rhs_1 == 8 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967228_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_825(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 30 {
if rhs_2 == 31 {
if rhs_1 == 536870944 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 2_u64 as i64);
pos.func.dfg.replace(inst).imul_imm(rhs_inst_5, 268435472_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_826(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == -32 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if arg_1 != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967263_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_827(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 1 {
if rhs_2 == 134217727 {
if rhs_1 == 24 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 268435454_u64 as i64);
pos.func.dfg.replace(inst).imul_imm(rhs_inst_5, 12_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_828(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 2904321 {
if rhs_1 == 1 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 2904322_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_829(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -40 {
if rhs_2 == 4 {
if rhs_1 == 8 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967268_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_830(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -360 {
if rhs_1 == 8 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294966944_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_831(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -28 {
if rhs_1 == 24 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967292_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_832(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 63 {
if rhs_1 == 1 {
if arg_0[1] != arg_2 {
let rhs_inst_6 = pos.ins().iconst(I32, 4294967232_u64 as i64);
let rhs_inst_7 = pos.ins().bor_not(rhs_inst_6, arg_2);
pos.func.dfg.replace(inst).isub(arg_0[1], rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_833(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -32 {
if rhs_1 == 20 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967284_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_834(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -24 {
if rhs_1 == 16 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967288_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_835(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -32 {
if rhs_1 == 17 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967281_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_836(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -16 {
if rhs_2 == 4 {
if rhs_1 == 7 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967291_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_837(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -16 {
if rhs_2 == 4 {
if rhs_1 == 8 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967292_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_838(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -1073741824 {
if rhs_1 == 40 {
if arg_1[0] != arg_2 {
let rhs_inst_6 = pos.ins().iadd(arg_2, arg_2);
pos.func.dfg.replace(inst).imul_imm(rhs_inst_6, 40_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_839(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -168 {
if rhs_1 == 8 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967136_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_840(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -64 {
if rhs_1 == 16 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967248_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_841(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 4 {
if rhs_1 == -100 {
if arg_2 != arg_1[0] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967200_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_842(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
if rhs_1 == -28 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
if rhs_3 == 28 {
if arg_1 != arg_2 {
let rhs_inst_6 = pos.ins().isub(arg_2, arg_2);
pos.func.dfg.replace(inst).imul_imm(rhs_inst_6, 4294967268_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_843(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -64 {
if rhs_1 == 24 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967256_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_844(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -32 {
if rhs_1 == 24 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967288_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_845(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -32 {
if rhs_2 == 4 {
if rhs_1 == 3 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967271_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_846(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -64 {
if rhs_1 == -1 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967231_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_847(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 63 {
if rhs_1 == 1 {
if arg_2 != arg_0[0] {
let rhs_inst_6 = pos.ins().iconst(I32, 4294967232_u64 as i64);
let rhs_inst_7 = pos.ins().bor_not(rhs_inst_6, arg_2);
pos.func.dfg.replace(inst).isub(arg_2, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_848(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == -8 {
if arg_2 != arg_0[0] {
let rhs_inst_6 = pos.ins().iconst(I32, 4294967288_u64 as i64);
let rhs_inst_7 = pos.ins().bor_not(rhs_inst_6, arg_2);
pos.func.dfg.replace(inst).band(arg_2, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_849(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -24 {
if rhs_1 == -1 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967271_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_850(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -24 {
if rhs_2 == 4 {
if rhs_1 == 7 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967283_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_851(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -32 {
if rhs_2 == 4 {
if rhs_1 == 8 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967276_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_852(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -28 {
if rhs_1 == 16 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967284_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_853(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -368 {
if rhs_1 == 20 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294966948_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_854(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 4 {
if rhs_2 == 4 {
if rhs_1 == -4 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967280_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967292_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_855(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -72 {
if rhs_2 == 4 {
if rhs_1 == 12 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967240_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_856(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 2 {
if rhs_2 == -1 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967292_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967292_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_857(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 3 {
if rhs_2 == -1 {
if rhs_1 == 3 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967288_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967288_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_858(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 3 {
if rhs_2 == 3 {
if rhs_1 == -8 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967288_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967288_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_859(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -40 {
if rhs_2 == 4 {
if rhs_1 == 16 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967276_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_860(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -56 {
if rhs_2 == 4 {
if rhs_1 == 24 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967268_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_861(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -992 {
if rhs_2 == 4 {
if rhs_1 == 7 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294966315_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_862(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -48 {
if rhs_2 == 4 {
if rhs_1 == 16 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967268_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_863(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 1 {
if rhs_2 == 1 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().iconst(I32, 1073741822_u64 as i64);
let rhs_inst_6 = pos.ins().bor_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).imul_imm(rhs_inst_6, 4294967292_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_864(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -256 {
if rhs_1 == -1 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967039_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_865(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -48 {
if rhs_2 == 4 {
if rhs_1 == -4 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967248_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_866(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -24 {
if rhs_1 == -12 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967260_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_867(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -56 {
if rhs_2 == 4 {
if rhs_1 == 12 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967256_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_868(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == -64 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_4 == 63 {
if rhs_3 == 3 {
if arg_1 == arg_3 {
let rhs_inst_6 = pos.ins().imul_imm(arg_2, 7_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_869(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 80 {
if rhs_1 == -144 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967232_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_870(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -104 {
if rhs_2 == 4 {
if rhs_1 == 3 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967199_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_871(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 1 {
if rhs_1 == -1 {
if arg_2 != arg_0[1] {
let rhs_inst_6 = pos.ins().imul_imm(arg_2, 4294967294_u64 as i64);
pos.func.dfg.replace(inst).band_not(arg_0[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_872(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -112 {
if rhs_1 == 21 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967205_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_873(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -464 {
if rhs_1 == 12 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294966844_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_874(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -416 {
if rhs_1 == 17 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294966897_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_875(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 2 {
if rhs_2 == -4 {
if rhs_1 == 2 {
let rhs_inst_5 = pos.ins().iadd_imm(arg_2, 2147483647_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 1073741823_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_876(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -88 {
if rhs_2 == 4 {
if rhs_1 == 12 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967224_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_877(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -100 {
if rhs_1 == -4 {
if arg_1[0] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967192_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_878(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -56 {
if rhs_2 == 4 {
if rhs_1 == 16 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967260_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_879(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -96 {
if rhs_2 == 4 {
if rhs_1 == 12 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967216_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_880(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -368 {
if rhs_1 == -4 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294966924_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_881(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 80 {
if rhs_1 == -128 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967248_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_882(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -40 {
if rhs_2 == 4 {
if rhs_1 == 12 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967272_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_883(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == 255 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 1 {
if arg_2 != arg_1 {
let rhs_inst_6 = pos.ins().iconst(I32, 4294967040_u64 as i64);
let rhs_inst_7 = pos.ins().bor_not(rhs_inst_6, arg_2);
pos.func.dfg.replace(inst).isub(arg_2, rhs_inst_7);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_884(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == -368 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if arg_2 != arg_1 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294966927_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_6);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_885(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == -64 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_4 == 63 {
if rhs_3 == 2 {
if arg_3 == arg_1 {
let rhs_inst_6 = pos.ins().imul_imm(arg_2, 3_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_886(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 11 {
if rhs_2 == -8 {
if rhs_1 == 0 {
let rhs_inst_5 = pos.ins().irsub_imm(arg_2, 4294967292_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 4294967288_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_887(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 7 {
if rhs_2 == -8 {
if rhs_1 == -8 {
let rhs_inst_5 = pos.ins().iadd_imm(arg_2, 4294967295_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 4294967288_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_888(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_3 == -2 {
if rhs_2 == 1 {
if rhs_1 == 20 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4294967276_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967276_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_889(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -40 {
if rhs_2 == 4 {
if rhs_1 == 24 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967284_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_890(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 2 {
if rhs_2 == 2 {
if rhs_1 == -4 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967292_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967292_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_891(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -360 {
if rhs_2 == 4 {
if rhs_1 == 7 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294966947_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_892(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -48 {
if rhs_2 == 4 {
if rhs_1 == 12 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967264_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_893(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_3 == 8 {
if rhs_2 == 2 {
if rhs_1 == 2744544 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4294967292_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2744576_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_894(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Band => {
if rhs_2 == 7 {
if rhs_1 == -1 {
if arg_2[1] != arg_2[0] {
let rhs_inst_6 = pos.ins().iconst(I32, 4294967288_u64 as i64);
let rhs_inst_7 = pos.ins().bor_not(rhs_inst_6, arg_2[1]);
pos.func.dfg.replace(inst).bor_not(rhs_inst_7, arg_2[0]);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_895(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_3 == 1 {
if rhs_2 == 1 {
if rhs_1 == 2750708 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4294967294_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2750710_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_896(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -184 {
if rhs_2 == 4 {
if rhs_1 == 21 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967137_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_897(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_3 == 1 {
if rhs_2 == 1 {
if rhs_1 == 2750704 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4294967294_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2750706_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_898(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -136 {
if rhs_2 == 4 {
if rhs_1 == 12 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967176_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_899(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == -8 {
if rhs_3 == 3 {
if rhs_2 == 1 {
if rhs_1 == 3 {
pos.func.dfg.replace(inst).band_imm(arg_3, 18446744073709551608_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_900(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 1073741823 {
if rhs_2 == 2 {
if rhs_1 == 2598256 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2598256_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_901(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == -64 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_4 == 63 {
if rhs_3 == 4 {
if arg_1 == arg_3 {
let rhs_inst_6 = pos.ins().imul_imm(arg_2, 15_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_902(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -104 {
if rhs_2 == 4 {
if rhs_1 == 12 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294967208_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_903(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 21 {
if rhs_2 == -1 {
if rhs_1 == 268435456 {
let rhs_inst_5 = pos.ins().iconst(I64, 128_u64 as i64);
let rhs_inst_6 = pos.ins().band_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).imul_imm(rhs_inst_6, 2097152_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_904(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -256 {
if rhs_1 == -12 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_2, 4294967028_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_905(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1664 {
if rhs_2 == 4 {
if rhs_1 == 3 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294965639_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_906(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1168 {
if rhs_2 == 4 {
if rhs_1 == 24 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294966156_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_907(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 32767 {
if rhs_2 == -1 {
if rhs_1 == 16383 {
let rhs_inst_5 = pos.ins().iadd_imm(arg_2, 4294688767_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 16383_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_908(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1160 {
if rhs_2 == 4 {
if rhs_1 == 24 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294966164_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_909(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1264 {
if rhs_2 == 4 {
if rhs_1 == 24 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4294966060_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_910(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 3 {
if rhs_2 == 3 {
if rhs_1 == 2902360 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4294967288_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2902360_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_911(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 1 {
if rhs_2 == 2 {
if rhs_1 == 4 {
let rhs_inst_5 = pos.ins().iconst(I32, 2147483646_u64 as i64);
let rhs_inst_6 = pos.ins().band_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).imul_imm(rhs_inst_6, 2147483646_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_912(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 2 {
if rhs_2 == 1 {
if rhs_1 == 3 {
let rhs_inst_5 = pos.ins().iconst(I32, 4294967292_u64 as i64);
let rhs_inst_6 = pos.ins().band_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).imul_imm(rhs_inst_6, 1073741822_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_913(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 3 {
if rhs_2 == 3 {
if rhs_1 == 3 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_7 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_7 == 32 {
if arg_3 == arg_4 {
pos.func.dfg.replace(inst).band_imm(arg_4, 56_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_914(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 1 {
if rhs_2 == 16 {
if rhs_1 == -16 {
let rhs_inst_5 = pos.ins().iconst(I32, 2147483640_u64 as i64);
let rhs_inst_6 = pos.ins().band_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).imul_imm(rhs_inst_6, 536870910_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_915(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 65535 {
if rhs_1 == -1 {
if arg_2 != arg_0[0] {
let rhs_inst_6 = pos.ins().iconst(I32, 4294901760_u64 as i64);
let rhs_inst_7 = pos.ins().bor_not(rhs_inst_6, arg_2);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_916(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 32 {
if rhs_2 == 4 {
if rhs_1 == 4294967295 {
let rhs_inst_5 = pos.ins().iadd_imm(arg_2, 17179869184_u64 as i64);
pos.func.dfg.replace(inst).ushr_imm(rhs_inst_5, 32_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_917(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == -1 {
if rhs_1 == -65536 {
let rhs_inst_5 = pos.ins().irsub_imm(arg_2, 1317011456_u64 as i64);
pos.func.dfg.replace(inst).bor_imm(rhs_inst_5, 4294901760_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_918(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 1 {
if rhs_2 == 1 {
if rhs_1 == 12 {
let rhs_inst_5 = pos.ins().iconst(I32, 2147483646_u64 as i64);
let rhs_inst_6 = pos.ins().band_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).imul_imm(rhs_inst_6, 2147483642_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_919(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 2 {
if rhs_2 == 16 {
if rhs_1 == -16 {
let rhs_inst_5 = pos.ins().iconst(I32, 1073741820_u64 as i64);
let rhs_inst_6 = pos.ins().band_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).imul_imm(rhs_inst_6, 1073741820_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_920(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 4294967295 {
if rhs_1 == 32 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_5 == 4294967295 {
if arg_2 == arg_3 {
pos.func.dfg.replace(inst).imul_imm(arg_0[1], 4294967297_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_921(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 32 {
if rhs_2 == 0 {
if rhs_1 == 32 {
let rhs_inst_5 = pos.ins().imul_imm(arg_2, 18446744069414584320_u64 as i64);
pos.func.dfg.replace(inst).sshr_imm(rhs_inst_5, 32_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_922(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 30 {
if rhs_2 == -1 {
if rhs_1 == 1073741822 {
let rhs_inst_5 = pos.ins().iconst(I32, 2147483648_u64 as i64);
let rhs_inst_6 = pos.ins().bor_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).sshr_imm(rhs_inst_6, 30_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_923(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Iadd => {
if rhs_2 == 1 {
if rhs_1 == 2147483647 {
if arg_2[0] != arg_2[1] {
let rhs_inst_6 = pos.ins().irsub_imm(arg_2[1], 2147483646_u64 as i64);
pos.func.dfg.replace(inst).isub(rhs_inst_6, arg_2[0]);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_924(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 2 {
if rhs_3 == 7 {
if rhs_2 == 7 {
if rhs_1 == -3 {
let rhs_inst_6 = pos.ins().bor_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_6);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_925(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Imul => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 4294967295 {
if rhs_1 == 32 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().imul_imm(arg_2, 4294967296_u64 as i64);
pos.func.dfg.replace(inst).imul(arg_1[1], rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_926(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == 134217727 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 1 {
if arg_2 != arg_1 {
let rhs_inst_6 = pos.ins().iconst(I32, 4160749568_u64 as i64);
let rhs_inst_7 = pos.ins().bor_not(rhs_inst_6, arg_2);
pos.func.dfg.replace(inst).isub(arg_2, rhs_inst_7);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_927(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 3 {
if rhs_3 == -1 {
if rhs_2 == -16 {
if rhs_1 == 1 {
let rhs_inst_6 = pos.ins().bor_imm(arg_2, 4294967294_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_6);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_928(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 3 {
if rhs_3 == -1 {
if rhs_2 == -16 {
if rhs_1 == 8 {
let rhs_inst_6 = pos.ins().bor_imm(arg_2, 4294967287_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_6);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_929(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 2147483647 {
if rhs_2 == 3 {
if rhs_1 == 268435452 {
let rhs_inst_5 = pos.ins().sshr_imm(arg_2, 3_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 268435452_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_930(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == -512 {
if rhs_2 == 2 {
if rhs_1 == -524286 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 18446744073709027328_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_931(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 3 {
if rhs_3 == -1 {
if rhs_2 == -16 {
if rhs_1 == 2 {
let rhs_inst_6 = pos.ins().bor_imm(arg_2, 4294967293_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_6);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_932(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 134217727 {
if rhs_1 == -1 {
if arg_0[0] != arg_2 {
let rhs_inst_6 = pos.ins().iconst(I32, 4160749568_u64 as i64);
let rhs_inst_7 = pos.ins().bor_not(rhs_inst_6, arg_2);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_933(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 3 {
if rhs_3 == -1 {
if rhs_2 == -16 {
if rhs_1 == 4 {
let rhs_inst_6 = pos.ins().bor_imm(arg_2, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_6);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_934(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == -2147483648 {
if arg_2 != arg_0[0] {
let rhs_inst_6 = pos.ins().iconst(I32, 2147483648_u64 as i64);
let rhs_inst_7 = pos.ins().bor_not(rhs_inst_6, arg_2);
pos.func.dfg.replace(inst).iadd(arg_2, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_935(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == 1073741823 {
if arg_2 != arg_1[1] {
let rhs_inst_6 = pos.ins().iconst(I32, 1073741823_u64 as i64);
let rhs_inst_7 = pos.ins().band_not(rhs_inst_6, arg_2);
pos.func.dfg.replace(inst).band(arg_1[1], rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_936(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 2 {
if rhs_1 == 8 {
if arg_2 != arg_3 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_1[1], 16_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_937(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 6 {
if rhs_2 == -1 {
if rhs_1 == 134217728 {
let rhs_inst_5 = pos.ins().iconst(I64, 1152921504608944128_u64 as i64);
let rhs_inst_6 = pos.ins().band_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).imul_imm(rhs_inst_6, 64_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_938(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 12 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 2 {
if rhs_1 == -4 {
if arg_2 != arg_3 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_1[1], 8_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_939(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
if rhs_3 == 524288 {
if rhs_2 == -13631489 {
if rhs_1 == 9437184 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4280811519_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 9961472_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_940(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 4 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 2 {
if rhs_1 == 92 {
if arg_2 != arg_3 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_1[1], 96_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_941(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 4 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 2 {
if rhs_1 == 20 {
if arg_2 != arg_3 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_1[1], 24_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_942(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
if rhs_3 == 524288 {
if rhs_2 == -12582913 {
if rhs_1 == 4194304 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4281860095_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 4718592_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_943(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
if rhs_3 == 524288 {
if rhs_2 == -12582913 {
if rhs_1 == 8388608 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 4281860095_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 8912896_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_944(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 32 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 2 {
if rhs_1 == 4 {
if arg_3 != arg_2 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_1[1], 36_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_945(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 16 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 2 {
if rhs_1 == 4 {
if arg_2 != arg_3 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_1[1], 20_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_946(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 8 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 3 {
if rhs_1 == 40 {
if arg_3 != arg_2 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_1[1], 48_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_947(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 2147483647 {
if rhs_1 == -2147483648 {
if arg_1[1] != arg_2 {
let rhs_inst_6 = pos.ins().iadd(arg_2, arg_1[1]);
pos.func.dfg.replace(inst).bor_imm(rhs_inst_6, 2147483648_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_948(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 63 {
if rhs_2 == 1 {
if rhs_1 == 24 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().iadd_imm(arg_2, 25_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_949(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -8 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_4 == -8 {
if rhs_1 == 16 {
if arg_2 != arg_3 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_1[1], 8_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_950(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 268435455 {
if rhs_2 == 2 {
if rhs_1 == 268435455 {
let rhs_inst_5 = pos.ins().iadd_imm(arg_2, 4026531842_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 268435455_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_951(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 16 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 2 {
if rhs_1 == -4 {
if arg_2 != arg_3 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_1[1], 12_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_952(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 128 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 2 {
if rhs_1 == 8 {
if arg_2 != arg_3 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_1[1], 136_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_953(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -8 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_4 == -8 {
if rhs_1 == 20 {
if arg_3 != arg_2 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_1[1], 12_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_954(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 48 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
if rhs_4 == 48 {
if rhs_1 == 24 {
if arg_3 != arg_2 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_1[1], 72_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_955(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 32 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
if rhs_4 == 40 {
if rhs_1 == 35 {
if arg_3 != arg_2 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_1[1], 67_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_956(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 32 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
if rhs_4 == 40 {
if rhs_1 == 24 {
if arg_2 != arg_3 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_1[1], 56_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_957(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 48 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 14 {
if rhs_1 == 7 {
if arg_2 != arg_3 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_1[1], 55_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_958(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_4 == 960 {
if rhs_3 == 6 {
if rhs_2 == 1 {
if rhs_1 == 16 {
let rhs_inst_6 = pos.ins().imul_imm(arg_2, 1024_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_6, 65536_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_959(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 48 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
if rhs_4 == 48 {
if rhs_1 == 16 {
if arg_2 != arg_3 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_1[1], 64_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_960(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 32 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
if rhs_4 == 40 {
if rhs_1 == 31 {
if arg_2 != arg_3 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_1[1], 63_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_961(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 32 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
if rhs_4 == 40 {
if rhs_1 == 32 {
if arg_2 != arg_3 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_1[1], 64_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_962(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 24 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
if rhs_4 == 20 {
if rhs_1 == 20 {
if arg_2 != arg_3 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_1[1], 44_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_963(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_4 == 960 {
if rhs_3 == 6 {
if rhs_2 == 1 {
if rhs_1 == 16 {
let rhs_inst_6 = pos.ins().imul_imm(arg_2, 1024_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_6, 65536_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_964(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 32 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
if rhs_4 == 40 {
if rhs_1 == 28 {
if arg_3 != arg_2 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_1[1], 60_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_965(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 32 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
if rhs_4 == 40 {
if rhs_1 == 17 {
if arg_2 != arg_3 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_1[1], 49_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_966(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 80 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
if rhs_4 == 144 {
if rhs_1 == 16 {
if arg_2 != arg_3 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_1[1], 96_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_967(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 560 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 2 {
if rhs_1 == 20 {
if arg_2 != arg_3 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_1[1], 580_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_968(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 160 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 3 {
if rhs_1 == -8 {
if arg_3 != arg_2 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_1[1], 152_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_969(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 320 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 3 {
if rhs_1 == -8 {
if arg_3 != arg_2 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_1[1], 312_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_970(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 480 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 2 {
if rhs_1 == -4 {
if arg_2 != arg_3 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_1[1], 476_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_971(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 14 {
if rhs_2 == -524289 {
if rhs_1 == 524288 {
let rhs_inst_5 = pos.ins().iconst(I64, 32_u64 as i64);
let rhs_inst_6 = pos.ins().band_not(rhs_inst_5, arg_2);
let rhs_inst_7 = pos.ins().iconst(I64, 18446744073709027327_u64 as i64);
pos.func.dfg.replace(inst).sshr(rhs_inst_7, rhs_inst_6);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_972(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Unary { opcode, arg } => {
let arg_4 = arg;
match opcode {
Opcode::Clz => {
if rhs_3 == 1 {
if rhs_2 == 64 {
if rhs_1 == 32768 {
if arg_1[0] != arg_4 {
pos.func.dfg.replace(inst).band_imm(arg_3, 32768_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_973(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 48 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_4 == 255 {
if rhs_3 == -1 {
if arg_1 != arg_3 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_2, 47_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_974(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 304 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
if rhs_4 == 28 {
if rhs_1 == 24 {
if arg_3 != arg_2 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_1[1], 328_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_975(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 304 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
if rhs_4 == 28 {
if rhs_1 == 12 {
if arg_3 != arg_2 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_1[1], 316_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_976(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 9 {
if rhs_3 == -1 {
if rhs_2 == 3 {
if rhs_1 == 1493552 {
let rhs_inst_6 = pos.ins().imul_imm(arg_2, 8_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_6, 1493544_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_977(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == 34634616274944 {
if arg_1[0] != arg_2 {
let rhs_inst_6 = pos.ins().iconst(I64, 34634616274944_u64 as i64);
let rhs_inst_7 = pos.ins().band_not(rhs_inst_6, arg_2);
pos.func.dfg.replace(inst).band(arg_2, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_978(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == -4 {
if rhs_1 == 3 {
let rhs_inst_5 = pos.ins().irsub_imm(arg_2, 5082235795319799808_u64 as i64);
pos.func.dfg.replace(inst).bor_imm(rhs_inst_5, 18446744073709551612_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_979(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_4 == 15 {
if rhs_3 == -2 {
if rhs_2 == 2 {
if rhs_1 == 2531908 {
let rhs_inst_6 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_6, 2531900_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_980(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_4 == 15 {
if rhs_3 == -2 {
if rhs_2 == 3 {
if rhs_1 == 1519376 {
let rhs_inst_6 = pos.ins().imul_imm(arg_2, 8_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_6, 1519360_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_981(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_4 == 32767 {
if rhs_3 == -1 {
if rhs_2 == 2 {
if rhs_1 == 879400 {
let rhs_inst_6 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_6, 879396_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_982(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == 1 {
if arg_1[1] != arg_2[1] && arg_1[1] != arg_3 && arg_2[1] != arg_3 {
let rhs_inst_8 = pos.ins().isub(arg_2[1], arg_3);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_983(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
if rhs_4 == 37 {
if rhs_3 == 4294967295 {
if rhs_2 == 32 {
if rhs_1 == -1 {
let rhs_inst_6 = pos.ins().imul_imm(arg_3, 158913789952_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_6);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_984(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 4294967291 {
if rhs_2 == 4 {
if rhs_1 == 0 {
let rhs_inst_5 = pos.ins().iconst(I64, 4294967291_u64 as i64);
let rhs_inst_6 = pos.ins().band_not(rhs_inst_5, arg_2);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_6, 18446744069414584321_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_985(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_4 == 32767 {
if rhs_3 == -32 {
if rhs_2 == 2 {
if rhs_1 == 257196 {
let rhs_inst_6 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_6, 257068_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_986(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_4 == 127 {
if rhs_3 == -24 {
if rhs_2 == 2 {
if rhs_1 == 2591040 {
let rhs_inst_6 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_6, 2590944_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_987(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_4 == 32767 {
if rhs_3 == -32 {
if rhs_2 == 2 {
if rhs_1 == 257232 {
let rhs_inst_6 = pos.ins().imul_imm(arg_2, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_6, 257104_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_988(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_5 == 9 {
if rhs_4 == 8191 {
if rhs_3 == -27 {
if rhs_2 == 9 {
if rhs_1 == 13824 {
pos.func.dfg.replace(inst).band_imm(arg_4, 4193792_u64 as i64);

}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_989(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 7 {
if rhs_2 == -8 {
if rhs_1 == -8 {
let rhs_inst_5 = pos.ins().iadd_imm(arg_2, 18446744073709551615_u64 as i64);
pos.func.dfg.replace(inst).band_imm(rhs_inst_5, 18446744073709551608_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_990(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 28 {
if rhs_3 == 28 {
if rhs_2 == 2 {
if rhs_1 == 2528056 {
let rhs_inst_6 = pos.ins().sshr_imm(arg_2, 26_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_6, 2528056_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_991(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_3 == 1 {
if rhs_2 == 0 {
if rhs_1 == 12 {
if arg_0[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_2, 4294967284_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_992(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -8 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_4 == -8 {
if rhs_1 == 4 {
if arg_2 != arg_3 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_1[1], 4294967292_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_993(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_3 == 0 {
if rhs_2 == 31 {
if rhs_1 == -32 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().bor_imm(arg_2, 4294967264_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_994(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -24 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
if rhs_4 == 12 {
if rhs_1 == 4 {
if arg_2 != arg_3 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_1[1], 4294967276_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_995(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -12 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
if rhs_4 == 12 {
if rhs_1 == 4 {
if arg_2 != arg_3 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_1[1], 4294967288_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_996(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_1 == 2 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 2 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_5 == 2 {
if arg_5 == arg_4 && arg_5 == arg_3 && arg_5 != arg_2[0] && arg_4 == arg_3 && arg_4 != arg_2[0] && arg_3 != arg_2[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_5, 11_u64 as i64);
let rhs_inst_8 = pos.ins().iadd(arg_5, rhs_inst_7);
pos.func.dfg.replace(inst).iadd(arg_5, rhs_inst_8);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_997(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
if rhs_2 == 58 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == -65 {
if rhs_1 == 2743936 {
if arg_2 != arg_3 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_1[0], 2743871_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_998(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 1 {
if rhs_3 == 1 {
if rhs_2 == 16 {
if rhs_1 == -16 {
let rhs_inst_6 = pos.ins().bxor_imm(arg_3, 7_u64 as i64);
let rhs_inst_7 = pos.ins().iadd_imm(rhs_inst_6, 9_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_999(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 1 {
if rhs_2 == -1 {
if rhs_1 == 1 {
if arg_0[0] != arg_3 {
let rhs_inst_7 = pos.ins().bor_imm(arg_3, 1_u64 as i64);
let rhs_inst_8 = pos.ins().isub(rhs_inst_7, arg_3);
pos.func.dfg.replace(inst).bnot(rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1000(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 2 {
if rhs_2 == -1 {
if rhs_1 == 2 {
if arg_3 != arg_0[0] {
let rhs_inst_7 = pos.ins().bor_imm(arg_3, 3_u64 as i64);
let rhs_inst_8 = pos.ins().isub(rhs_inst_7, arg_3);
pos.func.dfg.replace(inst).bnot(rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1001(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 3 {
if rhs_2 == -1 {
if rhs_1 == 3 {
if arg_0[0] != arg_3 {
let rhs_inst_7 = pos.ins().bor_imm(arg_3, 7_u64 as i64);
let rhs_inst_8 = pos.ins().isub(rhs_inst_7, arg_3);
pos.func.dfg.replace(inst).bnot(rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1002(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -8 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == 1 {
if rhs_1 == 1 {
if arg_3 != arg_2 {
let rhs_inst_7 = pos.ins().irsub_imm(arg_3, 5_u64 as i64);
let rhs_inst_8 = pos.ins().isub(rhs_inst_7, arg_3);
pos.func.dfg.replace(inst).bnot(rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1003(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 3 {
if rhs_2 == 3 {
if rhs_1 == -8 {
if arg_3 != arg_0[0] {
let rhs_inst_7 = pos.ins().bor_imm(arg_3, 7_u64 as i64);
let rhs_inst_8 = pos.ins().isub(rhs_inst_7, arg_3);
pos.func.dfg.replace(inst).bnot(rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1004(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 1 {
if rhs_2 == 1 {
if rhs_1 == 0 {
if arg_3 == arg_2[0] {
let rhs_inst_6 = pos.ins().iconst(I32, 4008636142_u64 as i64);
let rhs_inst_7 = pos.ins().ishl(rhs_inst_6, arg_3);
let rhs_inst_8 = pos.ins().sshr_imm(rhs_inst_7, 31_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1005(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 32 {
if rhs_2 == 1 {
if rhs_1 == 0 {
if arg_3 != arg_2[0] {
let rhs_inst_7 = pos.ins().iconst(I64, 1_u64 as i64);
let rhs_inst_8 = pos.ins().bor_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().iadd(arg_3, rhs_inst_8);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1006(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 4 {
if rhs_2 == -1 {
if rhs_1 == 4 {
if arg_0[0] != arg_3 {
let rhs_inst_7 = pos.ins().bor_imm(arg_3, 15_u64 as i64);
let rhs_inst_8 = pos.ins().isub(rhs_inst_7, arg_3);
pos.func.dfg.replace(inst).bnot(rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1007(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 6 {
if rhs_2 == -1 {
if rhs_1 == 6 {
if arg_3 != arg_0[0] {
let rhs_inst_7 = pos.ins().bor_imm(arg_3, 63_u64 as i64);
let rhs_inst_8 = pos.ins().isub(rhs_inst_7, arg_3);
pos.func.dfg.replace(inst).bnot(rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1008(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 8 {
if rhs_3 == 1 {
if rhs_2 == 1 {
if rhs_1 == 2 {
let rhs_inst_6 = pos.ins().sshr_imm(arg_3, 6_u64 as i64);
let rhs_inst_7 = pos.ins().band_imm(rhs_inst_6, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_7, 4_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1009(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 5 {
if rhs_2 == -1 {
if rhs_1 == 5 {
if arg_0[0] != arg_3 {
let rhs_inst_7 = pos.ins().bor_imm(arg_3, 31_u64 as i64);
let rhs_inst_8 = pos.ins().isub(rhs_inst_7, arg_3);
pos.func.dfg.replace(inst).bnot(rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1010(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 268435455 {
if rhs_2 == 0 {
if rhs_1 == 12 {
if arg_3 != arg_0[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_2, 4294967284_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1011(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -16 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == 1 {
if rhs_1 == 2 {
if arg_3 != arg_2 {
let rhs_inst_7 = pos.ins().irsub_imm(arg_3, 12_u64 as i64);
let rhs_inst_8 = pos.ins().isub(rhs_inst_7, arg_3);
pos.func.dfg.replace(inst).bnot(rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1012(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 3 {
if rhs_3 == 1 {
if rhs_2 == 1 {
if rhs_1 == 2 {
let rhs_inst_6 = pos.ins().sshr_imm(arg_3, 2_u64 as i64);
let rhs_inst_7 = pos.ins().bor_imm(rhs_inst_6, 4294967293_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_7);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1013(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -16 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == 1 {
if rhs_1 == 1 {
if arg_3 != arg_2 {
let rhs_inst_7 = pos.ins().irsub_imm(arg_3, 13_u64 as i64);
let rhs_inst_8 = pos.ins().isub(rhs_inst_7, arg_3);
pos.func.dfg.replace(inst).bnot(rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1014(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == -4 {
if rhs_3 == 2 {
if rhs_2 == -1 {
if rhs_1 == 2 {
let rhs_inst_6 = pos.ins().iconst(I32, 4294967292_u64 as i64);
let rhs_inst_7 = pos.ins().bor_not(rhs_inst_6, arg_3);
let rhs_inst_8 = pos.ins().iadd(arg_3, rhs_inst_7);
pos.func.dfg.replace(inst).bnot(rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1015(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -4 {
if rhs_2 == -4 {
if rhs_1 == 4 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().iconst(I32, 3_u64 as i64);
let rhs_inst_8 = pos.ins().bor_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().isub(rhs_inst_8, arg_3);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1016(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == -8 {
if rhs_3 == 3 {
if rhs_2 == -1 {
if rhs_1 == 3 {
let rhs_inst_6 = pos.ins().iconst(I32, 4294967288_u64 as i64);
let rhs_inst_7 = pos.ins().bor_not(rhs_inst_6, arg_3);
let rhs_inst_8 = pos.ins().iadd(arg_3, rhs_inst_7);
pos.func.dfg.replace(inst).bnot(rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1017(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -32 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == -1 {
if rhs_1 == 21 {
if arg_2 != arg_3 {
let rhs_inst_7 = pos.ins().irsub_imm(arg_3, 11_u64 as i64);
let rhs_inst_8 = pos.ins().isub(rhs_inst_7, arg_3);
pos.func.dfg.replace(inst).bnot(rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1018(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_2 == 2 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 3 {
if rhs_1 == 1 {
if arg_2 == arg_3 {
let rhs_inst_6 = pos.ins().iconst(I32, 983055_u64 as i64);
let rhs_inst_7 = pos.ins().sshr(rhs_inst_6, arg_3);
let rhs_inst_8 = pos.ins().bor_imm(rhs_inst_7, 4294967294_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1019(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 3 {
if rhs_3 == 128 {
if rhs_2 == 7 {
if rhs_1 == 1 {
let rhs_inst_6 = pos.ins().sshr_imm(arg_3, 4_u64 as i64);
let rhs_inst_7 = pos.ins().bor_imm(rhs_inst_6, 4294967294_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_7);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1020(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -32 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == -1 {
if rhs_1 == 20 {
if arg_2 != arg_3 {
let rhs_inst_7 = pos.ins().irsub_imm(arg_3, 12_u64 as i64);
let rhs_inst_8 = pos.ins().isub(rhs_inst_7, arg_3);
pos.func.dfg.replace(inst).bnot(rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1021(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 44 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 2 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_5 == 2 {
if arg_4 != arg_2 && arg_4 == arg_3 && arg_2 != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_4, 8_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 44_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_4, rhs_inst_8);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1022(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 1 {
if rhs_2 == 1 {
if rhs_1 == 2 {
if arg_3 != arg_0[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 8_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1023(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 60 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 2 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_5 == 2 {
if arg_2 != arg_4 && arg_2 != arg_3 && arg_4 == arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_4, 8_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 60_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_4, rhs_inst_8);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1024(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 28 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 2 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_5 == 2 {
if arg_2 != arg_3 && arg_2 != arg_4 && arg_3 == arg_4 {
let rhs_inst_7 = pos.ins().imul_imm(arg_4, 8_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 28_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_4, rhs_inst_8);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1025(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 1 {
if rhs_2 == 2 {
if rhs_1 == 4 {
if arg_0[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 8_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1026(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 2 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 2 {
if rhs_1 == 28 {
if arg_4 == arg_3 && arg_4 != arg_2[0] && arg_3 != arg_2[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_4, 8_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 28_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_4, rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1027(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 32 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 2 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_5 == 2 {
if arg_3 == arg_4 && arg_3 != arg_2 && arg_4 != arg_2 {
let rhs_inst_7 = pos.ins().imul_imm(arg_4, 8_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 32_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_4, rhs_inst_8);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1028(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 2 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 2 {
if rhs_1 == 44 {
if arg_4 == arg_3 && arg_4 != arg_2[0] && arg_3 != arg_2[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_4, 8_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 44_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_4, rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1029(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 2 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 2 {
if rhs_1 == 20 {
if arg_2[0] != arg_3 && arg_2[0] != arg_4 && arg_3 == arg_4 {
let rhs_inst_7 = pos.ins().imul_imm(arg_4, 8_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 20_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_4, rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1030(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 2 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 2 {
if rhs_1 == 32 {
if arg_3 == arg_4 && arg_3 != arg_2[0] && arg_4 != arg_2[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_4, 8_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 32_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_4, rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1031(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 2 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 2 {
if rhs_1 == 60 {
if arg_3 != arg_2[0] && arg_3 == arg_4 && arg_2[0] != arg_4 {
let rhs_inst_7 = pos.ins().imul_imm(arg_4, 8_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 60_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_4, rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1032(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 1 {
if rhs_2 == 4 {
if rhs_1 == 8 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().bor_imm(arg_3, 1_u64 as i64);
let rhs_inst_8 = pos.ins().imul_imm(rhs_inst_7, 8_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1033(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_3 == 0 {
if rhs_2 == 3 {
if rhs_1 == 4 {
if arg_3 == arg_1[0] {
let rhs_inst_6 = pos.ins().iadd_imm(arg_3, 4294966271_u64 as i64);
let rhs_inst_7 = pos.ins().bor_imm(rhs_inst_6, 4294967291_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_7);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1034(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_4 == 65535 {
if rhs_3 == 10 {
if rhs_2 == 1 {
if rhs_1 == 2 {
let rhs_inst_6 = pos.ins().sshr_imm(arg_3, 10_u64 as i64);
let rhs_inst_7 = pos.ins().band_imm(rhs_inst_6, 1_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_7, 2_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1035(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 3 {
if rhs_2 == 3 {
if rhs_1 == 8 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().bor_imm(arg_3, 7_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 1_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1036(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 2 {
if rhs_2 == 2 {
if rhs_1 == 4 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().bor_imm(arg_3, 3_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 1_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1037(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 1 {
if rhs_2 == 1 {
if rhs_1 == 3 {
if arg_0[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 16_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 8_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1038(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == -368 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == -1 {
if rhs_1 == 21 {
if arg_2 != arg_3 {
let rhs_inst_7 = pos.ins().irsub_imm(arg_3, 347_u64 as i64);
let rhs_inst_8 = pos.ins().isub(rhs_inst_7, arg_3);
pos.func.dfg.replace(inst).bnot(rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1039(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == -512 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 255 {
if arg_3 == arg_2 && arg_3 != arg_1[1] && arg_2 != arg_1[1] {
let rhs_inst_7 = pos.ins().iconst(I32, 256_u64 as i64);
let rhs_inst_8 = pos.ins().bor_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().band_not(rhs_inst_8, arg_1[1]);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1040(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 1 {
if rhs_2 == 2 {
if rhs_1 == 8 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 12_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1041(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 1 {
if rhs_2 == 3 {
if rhs_1 == 4 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 8_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 12_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1042(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 8 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == 1 {
if rhs_3 == 2 {
if arg_1 != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 12_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1043(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
if rhs_2 == 20 {
if rhs_1 == 44 {
if arg_0[1] != arg_2[0] && arg_0[1] == arg_3 && arg_2[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 21_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 44_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1044(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 2 {
if rhs_1 == 8 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1045(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_2 == 32 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_4 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_4[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_5 == 16 {
if rhs_4 == 32 {
if rhs_1 == 4294967295 {
if arg_2 != arg_4[0] && arg_2 != arg_5 && arg_4[0] != arg_5 {
let rep_insts = pos.func.dfg.inst_results(inst);
let rep_insts_0 = rep_insts[0];
pos.func.dfg.change_to_alias(arg_1[0], rep_insts_0);
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1046(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 1 {
if rhs_2 == 2 {
if rhs_1 == 32 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 36_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1047(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 1 {
if rhs_2 == 4 {
if rhs_1 == 4 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 16_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 20_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1048(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 2 {
if rhs_2 == 2 {
if rhs_1 == 24 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 32_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1049(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 1 {
if rhs_2 == 2 {
if rhs_1 == 24 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 28_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1050(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 24 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == 1 {
if rhs_3 == 2 {
if arg_3 != arg_1 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 28_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1051(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 1 {
if rhs_2 == 1 {
if rhs_1 == 12 {
if arg_3 != arg_0[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 24_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 12_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1052(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 16 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == 1 {
if rhs_3 == 3 {
if arg_3 != arg_1 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 8_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 24_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1053(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 16 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == -2 {
if rhs_3 == 2 {
if arg_1 != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 8_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1054(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_2 == -1 {
if rhs_1 == -2 {
if arg_3 != arg_2[1] && arg_3 != arg_1[1] && arg_2[1] != arg_1[1] {
let rhs_inst_8 = pos.ins().isub(arg_2[1], arg_3);
let rhs_inst_9 = pos.ins().iadd(arg_1[1], rhs_inst_8);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1055(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 2 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 3 {
if rhs_1 == 24 {
if arg_2 == arg_3 {
let rhs_inst_6 = pos.ins().imul_imm(arg_3, 4294967284_u64 as i64);
let rhs_inst_7 = pos.ins().iadd_imm(rhs_inst_6, 4294967271_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_7);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1056(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 1 {
if rhs_2 == 4 {
if rhs_1 == 8 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 16_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 24_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1057(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 2 {
if rhs_1 == 48 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 44_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1058(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 32 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
if rhs_4 == 3 {
if rhs_3 == 2 {
if arg_1 != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 12_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 32_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1059(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 2 {
if rhs_2 == 1 {
if rhs_1 == 80 {
if arg_0[0] != arg_3 {
let rhs_inst_7 = pos.ins().band_imm(arg_3, 4_u64 as i64);
let rhs_inst_8 = pos.ins().imul_imm(rhs_inst_7, 20_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1060(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 11 {
if rhs_2 == 1 {
if rhs_1 == 2 {
if arg_0[0] != arg_3 {
let rhs_inst_7 = pos.ins().sshr_imm(arg_3, 9_u64 as i64);
let rhs_inst_8 = pos.ins().band_imm(rhs_inst_7, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1061(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == 128 {
if rhs_3 == 4 {
if rhs_2 == 4080 {
if rhs_1 == 8 {
let rhs_inst_6 = pos.ins().ishl_imm(arg_3, 24_u64 as i64);
let rhs_inst_7 = pos.ins().sshr_imm(rhs_inst_6, 20_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_7, 2056_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1062(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 16 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == -1 {
if rhs_3 == 2 {
if arg_1 != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 12_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1063(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 1 {
if rhs_2 == 48 {
if rhs_1 == 24 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().bor_imm(arg_3, 1_u64 as i64);
let rhs_inst_8 = pos.ins().imul_imm(rhs_inst_7, 24_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1064(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_1 == -1 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_3 == -1 {
if arg_1[0] != arg_2 && arg_1[0] != arg_3 && arg_2 != arg_3 {
let rhs_inst_8 = pos.ins().bor_not(arg_2, arg_3);
let rhs_inst_9 = pos.ins().bor(arg_3, rhs_inst_8);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1065(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 3 {
if rhs_1 == 64 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 8_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 56_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1066(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 1 {
if rhs_2 == 3 {
if rhs_1 == 12 {
if arg_3 != arg_0[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 24_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 36_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1067(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 16 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == 1 {
if rhs_1 == 1 {
if arg_3 != arg_2 {
let rhs_inst_7 = pos.ins().irsub_imm(arg_3, 4294967277_u64 as i64);
let rhs_inst_8 = pos.ins().isub(rhs_inst_7, arg_3);
pos.func.dfg.replace(inst).bnot(rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1068(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 1 {
if rhs_2 == 20 {
if rhs_1 == 8 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 20_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 28_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1069(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 4 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == 7 {
if rhs_3 == 12 {
if arg_1 != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 12_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 88_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1070(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 1 {
if rhs_2 == 2 {
if rhs_1 == 12 {
if arg_0[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 24_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 24_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1071(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 2 {
if rhs_1 == 96 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 92_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1072(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 2 {
if rhs_1 == 32 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 28_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1073(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -2 {
if rhs_2 == 3 {
if rhs_1 == 64 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 8_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 48_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1074(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_1 == -1 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_3 == -1 {
if arg_2 != arg_1[1] && arg_2 != arg_3 && arg_1[1] != arg_3 {
let rhs_inst_8 = pos.ins().bor_not(arg_3, arg_1[1]);
let rhs_inst_9 = pos.ins().bor(arg_3, rhs_inst_8);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1075(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 1 {
if rhs_2 == 12 {
if rhs_1 == 4 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 12_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 16_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1076(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 16 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == 1 {
if rhs_1 == 2 {
if arg_2 != arg_3 {
let rhs_inst_7 = pos.ins().irsub_imm(arg_3, 4294967276_u64 as i64);
let rhs_inst_8 = pos.ins().isub(rhs_inst_7, arg_3);
pos.func.dfg.replace(inst).bnot(rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1077(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 1 {
if rhs_2 == 5 {
if rhs_1 == 16 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 32_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 48_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1078(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 2 {
if rhs_1 == 16 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 12_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1079(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -2 {
if rhs_2 == 2 {
if rhs_1 == 96 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 88_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1080(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 308 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == 2 {
if rhs_3 == 2 {
if arg_1 != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 316_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1081(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 1 {
if rhs_2 == 20 {
if rhs_1 == 12 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 20_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 32_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1082(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 1 {
if rhs_3 == -4 {
if rhs_2 == -4 {
if rhs_1 == 2690348 {
let rhs_inst_6 = pos.ins().bxor_imm(arg_3, 1_u64 as i64);
let rhs_inst_7 = pos.ins().iadd_imm(rhs_inst_6, 2690343_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1083(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == 4 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 2 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_5 == -5 {
if arg_3 != arg_2 && arg_3 != arg_4 && arg_2 == arg_4 {
let rhs_inst_8 = pos.ins().bor(arg_4, arg_1[1]);
let rhs_inst_9 = pos.ins().bnot(rhs_inst_8);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1084(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == -50388993 {
if rhs_2 == 16809984 {
if rhs_1 == 6629298641523679231 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 6629298641506869247_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 16809984_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1085(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 1 {
if rhs_2 == 2 {
if rhs_1 == 128 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 132_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1086(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 308 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == 3 {
if rhs_3 == 2 {
if arg_1 != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 320_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1087(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == 7 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 3 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_5 == -8 {
if arg_3 != arg_2 && arg_3 != arg_4 && arg_2 == arg_4 {
let rhs_inst_8 = pos.ins().bor(arg_4, arg_1[1]);
let rhs_inst_9 = pos.ins().bnot(rhs_inst_8);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1088(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 128 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == 1 {
if rhs_3 == 2 {
if arg_3 != arg_1 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 132_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1089(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 1 {
if rhs_3 == 2 {
if rhs_2 == 1 {
if rhs_1 == 12 {
let rhs_inst_6 = pos.ins().imul_imm(arg_3, 4294967272_u64 as i64);
let rhs_inst_7 = pos.ins().iadd_imm(rhs_inst_6, 4294967259_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_7);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1090(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 308 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == 1 {
if rhs_3 == 2 {
if arg_1 != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 312_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1091(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == 6 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 7 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_5 == -8 {
if arg_3 == arg_4 && arg_3 != arg_2 && arg_4 != arg_2 {
let rhs_inst_8 = pos.ins().bor(arg_4, arg_1[0]);
let rhs_inst_9 = pos.ins().bnot(rhs_inst_8);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1092(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == 7 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 7 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_5 == -8 {
if arg_4 == arg_2 && arg_4 != arg_3 && arg_2 != arg_3 {
let rhs_inst_8 = pos.ins().bor(arg_4, arg_1[1]);
let rhs_inst_9 = pos.ins().bnot(rhs_inst_8);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1093(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 2 {
if rhs_1 == 128 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 124_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1094(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 336 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == -1 {
if rhs_1 == 9 {
if arg_2 != arg_3 {
let rhs_inst_7 = pos.ins().irsub_imm(arg_3, 4294966951_u64 as i64);
let rhs_inst_8 = pos.ins().isub(rhs_inst_7, arg_3);
pos.func.dfg.replace(inst).bnot(rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1095(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == 64 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 191 {
if arg_2 != arg_1[1] && arg_2 == arg_3 && arg_1[1] != arg_3 {
let rhs_inst_7 = pos.ins().iconst(I32, 4294967040_u64 as i64);
let rhs_inst_8 = pos.ins().bor_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().band_not(rhs_inst_8, arg_1[1]);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1096(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == 9223372036854775807 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 9223372036854775807 {
if arg_1 != arg_2 {
let rhs_inst_6 = pos.ins().bor(arg_2, arg_2);
pos.func.dfg.replace(inst).band_imm(rhs_inst_6, 9223372036854775807_u64 as i64);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1097(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 640 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == -1 {
if rhs_1 == 21 {
if arg_2 != arg_3 {
let rhs_inst_7 = pos.ins().irsub_imm(arg_3, 4294966635_u64 as i64);
let rhs_inst_8 = pos.ins().isub(rhs_inst_7, arg_3);
pos.func.dfg.replace(inst).bnot(rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1098(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == 1024 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 16 {
if arg_1 != arg_2[1] && arg_1 == arg_3 && arg_2[1] != arg_3 {
let rhs_inst_7 = pos.ins().iconst(I32, 4294966255_u64 as i64);
let rhs_inst_8 = pos.ins().bor_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().band_not(rhs_inst_8, arg_2[1]);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1099(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 255 {
if rhs_2 == 3 {
if rhs_1 == 2 {
if arg_0[0] != arg_3 {
let rhs_inst_7 = pos.ins().sshr_imm(arg_3, 1_u64 as i64);
let rhs_inst_8 = pos.ins().band_imm(rhs_inst_7, 124_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1100(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 324 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == -1 {
if rhs_1 == 12 {
if arg_2 != arg_3 {
let rhs_inst_7 = pos.ins().irsub_imm(arg_3, 4294966960_u64 as i64);
let rhs_inst_8 = pos.ins().isub(rhs_inst_7, arg_3);
pos.func.dfg.replace(inst).bnot(rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1101(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 1 {
if rhs_2 == 1 {
if rhs_1 == 2 {
if arg_3 != arg_0[0] {
let rhs_inst_7 = pos.ins().bxor_imm(arg_3, 4294967292_u64 as i64);
let rhs_inst_8 = pos.ins().isub(arg_3, rhs_inst_7);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1102(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 128 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == -1 {
if rhs_1 == 21 {
if arg_3 != arg_2 {
let rhs_inst_7 = pos.ins().irsub_imm(arg_3, 4294967147_u64 as i64);
let rhs_inst_8 = pos.ins().isub(rhs_inst_7, arg_3);
pos.func.dfg.replace(inst).bnot(rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1103(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 1 {
if rhs_3 == -3 {
if rhs_2 == 2 {
if rhs_1 == 15 {
let rhs_inst_6 = pos.ins().imul_imm(arg_3, 4294967288_u64 as i64);
let rhs_inst_7 = pos.ins().iadd_imm(rhs_inst_6, 4294967292_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_7);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1104(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 7 {
if rhs_3 == 7 {
if rhs_2 == -1 {
if rhs_1 == 2 {
let rhs_inst_6 = pos.ins().sshr_imm(arg_3, 5_u64 as i64);
let rhs_inst_7 = pos.ins().band_imm(rhs_inst_6, 28_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_7, 4294967292_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1105(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 308 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == -48 {
if rhs_3 == 2 {
if arg_1 != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 116_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1106(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == -1 {
if rhs_1 == 1 {
if arg_3 != arg_1[1] {
let rhs_inst_7 = pos.ins().bxor_not(arg_1[1], arg_3);
let rhs_inst_8 = pos.ins().bor_imm(rhs_inst_7, 4294967294_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1107(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -48 {
if rhs_2 == 2 {
if rhs_1 == 308 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 116_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1108(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 7 {
if rhs_3 == 7 {
if rhs_2 == 2 {
if rhs_1 == 263752 {
let rhs_inst_6 = pos.ins().sshr_imm(arg_3, 5_u64 as i64);
let rhs_inst_7 = pos.ins().band_imm(rhs_inst_6, 28_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_7, 263752_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1109(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 2 {
if rhs_2 == 1 {
if rhs_1 == 3 {
if arg_0[0] != arg_3 {
let rhs_inst_7 = pos.ins().bxor_imm(arg_3, 4294967288_u64 as i64);
let rhs_inst_8 = pos.ins().isub(arg_3, rhs_inst_7);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1110(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_1 == 1 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 1 {
if arg_3 != arg_1[0] && arg_3 != arg_2 && arg_1[0] != arg_2 {
let rhs_inst_8 = pos.ins().iadd(arg_2, arg_3);
let rhs_inst_9 = pos.ins().imul_imm(rhs_inst_8, 2_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_9);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1111(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_1 == 2 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 2 {
if arg_2 != arg_3 && arg_2 != arg_1[0] && arg_3 != arg_1[0] {
let rhs_inst_8 = pos.ins().iadd(arg_2, arg_3);
let rhs_inst_9 = pos.ins().imul_imm(rhs_inst_8, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_9);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1112(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 2 {
if rhs_1 == 1320 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 1316_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1113(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 172 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == 12 {
if rhs_3 == 12 {
if arg_1 != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 12_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 316_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1114(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_1 == 3 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 3 {
if arg_3 != arg_0[0] && arg_3 != arg_2 && arg_0[0] != arg_2 {
let rhs_inst_8 = pos.ins().iadd(arg_2, arg_3);
let rhs_inst_9 = pos.ins().imul_imm(rhs_inst_8, 8_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_9);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1115(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 2 {
if rhs_1 == 8512 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 8508_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1116(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 6 {
if rhs_2 == 7 {
if rhs_1 == 6 {
if arg_3 != arg_0[1] {
let rhs_inst_7 = pos.ins().iconst(I32, 4294966847_u64 as i64);
let rhs_inst_8 = pos.ins().bor_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().band_not(rhs_inst_8, arg_0[1]);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1117(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 5 {
if rhs_1 == 2 {
if arg_1[1] != arg_2[1] && arg_1[1] != arg_3 && arg_2[1] != arg_3 {
let rhs_inst_8 = pos.ins().iadd_imm(arg_3, 7_u64 as i64);
let rhs_inst_9 = pos.ins().iadd(arg_2[1], rhs_inst_8);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_9);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1118(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 6 {
if rhs_3 == 7 {
if rhs_2 == 2 {
if rhs_1 == 1541728 {
let rhs_inst_6 = pos.ins().sshr_imm(arg_3, 4_u64 as i64);
let rhs_inst_7 = pos.ins().band_imm(rhs_inst_6, 28_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_7, 1541728_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1119(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 18 {
if rhs_2 == 127 {
if rhs_1 == 2 {
if arg_3 != arg_0[0] {
let rhs_inst_7 = pos.ins().sshr_imm(arg_3, 16_u64 as i64);
let rhs_inst_8 = pos.ins().band_imm(rhs_inst_7, 508_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1120(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 3 {
if rhs_3 == 3 {
if rhs_2 == 2 {
if rhs_1 == 1550588 {
let rhs_inst_6 = pos.ins().sshr_imm(arg_3, 1_u64 as i64);
let rhs_inst_7 = pos.ins().band_imm(rhs_inst_6, 12_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_7, 1550588_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1121(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 3 {
if rhs_3 == 3 {
if rhs_2 == 2 {
if rhs_1 == 2564692 {
let rhs_inst_6 = pos.ins().sshr_imm(arg_3, 1_u64 as i64);
let rhs_inst_7 = pos.ins().band_imm(rhs_inst_6, 12_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_7, 2564692_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1122(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 6 {
if rhs_3 == 7 {
if rhs_2 == 2 {
if rhs_1 == 1548236 {
let rhs_inst_6 = pos.ins().sshr_imm(arg_3, 4_u64 as i64);
let rhs_inst_7 = pos.ins().band_imm(rhs_inst_6, 28_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_7, 1548236_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1123(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == 8192 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 4096 {
if arg_3 == arg_1 && arg_3 != arg_2[1] && arg_1 != arg_2[1] {
let rhs_inst_7 = pos.ins().iconst(I32, 4294955007_u64 as i64);
let rhs_inst_8 = pos.ins().bor_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().band_not(rhs_inst_8, arg_2[1]);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1124(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 6 {
if rhs_3 == 3 {
if rhs_2 == 2 {
if rhs_1 == 2564576 {
let rhs_inst_6 = pos.ins().sshr_imm(arg_3, 4_u64 as i64);
let rhs_inst_7 = pos.ins().band_imm(rhs_inst_6, 12_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_7, 2564576_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1125(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_1 == 4 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 4 {
if arg_1[0] != arg_2 && arg_1[0] != arg_3 && arg_2 != arg_3 {
let rhs_inst_8 = pos.ins().iadd(arg_2, arg_3);
let rhs_inst_9 = pos.ins().imul_imm(rhs_inst_8, 16_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_9);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1126(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 8 {
if rhs_2 == 4095 {
if rhs_1 == 2 {
if arg_0[0] != arg_3 {
let rhs_inst_7 = pos.ins().sshr_imm(arg_3, 6_u64 as i64);
let rhs_inst_8 = pos.ins().band_imm(rhs_inst_7, 16380_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1127(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_3 == 0 {
if rhs_2 == 2 {
if rhs_1 == 4 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4294967292_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1128(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 8 {
if rhs_3 == 15 {
if rhs_2 == 2 {
if rhs_1 == 2905072 {
let rhs_inst_6 = pos.ins().sshr_imm(arg_3, 6_u64 as i64);
let rhs_inst_7 = pos.ins().band_imm(rhs_inst_6, 60_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_7, 2905072_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1129(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 5 {
if rhs_3 == 1023 {
if rhs_2 == 2 {
if rhs_1 == 21776 {
let rhs_inst_6 = pos.ins().sshr_imm(arg_3, 3_u64 as i64);
let rhs_inst_7 = pos.ins().band_imm(rhs_inst_6, 4092_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_7, 21776_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1130(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 17 {
if rhs_2 == 255 {
if rhs_1 == 2 {
if arg_0[0] != arg_3 {
let rhs_inst_7 = pos.ins().sshr_imm(arg_3, 15_u64 as i64);
let rhs_inst_8 = pos.ins().band_imm(rhs_inst_7, 1020_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1131(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 2147483647 {
if rhs_2 == 3 {
if rhs_1 == 4 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 8_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1132(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 8 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_4 == 0 {
if rhs_3 == 2 {
if arg_3 != arg_1 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4294967292_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 8_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1133(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 4 {
if rhs_2 == 4 {
if rhs_1 == 8 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().band_imm(arg_3, 4294967280_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 8_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1134(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == 31808 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 32768 {
if arg_2 == arg_3 && arg_2 != arg_1[1] && arg_3 != arg_1[1] {
let rhs_inst_7 = pos.ins().iconst(I32, 4294902719_u64 as i64);
let rhs_inst_8 = pos.ins().bor_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().band_not(rhs_inst_8, arg_1[1]);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1135(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 3 {
if rhs_1 == 4 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 8_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967292_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1136(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == -4 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_4 == 2 {
if rhs_3 == 2 {
if arg_1 != arg_3 {
let rhs_inst_7 = pos.ins().bor_imm(arg_3, 3_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967289_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1137(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 2 {
if rhs_2 == 1 {
if rhs_1 == 2 {
if arg_3 != arg_0[0] {
let rhs_inst_7 = pos.ins().band_imm(arg_3, 4294967292_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1138(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == 32766 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 32768 {
if arg_2 != arg_1[0] && arg_2 == arg_3 && arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().iconst(I32, 4294901761_u64 as i64);
let rhs_inst_8 = pos.ins().bor_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().band_not(rhs_inst_8, arg_3);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1139(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 13 {
if rhs_3 == 7 {
if rhs_2 == 2 {
if rhs_1 == 2589872 {
let rhs_inst_6 = pos.ins().sshr_imm(arg_3, 11_u64 as i64);
let rhs_inst_7 = pos.ins().band_imm(rhs_inst_6, 28_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_7, 2589872_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1140(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 4 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_4 == 2 {
if rhs_3 == 2 {
if arg_1 != arg_3 {
let rhs_inst_7 = pos.ins().band_imm(arg_3, 4294967292_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1141(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 5 {
if rhs_2 == 5 {
if rhs_1 == 8 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().band_imm(arg_3, 4294967264_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 8_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1142(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 127 {
if rhs_1 == 2 {
if arg_3 != arg_0[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 508_u64 as i64);
let rhs_inst_8 = pos.ins().iconst(I32, 508_u64 as i64);
let rhs_inst_9 = pos.ins().band_not(rhs_inst_8, rhs_inst_7);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_9);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1143(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 18 {
if rhs_3 == 31 {
if rhs_2 == -1 {
if rhs_1 == 2 {
let rhs_inst_6 = pos.ins().sshr_imm(arg_3, 16_u64 as i64);
let rhs_inst_7 = pos.ins().band_imm(rhs_inst_6, 124_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_7, 4294967292_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1144(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 13 {
if rhs_3 == 7 {
if rhs_2 == 2 {
if rhs_1 == 2589832 {
let rhs_inst_6 = pos.ins().sshr_imm(arg_3, 11_u64 as i64);
let rhs_inst_7 = pos.ins().band_imm(rhs_inst_6, 28_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_7, 2589832_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1145(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 2147483647 {
if rhs_2 == 5 {
if rhs_1 == 8 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 32_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 8_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1146(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == 32766 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 32768 {
if arg_1[1] != arg_3 && arg_1[1] != arg_2 && arg_3 == arg_2 {
let rhs_inst_7 = pos.ins().iconst(I32, 4294901761_u64 as i64);
let rhs_inst_8 = pos.ins().bor_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().band_not(rhs_inst_8, arg_1[1]);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1147(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_3 == 0 {
if rhs_2 == 12 {
if rhs_1 == 4 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4294967284_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1148(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == -2129920 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 32767 {
if arg_2 != arg_1[1] && arg_2 == arg_3 && arg_1[1] != arg_3 {
let rhs_inst_7 = pos.ins().iconst(I32, 2097152_u64 as i64);
let rhs_inst_8 = pos.ins().bor_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().band_not(rhs_inst_8, arg_1[1]);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1149(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 13 {
if rhs_3 == 7 {
if rhs_2 == 2 {
if rhs_1 == 2591020 {
let rhs_inst_6 = pos.ins().sshr_imm(arg_3, 11_u64 as i64);
let rhs_inst_7 = pos.ins().band_imm(rhs_inst_6, 28_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_7, 2591020_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1150(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 1 {
if rhs_2 == 1 {
if rhs_1 == 2 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().band_imm(arg_3, 4294967294_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 2_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1151(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 9 {
if rhs_3 == 8191 {
if rhs_2 == -27 {
if rhs_1 == 9 {
let rhs_inst_6 = pos.ins().iconst(I32, 4193792_u64 as i64);
let rhs_inst_7 = pos.ins().band_not(rhs_inst_6, arg_3);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4290787327_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1152(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 2147483647 {
if rhs_2 == 12 {
if rhs_1 == 8 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 12_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 8_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1153(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 3 {
if rhs_1 == -8 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 8_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967280_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1154(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 2 {
if rhs_1 == -4 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967288_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1155(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 16 {
if rhs_3 == -1 {
if rhs_2 == 1 {
if rhs_1 == 2743875 {
let rhs_inst_6 = pos.ins().ishl_imm(arg_3, 15_u64 as i64);
let rhs_inst_7 = pos.ins().sshr_imm(rhs_inst_6, 31_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_7, 2743876_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1156(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 16 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_4 == 1073741823 {
if rhs_3 == 2 {
if arg_1 != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 16_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1157(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 5 {
if rhs_1 == 8 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 32_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967272_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1158(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 4 {
if rhs_1 == 4 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 16_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967284_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1159(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_2 == 2 {
if rhs_1 == 2 {
if arg_1[0] != arg_1[1] && arg_1[0] != arg_3 && arg_1[1] != arg_3 {
let rhs_inst_8 = pos.ins().iconst(I32, 3_u64 as i64);
let rhs_inst_9 = pos.ins().band_not(arg_3, rhs_inst_8);
let rhs_inst_10 = pos.ins().iadd(arg_1[1], rhs_inst_9);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_10);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1160(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 2147483647 {
if rhs_2 == 24 {
if rhs_1 == 8 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 24_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 8_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1161(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 4 {
if rhs_1 == 8 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 16_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967288_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1162(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 30 {
if rhs_2 == -1 {
if rhs_1 == 1073741822 {
if arg_3 == arg_0[0] {
let rhs_inst_6 = pos.ins().iconst(I32, 2147483648_u64 as i64);
let rhs_inst_7 = pos.ins().bor_not(rhs_inst_6, arg_3);
let rhs_inst_8 = pos.ins().sshr_imm(rhs_inst_7, 30_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1163(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 11 {
if rhs_3 == -1 {
if rhs_2 == 1 {
if rhs_1 == 2743869 {
let rhs_inst_6 = pos.ins().ishl_imm(arg_3, 20_u64 as i64);
let rhs_inst_7 = pos.ins().sshr_imm(rhs_inst_6, 31_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_7, 2743870_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1164(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 2147483647 {
if rhs_2 == 40 {
if rhs_1 == 8 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 40_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 8_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1165(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_3 == 0 {
if rhs_2 == 2 {
if rhs_1 == 12 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4294967292_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 12_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1166(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == 1024 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 10 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_5 == -1025 {
if arg_3 != arg_4 && arg_3 != arg_2 && arg_4 == arg_2 {
let rhs_inst_8 = pos.ins().bor(arg_4, arg_1[1]);
let rhs_inst_9 = pos.ins().bnot(rhs_inst_8);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1167(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 17 {
if rhs_3 == 63 {
if rhs_2 == -10 {
if rhs_1 == 2 {
let rhs_inst_6 = pos.ins().sshr_imm(arg_3, 15_u64 as i64);
let rhs_inst_7 = pos.ins().band_imm(rhs_inst_6, 252_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_7, 4294967256_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1168(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 4 {
if rhs_2 == 1 {
if rhs_1 == 4 {
if arg_0[0] != arg_3 {
let rhs_inst_7 = pos.ins().band_imm(arg_3, 4294967280_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 16_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1169(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 2147483647 {
if rhs_2 == 3 {
if rhs_1 == 28 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 8_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 28_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1170(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 1 {
if rhs_2 == -1 {
if rhs_1 == 3 {
if arg_3 != arg_0[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 16_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967288_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1171(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 1073741823 {
if rhs_2 == 2 {
if rhs_1 == 16 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 16_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1172(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 13 {
if rhs_3 == -1 {
if rhs_2 == 1 {
if rhs_1 == 2743871 {
let rhs_inst_6 = pos.ins().ishl_imm(arg_3, 18_u64 as i64);
let rhs_inst_7 = pos.ins().sshr_imm(rhs_inst_6, 31_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_7, 2743872_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1173(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 1 {
if rhs_2 == 32767 {
if rhs_1 == 20 {
if arg_0[0] != arg_3 {
let rhs_inst_7 = pos.ins().band_imm(arg_3, 65534_u64 as i64);
let rhs_inst_8 = pos.ins().imul_imm(rhs_inst_7, 10_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1174(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 5 {
if rhs_2 == 5 {
if rhs_1 == 16 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().band_imm(arg_3, 4294967264_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 16_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1175(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 5 {
if rhs_2 == 5 {
if rhs_1 == 24 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().band_imm(arg_3, 4294967264_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 24_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1176(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_3 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_3[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_1 == 2 {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 2 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_5 == 2 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_7 = arg;
let rhs_7 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_7 == 2 {
if arg_6 == arg_7 && arg_6 == arg_5 && arg_6 == arg_4 && arg_6 != arg_3[0] && arg_7 == arg_5 && arg_7 == arg_4 && arg_7 != arg_3[0] && arg_5 == arg_4 && arg_5 != arg_3[0] && arg_4 != arg_3[0] {
let rhs_inst_8 = pos.ins().imul_imm(arg_7, 15_u64 as i64);
let rhs_inst_9 = pos.ins().iadd(arg_7, rhs_inst_8);
pos.func.dfg.replace(inst).iadd(arg_7, rhs_inst_9);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1177(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 4 {
if rhs_1 == -4 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 16_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967276_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1178(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 4 {
if rhs_1 == -8 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 16_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967272_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1179(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 4 {
if rhs_2 == 4 {
if rhs_1 == 16 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().band_imm(arg_3, 4294967280_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 16_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1180(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 12 {
if rhs_3 == 63 {
if rhs_2 == 2 {
if rhs_1 == 2558532 {
let rhs_inst_6 = pos.ins().sshr_imm(arg_3, 10_u64 as i64);
let rhs_inst_7 = pos.ins().band_imm(rhs_inst_6, 252_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_7, 2558532_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1181(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 12 {
if rhs_1 == 8 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 12_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967292_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1182(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 17 {
if rhs_3 == 255 {
if rhs_2 == 2 {
if rhs_1 == -4 {
let rhs_inst_6 = pos.ins().sshr_imm(arg_3, 15_u64 as i64);
let rhs_inst_7 = pos.ins().band_imm(rhs_inst_6, 1020_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_7, 4294967292_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1183(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 12 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_4 == 0 {
if rhs_3 == 12 {
if arg_1 != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4294967284_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 12_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1184(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_3 == 0 {
if rhs_2 == 12 {
if rhs_1 == 12 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4294967284_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 12_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1185(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 15 {
if rhs_2 == -8 {
if rhs_1 == 8 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_3, 23_u64 as i64);
let rhs_inst_8 = pos.ins().band_imm(rhs_inst_7, 4294967288_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1186(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -48 {
if rhs_2 == 2 {
if rhs_1 == 72 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967176_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1187(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 5 {
if rhs_2 == 5 {
if rhs_1 == 32 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().band_imm(arg_3, 4294967264_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 32_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1188(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 5 {
if rhs_1 == 20 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 32_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967284_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1189(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -48 {
if rhs_2 == 2 {
if rhs_1 == 32 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967136_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1190(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 5 {
if rhs_1 == 24 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 32_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967288_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1191(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 4 {
if rhs_2 == 4 {
if rhs_1 == 12 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().band_imm(arg_3, 4294967280_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 12_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1192(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 65535 {
if rhs_2 == 3 {
if rhs_1 == 8188 {
if arg_3 != arg_0[0] {
let rhs_inst_7 = pos.ins().sshr_imm(arg_3, 3_u64 as i64);
let rhs_inst_8 = pos.ins().band_imm(rhs_inst_7, 8188_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1193(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 12 {
if rhs_1 == 4 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 12_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967288_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1194(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 12 {
if rhs_3 == 63 {
if rhs_2 == 2 {
if rhs_1 == 2590988 {
let rhs_inst_6 = pos.ins().sshr_imm(arg_3, 10_u64 as i64);
let rhs_inst_7 = pos.ins().band_imm(rhs_inst_6, 252_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_7, 2590988_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1195(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -48 {
if rhs_2 == 3 {
if rhs_1 == -48 {
if arg_3 != arg_1[1] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 8_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294966864_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1196(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 24 {
if rhs_1 == 12 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 24_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967284_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1197(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 16 {
if rhs_2 == 32767 {
if rhs_1 == 2 {
if arg_0[0] != arg_3 {
let rhs_inst_7 = pos.ins().sshr_imm(arg_3, 14_u64 as i64);
let rhs_inst_8 = pos.ins().band_imm(rhs_inst_7, 131068_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1198(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 76 {
if rhs_1 == 72 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 76_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967292_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1199(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 2147483647 {
if rhs_2 == 28 {
if rhs_1 == 16 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 28_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 16_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1200(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 2147483647 {
if rhs_2 == 40 {
if rhs_1 == 24 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 40_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 24_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1201(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 48 {
if rhs_1 == 24 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 48_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967272_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1202(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 76 {
if rhs_1 == 12 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 76_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967232_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1203(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 60 {
if rhs_1 == 20 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 60_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967256_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1204(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 56 {
if rhs_1 == 20 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 56_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967260_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1205(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 48 {
if rhs_1 == 20 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 48_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967268_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1206(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 28 {
if rhs_1 == 16 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 28_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967284_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1207(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 48 {
if rhs_1 == 32 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 48_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967280_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1208(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 2147483647 {
if rhs_2 == 40 {
if rhs_1 == 32 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 40_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 32_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1209(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == -64 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_5 == 63 {
if rhs_4 == 4 {
if rhs_1 == 8 {
if arg_4 == arg_2 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 15_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 8_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_4, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1210(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == -64 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_5 == 63 {
if rhs_4 == 3 {
if rhs_1 == 4 {
if arg_2 == arg_4 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 7_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_4, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1211(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 44 {
if rhs_1 == 12 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 44_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967264_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1212(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 72 {
if rhs_1 == 44 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 72_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967268_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1213(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 2147483647 {
if rhs_2 == 24 {
if rhs_1 == 16 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 24_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 16_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1214(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 16 {
if rhs_2 == 32767 {
if rhs_1 == 16 {
if arg_0[1] != arg_3 {
let rhs_inst_7 = pos.ins().iconst(I32, 2147549183_u64 as i64);
let rhs_inst_8 = pos.ins().bor_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().band_not(rhs_inst_8, arg_0[1]);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1215(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 92 {
if rhs_1 == 16 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 92_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967220_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1216(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 20 {
if rhs_1 == 12 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 20_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967288_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1217(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_3 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_3[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_4) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_5 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_5[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_6) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_7 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_5 == 255 {
if rhs_4 == 1 {
match pos.func.dfg.value_def(arg_5[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_8 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_8 == 255 {
if rhs_3 == 2 {
match pos.func.dfg.value_def(arg_3[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_9 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_9[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_10 = arg;
let rhs_11 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_10) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_11 = arg;
let rhs_12 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_12 == 255 {
if rhs_11 == 1 {
match pos.func.dfg.value_def(arg_9[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_12 = arg;
let rhs_15 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_15 == 255 {
if rhs_2 == 4 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_13 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_13[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_14 = arg;
let rhs_18 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_14) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_15 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_15[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_16 = arg;
let rhs_19 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_16) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_17 = arg;
let rhs_20 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_20 == 255 {
if rhs_19 == 1 {
match pos.func.dfg.value_def(arg_15[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_18 = arg;
let rhs_23 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_23 == 255 {
if rhs_18 == 2 {
match pos.func.dfg.value_def(arg_13[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_19 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_19[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_20 = arg;
let rhs_26 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_20) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_21 = arg;
let rhs_27 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_27 == 255 {
if rhs_26 == 1 {
match pos.func.dfg.value_def(arg_19[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_22 = arg;
let rhs_30 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_30 == 255 {
if rhs_1 == 8 {
if arg_18 == arg_22 && arg_18 == arg_17 && arg_18 == arg_8 && arg_18 == arg_21 && arg_18 == arg_12 && arg_18 == arg_11 && arg_18 == arg_7 && arg_22 == arg_17 && arg_22 == arg_8 && arg_22 == arg_21 && arg_22 == arg_12 && arg_22 == arg_11 && arg_22 == arg_7 && arg_17 == arg_8 && arg_17 == arg_21 && arg_17 == arg_12 && arg_17 == arg_11 && arg_17 == arg_7 && arg_8 == arg_21 && arg_8 == arg_12 && arg_8 == arg_11 && arg_8 == arg_7 && arg_21 == arg_12 && arg_21 == arg_11 && arg_21 == arg_7 && arg_12 == arg_11 && arg_12 == arg_7 && arg_11 == arg_7 {
pos.func.dfg.replace(inst).iconst(I64, 0_u64 as i64); 
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1218(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 60 {
if rhs_1 == 48 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 60_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967284_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1219(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 2147483647 {
if rhs_2 == 12 {
if rhs_1 == 11 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 12_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 11_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1220(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 76 {
if rhs_1 == 17 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 76_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967237_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1221(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 2147483647 {
if rhs_2 == 28 {
if rhs_1 == 20 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 28_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 20_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1222(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -35 {
if rhs_2 == 20 {
if rhs_1 == 4 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 20_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294966600_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1223(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 2147483647 {
if rhs_2 == 28 {
if rhs_1 == 24 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 28_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 24_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1224(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 92 {
if rhs_1 == 28 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 92_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967232_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1225(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 2147483647 {
if rhs_2 == 40 {
if rhs_1 == 16 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 40_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 16_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1226(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 24 {
if rhs_1 == 16 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 24_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967288_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1227(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 100 {
if rhs_1 == 8 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 100_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967204_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1228(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 4 {
if rhs_2 == 4 {
if rhs_1 == 0 {
if arg_0[0] != arg_3 {
let rhs_inst_7 = pos.ins().iconst(I32, 4294967280_u64 as i64);
let rhs_inst_8 = pos.ins().band_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().iadd_imm(rhs_inst_8, 16_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_9);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1229(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -16 {
if rhs_2 == 1 {
if rhs_1 == 1 {
if arg_0[1] != arg_3 {
let rhs_inst_7 = pos.ins().iconst(I32, 4294967294_u64 as i64);
let rhs_inst_8 = pos.ins().band_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().iadd_imm(rhs_inst_8, 18_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_0[1], rhs_inst_9);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1230(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 2 {
if rhs_2 == 2 {
if rhs_1 == -8 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().iconst(I32, 3_u64 as i64);
let rhs_inst_8 = pos.ins().band_not(arg_3, rhs_inst_7);
let rhs_inst_9 = pos.ins().iadd_imm(rhs_inst_8, 4294967288_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_9);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1231(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == 1048576 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 2097152 {
if arg_1[1] != arg_3 && arg_1[1] != arg_2 && arg_3 == arg_2 {
let rhs_inst_7 = pos.ins().iconst(I32, 4291821567_u64 as i64);
let rhs_inst_8 = pos.ins().bor_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().band_not(rhs_inst_8, arg_1[1]);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1232(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 2 {
if rhs_2 == 2 {
if rhs_1 == -4 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().iconst(I32, 3_u64 as i64);
let rhs_inst_8 = pos.ins().band_not(arg_3, rhs_inst_7);
let rhs_inst_9 = pos.ins().iadd_imm(rhs_inst_8, 4294967292_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_9);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1233(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 112 {
if rhs_1 == 8 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 112_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967192_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1234(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 112 {
if rhs_1 == 92 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 112_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967276_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1235(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 1 {
if rhs_3 == -4 {
if rhs_2 == -4 {
if rhs_1 == 898288 {
let rhs_inst_6 = pos.ins().bxor_imm(arg_3, 2147483649_u64 as i64);
let rhs_inst_7 = pos.ins().iadd_imm(rhs_inst_6, 2148381931_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1236(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_5 == 1 {
if rhs_4 == -3 {
if rhs_3 == 2 {
if rhs_2 == 15 {
if rhs_1 == -16 {
let rhs_inst_7 = pos.ins().imul_imm(arg_4, 8_u64 as i64);
let rhs_inst_8 = pos.ins().iconst(I32, 8_u64 as i64);
let rhs_inst_9 = pos.ins().bor_not(rhs_inst_8, rhs_inst_7);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1237(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_4) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_6 == 9 {
if rhs_5 == 8191 {
if rhs_4 == -27 {
if rhs_3 == 9 {
if rhs_2 == 13824 {
if rhs_1 == 4193792 {
pos.func.dfg.replace(inst).band_imm(arg_5, 4193792_u64 as i64);

}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1238(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -48 {
if rhs_2 == 12 {
if rhs_1 == 188 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 12_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294966908_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1239(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 112 {
if rhs_1 == 96 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 112_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967280_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1240(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 104 {
if rhs_1 == 36 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 104_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967228_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1241(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 24 {
if rhs_2 == -1 {
if rhs_1 == 1 {
if arg_0[1] != arg_3 {
let rhs_inst_7 = pos.ins().iconst(I32, 19996672_u64 as i64);
let rhs_inst_8 = pos.ins().band_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().sshr_imm(rhs_inst_8, 24_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_0[1], rhs_inst_9);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1242(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -48 {
if rhs_2 == 12 {
if rhs_1 == 192 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 12_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294966912_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1243(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -48 {
if rhs_2 == 12 {
if rhs_1 == 199 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 12_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294966919_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1244(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 7 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_4 == -8 {
if rhs_1 == -16 {
if arg_2[1] != arg_4 && arg_2[1] != arg_3 && arg_4 == arg_3 {
let rhs_inst_8 = pos.ins().bor(arg_4, arg_2[1]);
let rhs_inst_9 = pos.ins().iconst(I32, 15_u64 as i64);
let rhs_inst_10 = pos.ins().bor_not(rhs_inst_9, rhs_inst_8);
pos.func.dfg.replace(inst).bnot(rhs_inst_10);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1245(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_4 == 2031616 {
if rhs_3 == 16 {
if rhs_2 == -1 {
if rhs_1 == 6 {
let rhs_inst_6 = pos.ins().sshr_imm(arg_3, 10_u64 as i64);
let rhs_inst_7 = pos.ins().band_imm(rhs_inst_6, 1984_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_7, 4294967232_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1246(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 4 {
if rhs_1 == 128 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_4) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_6 == 4 {
if rhs_5 == 256 {
if arg_3 == arg_1[1] && arg_3 == arg_5 && arg_1[1] == arg_5 {
let rhs_inst_7 = pos.ins().iconst(I32, 4294966896_u64 as i64);
let rhs_inst_8 = pos.ins().bor_not(rhs_inst_7, arg_4);
let rhs_inst_9 = pos.ins().band_not(rhs_inst_8, arg_5);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1247(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 216 {
if rhs_1 == 164 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 216_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967244_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1248(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 1 {
if rhs_3 == 134217727 {
if rhs_2 == 1 {
if rhs_1 == -1 {
let rhs_inst_6 = pos.ins().iconst(I32, 268435454_u64 as i64);
let rhs_inst_7 = pos.ins().band_not(rhs_inst_6, arg_3);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4026531842_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1249(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 216 {
if rhs_1 == 128 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 216_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967208_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1250(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 1 {
if rhs_3 == 134217727 {
if rhs_2 == -2 {
if rhs_1 == 1 {
let rhs_inst_6 = pos.ins().iconst(I32, 268435454_u64 as i64);
let rhs_inst_7 = pos.ins().band_not(rhs_inst_6, arg_3);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4026531845_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1251(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == -1 {
if rhs_2 == 112 {
if rhs_1 == 104 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 112_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967288_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1252(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 4 {
if rhs_1 == 256 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_3 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_3[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_4) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_6 == 4 {
if rhs_5 == 128 {
if arg_5 == arg_2 && arg_5 == arg_3[1] && arg_2 == arg_3[1] {
let rhs_inst_7 = pos.ins().iconst(I32, 4294966896_u64 as i64);
let rhs_inst_8 = pos.ins().bor_not(rhs_inst_7, arg_4);
let rhs_inst_9 = pos.ins().band_not(rhs_inst_8, arg_5);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1253(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_2 == 0 {
if rhs_1 == 12 {
if arg_3 != arg_1[0] && arg_3 != arg_1[1] && arg_1[0] != arg_1[1] {
let rhs_inst_8 = pos.ins().imul_imm(arg_3, 4294967284_u64 as i64);
let rhs_inst_9 = pos.ins().iadd(arg_1[1], rhs_inst_8);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_9);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1254(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 1 {
if rhs_3 == 134217727 {
if rhs_2 == 2 {
if rhs_1 == -4 {
let rhs_inst_6 = pos.ins().bxor_imm(arg_3, 4026531841_u64 as i64);
let rhs_inst_7 = pos.ins().iadd_imm(rhs_inst_6, 268435451_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_7);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1255(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_2 == 4 {
if rhs_1 == 4 {
if arg_1[0] != arg_3 && arg_1[0] != arg_0[1] && arg_3 != arg_0[1] {
let rhs_inst_8 = pos.ins().band_imm(arg_3, 4294967280_u64 as i64);
let rhs_inst_9 = pos.ins().iadd(arg_3, rhs_inst_8);
pos.func.dfg.replace(inst).iadd(arg_0[1], rhs_inst_9);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1256(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == -64 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_5 == 63 {
if rhs_4 == 2 {
if rhs_1 == 128 {
if arg_2 == arg_4 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 3_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 128_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_4, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1257(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_4 == 0 {
if rhs_3 == 3 {
if rhs_2 == 4 {
if rhs_1 == 24 {
if arg_2[0] == arg_4 {
let rhs_inst_7 = pos.ins().iconst(I32, 4_u64 as i64);
let rhs_inst_8 = pos.ins().band_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().iadd_imm(rhs_inst_8, 4294967267_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1258(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 2 {
if rhs_3 == -4 {
if rhs_2 == 2 {
if rhs_1 == 2 {
if arg_0[0] != arg_4 {
let rhs_inst_8 = pos.ins().irsub_imm(arg_3, 3_u64 as i64);
let rhs_inst_9 = pos.ins().isub(rhs_inst_8, arg_4);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1259(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == -8 {
if rhs_3 == 3 {
if rhs_2 == -1 {
if rhs_1 == 3 {
if arg_0[0] != arg_4 {
let rhs_inst_8 = pos.ins().bor_imm(arg_3, 7_u64 as i64);
let rhs_inst_9 = pos.ins().isub(rhs_inst_8, arg_4);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1260(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == -4 {
if rhs_3 == 2 {
if rhs_2 == -1 {
if rhs_1 == 2 {
if arg_0[0] != arg_4 {
let rhs_inst_8 = pos.ins().bor_imm(arg_3, 3_u64 as i64);
let rhs_inst_9 = pos.ins().isub(rhs_inst_8, arg_4);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1261(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == 128 {
if rhs_3 == 4 {
if rhs_2 == 4080 {
if rhs_1 == 2758048 {
let rhs_inst_6 = pos.ins().imul_imm(arg_3, 16777216_u64 as i64);
let rhs_inst_7 = pos.ins().sshr_imm(rhs_inst_6, 20_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_7, 2760096_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1262(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_2 == 2904321 {
if rhs_1 == 1 {
if arg_3 != arg_0[1] && arg_3 != arg_2[1] && arg_0[1] != arg_2[1] {
let rhs_inst_8 = pos.ins().iadd_imm(arg_3, 2904322_u64 as i64);
let rhs_inst_9 = pos.ins().iadd(arg_2[1], rhs_inst_8);
pos.func.dfg.replace(inst).iadd(arg_0[1], rhs_inst_9);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1263(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 2147483647 {
if rhs_2 == 3 {
if rhs_1 == -4 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 8_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967292_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1264(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_3 == -2 {
if rhs_2 == 20 {
if rhs_1 == 8 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4294967276_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967264_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1265(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_3 == -2 {
if rhs_2 == 1 {
if rhs_1 == 20 {
if arg_0[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4294967276_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967276_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1266(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 4 {
if rhs_3 == -32 {
if rhs_2 == 4 {
if rhs_1 == 4 {
if arg_0[0] != arg_4 {
let rhs_inst_8 = pos.ins().irsub_imm(arg_3, 31_u64 as i64);
let rhs_inst_9 = pos.ins().isub(rhs_inst_8, arg_4);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1267(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 16 {
if rhs_2 == 65535 {
if rhs_1 == 2 {
if arg_2[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 1844707332_u64 as i64);
let rhs_inst_8 = pos.ins().iconst(I32, 4294705152_u64 as i64);
let rhs_inst_9 = pos.ins().bor_not(rhs_inst_8, rhs_inst_7);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1268(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 2 {
if rhs_2 == -1 {
if rhs_1 == 2 {
if arg_3 != arg_0[0] {
let rhs_inst_7 = pos.ins().band_imm(arg_3, 4294967292_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967292_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1269(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 2 {
if rhs_2 == -4 {
if rhs_1 == 2 {
if arg_0[0] != arg_3 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_3, 2147483647_u64 as i64);
let rhs_inst_8 = pos.ins().band_imm(rhs_inst_7, 1073741823_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1270(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_3 == -1 {
if rhs_2 == 56 {
if rhs_1 == 4 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4294967240_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967244_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1271(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 3 {
if rhs_2 == -1 {
if rhs_1 == 3 {
if arg_3 != arg_0[0] {
let rhs_inst_7 = pos.ins().band_imm(arg_3, 4294967288_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967288_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1272(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 1 {
if rhs_2 == 2 {
if rhs_1 == 4 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().iconst(I32, 1073741822_u64 as i64);
let rhs_inst_8 = pos.ins().bor_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().imul_imm(rhs_inst_8, 4294967292_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_9);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1273(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_3 == -2 {
if rhs_2 == 20 {
if rhs_1 == 12 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4294967276_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967268_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1274(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_3 == 1 {
if rhs_2 == 12 {
if rhs_1 == -24 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4294967284_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967284_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1275(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_3 == 0 {
if rhs_2 == 12 {
if rhs_1 == -12 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4294967284_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967284_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1276(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_3 == -1 {
if rhs_2 == 56 {
if rhs_1 == 32 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4294967240_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967272_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1277(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_3 == -1 {
if rhs_2 == 56 {
if rhs_1 == 10 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4294967240_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967250_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1278(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == -12 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_4 == 0 {
if rhs_3 == 12 {
if arg_1 != arg_3 {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 4294967284_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967284_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1279(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 2 {
if rhs_1 == 8 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_6 == 1 {
if rhs_5 == 2 {
if arg_4 == arg_2 {
let rhs_inst_7 = pos.ins().iconst(I32, 42599050_u64 as i64);
let rhs_inst_8 = pos.ins().sshr(rhs_inst_7, arg_1);
let rhs_inst_9 = pos.ins().bor_imm(rhs_inst_8, 4294967285_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1280(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 1 {
if rhs_2 == 3 {
if rhs_1 == 8 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().iconst(I32, 1073741822_u64 as i64);
let rhs_inst_8 = pos.ins().band_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().imul_imm(rhs_inst_8, 2147483644_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_9);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1281(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 2 {
if rhs_2 == 1 {
if rhs_1 == 3 {
if arg_0[0] != arg_3 {
let rhs_inst_7 = pos.ins().iconst(I32, 4294967292_u64 as i64);
let rhs_inst_8 = pos.ins().band_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().imul_imm(rhs_inst_8, 1073741822_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_9);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1282(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 3 {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_4) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_6 == 3 {
if rhs_5 == 31 {
if rhs_2 == 1 {
if rhs_1 == 31 {
if arg_3 == arg_5 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_4, 3221225474_u64 as i64);
let rhs_inst_8 = pos.ins().sshr_imm(rhs_inst_7, 30_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_8);

}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1283(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_3 == 4 {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_4) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_6 == 4 {
if rhs_5 == 31 {
if rhs_2 == 1 {
if rhs_1 == 31 {
if arg_3 == arg_5 {
let rhs_inst_7 = pos.ins().iadd_imm(arg_4, 3758096386_u64 as i64);
let rhs_inst_8 = pos.ins().sshr_imm(rhs_inst_7, 29_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_8);

}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1284(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 1 {
if rhs_3 == 134217727 {
if rhs_2 == 10 {
if rhs_1 == -10 {
let rhs_inst_6 = pos.ins().band_imm(arg_3, 268435454_u64 as i64);
let rhs_inst_7 = pos.ins().imul_imm(rhs_inst_6, 5_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_7, 4294967286_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1285(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 1 {
if rhs_2 == 4 {
if rhs_1 == 16 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().iconst(I32, 536870910_u64 as i64);
let rhs_inst_8 = pos.ins().band_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().imul_imm(rhs_inst_8, 2147483640_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_9);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1286(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_4 == 1 {
if rhs_3 == 0 {
if rhs_2 == -4 {
if rhs_1 == 12 {
if arg_2[1] == arg_4 {
let rhs_inst_7 = pos.ins().imul(arg_4, arg_3);
let rhs_inst_8 = pos.ins().band_imm(rhs_inst_7, 4294967292_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_8, 12_u64 as i64);

}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1287(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 1 {
if rhs_2 == 6 {
if rhs_1 == 6 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().iconst(I32, 4294967294_u64 as i64);
let rhs_inst_8 = pos.ins().band_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().imul_imm(rhs_inst_8, 2147483645_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_9);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1288(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 1 {
if rhs_3 == 1 {
if rhs_2 == 2 {
if rhs_1 == 4 {
if arg_1[0] != arg_4 {
let rhs_inst_8 = pos.ins().imul_imm(arg_4, 8_u64 as i64);
let rhs_inst_9 = pos.ins().iadd_imm(rhs_inst_8, 8_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_4, rhs_inst_9);

}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1289(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 1 {
if rhs_2 == 2 {
if rhs_1 == 4 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().iconst(I32, 2147483646_u64 as i64);
let rhs_inst_8 = pos.ins().band_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().imul_imm(rhs_inst_8, 2147483646_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_9);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1290(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 1073741823 {
if rhs_2 == 80 {
if rhs_1 == -80 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().imul_imm(arg_3, 80_u64 as i64);
let rhs_inst_8 = pos.ins().iadd_imm(rhs_inst_7, 4294967216_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1291(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 1 {
if rhs_2 == 5 {
if rhs_1 == 32 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().iconst(I32, 268435454_u64 as i64);
let rhs_inst_8 = pos.ins().band_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().imul_imm(rhs_inst_8, 4294967280_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_9);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1292(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 1 {
if rhs_3 == 134217727 {
if rhs_2 == 24 {
if rhs_1 == -24 {
let rhs_inst_6 = pos.ins().band_imm(arg_3, 268435454_u64 as i64);
let rhs_inst_7 = pos.ins().imul_imm(rhs_inst_6, 12_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_7, 4294967272_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1293(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 1 {
if rhs_1 == 2 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_6 == 1 {
if rhs_5 == 1 {
if arg_4 == arg_2 {
let rhs_inst_7 = pos.ins().iconst(I32, 656877351_u64 as i64);
let rhs_inst_8 = pos.ins().sshr(rhs_inst_7, arg_1);
let rhs_inst_9 = pos.ins().bor_imm(rhs_inst_8, 4294967292_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1294(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 32767 {
if rhs_1 == -1 {
if arg_3 != arg_1[0] && arg_3 != arg_1[1] && arg_1[0] != arg_1[1] {
let rhs_inst_8 = pos.ins().iconst(I32, 4294934528_u64 as i64);
let rhs_inst_9 = pos.ins().bor_not(rhs_inst_8, arg_3);
let rhs_inst_10 = pos.ins().iadd(arg_1[1], rhs_inst_9);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_10);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1295(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 3 {
if rhs_3 == 3 {
if rhs_2 == 16 {
if rhs_1 == -16 {
let rhs_inst_6 = pos.ins().iadd_imm(arg_3, 1879048192_u64 as i64);
let rhs_inst_7 = pos.ins().band_imm(rhs_inst_6, 536870896_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_7, 4026531856_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1296(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 1 {
if rhs_2 == 96 {
if rhs_1 == 96 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().iconst(I32, 268435454_u64 as i64);
let rhs_inst_8 = pos.ins().band_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().imul_imm(rhs_inst_8, 2147483600_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_9);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1297(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 1 {
if rhs_2 == 48 {
if rhs_1 == 48 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().iconst(I32, 536870910_u64 as i64);
let rhs_inst_8 = pos.ins().band_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().imul_imm(rhs_inst_8, 2147483624_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_9);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1298(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 268435455 {
if rhs_2 == -12 {
if rhs_1 == -12 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().iconst(I32, 805306368_u64 as i64);
let rhs_inst_8 = pos.ins().bor_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().imul_imm(rhs_inst_8, 12_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_9);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1299(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_2 == 1 {
if rhs_1 == 1 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_6 == 1 {
if rhs_5 == 2 {
if arg_4 == arg_2 {
let rhs_inst_7 = pos.ins().iconst(I32, 656877351_u64 as i64);
let rhs_inst_8 = pos.ins().sshr(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().bor_imm(rhs_inst_8, 4294967292_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1300(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == 1 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 252 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_5 == 2 {
if arg_4 == arg_2 && arg_4 != arg_3 && arg_2 != arg_3 {
let rhs_inst_8 = pos.ins().iconst(I32, 4294967292_u64 as i64);
let rhs_inst_9 = pos.ins().bor_not(rhs_inst_8, arg_4);
let rhs_inst_10 = pos.ins().isub(rhs_inst_9, arg_1[1]);
pos.func.dfg.replace(inst).bnot(rhs_inst_10);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1301(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 65535 {
if rhs_2 == 2 {
if rhs_1 == 4 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().iconst(I32, 1073676288_u64 as i64);
let rhs_inst_8 = pos.ins().bor_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().imul_imm(rhs_inst_8, 4294967292_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_9);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1302(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 88 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 1 {
if rhs_3 == 88 {
if arg_3 != arg_1 {
let rhs_inst_7 = pos.ins().iconst(I32, 1073741822_u64 as i64);
let rhs_inst_8 = pos.ins().band_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().imul_imm(rhs_inst_8, 2147483604_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_9);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1303(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 1 {
if rhs_2 == 24 {
if rhs_1 == 24 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().iconst(I32, 1073741822_u64 as i64);
let rhs_inst_8 = pos.ins().band_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().imul_imm(rhs_inst_8, 2147483636_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_9);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1304(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == 250 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 4 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_5 == 1 {
if arg_2 != arg_3 && arg_2 == arg_4 && arg_3 != arg_4 {
let rhs_inst_8 = pos.ins().iconst(I32, 4294967044_u64 as i64);
let rhs_inst_9 = pos.ins().bor_not(rhs_inst_8, arg_4);
let rhs_inst_10 = pos.ins().isub(rhs_inst_9, arg_1[1]);
pos.func.dfg.replace(inst).bnot(rhs_inst_10);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1305(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == 1 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 248 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_5 == 2 {
if arg_2 != arg_3 && arg_2 == arg_4 && arg_3 != arg_4 {
let rhs_inst_8 = pos.ins().iconst(I32, 4294967292_u64 as i64);
let rhs_inst_9 = pos.ins().bor_not(rhs_inst_8, arg_4);
let rhs_inst_10 = pos.ins().isub(rhs_inst_9, arg_1[1]);
pos.func.dfg.replace(inst).bnot(rhs_inst_10);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1306(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 5 {
if rhs_2 == 7 {
if rhs_1 == 3 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_7 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_4) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_8 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_8 == 2 {
if rhs_7 == 7 {
if arg_3 == arg_5 {
let rhs_inst_8 = pos.ins().band_imm(arg_4, 63_u64 as i64);
let rhs_inst_9 = pos.ins().bnot(rhs_inst_8);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1307(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 1 {
if rhs_2 == 12 {
if rhs_1 == 12 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().iconst(I32, 2147483646_u64 as i64);
let rhs_inst_8 = pos.ins().band_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().imul_imm(rhs_inst_8, 4294967290_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_9);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1308(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 1 {
if rhs_2 == 56 {
if rhs_1 == 56 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().iconst(I32, 1073741822_u64 as i64);
let rhs_inst_8 = pos.ins().band_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().imul_imm(rhs_inst_8, 2147483620_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_9);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1309(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 1 {
if rhs_2 == 20 {
if rhs_1 == 20 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().iconst(I32, 2147483646_u64 as i64);
let rhs_inst_8 = pos.ins().band_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().imul_imm(rhs_inst_8, 4294967286_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_9);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1310(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_4 == 6 {
if rhs_3 == 16 {
if rhs_2 == -16 {
if rhs_1 == -2147483648 {
let rhs_inst_6 = pos.ins().irsub_imm(arg_3, 22_u64 as i64);
let rhs_inst_7 = pos.ins().band_imm(rhs_inst_6, 2147483632_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_7, 2147483648_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1311(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 3 {
if rhs_3 == -1 {
if rhs_2 == 1 {
if rhs_1 == 2743867 {
let rhs_inst_6 = pos.ins().iconst(I32, 16711935_u64 as i64);
let rhs_inst_7 = pos.ins().sshr(rhs_inst_6, arg_3);
let rhs_inst_8 = pos.ins().band_imm(rhs_inst_7, 2147483649_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_8, 2743867_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1312(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_1 == 36 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 1 {
if rhs_3 == 36 {
if arg_1 != arg_3 {
let rhs_inst_7 = pos.ins().iconst(I32, 2147483646_u64 as i64);
let rhs_inst_8 = pos.ins().band_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().imul_imm(rhs_inst_8, 2147483630_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_9);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1313(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 1 {
if rhs_2 == 40 {
if rhs_1 == 40 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().iconst(I32, 1073741822_u64 as i64);
let rhs_inst_8 = pos.ins().band_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().imul_imm(rhs_inst_8, 2147483628_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_9);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1314(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 1 {
if rhs_2 == 36 {
if rhs_1 == 36 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().iconst(I32, 2147483646_u64 as i64);
let rhs_inst_8 = pos.ins().band_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().imul_imm(rhs_inst_8, 4294967278_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_9);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1315(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 1 {
if rhs_2 == 28 {
if rhs_1 == 28 {
if arg_1[0] != arg_3 {
let rhs_inst_7 = pos.ins().iconst(I32, 2147483646_u64 as i64);
let rhs_inst_8 = pos.ins().band_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().imul_imm(rhs_inst_8, 2147483634_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_9);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1316(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 1 {
if rhs_2 == 92 {
if rhs_1 == 92 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().iconst(I32, 2147483646_u64 as i64);
let rhs_inst_8 = pos.ins().band_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().imul_imm(rhs_inst_8, 2147483602_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_9);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1317(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 1 {
if rhs_3 == 1 {
if rhs_2 == 12 {
if rhs_1 == 4 {
if arg_4 != arg_1[0] {
let rhs_inst_8 = pos.ins().imul_imm(arg_4, 24_u64 as i64);
let rhs_inst_9 = pos.ins().iadd_imm(rhs_inst_8, 16_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_4, rhs_inst_9);

}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1318(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Unary { opcode, arg } => {
let arg_4 = arg;
match opcode {
Opcode::Clz => {
if rhs_3 == 31 {
if rhs_2 == 8 {
if rhs_1 == 65280 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_7 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_5) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_8 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_6) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Unary { opcode, arg } => {
let arg_7 = arg;
match opcode {
Opcode::Clz => {
if rhs_8 == 31 {
if rhs_7 == 24 {
if arg_4 == arg_7 {
let rhs_inst_8 = pos.ins().ushr_imm(arg_5, 16_u64 as i64);
let rhs_inst_9 = pos.ins().bnot(rhs_inst_8);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1319(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == -1 {
if rhs_3 == 16 {
if rhs_2 == -16 {
if rhs_1 == -2147483648 {
let rhs_inst_6 = pos.ins().irsub_imm(arg_3, 17_u64 as i64);
let rhs_inst_7 = pos.ins().band_imm(rhs_inst_6, 2147483632_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_7, 2147483648_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1320(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 1 {
if rhs_3 == 1 {
if rhs_2 == 12 {
if rhs_1 == 8 {
if arg_1[0] != arg_4 {
let rhs_inst_8 = pos.ins().imul_imm(arg_4, 24_u64 as i64);
let rhs_inst_9 = pos.ins().iadd_imm(rhs_inst_8, 20_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_4, rhs_inst_9);

}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1321(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_4 == 2 {
if rhs_3 == 1 {
if rhs_2 == 3 {
if rhs_1 == 8 {
if arg_4 != arg_1[0] {
let rhs_inst_8 = pos.ins().imul_imm(arg_3, 8_u64 as i64);
let rhs_inst_9 = pos.ins().iadd_imm(rhs_inst_8, 16_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_4, rhs_inst_9);

}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1322(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 1 {
if rhs_3 == 1 {
if rhs_2 == 12 {
if rhs_1 == 20 {
if arg_4 != arg_1[0] {
let rhs_inst_8 = pos.ins().imul_imm(arg_4, 24_u64 as i64);
let rhs_inst_9 = pos.ins().iadd_imm(rhs_inst_8, 32_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_4, rhs_inst_9);

}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1323(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 1 {
if rhs_3 == 3 {
if rhs_2 == 12 {
if rhs_1 == 4 {
if arg_1[0] != arg_4 {
let rhs_inst_8 = pos.ins().imul_imm(arg_4, 24_u64 as i64);
let rhs_inst_9 = pos.ins().iadd_imm(rhs_inst_8, 40_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_4, rhs_inst_9);

}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1324(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 1 {
if rhs_3 == 1 {
if rhs_2 == 12 {
if rhs_1 == 12 {
if arg_1[0] != arg_4 {
let rhs_inst_8 = pos.ins().imul_imm(arg_4, 24_u64 as i64);
let rhs_inst_9 = pos.ins().iadd_imm(rhs_inst_8, 24_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_4, rhs_inst_9);

}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1325(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == 536805376 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 2490368 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_5 == -536805377 {
if arg_3 != arg_2 && arg_3 != arg_4 && arg_2 == arg_4 {
let rhs_inst_8 = pos.ins().bor(arg_4, arg_1[1]);
let rhs_inst_9 = pos.ins().bnot(rhs_inst_8);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1326(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 1 {
if rhs_2 == 104 {
if rhs_1 == 104 {
if arg_3 != arg_1[0] {
let rhs_inst_7 = pos.ins().iconst(I32, 1073741822_u64 as i64);
let rhs_inst_8 = pos.ins().band_not(rhs_inst_7, arg_3);
let rhs_inst_9 = pos.ins().imul_imm(rhs_inst_8, 2147483596_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_9);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1327(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 2147483647 {
if rhs_2 == 3 {
if rhs_1 == 268435452 {
if arg_0[0] != arg_3 {
let rhs_inst_7 = pos.ins().sshr_imm(arg_3, 3_u64 as i64);
let rhs_inst_8 = pos.ins().band_imm(rhs_inst_7, 268435452_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_3, rhs_inst_8);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1328(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 6 {
if rhs_1 == 64 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_4) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_6 == 6 {
if rhs_5 == 128 {
if arg_5 == arg_3 && arg_5 != arg_1[1] && arg_3 != arg_1[1] {
let rhs_inst_8 = pos.ins().iconst(I32, 4294967040_u64 as i64);
let rhs_inst_9 = pos.ins().bor_not(rhs_inst_8, arg_4);
let rhs_inst_10 = pos.ins().band_not(rhs_inst_9, arg_1[1]);
pos.func.dfg.replace(inst).bnot(rhs_inst_10);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1329(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 24 {
if rhs_2 == 1 {
if rhs_1 == 1 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_7 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_7 == 26 {
if arg_3 == arg_4 {
let rhs_inst_7 = pos.ins().iconst(I32, 2947526575_u64 as i64);
let rhs_inst_8 = pos.ins().sshr(rhs_inst_7, arg_2);
let rhs_inst_9 = pos.ins().bor_imm(rhs_inst_8, 2147483646_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1330(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 24 {
if rhs_2 == -1 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_6 == 26 {
if rhs_1 == 1 {
if arg_3 == arg_4 {
let rhs_inst_7 = pos.ins().iconst(I32, 2947526575_u64 as i64);
let rhs_inst_8 = pos.ins().sshr(rhs_inst_7, arg_2);
let rhs_inst_9 = pos.ins().bor_imm(rhs_inst_8, 2147483646_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1331(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == 256 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 255 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_5 == 1024 {
if arg_4 == arg_2 && arg_4 != arg_3 && arg_2 != arg_3 {
let rhs_inst_8 = pos.ins().iconst(I32, 4294966015_u64 as i64);
let rhs_inst_9 = pos.ins().bor_not(rhs_inst_8, arg_4);
let rhs_inst_10 = pos.ins().isub(rhs_inst_9, arg_1[1]);
pos.func.dfg.replace(inst).bnot(rhs_inst_10);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1332(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_4 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_4[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_5) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_6 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_6[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_7 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_7) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_5 == 255 {
if rhs_4 == 1 {
match pos.func.dfg.value_def(arg_6[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_9 = arg;
let rhs_8 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_8 == 255 {
if rhs_3 == 2 {
match pos.func.dfg.value_def(arg_4[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_10 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_10[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_11 = arg;
let rhs_11 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_11) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_12 = arg;
let rhs_12 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_12 == 255 {
if rhs_11 == 1 {
match pos.func.dfg.value_def(arg_10[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_13 = arg;
let rhs_15 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_15 == 255 {
if rhs_2 == 4 {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_14 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_14[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_15 = arg;
let rhs_18 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_15) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_16 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_16[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_17 = arg;
let rhs_19 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_17) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_18 = arg;
let rhs_20 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_20 == 255 {
if rhs_19 == 1 {
match pos.func.dfg.value_def(arg_16[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_19 = arg;
let rhs_23 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_23 == 255 {
if rhs_18 == 2 {
match pos.func.dfg.value_def(arg_14[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_20 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_20[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_21 = arg;
let rhs_26 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_21) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_22 = arg;
let rhs_27 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_27 == 255 {
if rhs_26 == 1 {
match pos.func.dfg.value_def(arg_20[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_23 = arg;
let rhs_30 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_30 == 255 {
if rhs_1 == 8 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_24 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_24[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_25 = arg;
let rhs_33 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_25) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_26 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_26[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_27 = arg;
let rhs_34 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_27) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_28 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_28[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_29 = arg;
let rhs_35 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_29) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_30 = arg;
let rhs_36 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_36 == 255 {
if rhs_35 == 1 {
match pos.func.dfg.value_def(arg_28[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_31 = arg;
let rhs_39 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_39 == 255 {
if rhs_34 == 2 {
match pos.func.dfg.value_def(arg_26[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_32 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_32[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_33 = arg;
let rhs_42 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_33) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_34 = arg;
let rhs_43 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_43 == 255 {
if rhs_42 == 1 {
match pos.func.dfg.value_def(arg_32[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_35 = arg;
let rhs_46 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_46 == 255 {
if rhs_33 == 4 {
match pos.func.dfg.value_def(arg_24[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_36 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_36[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_37 = arg;
let rhs_49 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_37) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_38 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_38[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_39 = arg;
let rhs_50 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_39) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_40 = arg;
let rhs_51 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_51 == 255 {
if rhs_50 == 1 {
match pos.func.dfg.value_def(arg_38[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_41 = arg;
let rhs_54 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_54 == 255 {
if rhs_49 == 2 {
match pos.func.dfg.value_def(arg_36[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_42 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_42[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_43 = arg;
let rhs_57 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_43) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_44 = arg;
let rhs_58 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_58 == 255 {
if rhs_57 == 1 {
match pos.func.dfg.value_def(arg_42[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_45 = arg;
let rhs_61 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_61 == 255 {
if arg_18 == arg_9 && arg_18 == arg_34 && arg_18 == arg_19 && arg_18 == arg_40 && arg_18 == arg_13 && arg_18 == arg_12 && arg_18 == arg_31 && arg_18 == arg_8 && arg_18 == arg_22 && arg_18 == arg_45 && arg_18 == arg_30 && arg_18 == arg_41 && arg_18 == arg_44 && arg_18 == arg_23 && arg_18 == arg_35 && arg_9 == arg_34 && arg_9 == arg_19 && arg_9 == arg_40 && arg_9 == arg_13 && arg_9 == arg_12 && arg_9 == arg_31 && arg_9 == arg_8 && arg_9 == arg_22 && arg_9 == arg_45 && arg_9 == arg_30 && arg_9 == arg_41 && arg_9 == arg_44 && arg_9 == arg_23 && arg_9 == arg_35 && arg_34 == arg_19 && arg_34 == arg_40 && arg_34 == arg_13 && arg_34 == arg_12 && arg_34 == arg_31 && arg_34 == arg_8 && arg_34 == arg_22 && arg_34 == arg_45 && arg_34 == arg_30 && arg_34 == arg_41 && arg_34 == arg_44 && arg_34 == arg_23 && arg_34 == arg_35 && arg_19 == arg_40 && arg_19 == arg_13 && arg_19 == arg_12 && arg_19 == arg_31 && arg_19 == arg_8 && arg_19 == arg_22 && arg_19 == arg_45 && arg_19 == arg_30 && arg_19 == arg_41 && arg_19 == arg_44 && arg_19 == arg_23 && arg_19 == arg_35 && arg_40 == arg_13 && arg_40 == arg_12 && arg_40 == arg_31 && arg_40 == arg_8 && arg_40 == arg_22 && arg_40 == arg_45 && arg_40 == arg_30 && arg_40 == arg_41 && arg_40 == arg_44 && arg_40 == arg_23 && arg_40 == arg_35 && arg_13 == arg_12 && arg_13 == arg_31 && arg_13 == arg_8 && arg_13 == arg_22 && arg_13 == arg_45 && arg_13 == arg_30 && arg_13 == arg_41 && arg_13 == arg_44 && arg_13 == arg_23 && arg_13 == arg_35 && arg_12 == arg_31 && arg_12 == arg_8 && arg_12 == arg_22 && arg_12 == arg_45 && arg_12 == arg_30 && arg_12 == arg_41 && arg_12 == arg_44 && arg_12 == arg_23 && arg_12 == arg_35 && arg_31 == arg_8 && arg_31 == arg_22 && arg_31 == arg_45 && arg_31 == arg_30 && arg_31 == arg_41 && arg_31 == arg_44 && arg_31 == arg_23 && arg_31 == arg_35 && arg_8 == arg_22 && arg_8 == arg_45 && arg_8 == arg_30 && arg_8 == arg_41 && arg_8 == arg_44 && arg_8 == arg_23 && arg_8 == arg_35 && arg_22 == arg_45 && arg_22 == arg_30 && arg_22 == arg_41 && arg_22 == arg_44 && arg_22 == arg_23 && arg_22 == arg_35 && arg_45 == arg_30 && arg_45 == arg_41 && arg_45 == arg_44 && arg_45 == arg_23 && arg_45 == arg_35 && arg_30 == arg_41 && arg_30 == arg_44 && arg_30 == arg_23 && arg_30 == arg_35 && arg_41 == arg_44 && arg_41 == arg_23 && arg_41 == arg_35 && arg_44 == arg_23 && arg_44 == arg_35 && arg_23 == arg_35 {
let rep_insts = pos.func.dfg.inst_results(inst);
let rep_insts_0 = rep_insts[0];
pos.func.dfg.change_to_alias(arg_1, rep_insts_0);
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1333(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 128 {
if rhs_2 == -256 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_4) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_7 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
match pos.func.dfg.value_def(arg_5) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_8 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_6) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_7 = arg;
let rhs_9 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_9 == 128 {
if rhs_8 == -256 {
if rhs_7 == 7 {
if rhs_6 == 24 {
if rhs_1 == 8 {
if arg_3 == arg_7 {
let rhs_inst_8 = pos.ins().sshr_imm(arg_6, 8_u64 as i64);
let rhs_inst_9 = pos.ins().bnot(rhs_inst_8);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1334(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_4 == 2 {
if rhs_3 == 16 {
if rhs_2 == -16 {
if rhs_1 == -2147483648 {
let rhs_inst_6 = pos.ins().irsub_imm(arg_3, 2147483666_u64 as i64);
let rhs_inst_7 = pos.ins().band_imm(rhs_inst_6, 2147483632_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_7, 2147483648_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1335(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == -1 {
if rhs_3 == 17 {
if rhs_2 == -16 {
if rhs_1 == -2147483648 {
let rhs_inst_6 = pos.ins().irsub_imm(arg_3, 2147483666_u64 as i64);
let rhs_inst_7 = pos.ins().band_imm(rhs_inst_6, 2147483632_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_7, 2147483648_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1336(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_4 == 1 {
if rhs_3 == 0 {
if rhs_2 == 12 {
if rhs_1 == 4 {
if arg_1[0] != arg_4 {
let rhs_inst_8 = pos.ins().imul_imm(arg_3, 4294967284_u64 as i64);
let rhs_inst_9 = pos.ins().iadd_imm(rhs_inst_8, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_4, rhs_inst_9);

}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1337(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 1 {
if rhs_2 == 2147483646 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_4) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_7 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_7 == 30 {
if rhs_6 == 31 {
if rhs_1 == 3 {
if arg_3 == arg_5 {
let rhs_inst_8 = pos.ins().bxor_imm(arg_2, 3_u64 as i64);
let rhs_inst_9 = pos.ins().bnot(rhs_inst_8);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1338(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == -24577 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_5 == 13 {
if rhs_4 == 3 {
if rhs_3 == 13 {
if arg_1 != arg_4 {
let rhs_inst_8 = pos.ins().iconst(I32, 4294942719_u64 as i64);
let rhs_inst_9 = pos.ins().bor_not(rhs_inst_8, arg_4);
let rhs_inst_10 = pos.ins().isub(rhs_inst_9, arg_0[0]);
pos.func.dfg.replace(inst).bnot(rhs_inst_10);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1339(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_4 == 4 {
if rhs_3 == 1 {
if rhs_2 == 4 {
if rhs_1 == 8 {
if arg_1[0] != arg_4 {
let rhs_inst_8 = pos.ins().band_imm(arg_4, 4294967280_u64 as i64);
let rhs_inst_9 = pos.ins().iadd_imm(rhs_inst_8, 24_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_4, rhs_inst_9);

}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1340(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_4 == 4 {
if rhs_3 == 1 {
if rhs_2 == 4 {
if rhs_1 == 12 {
if arg_4 != arg_1[0] {
let rhs_inst_8 = pos.ins().band_imm(arg_4, 4294967280_u64 as i64);
let rhs_inst_9 = pos.ins().iadd_imm(rhs_inst_8, 28_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_4, rhs_inst_9);

}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1341(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_4 == 268435455 {
if rhs_3 == 2 {
if rhs_2 == 268435455 {
if rhs_1 == 0 {
let rhs_inst_6 = pos.ins().irsub_imm(arg_3, 1879048189_u64 as i64);
let rhs_inst_7 = pos.ins().band_imm(rhs_inst_6, 268435455_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_7, 4026531841_u64 as i64);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1342(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_4) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == -1 {
if rhs_3 == -4 {
if rhs_2 == 3 {
if rhs_1 == 4 {
if arg_1[1] != arg_1[0] && arg_1[1] != arg_5 && arg_1[0] == arg_5 {
let rhs_inst_9 = pos.ins().isub(arg_3, arg_1[1]);
let rhs_inst_10 = pos.ins().isub(rhs_inst_9, arg_5);
pos.func.dfg.replace(inst).bnot(rhs_inst_10);

}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1343(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == -4035225266123964417 {
if rhs_2 == 2882303761517117440 {
if rhs_1 == 3458764513820540927 {
let rhs_inst_5 = pos.ins().band_imm(arg_2, 576460752303423487_u64 as i64);
pos.func.dfg.replace(inst).iadd_imm(rhs_inst_5, 2882303761517117440_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1344(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_4 == -16 {
if rhs_3 == 1 {
if rhs_2 == 1 {
if rhs_1 == 1 {
if arg_1[1] != arg_4 {
let rhs_inst_8 = pos.ins().iconst(I32, 4294967294_u64 as i64);
let rhs_inst_9 = pos.ins().band_not(rhs_inst_8, arg_4);
let rhs_inst_10 = pos.ins().iadd_imm(rhs_inst_9, 19_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_10);

}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1345(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_4 == -257 {
if rhs_3 == -48 {
if rhs_2 == 2 {
if rhs_1 == 32 {
if arg_4 != arg_1[0] {
let rhs_inst_8 = pos.ins().imul_imm(arg_3, 4_u64 as i64);
let rhs_inst_9 = pos.ins().iadd_imm(rhs_inst_8, 4294967136_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_4, rhs_inst_9);

}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1346(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_4 == -257 {
if rhs_3 == -48 {
if rhs_2 == 2 {
if rhs_1 == 72 {
if arg_1[0] != arg_4 {
let rhs_inst_8 = pos.ins().imul_imm(arg_3, 4_u64 as i64);
let rhs_inst_9 = pos.ins().iadd_imm(rhs_inst_8, 4294967176_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_4, rhs_inst_9);

}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1347(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_5 == 1 {
if rhs_4 == 134217727 {
if rhs_3 == -2 {
if rhs_2 == 1 {
if rhs_1 == 2 {
let rhs_inst_7 = pos.ins().iconst(I32, 268435454_u64 as i64);
let rhs_inst_8 = pos.ins().band_not(rhs_inst_7, arg_4);
let rhs_inst_9 = pos.ins().iadd_imm(rhs_inst_8, 4026531843_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1348(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_4 == 268435455 {
if rhs_3 == 0 {
if rhs_2 == 12 {
if rhs_1 == 4 {
if arg_4 != arg_1[0] {
let rhs_inst_8 = pos.ins().imul_imm(arg_3, 4294967284_u64 as i64);
let rhs_inst_9 = pos.ins().iadd_imm(rhs_inst_8, 4_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_4, rhs_inst_9);

}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1349(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_4 == 3 {
if rhs_3 == 24 {
if rhs_2 == -32 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_8 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_8 == 3 {
if rhs_1 == 24 {
if arg_4 != arg_5 {
let rhs_inst_9 = pos.ins().band_imm(arg_1[1], 24_u64 as i64);
let rhs_inst_10 = pos.ins().bnot(rhs_inst_9);
pos.func.dfg.replace(inst).bnot(rhs_inst_10);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1350(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_4 == 268435455 {
if rhs_3 == 0 {
if rhs_2 == 12 {
if rhs_1 == 12 {
if arg_4 != arg_1[0] {
let rhs_inst_8 = pos.ins().imul_imm(arg_3, 4294967284_u64 as i64);
let rhs_inst_9 = pos.ins().iadd_imm(rhs_inst_8, 12_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_4, rhs_inst_9);

}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1351(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_4 == 268435455 {
if rhs_3 == 0 {
if rhs_2 == 12 {
if rhs_1 == 24 {
if arg_1[0] != arg_4 {
let rhs_inst_8 = pos.ins().imul_imm(arg_3, 4294967284_u64 as i64);
let rhs_inst_9 = pos.ins().iadd_imm(rhs_inst_8, 24_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_4, rhs_inst_9);

}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1352(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::SshrImm => {
if rhs_4 == 2 {
if rhs_3 == 1 {
if rhs_2 == 3 {
if rhs_1 == 8 {
if arg_4 != arg_1[0] {
let rhs_inst_8 = pos.ins().iconst(I32, 2147483640_u64 as i64);
let rhs_inst_9 = pos.ins().band_not(rhs_inst_8, arg_4);
let rhs_inst_10 = pos.ins().imul_imm(rhs_inst_9, 1073741822_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_4, rhs_inst_10);

}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1353(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_3 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_3[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 2904321 {
if rhs_2 == 1 {
if rhs_1 == 1 {
if arg_3[1] != arg_1[1] && arg_3[1] != arg_4 && arg_1[1] != arg_4 {
let rhs_inst_9 = pos.ins().iadd_imm(arg_4, 2904323_u64 as i64);
let rhs_inst_10 = pos.ins().iadd(arg_3[1], rhs_inst_9);
pos.func.dfg.replace(inst).iadd(arg_1[1], rhs_inst_10);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1354(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_2 == 0 {
if rhs_1 == 3 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_4) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_5) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_6 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_6[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_7 = arg;
let rhs_7 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_7) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_8 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_8 == 0 {
if rhs_7 == 3 {
if rhs_6 == 4 {
if rhs_5 == 24 {
if arg_6[0] == arg_8 && arg_6[0] == arg_1[0] && arg_6[0] == arg_3 && arg_8 == arg_1[0] && arg_8 == arg_3 && arg_1[0] == arg_3 {
let rhs_inst_8 = pos.ins().band_imm(arg_7, 4294967288_u64 as i64);
let rhs_inst_9 = pos.ins().iadd_imm(rhs_inst_8, 4294967271_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_9);

}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1355(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
if rhs_4 == 1 {
if rhs_3 == 0 {
if rhs_2 == 12 {
if rhs_1 == -12 {
if arg_4 != arg_1[0] {
let rhs_inst_8 = pos.ins().imul_imm(arg_3, 4294967284_u64 as i64);
let rhs_inst_9 = pos.ins().iadd_imm(rhs_inst_8, 4294967284_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_4, rhs_inst_9);

}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1356(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 1 {
if rhs_3 == 2147483644 {
if rhs_2 == 23 {
if rhs_1 == -8 {
if arg_0[0] != arg_4 {
let rhs_inst_8 = pos.ins().iadd_imm(arg_3, 20_u64 as i64);
let rhs_inst_9 = pos.ins().band_imm(rhs_inst_8, 4294967288_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_4, rhs_inst_9);

}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1357(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 7 {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_4 == 3 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_6 == -8 {
if rhs_1 == 4 {
if arg_4 != arg_3 && arg_4 != arg_5 && arg_3 == arg_5 {
let rhs_inst_9 = pos.ins().irsub_imm(arg_2[1], 4294967291_u64 as i64);
let rhs_inst_10 = pos.ins().band_not(rhs_inst_9, arg_5);
pos.func.dfg.replace(inst).bnot(rhs_inst_10);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1358(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::ImulImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_4 == 268435455 {
if rhs_3 == 0 {
if rhs_2 == 12 {
if rhs_1 == -4 {
if arg_1[0] != arg_4 {
let rhs_inst_8 = pos.ins().imul_imm(arg_3, 4294967284_u64 as i64);
let rhs_inst_9 = pos.ins().iadd_imm(rhs_inst_8, 4294967292_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_4, rhs_inst_9);

}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1359(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == 512 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 1024 {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_4 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_4[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_5 == 16 {
if arg_4[1] != arg_1 && arg_4[1] != arg_5 && arg_4[1] != arg_3 && arg_1 == arg_5 && arg_1 == arg_3 && arg_5 == arg_3 {
let rhs_inst_9 = pos.ins().iconst(I32, 4294965743_u64 as i64);
let rhs_inst_10 = pos.ins().bor_not(rhs_inst_9, arg_5);
let rhs_inst_11 = pos.ins().band_not(rhs_inst_10, arg_4[1]);
pos.func.dfg.replace(inst).bnot(rhs_inst_11);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1360(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 24 {
if rhs_3 == -1 {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_7 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_7 == 26 {
if rhs_2 == 1 {
if rhs_1 == 3 {
if arg_4 == arg_5 {
let rhs_inst_8 = pos.ins().iconst(I32, 2947526568_u64 as i64);
let rhs_inst_9 = pos.ins().sshr(rhs_inst_8, arg_2[0]);
let rhs_inst_10 = pos.ins().bor_imm(rhs_inst_9, 2147483639_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_10);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1361(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 64 {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_4) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_5) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_6 == 2 {
if rhs_5 == 5 {
if rhs_4 == 64 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_7 = arg;
let rhs_10 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_10 == 65471 {
if rhs_1 == 128 {
if arg_7 == arg_3 && arg_7 != arg_6 && arg_3 != arg_6 {
pos.func.dfg.replace(inst).band_imm(arg_7, 128_u64 as i64);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1362(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 254 {
if rhs_2 == 1 {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_6 == 6 {
if rhs_1 == -126 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_9 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_6) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_7 = arg;
let rhs_10 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_7) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_11 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_11 == 254 {
if rhs_10 == 1 {
if rhs_9 == 4 {
if arg_5 == arg_4 && arg_5 == arg_8 && arg_4 == arg_8 {
let rhs_inst_9 = pos.ins().bxor_not(arg_6, arg_2[1]);
let rhs_inst_10 = pos.ins().bor_imm(rhs_inst_9, 121_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_10);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1363(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_3 == 24 {
if rhs_2 == -1 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_4) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_7 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
if rhs_7 == 536870912 {
if rhs_6 == 26 {
if rhs_1 == 1 {
if arg_5 == arg_3 {
let rhs_inst_8 = pos.ins().iconst(I32, 2947526575_u64 as i64);
let rhs_inst_9 = pos.ins().sshr(rhs_inst_8, arg_2);
let rhs_inst_10 = pos.ins().bor_imm(rhs_inst_9, 2147483646_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_10);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1364(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_3 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_3[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_4) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_5 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_5[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_6) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_7 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_7[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_8) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_9 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_6 == 255 {
if rhs_5 == 1 {
match pos.func.dfg.value_def(arg_7[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_10 = arg;
let rhs_9 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_9 == 255 {
if rhs_4 == 2 {
match pos.func.dfg.value_def(arg_5[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_11 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_11[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_12 = arg;
let rhs_12 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_12) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_13 = arg;
let rhs_13 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_13 == 255 {
if rhs_12 == 1 {
match pos.func.dfg.value_def(arg_11[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_14 = arg;
let rhs_16 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_16 == 255 {
if rhs_3 == 4 {
match pos.func.dfg.value_def(arg_3[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_15 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_15[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_16 = arg;
let rhs_19 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_16) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_17 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_17[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_18 = arg;
let rhs_20 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_18) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_19 = arg;
let rhs_21 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_21 == 255 {
if rhs_20 == 1 {
match pos.func.dfg.value_def(arg_17[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_20 = arg;
let rhs_24 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_24 == 255 {
if rhs_19 == 2 {
match pos.func.dfg.value_def(arg_15[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_21 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_21[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_22 = arg;
let rhs_27 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_22) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_23 = arg;
let rhs_28 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_28 == 255 {
if rhs_27 == 1 {
match pos.func.dfg.value_def(arg_21[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_24 = arg;
let rhs_31 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_31 == 255 {
if rhs_2 == 8 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_25 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_25[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_26 = arg;
let rhs_34 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_26) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_27 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_27[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_28 = arg;
let rhs_35 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_28) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_29 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_29[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_30 = arg;
let rhs_36 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_30) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_31 = arg;
let rhs_37 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_37 == 255 {
if rhs_36 == 1 {
match pos.func.dfg.value_def(arg_29[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_32 = arg;
let rhs_40 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_40 == 255 {
if rhs_35 == 2 {
match pos.func.dfg.value_def(arg_27[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_33 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_33[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_34 = arg;
let rhs_43 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_34) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_35 = arg;
let rhs_44 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_44 == 255 {
if rhs_43 == 1 {
match pos.func.dfg.value_def(arg_33[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_36 = arg;
let rhs_47 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_47 == 255 {
if rhs_34 == 4 {
match pos.func.dfg.value_def(arg_25[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_37 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_37[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_38 = arg;
let rhs_50 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_38) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_39 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_39[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_40 = arg;
let rhs_51 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_40) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_41 = arg;
let rhs_52 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_52 == 255 {
if rhs_51 == 1 {
match pos.func.dfg.value_def(arg_39[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_42 = arg;
let rhs_55 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_55 == 255 {
if rhs_50 == 2 {
match pos.func.dfg.value_def(arg_37[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_43 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_43[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_44 = arg;
let rhs_58 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_44) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_45 = arg;
let rhs_59 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_59 == 255 {
if rhs_58 == 1 {
match pos.func.dfg.value_def(arg_43[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_46 = arg;
let rhs_62 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_62 == 255 {
if rhs_1 == 16 {
if arg_14 == arg_31 && arg_14 == arg_10 && arg_14 == arg_36 && arg_14 == arg_9 && arg_14 == arg_46 && arg_14 == arg_41 && arg_14 == arg_20 && arg_14 == arg_35 && arg_14 == arg_42 && arg_14 == arg_24 && arg_14 == arg_45 && arg_14 == arg_32 && arg_14 == arg_19 && arg_14 == arg_13 && arg_14 == arg_23 && arg_31 == arg_10 && arg_31 == arg_36 && arg_31 == arg_9 && arg_31 == arg_46 && arg_31 == arg_41 && arg_31 == arg_20 && arg_31 == arg_35 && arg_31 == arg_42 && arg_31 == arg_24 && arg_31 == arg_45 && arg_31 == arg_32 && arg_31 == arg_19 && arg_31 == arg_13 && arg_31 == arg_23 && arg_10 == arg_36 && arg_10 == arg_9 && arg_10 == arg_46 && arg_10 == arg_41 && arg_10 == arg_20 && arg_10 == arg_35 && arg_10 == arg_42 && arg_10 == arg_24 && arg_10 == arg_45 && arg_10 == arg_32 && arg_10 == arg_19 && arg_10 == arg_13 && arg_10 == arg_23 && arg_36 == arg_9 && arg_36 == arg_46 && arg_36 == arg_41 && arg_36 == arg_20 && arg_36 == arg_35 && arg_36 == arg_42 && arg_36 == arg_24 && arg_36 == arg_45 && arg_36 == arg_32 && arg_36 == arg_19 && arg_36 == arg_13 && arg_36 == arg_23 && arg_9 == arg_46 && arg_9 == arg_41 && arg_9 == arg_20 && arg_9 == arg_35 && arg_9 == arg_42 && arg_9 == arg_24 && arg_9 == arg_45 && arg_9 == arg_32 && arg_9 == arg_19 && arg_9 == arg_13 && arg_9 == arg_23 && arg_46 == arg_41 && arg_46 == arg_20 && arg_46 == arg_35 && arg_46 == arg_42 && arg_46 == arg_24 && arg_46 == arg_45 && arg_46 == arg_32 && arg_46 == arg_19 && arg_46 == arg_13 && arg_46 == arg_23 && arg_41 == arg_20 && arg_41 == arg_35 && arg_41 == arg_42 && arg_41 == arg_24 && arg_41 == arg_45 && arg_41 == arg_32 && arg_41 == arg_19 && arg_41 == arg_13 && arg_41 == arg_23 && arg_20 == arg_35 && arg_20 == arg_42 && arg_20 == arg_24 && arg_20 == arg_45 && arg_20 == arg_32 && arg_20 == arg_19 && arg_20 == arg_13 && arg_20 == arg_23 && arg_35 == arg_42 && arg_35 == arg_24 && arg_35 == arg_45 && arg_35 == arg_32 && arg_35 == arg_19 && arg_35 == arg_13 && arg_35 == arg_23 && arg_42 == arg_24 && arg_42 == arg_45 && arg_42 == arg_32 && arg_42 == arg_19 && arg_42 == arg_13 && arg_42 == arg_23 && arg_24 == arg_45 && arg_24 == arg_32 && arg_24 == arg_19 && arg_24 == arg_13 && arg_24 == arg_23 && arg_45 == arg_32 && arg_45 == arg_19 && arg_45 == arg_13 && arg_45 == arg_23 && arg_32 == arg_19 && arg_32 == arg_13 && arg_32 == arg_23 && arg_19 == arg_13 && arg_19 == arg_23 && arg_13 == arg_23 {
pos.func.dfg.replace(inst).iconst(I64, 0_u64 as i64); 
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1365(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_4) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_6 == 1 {
if rhs_5 == 134217727 {
if rhs_4 == -2 {
if rhs_3 == 1 {
if rhs_2 == 2 {
if rhs_1 == 1 {
let rhs_inst_8 = pos.ins().iconst(I32, 268435454_u64 as i64);
let rhs_inst_9 = pos.ins().band_not(rhs_inst_8, arg_5);
let rhs_inst_10 = pos.ins().iadd_imm(rhs_inst_9, 4026531842_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_10);

}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1366(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_4) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_5 == 247 {
if rhs_4 == 255 {
if rhs_3 == 160 {
if rhs_2 == 2 {
if rhs_1 == 73968 {
if arg_5 != arg_1[0] {
let rhs_inst_9 = pos.ins().imul_imm(arg_3, 4_u64 as i64);
let rhs_inst_10 = pos.ins().iadd_imm(rhs_inst_9, 74608_u64 as i64);
pos.func.dfg.replace(inst).iadd(arg_5, rhs_inst_10);

}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1367(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 4 {
if rhs_1 == 16 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_5 == 4 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_7 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_5) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_8 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_8 == 2 {
if rhs_7 == 8 {
if arg_3 == arg_6 && arg_3 == arg_4 && arg_6 == arg_4 {
let rhs_inst_9 = pos.ins().iconst(I32, 278418652_u64 as i64);
let rhs_inst_10 = pos.ins().sshr(rhs_inst_9, arg_5);
let rhs_inst_11 = pos.ins().bor_imm(rhs_inst_10, 4294967267_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_11);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1368(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == 1 {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 248 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_5 == 2 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_7 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_7 == 4 {
if arg_3 == arg_6 && arg_3 == arg_5 && arg_3 != arg_4 && arg_6 == arg_5 && arg_6 != arg_4 && arg_5 != arg_4 {
let rhs_inst_10 = pos.ins().iconst(I32, 4294967288_u64 as i64);
let rhs_inst_11 = pos.ins().bor_not(rhs_inst_10, arg_6);
let rhs_inst_12 = pos.ins().isub(rhs_inst_11, arg_2[1]);
pos.func.dfg.replace(inst).bnot(rhs_inst_12);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1369(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_4 == 5 {
if rhs_3 == 7 {
if rhs_2 == 3 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_8 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_5) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_9 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_9 == 2 {
if rhs_8 == 7 {
if rhs_1 == 791696 {
if arg_4 == arg_6 {
let rhs_inst_9 = pos.ins().iconst(I32, 63_u64 as i64);
let rhs_inst_10 = pos.ins().band_not(rhs_inst_9, arg_5);
let rhs_inst_11 = pos.ins().iadd_imm(rhs_inst_10, 4294175536_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_11);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1370(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_4 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_4[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_3 == 2904321 {
if rhs_2 == 1 {
if rhs_1 == 1 {
if arg_5 != arg_0[1] && arg_5 != arg_4[1] && arg_5 != arg_2[1] && arg_0[1] != arg_4[1] && arg_0[1] != arg_2[1] && arg_4[1] != arg_2[1] {
let rhs_inst_11 = pos.ins().iadd_imm(arg_3, 2_u64 as i64);
let rhs_inst_12 = pos.ins().iadd(arg_2[1], rhs_inst_11);
pos.func.dfg.replace(inst).iadd(arg_0[1], rhs_inst_12);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1371(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == 64 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_4) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_5 == 2 {
if rhs_4 == 5 {
if rhs_3 == 64 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_9 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_9 == 65471 {
if arg_6 != arg_5 && arg_6 == arg_2 && arg_5 != arg_2 {
let rhs_inst_10 = pos.ins().bor(arg_6, arg_1[1]);
let rhs_inst_11 = pos.ins().iconst(I32, 4294901760_u64 as i64);
let rhs_inst_12 = pos.ins().bor_not(rhs_inst_11, rhs_inst_10);
pos.func.dfg.replace(inst).bnot(rhs_inst_12);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1372(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_4 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_4[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_5) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_6 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_6[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_7 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_7) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_8 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_8[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_9 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_9) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_10 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_6 == 255 {
if rhs_5 == 1 {
match pos.func.dfg.value_def(arg_8[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_11 = arg;
let rhs_9 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_9 == 255 {
if rhs_4 == 2 {
match pos.func.dfg.value_def(arg_6[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_12 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_12[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_13 = arg;
let rhs_12 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_13) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_14 = arg;
let rhs_13 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_13 == 255 {
if rhs_12 == 1 {
match pos.func.dfg.value_def(arg_12[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_15 = arg;
let rhs_16 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_16 == 255 {
if rhs_3 == 4 {
match pos.func.dfg.value_def(arg_4[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_16 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_16[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_17 = arg;
let rhs_19 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_17) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_18 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_18[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_19 = arg;
let rhs_20 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_19) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_20 = arg;
let rhs_21 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_21 == 255 {
if rhs_20 == 1 {
match pos.func.dfg.value_def(arg_18[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_21 = arg;
let rhs_24 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_24 == 255 {
if rhs_19 == 2 {
match pos.func.dfg.value_def(arg_16[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_22 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_22[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_23 = arg;
let rhs_27 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_23) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_24 = arg;
let rhs_28 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_28 == 255 {
if rhs_27 == 1 {
match pos.func.dfg.value_def(arg_22[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_25 = arg;
let rhs_31 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_31 == 255 {
if rhs_2 == 8 {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_26 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_26[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_27 = arg;
let rhs_34 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_27) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_28 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_28[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_29 = arg;
let rhs_35 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_29) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_30 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_30[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_31 = arg;
let rhs_36 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_31) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_32 = arg;
let rhs_37 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_37 == 255 {
if rhs_36 == 1 {
match pos.func.dfg.value_def(arg_30[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_33 = arg;
let rhs_40 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_40 == 255 {
if rhs_35 == 2 {
match pos.func.dfg.value_def(arg_28[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_34 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_34[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_35 = arg;
let rhs_43 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_35) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_36 = arg;
let rhs_44 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_44 == 255 {
if rhs_43 == 1 {
match pos.func.dfg.value_def(arg_34[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_37 = arg;
let rhs_47 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_47 == 255 {
if rhs_34 == 4 {
match pos.func.dfg.value_def(arg_26[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_38 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_38[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_39 = arg;
let rhs_50 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_39) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_40 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_40[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_41 = arg;
let rhs_51 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_41) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_42 = arg;
let rhs_52 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_52 == 255 {
if rhs_51 == 1 {
match pos.func.dfg.value_def(arg_40[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_43 = arg;
let rhs_55 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_55 == 255 {
if rhs_50 == 2 {
match pos.func.dfg.value_def(arg_38[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_44 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_44[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_45 = arg;
let rhs_58 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_45) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_46 = arg;
let rhs_59 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_59 == 255 {
if rhs_58 == 1 {
match pos.func.dfg.value_def(arg_44[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_47 = arg;
let rhs_62 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_62 == 255 {
if rhs_1 == 16 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_48 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_48[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_49 = arg;
let rhs_65 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_49) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_50 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_50[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_51 = arg;
let rhs_66 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_51) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_52 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_52[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_53 = arg;
let rhs_67 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_53) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_54 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_54[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_55 = arg;
let rhs_68 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_55) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_56 = arg;
let rhs_69 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_69 == 255 {
if rhs_68 == 1 {
match pos.func.dfg.value_def(arg_54[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_57 = arg;
let rhs_72 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_72 == 255 {
if rhs_67 == 2 {
match pos.func.dfg.value_def(arg_52[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_58 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_58[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_59 = arg;
let rhs_75 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_59) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_60 = arg;
let rhs_76 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_76 == 255 {
if rhs_75 == 1 {
match pos.func.dfg.value_def(arg_58[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_61 = arg;
let rhs_79 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_79 == 255 {
if rhs_66 == 4 {
match pos.func.dfg.value_def(arg_50[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_62 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_62[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_63 = arg;
let rhs_82 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_63) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_64 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_64[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_65 = arg;
let rhs_83 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_65) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_66 = arg;
let rhs_84 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_84 == 255 {
if rhs_83 == 1 {
match pos.func.dfg.value_def(arg_64[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_67 = arg;
let rhs_87 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_87 == 255 {
if rhs_82 == 2 {
match pos.func.dfg.value_def(arg_62[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_68 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_68[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_69 = arg;
let rhs_90 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_69) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_70 = arg;
let rhs_91 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_91 == 255 {
if rhs_90 == 1 {
match pos.func.dfg.value_def(arg_68[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_71 = arg;
let rhs_94 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_94 == 255 {
if rhs_65 == 8 {
match pos.func.dfg.value_def(arg_48[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_72 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_72[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_73 = arg;
let rhs_97 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_73) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_74 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_74[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_75 = arg;
let rhs_98 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_75) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_76 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_76[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_77 = arg;
let rhs_99 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_77) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_78 = arg;
let rhs_100 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_100 == 255 {
if rhs_99 == 1 {
match pos.func.dfg.value_def(arg_76[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_79 = arg;
let rhs_103 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_103 == 255 {
if rhs_98 == 2 {
match pos.func.dfg.value_def(arg_74[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_80 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_80[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_81 = arg;
let rhs_106 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_81) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_82 = arg;
let rhs_107 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_107 == 255 {
if rhs_106 == 1 {
match pos.func.dfg.value_def(arg_80[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_83 = arg;
let rhs_110 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_110 == 255 {
if rhs_97 == 4 {
match pos.func.dfg.value_def(arg_72[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_84 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_84[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_85 = arg;
let rhs_113 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_85) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_86 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_86[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_87 = arg;
let rhs_114 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_87) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_88 = arg;
let rhs_115 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_115 == 255 {
if rhs_114 == 1 {
match pos.func.dfg.value_def(arg_86[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_89 = arg;
let rhs_118 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_118 == 255 {
if rhs_113 == 2 {
match pos.func.dfg.value_def(arg_84[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_90 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_90[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_91 = arg;
let rhs_121 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_91) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_92 = arg;
let rhs_122 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_122 == 255 {
if rhs_121 == 1 {
match pos.func.dfg.value_def(arg_90[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_93 = arg;
let rhs_125 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_125 == 255 {
if arg_93 == arg_47 && arg_93 == arg_14 && arg_93 == arg_11 && arg_93 == arg_79 && arg_93 == arg_24 && arg_93 == arg_37 && arg_93 == arg_20 && arg_93 == arg_15 && arg_93 == arg_33 && arg_93 == arg_43 && arg_93 == arg_57 && arg_93 == arg_70 && arg_93 == arg_25 && arg_93 == arg_71 && arg_93 == arg_32 && arg_93 == arg_88 && arg_93 == arg_60 && arg_93 == arg_21 && arg_93 == arg_10 && arg_93 == arg_56 && arg_93 == arg_89 && arg_93 == arg_42 && arg_93 == arg_82 && arg_93 == arg_36 && arg_93 == arg_67 && arg_93 == arg_66 && arg_93 == arg_83 && arg_93 == arg_61 && arg_93 == arg_92 && arg_93 == arg_46 && arg_93 == arg_78 && arg_47 == arg_14 && arg_47 == arg_11 && arg_47 == arg_79 && arg_47 == arg_24 && arg_47 == arg_37 && arg_47 == arg_20 && arg_47 == arg_15 && arg_47 == arg_33 && arg_47 == arg_43 && arg_47 == arg_57 && arg_47 == arg_70 && arg_47 == arg_25 && arg_47 == arg_71 && arg_47 == arg_32 && arg_47 == arg_88 && arg_47 == arg_60 && arg_47 == arg_21 && arg_47 == arg_10 && arg_47 == arg_56 && arg_47 == arg_89 && arg_47 == arg_42 && arg_47 == arg_82 && arg_47 == arg_36 && arg_47 == arg_67 && arg_47 == arg_66 && arg_47 == arg_83 && arg_47 == arg_61 && arg_47 == arg_92 && arg_47 == arg_46 && arg_47 == arg_78 && arg_14 == arg_11 && arg_14 == arg_79 && arg_14 == arg_24 && arg_14 == arg_37 && arg_14 == arg_20 && arg_14 == arg_15 && arg_14 == arg_33 && arg_14 == arg_43 && arg_14 == arg_57 && arg_14 == arg_70 && arg_14 == arg_25 && arg_14 == arg_71 && arg_14 == arg_32 && arg_14 == arg_88 && arg_14 == arg_60 && arg_14 == arg_21 && arg_14 == arg_10 && arg_14 == arg_56 && arg_14 == arg_89 && arg_14 == arg_42 && arg_14 == arg_82 && arg_14 == arg_36 && arg_14 == arg_67 && arg_14 == arg_66 && arg_14 == arg_83 && arg_14 == arg_61 && arg_14 == arg_92 && arg_14 == arg_46 && arg_14 == arg_78 && arg_11 == arg_79 && arg_11 == arg_24 && arg_11 == arg_37 && arg_11 == arg_20 && arg_11 == arg_15 && arg_11 == arg_33 && arg_11 == arg_43 && arg_11 == arg_57 && arg_11 == arg_70 && arg_11 == arg_25 && arg_11 == arg_71 && arg_11 == arg_32 && arg_11 == arg_88 && arg_11 == arg_60 && arg_11 == arg_21 && arg_11 == arg_10 && arg_11 == arg_56 && arg_11 == arg_89 && arg_11 == arg_42 && arg_11 == arg_82 && arg_11 == arg_36 && arg_11 == arg_67 && arg_11 == arg_66 && arg_11 == arg_83 && arg_11 == arg_61 && arg_11 == arg_92 && arg_11 == arg_46 && arg_11 == arg_78 && arg_79 == arg_24 && arg_79 == arg_37 && arg_79 == arg_20 && arg_79 == arg_15 && arg_79 == arg_33 && arg_79 == arg_43 && arg_79 == arg_57 && arg_79 == arg_70 && arg_79 == arg_25 && arg_79 == arg_71 && arg_79 == arg_32 && arg_79 == arg_88 && arg_79 == arg_60 && arg_79 == arg_21 && arg_79 == arg_10 && arg_79 == arg_56 && arg_79 == arg_89 && arg_79 == arg_42 && arg_79 == arg_82 && arg_79 == arg_36 && arg_79 == arg_67 && arg_79 == arg_66 && arg_79 == arg_83 && arg_79 == arg_61 && arg_79 == arg_92 && arg_79 == arg_46 && arg_79 == arg_78 && arg_24 == arg_37 && arg_24 == arg_20 && arg_24 == arg_15 && arg_24 == arg_33 && arg_24 == arg_43 && arg_24 == arg_57 && arg_24 == arg_70 && arg_24 == arg_25 && arg_24 == arg_71 && arg_24 == arg_32 && arg_24 == arg_88 && arg_24 == arg_60 && arg_24 == arg_21 && arg_24 == arg_10 && arg_24 == arg_56 && arg_24 == arg_89 && arg_24 == arg_42 && arg_24 == arg_82 && arg_24 == arg_36 && arg_24 == arg_67 && arg_24 == arg_66 && arg_24 == arg_83 && arg_24 == arg_61 && arg_24 == arg_92 && arg_24 == arg_46 && arg_24 == arg_78 && arg_37 == arg_20 && arg_37 == arg_15 && arg_37 == arg_33 && arg_37 == arg_43 && arg_37 == arg_57 && arg_37 == arg_70 && arg_37 == arg_25 && arg_37 == arg_71 && arg_37 == arg_32 && arg_37 == arg_88 && arg_37 == arg_60 && arg_37 == arg_21 && arg_37 == arg_10 && arg_37 == arg_56 && arg_37 == arg_89 && arg_37 == arg_42 && arg_37 == arg_82 && arg_37 == arg_36 && arg_37 == arg_67 && arg_37 == arg_66 && arg_37 == arg_83 && arg_37 == arg_61 && arg_37 == arg_92 && arg_37 == arg_46 && arg_37 == arg_78 && arg_20 == arg_15 && arg_20 == arg_33 && arg_20 == arg_43 && arg_20 == arg_57 && arg_20 == arg_70 && arg_20 == arg_25 && arg_20 == arg_71 && arg_20 == arg_32 && arg_20 == arg_88 && arg_20 == arg_60 && arg_20 == arg_21 && arg_20 == arg_10 && arg_20 == arg_56 && arg_20 == arg_89 && arg_20 == arg_42 && arg_20 == arg_82 && arg_20 == arg_36 && arg_20 == arg_67 && arg_20 == arg_66 && arg_20 == arg_83 && arg_20 == arg_61 && arg_20 == arg_92 && arg_20 == arg_46 && arg_20 == arg_78 && arg_15 == arg_33 && arg_15 == arg_43 && arg_15 == arg_57 && arg_15 == arg_70 && arg_15 == arg_25 && arg_15 == arg_71 && arg_15 == arg_32 && arg_15 == arg_88 && arg_15 == arg_60 && arg_15 == arg_21 && arg_15 == arg_10 && arg_15 == arg_56 && arg_15 == arg_89 && arg_15 == arg_42 && arg_15 == arg_82 && arg_15 == arg_36 && arg_15 == arg_67 && arg_15 == arg_66 && arg_15 == arg_83 && arg_15 == arg_61 && arg_15 == arg_92 && arg_15 == arg_46 && arg_15 == arg_78 && arg_33 == arg_43 && arg_33 == arg_57 && arg_33 == arg_70 && arg_33 == arg_25 && arg_33 == arg_71 && arg_33 == arg_32 && arg_33 == arg_88 && arg_33 == arg_60 && arg_33 == arg_21 && arg_33 == arg_10 && arg_33 == arg_56 && arg_33 == arg_89 && arg_33 == arg_42 && arg_33 == arg_82 && arg_33 == arg_36 && arg_33 == arg_67 && arg_33 == arg_66 && arg_33 == arg_83 && arg_33 == arg_61 && arg_33 == arg_92 && arg_33 == arg_46 && arg_33 == arg_78 && arg_43 == arg_57 && arg_43 == arg_70 && arg_43 == arg_25 && arg_43 == arg_71 && arg_43 == arg_32 && arg_43 == arg_88 && arg_43 == arg_60 && arg_43 == arg_21 && arg_43 == arg_10 && arg_43 == arg_56 && arg_43 == arg_89 && arg_43 == arg_42 && arg_43 == arg_82 && arg_43 == arg_36 && arg_43 == arg_67 && arg_43 == arg_66 && arg_43 == arg_83 && arg_43 == arg_61 && arg_43 == arg_92 && arg_43 == arg_46 && arg_43 == arg_78 && arg_57 == arg_70 && arg_57 == arg_25 && arg_57 == arg_71 && arg_57 == arg_32 && arg_57 == arg_88 && arg_57 == arg_60 && arg_57 == arg_21 && arg_57 == arg_10 && arg_57 == arg_56 && arg_57 == arg_89 && arg_57 == arg_42 && arg_57 == arg_82 && arg_57 == arg_36 && arg_57 == arg_67 && arg_57 == arg_66 && arg_57 == arg_83 && arg_57 == arg_61 && arg_57 == arg_92 && arg_57 == arg_46 && arg_57 == arg_78 && arg_70 == arg_25 && arg_70 == arg_71 && arg_70 == arg_32 && arg_70 == arg_88 && arg_70 == arg_60 && arg_70 == arg_21 && arg_70 == arg_10 && arg_70 == arg_56 && arg_70 == arg_89 && arg_70 == arg_42 && arg_70 == arg_82 && arg_70 == arg_36 && arg_70 == arg_67 && arg_70 == arg_66 && arg_70 == arg_83 && arg_70 == arg_61 && arg_70 == arg_92 && arg_70 == arg_46 && arg_70 == arg_78 && arg_25 == arg_71 && arg_25 == arg_32 && arg_25 == arg_88 && arg_25 == arg_60 && arg_25 == arg_21 && arg_25 == arg_10 && arg_25 == arg_56 && arg_25 == arg_89 && arg_25 == arg_42 && arg_25 == arg_82 && arg_25 == arg_36 && arg_25 == arg_67 && arg_25 == arg_66 && arg_25 == arg_83 && arg_25 == arg_61 && arg_25 == arg_92 && arg_25 == arg_46 && arg_25 == arg_78 && arg_71 == arg_32 && arg_71 == arg_88 && arg_71 == arg_60 && arg_71 == arg_21 && arg_71 == arg_10 && arg_71 == arg_56 && arg_71 == arg_89 && arg_71 == arg_42 && arg_71 == arg_82 && arg_71 == arg_36 && arg_71 == arg_67 && arg_71 == arg_66 && arg_71 == arg_83 && arg_71 == arg_61 && arg_71 == arg_92 && arg_71 == arg_46 && arg_71 == arg_78 && arg_32 == arg_88 && arg_32 == arg_60 && arg_32 == arg_21 && arg_32 == arg_10 && arg_32 == arg_56 && arg_32 == arg_89 && arg_32 == arg_42 && arg_32 == arg_82 && arg_32 == arg_36 && arg_32 == arg_67 && arg_32 == arg_66 && arg_32 == arg_83 && arg_32 == arg_61 && arg_32 == arg_92 && arg_32 == arg_46 && arg_32 == arg_78 && arg_88 == arg_60 && arg_88 == arg_21 && arg_88 == arg_10 && arg_88 == arg_56 && arg_88 == arg_89 && arg_88 == arg_42 && arg_88 == arg_82 && arg_88 == arg_36 && arg_88 == arg_67 && arg_88 == arg_66 && arg_88 == arg_83 && arg_88 == arg_61 && arg_88 == arg_92 && arg_88 == arg_46 && arg_88 == arg_78 && arg_60 == arg_21 && arg_60 == arg_10 && arg_60 == arg_56 && arg_60 == arg_89 && arg_60 == arg_42 && arg_60 == arg_82 && arg_60 == arg_36 && arg_60 == arg_67 && arg_60 == arg_66 && arg_60 == arg_83 && arg_60 == arg_61 && arg_60 == arg_92 && arg_60 == arg_46 && arg_60 == arg_78 && arg_21 == arg_10 && arg_21 == arg_56 && arg_21 == arg_89 && arg_21 == arg_42 && arg_21 == arg_82 && arg_21 == arg_36 && arg_21 == arg_67 && arg_21 == arg_66 && arg_21 == arg_83 && arg_21 == arg_61 && arg_21 == arg_92 && arg_21 == arg_46 && arg_21 == arg_78 && arg_10 == arg_56 && arg_10 == arg_89 && arg_10 == arg_42 && arg_10 == arg_82 && arg_10 == arg_36 && arg_10 == arg_67 && arg_10 == arg_66 && arg_10 == arg_83 && arg_10 == arg_61 && arg_10 == arg_92 && arg_10 == arg_46 && arg_10 == arg_78 && arg_56 == arg_89 && arg_56 == arg_42 && arg_56 == arg_82 && arg_56 == arg_36 && arg_56 == arg_67 && arg_56 == arg_66 && arg_56 == arg_83 && arg_56 == arg_61 && arg_56 == arg_92 && arg_56 == arg_46 && arg_56 == arg_78 && arg_89 == arg_42 && arg_89 == arg_82 && arg_89 == arg_36 && arg_89 == arg_67 && arg_89 == arg_66 && arg_89 == arg_83 && arg_89 == arg_61 && arg_89 == arg_92 && arg_89 == arg_46 && arg_89 == arg_78 && arg_42 == arg_82 && arg_42 == arg_36 && arg_42 == arg_67 && arg_42 == arg_66 && arg_42 == arg_83 && arg_42 == arg_61 && arg_42 == arg_92 && arg_42 == arg_46 && arg_42 == arg_78 && arg_82 == arg_36 && arg_82 == arg_67 && arg_82 == arg_66 && arg_82 == arg_83 && arg_82 == arg_61 && arg_82 == arg_92 && arg_82 == arg_46 && arg_82 == arg_78 && arg_36 == arg_67 && arg_36 == arg_66 && arg_36 == arg_83 && arg_36 == arg_61 && arg_36 == arg_92 && arg_36 == arg_46 && arg_36 == arg_78 && arg_67 == arg_66 && arg_67 == arg_83 && arg_67 == arg_61 && arg_67 == arg_92 && arg_67 == arg_46 && arg_67 == arg_78 && arg_66 == arg_83 && arg_66 == arg_61 && arg_66 == arg_92 && arg_66 == arg_46 && arg_66 == arg_78 && arg_83 == arg_61 && arg_83 == arg_92 && arg_83 == arg_46 && arg_83 == arg_78 && arg_61 == arg_92 && arg_61 == arg_46 && arg_61 == arg_78 && arg_92 == arg_46 && arg_92 == arg_78 && arg_46 == arg_78 {
let rep_insts = pos.func.dfg.inst_results(inst);
let rep_insts_0 = rep_insts[0];
pos.func.dfg.change_to_alias(arg_49, rep_insts_0);
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1373(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Iadd => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BorImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_4) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_5 = args;
match opcode {
Opcode::Iadd => {
if rhs_4 == -1 {
if rhs_3 == -4 {
if rhs_2 == 3 {
if rhs_1 == 4 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_6 = args;
match opcode {
Opcode::Iadd => {
if arg_5[0] != arg_5[1] && arg_5[0] != arg_6[1] && arg_5[0] == arg_6[0] && arg_5[1] == arg_6[1] && arg_5[1] != arg_6[0] && arg_6[1] != arg_6[0] {
let rhs_inst_9 = pos.ins().iconst(I64, 18446744073709551612_u64 as i64);
let rhs_inst_10 = pos.ins().band_not(rhs_inst_9, arg_3);
let rhs_inst_11 = pos.ins().iadd_imm(rhs_inst_10, 18446744073709551615_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_11);

}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1374(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 2 {
if rhs_1 == 8 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_4) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_6 == 1 {
if rhs_5 == 2 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_9 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_6) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_7 = arg;
let rhs_10 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_10 == 2 {
if rhs_9 == 1 {
if arg_5 == arg_7 && arg_5 == arg_3 && arg_7 == arg_3 {
let rhs_inst_10 = pos.ins().iconst(I32, 42603419_u64 as i64);
let rhs_inst_11 = pos.ins().sshr(rhs_inst_10, arg_2);
let rhs_inst_12 = pos.ins().bor_imm(rhs_inst_11, 4294967284_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_12);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1375(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_3 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_3[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 14 {
if rhs_1 == 24576 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_5 == 16384 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_7 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_7 == 8192 {
if arg_3[1] != arg_5 && arg_3[1] != arg_4 && arg_3[1] != arg_6 && arg_5 != arg_4 && arg_5 == arg_6 && arg_4 != arg_6 {
let rhs_inst_11 = pos.ins().bor(arg_6, arg_1[0]);
let rhs_inst_12 = pos.ins().iconst(I32, 4294942719_u64 as i64);
let rhs_inst_13 = pos.ins().bor_not(rhs_inst_12, rhs_inst_11);
pos.func.dfg.replace(inst).bnot(rhs_inst_13);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1376(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_3 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_3[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_4) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 254 {
if rhs_2 == 1 {
match pos.func.dfg.value_def(arg_3[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_6 == 6 {
if rhs_1 == -126 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_7 = arg;
let rhs_9 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_7) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_10 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_8) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_9 = arg;
let rhs_11 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_11 == 254 {
if rhs_10 == 1 {
if rhs_9 == 4 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_10 = arg;
let rhs_15 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_10) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_11 = arg;
let rhs_16 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_11) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_12 = arg;
let rhs_17 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_17 == 254 {
if rhs_16 == 1 {
if rhs_15 == 8 {
if arg_5 == arg_6 && arg_5 == arg_12 && arg_5 == arg_9 && arg_6 == arg_12 && arg_6 == arg_9 && arg_12 == arg_9 {
let rhs_inst_11 = pos.ins().band_imm(arg_2, 4294967182_u64 as i64);
let rhs_inst_12 = pos.ins().bnot(rhs_inst_11);
pos.func.dfg.replace(inst).bnot(rhs_inst_12);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1377(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_3 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_3[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_4) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_5 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_5[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_6) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_7 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_7[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_8) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_9 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_9[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_10 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_10) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_11 = arg;
let rhs_7 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_7 == 255 {
if rhs_6 == 1 {
match pos.func.dfg.value_def(arg_9[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_12 = arg;
let rhs_10 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_10 == 255 {
if rhs_5 == 2 {
match pos.func.dfg.value_def(arg_7[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_13 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_13[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_14 = arg;
let rhs_13 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_14) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_15 = arg;
let rhs_14 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_14 == 255 {
if rhs_13 == 1 {
match pos.func.dfg.value_def(arg_13[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_16 = arg;
let rhs_17 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_17 == 255 {
if rhs_4 == 4 {
match pos.func.dfg.value_def(arg_5[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_17 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_17[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_18 = arg;
let rhs_20 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_18) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_19 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_19[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_20 = arg;
let rhs_21 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_20) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_21 = arg;
let rhs_22 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_22 == 255 {
if rhs_21 == 1 {
match pos.func.dfg.value_def(arg_19[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_22 = arg;
let rhs_25 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_25 == 255 {
if rhs_20 == 2 {
match pos.func.dfg.value_def(arg_17[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_23 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_23[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_24 = arg;
let rhs_28 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_24) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_25 = arg;
let rhs_29 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_29 == 255 {
if rhs_28 == 1 {
match pos.func.dfg.value_def(arg_23[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_26 = arg;
let rhs_32 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_32 == 255 {
if rhs_3 == 8 {
match pos.func.dfg.value_def(arg_3[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_27 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_27[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_28 = arg;
let rhs_35 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_28) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_29 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_29[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_30 = arg;
let rhs_36 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_30) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_31 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_31[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_32 = arg;
let rhs_37 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_32) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_33 = arg;
let rhs_38 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_38 == 255 {
if rhs_37 == 1 {
match pos.func.dfg.value_def(arg_31[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_34 = arg;
let rhs_41 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_41 == 255 {
if rhs_36 == 2 {
match pos.func.dfg.value_def(arg_29[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_35 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_35[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_36 = arg;
let rhs_44 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_36) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_37 = arg;
let rhs_45 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_45 == 255 {
if rhs_44 == 1 {
match pos.func.dfg.value_def(arg_35[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_38 = arg;
let rhs_48 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_48 == 255 {
if rhs_35 == 4 {
match pos.func.dfg.value_def(arg_27[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_39 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_39[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_40 = arg;
let rhs_51 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_40) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_41 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_41[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_42 = arg;
let rhs_52 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_42) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_43 = arg;
let rhs_53 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_53 == 255 {
if rhs_52 == 1 {
match pos.func.dfg.value_def(arg_41[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_44 = arg;
let rhs_56 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_56 == 255 {
if rhs_51 == 2 {
match pos.func.dfg.value_def(arg_39[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_45 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_45[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_46 = arg;
let rhs_59 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_46) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_47 = arg;
let rhs_60 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_60 == 255 {
if rhs_59 == 1 {
match pos.func.dfg.value_def(arg_45[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_48 = arg;
let rhs_63 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_63 == 255 {
if rhs_2 == 16 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_49 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_49[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_50 = arg;
let rhs_66 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_50) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_51 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_51[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_52 = arg;
let rhs_67 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_52) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_53 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_53[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_54 = arg;
let rhs_68 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_54) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_55 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_55[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_56 = arg;
let rhs_69 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_56) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_57 = arg;
let rhs_70 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_70 == 255 {
if rhs_69 == 1 {
match pos.func.dfg.value_def(arg_55[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_58 = arg;
let rhs_73 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_73 == 255 {
if rhs_68 == 2 {
match pos.func.dfg.value_def(arg_53[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_59 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_59[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_60 = arg;
let rhs_76 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_60) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_61 = arg;
let rhs_77 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_77 == 255 {
if rhs_76 == 1 {
match pos.func.dfg.value_def(arg_59[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_62 = arg;
let rhs_80 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_80 == 255 {
if rhs_67 == 4 {
match pos.func.dfg.value_def(arg_51[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_63 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_63[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_64 = arg;
let rhs_83 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_64) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_65 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_65[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_66 = arg;
let rhs_84 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_66) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_67 = arg;
let rhs_85 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_85 == 255 {
if rhs_84 == 1 {
match pos.func.dfg.value_def(arg_65[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_68 = arg;
let rhs_88 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_88 == 255 {
if rhs_83 == 2 {
match pos.func.dfg.value_def(arg_63[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_69 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_69[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_70 = arg;
let rhs_91 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_70) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_71 = arg;
let rhs_92 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_92 == 255 {
if rhs_91 == 1 {
match pos.func.dfg.value_def(arg_69[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_72 = arg;
let rhs_95 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_95 == 255 {
if rhs_66 == 8 {
match pos.func.dfg.value_def(arg_49[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_73 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_73[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_74 = arg;
let rhs_98 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_74) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_75 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_75[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_76 = arg;
let rhs_99 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_76) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_77 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_77[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_78 = arg;
let rhs_100 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_78) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_79 = arg;
let rhs_101 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_101 == 255 {
if rhs_100 == 1 {
match pos.func.dfg.value_def(arg_77[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_80 = arg;
let rhs_104 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_104 == 255 {
if rhs_99 == 2 {
match pos.func.dfg.value_def(arg_75[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_81 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_81[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_82 = arg;
let rhs_107 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_82) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_83 = arg;
let rhs_108 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_108 == 255 {
if rhs_107 == 1 {
match pos.func.dfg.value_def(arg_81[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_84 = arg;
let rhs_111 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_111 == 255 {
if rhs_98 == 4 {
match pos.func.dfg.value_def(arg_73[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_85 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_85[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_86 = arg;
let rhs_114 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_86) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_87 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_87[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_88 = arg;
let rhs_115 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_88) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_89 = arg;
let rhs_116 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_116 == 255 {
if rhs_115 == 1 {
match pos.func.dfg.value_def(arg_87[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_90 = arg;
let rhs_119 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_119 == 255 {
if rhs_114 == 2 {
match pos.func.dfg.value_def(arg_85[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_91 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_91[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_92 = arg;
let rhs_122 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_92) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_93 = arg;
let rhs_123 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_123 == 255 {
if rhs_122 == 1 {
match pos.func.dfg.value_def(arg_91[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_94 = arg;
let rhs_126 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_126 == 255 {
if rhs_1 == 32 {
if arg_84 == arg_79 && arg_84 == arg_38 && arg_84 == arg_34 && arg_84 == arg_71 && arg_84 == arg_89 && arg_84 == arg_72 && arg_84 == arg_11 && arg_84 == arg_47 && arg_84 == arg_94 && arg_84 == arg_43 && arg_84 == arg_62 && arg_84 == arg_37 && arg_84 == arg_15 && arg_84 == arg_33 && arg_84 == arg_21 && arg_84 == arg_26 && arg_84 == arg_48 && arg_84 == arg_90 && arg_84 == arg_58 && arg_84 == arg_61 && arg_84 == arg_44 && arg_84 == arg_83 && arg_84 == arg_57 && arg_84 == arg_93 && arg_84 == arg_68 && arg_84 == arg_67 && arg_84 == arg_12 && arg_84 == arg_16 && arg_84 == arg_80 && arg_84 == arg_25 && arg_84 == arg_22 && arg_79 == arg_38 && arg_79 == arg_34 && arg_79 == arg_71 && arg_79 == arg_89 && arg_79 == arg_72 && arg_79 == arg_11 && arg_79 == arg_47 && arg_79 == arg_94 && arg_79 == arg_43 && arg_79 == arg_62 && arg_79 == arg_37 && arg_79 == arg_15 && arg_79 == arg_33 && arg_79 == arg_21 && arg_79 == arg_26 && arg_79 == arg_48 && arg_79 == arg_90 && arg_79 == arg_58 && arg_79 == arg_61 && arg_79 == arg_44 && arg_79 == arg_83 && arg_79 == arg_57 && arg_79 == arg_93 && arg_79 == arg_68 && arg_79 == arg_67 && arg_79 == arg_12 && arg_79 == arg_16 && arg_79 == arg_80 && arg_79 == arg_25 && arg_79 == arg_22 && arg_38 == arg_34 && arg_38 == arg_71 && arg_38 == arg_89 && arg_38 == arg_72 && arg_38 == arg_11 && arg_38 == arg_47 && arg_38 == arg_94 && arg_38 == arg_43 && arg_38 == arg_62 && arg_38 == arg_37 && arg_38 == arg_15 && arg_38 == arg_33 && arg_38 == arg_21 && arg_38 == arg_26 && arg_38 == arg_48 && arg_38 == arg_90 && arg_38 == arg_58 && arg_38 == arg_61 && arg_38 == arg_44 && arg_38 == arg_83 && arg_38 == arg_57 && arg_38 == arg_93 && arg_38 == arg_68 && arg_38 == arg_67 && arg_38 == arg_12 && arg_38 == arg_16 && arg_38 == arg_80 && arg_38 == arg_25 && arg_38 == arg_22 && arg_34 == arg_71 && arg_34 == arg_89 && arg_34 == arg_72 && arg_34 == arg_11 && arg_34 == arg_47 && arg_34 == arg_94 && arg_34 == arg_43 && arg_34 == arg_62 && arg_34 == arg_37 && arg_34 == arg_15 && arg_34 == arg_33 && arg_34 == arg_21 && arg_34 == arg_26 && arg_34 == arg_48 && arg_34 == arg_90 && arg_34 == arg_58 && arg_34 == arg_61 && arg_34 == arg_44 && arg_34 == arg_83 && arg_34 == arg_57 && arg_34 == arg_93 && arg_34 == arg_68 && arg_34 == arg_67 && arg_34 == arg_12 && arg_34 == arg_16 && arg_34 == arg_80 && arg_34 == arg_25 && arg_34 == arg_22 && arg_71 == arg_89 && arg_71 == arg_72 && arg_71 == arg_11 && arg_71 == arg_47 && arg_71 == arg_94 && arg_71 == arg_43 && arg_71 == arg_62 && arg_71 == arg_37 && arg_71 == arg_15 && arg_71 == arg_33 && arg_71 == arg_21 && arg_71 == arg_26 && arg_71 == arg_48 && arg_71 == arg_90 && arg_71 == arg_58 && arg_71 == arg_61 && arg_71 == arg_44 && arg_71 == arg_83 && arg_71 == arg_57 && arg_71 == arg_93 && arg_71 == arg_68 && arg_71 == arg_67 && arg_71 == arg_12 && arg_71 == arg_16 && arg_71 == arg_80 && arg_71 == arg_25 && arg_71 == arg_22 && arg_89 == arg_72 && arg_89 == arg_11 && arg_89 == arg_47 && arg_89 == arg_94 && arg_89 == arg_43 && arg_89 == arg_62 && arg_89 == arg_37 && arg_89 == arg_15 && arg_89 == arg_33 && arg_89 == arg_21 && arg_89 == arg_26 && arg_89 == arg_48 && arg_89 == arg_90 && arg_89 == arg_58 && arg_89 == arg_61 && arg_89 == arg_44 && arg_89 == arg_83 && arg_89 == arg_57 && arg_89 == arg_93 && arg_89 == arg_68 && arg_89 == arg_67 && arg_89 == arg_12 && arg_89 == arg_16 && arg_89 == arg_80 && arg_89 == arg_25 && arg_89 == arg_22 && arg_72 == arg_11 && arg_72 == arg_47 && arg_72 == arg_94 && arg_72 == arg_43 && arg_72 == arg_62 && arg_72 == arg_37 && arg_72 == arg_15 && arg_72 == arg_33 && arg_72 == arg_21 && arg_72 == arg_26 && arg_72 == arg_48 && arg_72 == arg_90 && arg_72 == arg_58 && arg_72 == arg_61 && arg_72 == arg_44 && arg_72 == arg_83 && arg_72 == arg_57 && arg_72 == arg_93 && arg_72 == arg_68 && arg_72 == arg_67 && arg_72 == arg_12 && arg_72 == arg_16 && arg_72 == arg_80 && arg_72 == arg_25 && arg_72 == arg_22 && arg_11 == arg_47 && arg_11 == arg_94 && arg_11 == arg_43 && arg_11 == arg_62 && arg_11 == arg_37 && arg_11 == arg_15 && arg_11 == arg_33 && arg_11 == arg_21 && arg_11 == arg_26 && arg_11 == arg_48 && arg_11 == arg_90 && arg_11 == arg_58 && arg_11 == arg_61 && arg_11 == arg_44 && arg_11 == arg_83 && arg_11 == arg_57 && arg_11 == arg_93 && arg_11 == arg_68 && arg_11 == arg_67 && arg_11 == arg_12 && arg_11 == arg_16 && arg_11 == arg_80 && arg_11 == arg_25 && arg_11 == arg_22 && arg_47 == arg_94 && arg_47 == arg_43 && arg_47 == arg_62 && arg_47 == arg_37 && arg_47 == arg_15 && arg_47 == arg_33 && arg_47 == arg_21 && arg_47 == arg_26 && arg_47 == arg_48 && arg_47 == arg_90 && arg_47 == arg_58 && arg_47 == arg_61 && arg_47 == arg_44 && arg_47 == arg_83 && arg_47 == arg_57 && arg_47 == arg_93 && arg_47 == arg_68 && arg_47 == arg_67 && arg_47 == arg_12 && arg_47 == arg_16 && arg_47 == arg_80 && arg_47 == arg_25 && arg_47 == arg_22 && arg_94 == arg_43 && arg_94 == arg_62 && arg_94 == arg_37 && arg_94 == arg_15 && arg_94 == arg_33 && arg_94 == arg_21 && arg_94 == arg_26 && arg_94 == arg_48 && arg_94 == arg_90 && arg_94 == arg_58 && arg_94 == arg_61 && arg_94 == arg_44 && arg_94 == arg_83 && arg_94 == arg_57 && arg_94 == arg_93 && arg_94 == arg_68 && arg_94 == arg_67 && arg_94 == arg_12 && arg_94 == arg_16 && arg_94 == arg_80 && arg_94 == arg_25 && arg_94 == arg_22 && arg_43 == arg_62 && arg_43 == arg_37 && arg_43 == arg_15 && arg_43 == arg_33 && arg_43 == arg_21 && arg_43 == arg_26 && arg_43 == arg_48 && arg_43 == arg_90 && arg_43 == arg_58 && arg_43 == arg_61 && arg_43 == arg_44 && arg_43 == arg_83 && arg_43 == arg_57 && arg_43 == arg_93 && arg_43 == arg_68 && arg_43 == arg_67 && arg_43 == arg_12 && arg_43 == arg_16 && arg_43 == arg_80 && arg_43 == arg_25 && arg_43 == arg_22 && arg_62 == arg_37 && arg_62 == arg_15 && arg_62 == arg_33 && arg_62 == arg_21 && arg_62 == arg_26 && arg_62 == arg_48 && arg_62 == arg_90 && arg_62 == arg_58 && arg_62 == arg_61 && arg_62 == arg_44 && arg_62 == arg_83 && arg_62 == arg_57 && arg_62 == arg_93 && arg_62 == arg_68 && arg_62 == arg_67 && arg_62 == arg_12 && arg_62 == arg_16 && arg_62 == arg_80 && arg_62 == arg_25 && arg_62 == arg_22 && arg_37 == arg_15 && arg_37 == arg_33 && arg_37 == arg_21 && arg_37 == arg_26 && arg_37 == arg_48 && arg_37 == arg_90 && arg_37 == arg_58 && arg_37 == arg_61 && arg_37 == arg_44 && arg_37 == arg_83 && arg_37 == arg_57 && arg_37 == arg_93 && arg_37 == arg_68 && arg_37 == arg_67 && arg_37 == arg_12 && arg_37 == arg_16 && arg_37 == arg_80 && arg_37 == arg_25 && arg_37 == arg_22 && arg_15 == arg_33 && arg_15 == arg_21 && arg_15 == arg_26 && arg_15 == arg_48 && arg_15 == arg_90 && arg_15 == arg_58 && arg_15 == arg_61 && arg_15 == arg_44 && arg_15 == arg_83 && arg_15 == arg_57 && arg_15 == arg_93 && arg_15 == arg_68 && arg_15 == arg_67 && arg_15 == arg_12 && arg_15 == arg_16 && arg_15 == arg_80 && arg_15 == arg_25 && arg_15 == arg_22 && arg_33 == arg_21 && arg_33 == arg_26 && arg_33 == arg_48 && arg_33 == arg_90 && arg_33 == arg_58 && arg_33 == arg_61 && arg_33 == arg_44 && arg_33 == arg_83 && arg_33 == arg_57 && arg_33 == arg_93 && arg_33 == arg_68 && arg_33 == arg_67 && arg_33 == arg_12 && arg_33 == arg_16 && arg_33 == arg_80 && arg_33 == arg_25 && arg_33 == arg_22 && arg_21 == arg_26 && arg_21 == arg_48 && arg_21 == arg_90 && arg_21 == arg_58 && arg_21 == arg_61 && arg_21 == arg_44 && arg_21 == arg_83 && arg_21 == arg_57 && arg_21 == arg_93 && arg_21 == arg_68 && arg_21 == arg_67 && arg_21 == arg_12 && arg_21 == arg_16 && arg_21 == arg_80 && arg_21 == arg_25 && arg_21 == arg_22 && arg_26 == arg_48 && arg_26 == arg_90 && arg_26 == arg_58 && arg_26 == arg_61 && arg_26 == arg_44 && arg_26 == arg_83 && arg_26 == arg_57 && arg_26 == arg_93 && arg_26 == arg_68 && arg_26 == arg_67 && arg_26 == arg_12 && arg_26 == arg_16 && arg_26 == arg_80 && arg_26 == arg_25 && arg_26 == arg_22 && arg_48 == arg_90 && arg_48 == arg_58 && arg_48 == arg_61 && arg_48 == arg_44 && arg_48 == arg_83 && arg_48 == arg_57 && arg_48 == arg_93 && arg_48 == arg_68 && arg_48 == arg_67 && arg_48 == arg_12 && arg_48 == arg_16 && arg_48 == arg_80 && arg_48 == arg_25 && arg_48 == arg_22 && arg_90 == arg_58 && arg_90 == arg_61 && arg_90 == arg_44 && arg_90 == arg_83 && arg_90 == arg_57 && arg_90 == arg_93 && arg_90 == arg_68 && arg_90 == arg_67 && arg_90 == arg_12 && arg_90 == arg_16 && arg_90 == arg_80 && arg_90 == arg_25 && arg_90 == arg_22 && arg_58 == arg_61 && arg_58 == arg_44 && arg_58 == arg_83 && arg_58 == arg_57 && arg_58 == arg_93 && arg_58 == arg_68 && arg_58 == arg_67 && arg_58 == arg_12 && arg_58 == arg_16 && arg_58 == arg_80 && arg_58 == arg_25 && arg_58 == arg_22 && arg_61 == arg_44 && arg_61 == arg_83 && arg_61 == arg_57 && arg_61 == arg_93 && arg_61 == arg_68 && arg_61 == arg_67 && arg_61 == arg_12 && arg_61 == arg_16 && arg_61 == arg_80 && arg_61 == arg_25 && arg_61 == arg_22 && arg_44 == arg_83 && arg_44 == arg_57 && arg_44 == arg_93 && arg_44 == arg_68 && arg_44 == arg_67 && arg_44 == arg_12 && arg_44 == arg_16 && arg_44 == arg_80 && arg_44 == arg_25 && arg_44 == arg_22 && arg_83 == arg_57 && arg_83 == arg_93 && arg_83 == arg_68 && arg_83 == arg_67 && arg_83 == arg_12 && arg_83 == arg_16 && arg_83 == arg_80 && arg_83 == arg_25 && arg_83 == arg_22 && arg_57 == arg_93 && arg_57 == arg_68 && arg_57 == arg_67 && arg_57 == arg_12 && arg_57 == arg_16 && arg_57 == arg_80 && arg_57 == arg_25 && arg_57 == arg_22 && arg_93 == arg_68 && arg_93 == arg_67 && arg_93 == arg_12 && arg_93 == arg_16 && arg_93 == arg_80 && arg_93 == arg_25 && arg_93 == arg_22 && arg_68 == arg_67 && arg_68 == arg_12 && arg_68 == arg_16 && arg_68 == arg_80 && arg_68 == arg_25 && arg_68 == arg_22 && arg_67 == arg_12 && arg_67 == arg_16 && arg_67 == arg_80 && arg_67 == arg_25 && arg_67 == arg_22 && arg_12 == arg_16 && arg_12 == arg_80 && arg_12 == arg_25 && arg_12 == arg_22 && arg_16 == arg_80 && arg_16 == arg_25 && arg_16 == arg_22 && arg_80 == arg_25 && arg_80 == arg_22 && arg_25 == arg_22 {
pos.func.dfg.replace(inst).iconst(I64, 0_u64 as i64); 
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1378(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_4 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_4[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_5) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_6 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_6[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_7 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_7) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_8 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_8[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_9 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_9) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_10 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_10[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_11 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_11) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_12 = arg;
let rhs_7 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_7 == 255 {
if rhs_6 == 1 {
match pos.func.dfg.value_def(arg_10[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_13 = arg;
let rhs_10 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_10 == 255 {
if rhs_5 == 2 {
match pos.func.dfg.value_def(arg_8[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_14 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_14[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_15 = arg;
let rhs_13 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_15) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_16 = arg;
let rhs_14 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_14 == 255 {
if rhs_13 == 1 {
match pos.func.dfg.value_def(arg_14[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_17 = arg;
let rhs_17 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_17 == 255 {
if rhs_4 == 4 {
match pos.func.dfg.value_def(arg_6[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_18 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_18[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_19 = arg;
let rhs_20 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_19) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_20 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_20[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_21 = arg;
let rhs_21 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_21) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_22 = arg;
let rhs_22 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_22 == 255 {
if rhs_21 == 1 {
match pos.func.dfg.value_def(arg_20[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_23 = arg;
let rhs_25 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_25 == 255 {
if rhs_20 == 2 {
match pos.func.dfg.value_def(arg_18[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_24 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_24[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_25 = arg;
let rhs_28 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_25) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_26 = arg;
let rhs_29 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_29 == 255 {
if rhs_28 == 1 {
match pos.func.dfg.value_def(arg_24[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_27 = arg;
let rhs_32 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_32 == 255 {
if rhs_3 == 8 {
match pos.func.dfg.value_def(arg_4[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_28 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_28[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_29 = arg;
let rhs_35 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_29) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_30 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_30[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_31 = arg;
let rhs_36 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_31) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_32 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_32[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_33 = arg;
let rhs_37 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_33) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_34 = arg;
let rhs_38 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_38 == 255 {
if rhs_37 == 1 {
match pos.func.dfg.value_def(arg_32[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_35 = arg;
let rhs_41 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_41 == 255 {
if rhs_36 == 2 {
match pos.func.dfg.value_def(arg_30[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_36 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_36[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_37 = arg;
let rhs_44 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_37) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_38 = arg;
let rhs_45 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_45 == 255 {
if rhs_44 == 1 {
match pos.func.dfg.value_def(arg_36[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_39 = arg;
let rhs_48 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_48 == 255 {
if rhs_35 == 4 {
match pos.func.dfg.value_def(arg_28[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_40 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_40[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_41 = arg;
let rhs_51 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_41) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_42 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_42[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_43 = arg;
let rhs_52 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_43) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_44 = arg;
let rhs_53 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_53 == 255 {
if rhs_52 == 1 {
match pos.func.dfg.value_def(arg_42[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_45 = arg;
let rhs_56 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_56 == 255 {
if rhs_51 == 2 {
match pos.func.dfg.value_def(arg_40[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_46 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_46[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_47 = arg;
let rhs_59 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_47) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_48 = arg;
let rhs_60 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_60 == 255 {
if rhs_59 == 1 {
match pos.func.dfg.value_def(arg_46[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_49 = arg;
let rhs_63 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_63 == 255 {
if rhs_2 == 16 {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_50 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_50[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_51 = arg;
let rhs_66 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_51) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_52 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_52[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_53 = arg;
let rhs_67 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_53) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_54 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_54[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_55 = arg;
let rhs_68 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_55) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_56 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_56[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_57 = arg;
let rhs_69 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_57) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_58 = arg;
let rhs_70 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_70 == 255 {
if rhs_69 == 1 {
match pos.func.dfg.value_def(arg_56[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_59 = arg;
let rhs_73 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_73 == 255 {
if rhs_68 == 2 {
match pos.func.dfg.value_def(arg_54[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_60 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_60[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_61 = arg;
let rhs_76 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_61) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_62 = arg;
let rhs_77 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_77 == 255 {
if rhs_76 == 1 {
match pos.func.dfg.value_def(arg_60[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_63 = arg;
let rhs_80 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_80 == 255 {
if rhs_67 == 4 {
match pos.func.dfg.value_def(arg_52[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_64 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_64[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_65 = arg;
let rhs_83 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_65) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_66 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_66[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_67 = arg;
let rhs_84 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_67) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_68 = arg;
let rhs_85 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_85 == 255 {
if rhs_84 == 1 {
match pos.func.dfg.value_def(arg_66[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_69 = arg;
let rhs_88 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_88 == 255 {
if rhs_83 == 2 {
match pos.func.dfg.value_def(arg_64[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_70 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_70[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_71 = arg;
let rhs_91 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_71) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_72 = arg;
let rhs_92 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_92 == 255 {
if rhs_91 == 1 {
match pos.func.dfg.value_def(arg_70[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_73 = arg;
let rhs_95 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_95 == 255 {
if rhs_66 == 8 {
match pos.func.dfg.value_def(arg_50[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_74 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_74[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_75 = arg;
let rhs_98 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_75) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_76 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_76[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_77 = arg;
let rhs_99 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_77) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_78 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_78[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_79 = arg;
let rhs_100 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_79) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_80 = arg;
let rhs_101 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_101 == 255 {
if rhs_100 == 1 {
match pos.func.dfg.value_def(arg_78[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_81 = arg;
let rhs_104 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_104 == 255 {
if rhs_99 == 2 {
match pos.func.dfg.value_def(arg_76[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_82 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_82[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_83 = arg;
let rhs_107 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_83) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_84 = arg;
let rhs_108 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_108 == 255 {
if rhs_107 == 1 {
match pos.func.dfg.value_def(arg_82[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_85 = arg;
let rhs_111 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_111 == 255 {
if rhs_98 == 4 {
match pos.func.dfg.value_def(arg_74[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_86 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_86[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_87 = arg;
let rhs_114 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_87) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_88 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_88[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_89 = arg;
let rhs_115 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_89) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_90 = arg;
let rhs_116 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_116 == 255 {
if rhs_115 == 1 {
match pos.func.dfg.value_def(arg_88[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_91 = arg;
let rhs_119 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_119 == 255 {
if rhs_114 == 2 {
match pos.func.dfg.value_def(arg_86[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_92 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_92[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_93 = arg;
let rhs_122 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_93) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_94 = arg;
let rhs_123 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_123 == 255 {
if rhs_122 == 1 {
match pos.func.dfg.value_def(arg_92[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_95 = arg;
let rhs_126 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_126 == 255 {
if rhs_1 == 32 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_96 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_96[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_97 = arg;
let rhs_129 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_97) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_98 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_98[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_99 = arg;
let rhs_130 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_99) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_100 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_100[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_101 = arg;
let rhs_131 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_101) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_102 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_102[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_103 = arg;
let rhs_132 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_103) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_104 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_104[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_105 = arg;
let rhs_133 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_105) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_106 = arg;
let rhs_134 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_134 == 255 {
if rhs_133 == 1 {
match pos.func.dfg.value_def(arg_104[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_107 = arg;
let rhs_137 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_137 == 255 {
if rhs_132 == 2 {
match pos.func.dfg.value_def(arg_102[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_108 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_108[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_109 = arg;
let rhs_140 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_109) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_110 = arg;
let rhs_141 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_141 == 255 {
if rhs_140 == 1 {
match pos.func.dfg.value_def(arg_108[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_111 = arg;
let rhs_144 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_144 == 255 {
if rhs_131 == 4 {
match pos.func.dfg.value_def(arg_100[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_112 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_112[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_113 = arg;
let rhs_147 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_113) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_114 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_114[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_115 = arg;
let rhs_148 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_115) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_116 = arg;
let rhs_149 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_149 == 255 {
if rhs_148 == 1 {
match pos.func.dfg.value_def(arg_114[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_117 = arg;
let rhs_152 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_152 == 255 {
if rhs_147 == 2 {
match pos.func.dfg.value_def(arg_112[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_118 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_118[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_119 = arg;
let rhs_155 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_119) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_120 = arg;
let rhs_156 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_156 == 255 {
if rhs_155 == 1 {
match pos.func.dfg.value_def(arg_118[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_121 = arg;
let rhs_159 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_159 == 255 {
if rhs_130 == 8 {
match pos.func.dfg.value_def(arg_98[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_122 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_122[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_123 = arg;
let rhs_162 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_123) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_124 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_124[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_125 = arg;
let rhs_163 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_125) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_126 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_126[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_127 = arg;
let rhs_164 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_127) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_128 = arg;
let rhs_165 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_165 == 255 {
if rhs_164 == 1 {
match pos.func.dfg.value_def(arg_126[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_129 = arg;
let rhs_168 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_168 == 255 {
if rhs_163 == 2 {
match pos.func.dfg.value_def(arg_124[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_130 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_130[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_131 = arg;
let rhs_171 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_131) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_132 = arg;
let rhs_172 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_172 == 255 {
if rhs_171 == 1 {
match pos.func.dfg.value_def(arg_130[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_133 = arg;
let rhs_175 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_175 == 255 {
if rhs_162 == 4 {
match pos.func.dfg.value_def(arg_122[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_134 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_134[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_135 = arg;
let rhs_178 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_135) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_136 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_136[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_137 = arg;
let rhs_179 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_137) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_138 = arg;
let rhs_180 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_180 == 255 {
if rhs_179 == 1 {
match pos.func.dfg.value_def(arg_136[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_139 = arg;
let rhs_183 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_183 == 255 {
if rhs_178 == 2 {
match pos.func.dfg.value_def(arg_134[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_140 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_140[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_141 = arg;
let rhs_186 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_141) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_142 = arg;
let rhs_187 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_187 == 255 {
if rhs_186 == 1 {
match pos.func.dfg.value_def(arg_140[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_143 = arg;
let rhs_190 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_190 == 255 {
if rhs_129 == 16 {
match pos.func.dfg.value_def(arg_96[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_144 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_144[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_145 = arg;
let rhs_193 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_145) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_146 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_146[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_147 = arg;
let rhs_194 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_147) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_148 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_148[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_149 = arg;
let rhs_195 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_149) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_150 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_150[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_151 = arg;
let rhs_196 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_151) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_152 = arg;
let rhs_197 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_197 == 255 {
if rhs_196 == 1 {
match pos.func.dfg.value_def(arg_150[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_153 = arg;
let rhs_200 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_200 == 255 {
if rhs_195 == 2 {
match pos.func.dfg.value_def(arg_148[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_154 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_154[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_155 = arg;
let rhs_203 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_155) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_156 = arg;
let rhs_204 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_204 == 255 {
if rhs_203 == 1 {
match pos.func.dfg.value_def(arg_154[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_157 = arg;
let rhs_207 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_207 == 255 {
if rhs_194 == 4 {
match pos.func.dfg.value_def(arg_146[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_158 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_158[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_159 = arg;
let rhs_210 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_159) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_160 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_160[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_161 = arg;
let rhs_211 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_161) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_162 = arg;
let rhs_212 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_212 == 255 {
if rhs_211 == 1 {
match pos.func.dfg.value_def(arg_160[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_163 = arg;
let rhs_215 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_215 == 255 {
if rhs_210 == 2 {
match pos.func.dfg.value_def(arg_158[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_164 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_164[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_165 = arg;
let rhs_218 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_165) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_166 = arg;
let rhs_219 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_219 == 255 {
if rhs_218 == 1 {
match pos.func.dfg.value_def(arg_164[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_167 = arg;
let rhs_222 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_222 == 255 {
if rhs_193 == 8 {
match pos.func.dfg.value_def(arg_144[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_168 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_168[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_169 = arg;
let rhs_225 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_169) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_170 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_170[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_171 = arg;
let rhs_226 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_171) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_172 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_172[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_173 = arg;
let rhs_227 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_173) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_174 = arg;
let rhs_228 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_228 == 255 {
if rhs_227 == 1 {
match pos.func.dfg.value_def(arg_172[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_175 = arg;
let rhs_231 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_231 == 255 {
if rhs_226 == 2 {
match pos.func.dfg.value_def(arg_170[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_176 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_176[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_177 = arg;
let rhs_234 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_177) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_178 = arg;
let rhs_235 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_235 == 255 {
if rhs_234 == 1 {
match pos.func.dfg.value_def(arg_176[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_179 = arg;
let rhs_238 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_238 == 255 {
if rhs_225 == 4 {
match pos.func.dfg.value_def(arg_168[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_180 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_180[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_181 = arg;
let rhs_241 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_181) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_182 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_182[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_183 = arg;
let rhs_242 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_183) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_184 = arg;
let rhs_243 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_243 == 255 {
if rhs_242 == 1 {
match pos.func.dfg.value_def(arg_182[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_185 = arg;
let rhs_246 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_246 == 255 {
if rhs_241 == 2 {
match pos.func.dfg.value_def(arg_180[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_186 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_186[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_187 = arg;
let rhs_249 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_187) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_188 = arg;
let rhs_250 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_250 == 255 {
if rhs_249 == 1 {
match pos.func.dfg.value_def(arg_186[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_189 = arg;
let rhs_253 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_253 == 255 {
if arg_81 == arg_44 && arg_81 == arg_39 && arg_81 == arg_184 && arg_81 == arg_34 && arg_81 == arg_48 && arg_81 == arg_84 && arg_81 == arg_153 && arg_81 == arg_178 && arg_81 == arg_133 && arg_81 == arg_189 && arg_81 == arg_58 && arg_81 == arg_162 && arg_81 == arg_68 && arg_81 == arg_22 && arg_81 == arg_120 && arg_81 == arg_62 && arg_81 == arg_91 && arg_81 == arg_117 && arg_81 == arg_157 && arg_81 == arg_143 && arg_81 == arg_185 && arg_81 == arg_59 && arg_81 == arg_175 && arg_81 == arg_179 && arg_81 == arg_188 && arg_81 == arg_35 && arg_81 == arg_12 && arg_81 == arg_45 && arg_81 == arg_142 && arg_81 == arg_174 && arg_81 == arg_138 && arg_81 == arg_166 && arg_81 == arg_85 && arg_81 == arg_95 && arg_81 == arg_63 && arg_81 == arg_23 && arg_81 == arg_163 && arg_81 == arg_121 && arg_81 == arg_94 && arg_81 == arg_167 && arg_81 == arg_13 && arg_81 == arg_17 && arg_81 == arg_132 && arg_81 == arg_110 && arg_81 == arg_152 && arg_81 == arg_27 && arg_81 == arg_69 && arg_81 == arg_80 && arg_81 == arg_16 && arg_81 == arg_156 && arg_81 == arg_73 && arg_81 == arg_90 && arg_81 == arg_128 && arg_81 == arg_38 && arg_81 == arg_72 && arg_81 == arg_139 && arg_81 == arg_106 && arg_81 == arg_111 && arg_81 == arg_129 && arg_81 == arg_116 && arg_81 == arg_107 && arg_81 == arg_49 && arg_81 == arg_26 && arg_44 == arg_39 && arg_44 == arg_184 && arg_44 == arg_34 && arg_44 == arg_48 && arg_44 == arg_84 && arg_44 == arg_153 && arg_44 == arg_178 && arg_44 == arg_133 && arg_44 == arg_189 && arg_44 == arg_58 && arg_44 == arg_162 && arg_44 == arg_68 && arg_44 == arg_22 && arg_44 == arg_120 && arg_44 == arg_62 && arg_44 == arg_91 && arg_44 == arg_117 && arg_44 == arg_157 && arg_44 == arg_143 && arg_44 == arg_185 && arg_44 == arg_59 && arg_44 == arg_175 && arg_44 == arg_179 && arg_44 == arg_188 && arg_44 == arg_35 && arg_44 == arg_12 && arg_44 == arg_45 && arg_44 == arg_142 && arg_44 == arg_174 && arg_44 == arg_138 && arg_44 == arg_166 && arg_44 == arg_85 && arg_44 == arg_95 && arg_44 == arg_63 && arg_44 == arg_23 && arg_44 == arg_163 && arg_44 == arg_121 && arg_44 == arg_94 && arg_44 == arg_167 && arg_44 == arg_13 && arg_44 == arg_17 && arg_44 == arg_132 && arg_44 == arg_110 && arg_44 == arg_152 && arg_44 == arg_27 && arg_44 == arg_69 && arg_44 == arg_80 && arg_44 == arg_16 && arg_44 == arg_156 && arg_44 == arg_73 && arg_44 == arg_90 && arg_44 == arg_128 && arg_44 == arg_38 && arg_44 == arg_72 && arg_44 == arg_139 && arg_44 == arg_106 && arg_44 == arg_111 && arg_44 == arg_129 && arg_44 == arg_116 && arg_44 == arg_107 && arg_44 == arg_49 && arg_44 == arg_26 && arg_39 == arg_184 && arg_39 == arg_34 && arg_39 == arg_48 && arg_39 == arg_84 && arg_39 == arg_153 && arg_39 == arg_178 && arg_39 == arg_133 && arg_39 == arg_189 && arg_39 == arg_58 && arg_39 == arg_162 && arg_39 == arg_68 && arg_39 == arg_22 && arg_39 == arg_120 && arg_39 == arg_62 && arg_39 == arg_91 && arg_39 == arg_117 && arg_39 == arg_157 && arg_39 == arg_143 && arg_39 == arg_185 && arg_39 == arg_59 && arg_39 == arg_175 && arg_39 == arg_179 && arg_39 == arg_188 && arg_39 == arg_35 && arg_39 == arg_12 && arg_39 == arg_45 && arg_39 == arg_142 && arg_39 == arg_174 && arg_39 == arg_138 && arg_39 == arg_166 && arg_39 == arg_85 && arg_39 == arg_95 && arg_39 == arg_63 && arg_39 == arg_23 && arg_39 == arg_163 && arg_39 == arg_121 && arg_39 == arg_94 && arg_39 == arg_167 && arg_39 == arg_13 && arg_39 == arg_17 && arg_39 == arg_132 && arg_39 == arg_110 && arg_39 == arg_152 && arg_39 == arg_27 && arg_39 == arg_69 && arg_39 == arg_80 && arg_39 == arg_16 && arg_39 == arg_156 && arg_39 == arg_73 && arg_39 == arg_90 && arg_39 == arg_128 && arg_39 == arg_38 && arg_39 == arg_72 && arg_39 == arg_139 && arg_39 == arg_106 && arg_39 == arg_111 && arg_39 == arg_129 && arg_39 == arg_116 && arg_39 == arg_107 && arg_39 == arg_49 && arg_39 == arg_26 && arg_184 == arg_34 && arg_184 == arg_48 && arg_184 == arg_84 && arg_184 == arg_153 && arg_184 == arg_178 && arg_184 == arg_133 && arg_184 == arg_189 && arg_184 == arg_58 && arg_184 == arg_162 && arg_184 == arg_68 && arg_184 == arg_22 && arg_184 == arg_120 && arg_184 == arg_62 && arg_184 == arg_91 && arg_184 == arg_117 && arg_184 == arg_157 && arg_184 == arg_143 && arg_184 == arg_185 && arg_184 == arg_59 && arg_184 == arg_175 && arg_184 == arg_179 && arg_184 == arg_188 && arg_184 == arg_35 && arg_184 == arg_12 && arg_184 == arg_45 && arg_184 == arg_142 && arg_184 == arg_174 && arg_184 == arg_138 && arg_184 == arg_166 && arg_184 == arg_85 && arg_184 == arg_95 && arg_184 == arg_63 && arg_184 == arg_23 && arg_184 == arg_163 && arg_184 == arg_121 && arg_184 == arg_94 && arg_184 == arg_167 && arg_184 == arg_13 && arg_184 == arg_17 && arg_184 == arg_132 && arg_184 == arg_110 && arg_184 == arg_152 && arg_184 == arg_27 && arg_184 == arg_69 && arg_184 == arg_80 && arg_184 == arg_16 && arg_184 == arg_156 && arg_184 == arg_73 && arg_184 == arg_90 && arg_184 == arg_128 && arg_184 == arg_38 && arg_184 == arg_72 && arg_184 == arg_139 && arg_184 == arg_106 && arg_184 == arg_111 && arg_184 == arg_129 && arg_184 == arg_116 && arg_184 == arg_107 && arg_184 == arg_49 && arg_184 == arg_26 && arg_34 == arg_48 && arg_34 == arg_84 && arg_34 == arg_153 && arg_34 == arg_178 && arg_34 == arg_133 && arg_34 == arg_189 && arg_34 == arg_58 && arg_34 == arg_162 && arg_34 == arg_68 && arg_34 == arg_22 && arg_34 == arg_120 && arg_34 == arg_62 && arg_34 == arg_91 && arg_34 == arg_117 && arg_34 == arg_157 && arg_34 == arg_143 && arg_34 == arg_185 && arg_34 == arg_59 && arg_34 == arg_175 && arg_34 == arg_179 && arg_34 == arg_188 && arg_34 == arg_35 && arg_34 == arg_12 && arg_34 == arg_45 && arg_34 == arg_142 && arg_34 == arg_174 && arg_34 == arg_138 && arg_34 == arg_166 && arg_34 == arg_85 && arg_34 == arg_95 && arg_34 == arg_63 && arg_34 == arg_23 && arg_34 == arg_163 && arg_34 == arg_121 && arg_34 == arg_94 && arg_34 == arg_167 && arg_34 == arg_13 && arg_34 == arg_17 && arg_34 == arg_132 && arg_34 == arg_110 && arg_34 == arg_152 && arg_34 == arg_27 && arg_34 == arg_69 && arg_34 == arg_80 && arg_34 == arg_16 && arg_34 == arg_156 && arg_34 == arg_73 && arg_34 == arg_90 && arg_34 == arg_128 && arg_34 == arg_38 && arg_34 == arg_72 && arg_34 == arg_139 && arg_34 == arg_106 && arg_34 == arg_111 && arg_34 == arg_129 && arg_34 == arg_116 && arg_34 == arg_107 && arg_34 == arg_49 && arg_34 == arg_26 && arg_48 == arg_84 && arg_48 == arg_153 && arg_48 == arg_178 && arg_48 == arg_133 && arg_48 == arg_189 && arg_48 == arg_58 && arg_48 == arg_162 && arg_48 == arg_68 && arg_48 == arg_22 && arg_48 == arg_120 && arg_48 == arg_62 && arg_48 == arg_91 && arg_48 == arg_117 && arg_48 == arg_157 && arg_48 == arg_143 && arg_48 == arg_185 && arg_48 == arg_59 && arg_48 == arg_175 && arg_48 == arg_179 && arg_48 == arg_188 && arg_48 == arg_35 && arg_48 == arg_12 && arg_48 == arg_45 && arg_48 == arg_142 && arg_48 == arg_174 && arg_48 == arg_138 && arg_48 == arg_166 && arg_48 == arg_85 && arg_48 == arg_95 && arg_48 == arg_63 && arg_48 == arg_23 && arg_48 == arg_163 && arg_48 == arg_121 && arg_48 == arg_94 && arg_48 == arg_167 && arg_48 == arg_13 && arg_48 == arg_17 && arg_48 == arg_132 && arg_48 == arg_110 && arg_48 == arg_152 && arg_48 == arg_27 && arg_48 == arg_69 && arg_48 == arg_80 && arg_48 == arg_16 && arg_48 == arg_156 && arg_48 == arg_73 && arg_48 == arg_90 && arg_48 == arg_128 && arg_48 == arg_38 && arg_48 == arg_72 && arg_48 == arg_139 && arg_48 == arg_106 && arg_48 == arg_111 && arg_48 == arg_129 && arg_48 == arg_116 && arg_48 == arg_107 && arg_48 == arg_49 && arg_48 == arg_26 && arg_84 == arg_153 && arg_84 == arg_178 && arg_84 == arg_133 && arg_84 == arg_189 && arg_84 == arg_58 && arg_84 == arg_162 && arg_84 == arg_68 && arg_84 == arg_22 && arg_84 == arg_120 && arg_84 == arg_62 && arg_84 == arg_91 && arg_84 == arg_117 && arg_84 == arg_157 && arg_84 == arg_143 && arg_84 == arg_185 && arg_84 == arg_59 && arg_84 == arg_175 && arg_84 == arg_179 && arg_84 == arg_188 && arg_84 == arg_35 && arg_84 == arg_12 && arg_84 == arg_45 && arg_84 == arg_142 && arg_84 == arg_174 && arg_84 == arg_138 && arg_84 == arg_166 && arg_84 == arg_85 && arg_84 == arg_95 && arg_84 == arg_63 && arg_84 == arg_23 && arg_84 == arg_163 && arg_84 == arg_121 && arg_84 == arg_94 && arg_84 == arg_167 && arg_84 == arg_13 && arg_84 == arg_17 && arg_84 == arg_132 && arg_84 == arg_110 && arg_84 == arg_152 && arg_84 == arg_27 && arg_84 == arg_69 && arg_84 == arg_80 && arg_84 == arg_16 && arg_84 == arg_156 && arg_84 == arg_73 && arg_84 == arg_90 && arg_84 == arg_128 && arg_84 == arg_38 && arg_84 == arg_72 && arg_84 == arg_139 && arg_84 == arg_106 && arg_84 == arg_111 && arg_84 == arg_129 && arg_84 == arg_116 && arg_84 == arg_107 && arg_84 == arg_49 && arg_84 == arg_26 && arg_153 == arg_178 && arg_153 == arg_133 && arg_153 == arg_189 && arg_153 == arg_58 && arg_153 == arg_162 && arg_153 == arg_68 && arg_153 == arg_22 && arg_153 == arg_120 && arg_153 == arg_62 && arg_153 == arg_91 && arg_153 == arg_117 && arg_153 == arg_157 && arg_153 == arg_143 && arg_153 == arg_185 && arg_153 == arg_59 && arg_153 == arg_175 && arg_153 == arg_179 && arg_153 == arg_188 && arg_153 == arg_35 && arg_153 == arg_12 && arg_153 == arg_45 && arg_153 == arg_142 && arg_153 == arg_174 && arg_153 == arg_138 && arg_153 == arg_166 && arg_153 == arg_85 && arg_153 == arg_95 && arg_153 == arg_63 && arg_153 == arg_23 && arg_153 == arg_163 && arg_153 == arg_121 && arg_153 == arg_94 && arg_153 == arg_167 && arg_153 == arg_13 && arg_153 == arg_17 && arg_153 == arg_132 && arg_153 == arg_110 && arg_153 == arg_152 && arg_153 == arg_27 && arg_153 == arg_69 && arg_153 == arg_80 && arg_153 == arg_16 && arg_153 == arg_156 && arg_153 == arg_73 && arg_153 == arg_90 && arg_153 == arg_128 && arg_153 == arg_38 && arg_153 == arg_72 && arg_153 == arg_139 && arg_153 == arg_106 && arg_153 == arg_111 && arg_153 == arg_129 && arg_153 == arg_116 && arg_153 == arg_107 && arg_153 == arg_49 && arg_153 == arg_26 && arg_178 == arg_133 && arg_178 == arg_189 && arg_178 == arg_58 && arg_178 == arg_162 && arg_178 == arg_68 && arg_178 == arg_22 && arg_178 == arg_120 && arg_178 == arg_62 && arg_178 == arg_91 && arg_178 == arg_117 && arg_178 == arg_157 && arg_178 == arg_143 && arg_178 == arg_185 && arg_178 == arg_59 && arg_178 == arg_175 && arg_178 == arg_179 && arg_178 == arg_188 && arg_178 == arg_35 && arg_178 == arg_12 && arg_178 == arg_45 && arg_178 == arg_142 && arg_178 == arg_174 && arg_178 == arg_138 && arg_178 == arg_166 && arg_178 == arg_85 && arg_178 == arg_95 && arg_178 == arg_63 && arg_178 == arg_23 && arg_178 == arg_163 && arg_178 == arg_121 && arg_178 == arg_94 && arg_178 == arg_167 && arg_178 == arg_13 && arg_178 == arg_17 && arg_178 == arg_132 && arg_178 == arg_110 && arg_178 == arg_152 && arg_178 == arg_27 && arg_178 == arg_69 && arg_178 == arg_80 && arg_178 == arg_16 && arg_178 == arg_156 && arg_178 == arg_73 && arg_178 == arg_90 && arg_178 == arg_128 && arg_178 == arg_38 && arg_178 == arg_72 && arg_178 == arg_139 && arg_178 == arg_106 && arg_178 == arg_111 && arg_178 == arg_129 && arg_178 == arg_116 && arg_178 == arg_107 && arg_178 == arg_49 && arg_178 == arg_26 && arg_133 == arg_189 && arg_133 == arg_58 && arg_133 == arg_162 && arg_133 == arg_68 && arg_133 == arg_22 && arg_133 == arg_120 && arg_133 == arg_62 && arg_133 == arg_91 && arg_133 == arg_117 && arg_133 == arg_157 && arg_133 == arg_143 && arg_133 == arg_185 && arg_133 == arg_59 && arg_133 == arg_175 && arg_133 == arg_179 && arg_133 == arg_188 && arg_133 == arg_35 && arg_133 == arg_12 && arg_133 == arg_45 && arg_133 == arg_142 && arg_133 == arg_174 && arg_133 == arg_138 && arg_133 == arg_166 && arg_133 == arg_85 && arg_133 == arg_95 && arg_133 == arg_63 && arg_133 == arg_23 && arg_133 == arg_163 && arg_133 == arg_121 && arg_133 == arg_94 && arg_133 == arg_167 && arg_133 == arg_13 && arg_133 == arg_17 && arg_133 == arg_132 && arg_133 == arg_110 && arg_133 == arg_152 && arg_133 == arg_27 && arg_133 == arg_69 && arg_133 == arg_80 && arg_133 == arg_16 && arg_133 == arg_156 && arg_133 == arg_73 && arg_133 == arg_90 && arg_133 == arg_128 && arg_133 == arg_38 && arg_133 == arg_72 && arg_133 == arg_139 && arg_133 == arg_106 && arg_133 == arg_111 && arg_133 == arg_129 && arg_133 == arg_116 && arg_133 == arg_107 && arg_133 == arg_49 && arg_133 == arg_26 && arg_189 == arg_58 && arg_189 == arg_162 && arg_189 == arg_68 && arg_189 == arg_22 && arg_189 == arg_120 && arg_189 == arg_62 && arg_189 == arg_91 && arg_189 == arg_117 && arg_189 == arg_157 && arg_189 == arg_143 && arg_189 == arg_185 && arg_189 == arg_59 && arg_189 == arg_175 && arg_189 == arg_179 && arg_189 == arg_188 && arg_189 == arg_35 && arg_189 == arg_12 && arg_189 == arg_45 && arg_189 == arg_142 && arg_189 == arg_174 && arg_189 == arg_138 && arg_189 == arg_166 && arg_189 == arg_85 && arg_189 == arg_95 && arg_189 == arg_63 && arg_189 == arg_23 && arg_189 == arg_163 && arg_189 == arg_121 && arg_189 == arg_94 && arg_189 == arg_167 && arg_189 == arg_13 && arg_189 == arg_17 && arg_189 == arg_132 && arg_189 == arg_110 && arg_189 == arg_152 && arg_189 == arg_27 && arg_189 == arg_69 && arg_189 == arg_80 && arg_189 == arg_16 && arg_189 == arg_156 && arg_189 == arg_73 && arg_189 == arg_90 && arg_189 == arg_128 && arg_189 == arg_38 && arg_189 == arg_72 && arg_189 == arg_139 && arg_189 == arg_106 && arg_189 == arg_111 && arg_189 == arg_129 && arg_189 == arg_116 && arg_189 == arg_107 && arg_189 == arg_49 && arg_189 == arg_26 && arg_58 == arg_162 && arg_58 == arg_68 && arg_58 == arg_22 && arg_58 == arg_120 && arg_58 == arg_62 && arg_58 == arg_91 && arg_58 == arg_117 && arg_58 == arg_157 && arg_58 == arg_143 && arg_58 == arg_185 && arg_58 == arg_59 && arg_58 == arg_175 && arg_58 == arg_179 && arg_58 == arg_188 && arg_58 == arg_35 && arg_58 == arg_12 && arg_58 == arg_45 && arg_58 == arg_142 && arg_58 == arg_174 && arg_58 == arg_138 && arg_58 == arg_166 && arg_58 == arg_85 && arg_58 == arg_95 && arg_58 == arg_63 && arg_58 == arg_23 && arg_58 == arg_163 && arg_58 == arg_121 && arg_58 == arg_94 && arg_58 == arg_167 && arg_58 == arg_13 && arg_58 == arg_17 && arg_58 == arg_132 && arg_58 == arg_110 && arg_58 == arg_152 && arg_58 == arg_27 && arg_58 == arg_69 && arg_58 == arg_80 && arg_58 == arg_16 && arg_58 == arg_156 && arg_58 == arg_73 && arg_58 == arg_90 && arg_58 == arg_128 && arg_58 == arg_38 && arg_58 == arg_72 && arg_58 == arg_139 && arg_58 == arg_106 && arg_58 == arg_111 && arg_58 == arg_129 && arg_58 == arg_116 && arg_58 == arg_107 && arg_58 == arg_49 && arg_58 == arg_26 && arg_162 == arg_68 && arg_162 == arg_22 && arg_162 == arg_120 && arg_162 == arg_62 && arg_162 == arg_91 && arg_162 == arg_117 && arg_162 == arg_157 && arg_162 == arg_143 && arg_162 == arg_185 && arg_162 == arg_59 && arg_162 == arg_175 && arg_162 == arg_179 && arg_162 == arg_188 && arg_162 == arg_35 && arg_162 == arg_12 && arg_162 == arg_45 && arg_162 == arg_142 && arg_162 == arg_174 && arg_162 == arg_138 && arg_162 == arg_166 && arg_162 == arg_85 && arg_162 == arg_95 && arg_162 == arg_63 && arg_162 == arg_23 && arg_162 == arg_163 && arg_162 == arg_121 && arg_162 == arg_94 && arg_162 == arg_167 && arg_162 == arg_13 && arg_162 == arg_17 && arg_162 == arg_132 && arg_162 == arg_110 && arg_162 == arg_152 && arg_162 == arg_27 && arg_162 == arg_69 && arg_162 == arg_80 && arg_162 == arg_16 && arg_162 == arg_156 && arg_162 == arg_73 && arg_162 == arg_90 && arg_162 == arg_128 && arg_162 == arg_38 && arg_162 == arg_72 && arg_162 == arg_139 && arg_162 == arg_106 && arg_162 == arg_111 && arg_162 == arg_129 && arg_162 == arg_116 && arg_162 == arg_107 && arg_162 == arg_49 && arg_162 == arg_26 && arg_68 == arg_22 && arg_68 == arg_120 && arg_68 == arg_62 && arg_68 == arg_91 && arg_68 == arg_117 && arg_68 == arg_157 && arg_68 == arg_143 && arg_68 == arg_185 && arg_68 == arg_59 && arg_68 == arg_175 && arg_68 == arg_179 && arg_68 == arg_188 && arg_68 == arg_35 && arg_68 == arg_12 && arg_68 == arg_45 && arg_68 == arg_142 && arg_68 == arg_174 && arg_68 == arg_138 && arg_68 == arg_166 && arg_68 == arg_85 && arg_68 == arg_95 && arg_68 == arg_63 && arg_68 == arg_23 && arg_68 == arg_163 && arg_68 == arg_121 && arg_68 == arg_94 && arg_68 == arg_167 && arg_68 == arg_13 && arg_68 == arg_17 && arg_68 == arg_132 && arg_68 == arg_110 && arg_68 == arg_152 && arg_68 == arg_27 && arg_68 == arg_69 && arg_68 == arg_80 && arg_68 == arg_16 && arg_68 == arg_156 && arg_68 == arg_73 && arg_68 == arg_90 && arg_68 == arg_128 && arg_68 == arg_38 && arg_68 == arg_72 && arg_68 == arg_139 && arg_68 == arg_106 && arg_68 == arg_111 && arg_68 == arg_129 && arg_68 == arg_116 && arg_68 == arg_107 && arg_68 == arg_49 && arg_68 == arg_26 && arg_22 == arg_120 && arg_22 == arg_62 && arg_22 == arg_91 && arg_22 == arg_117 && arg_22 == arg_157 && arg_22 == arg_143 && arg_22 == arg_185 && arg_22 == arg_59 && arg_22 == arg_175 && arg_22 == arg_179 && arg_22 == arg_188 && arg_22 == arg_35 && arg_22 == arg_12 && arg_22 == arg_45 && arg_22 == arg_142 && arg_22 == arg_174 && arg_22 == arg_138 && arg_22 == arg_166 && arg_22 == arg_85 && arg_22 == arg_95 && arg_22 == arg_63 && arg_22 == arg_23 && arg_22 == arg_163 && arg_22 == arg_121 && arg_22 == arg_94 && arg_22 == arg_167 && arg_22 == arg_13 && arg_22 == arg_17 && arg_22 == arg_132 && arg_22 == arg_110 && arg_22 == arg_152 && arg_22 == arg_27 && arg_22 == arg_69 && arg_22 == arg_80 && arg_22 == arg_16 && arg_22 == arg_156 && arg_22 == arg_73 && arg_22 == arg_90 && arg_22 == arg_128 && arg_22 == arg_38 && arg_22 == arg_72 && arg_22 == arg_139 && arg_22 == arg_106 && arg_22 == arg_111 && arg_22 == arg_129 && arg_22 == arg_116 && arg_22 == arg_107 && arg_22 == arg_49 && arg_22 == arg_26 && arg_120 == arg_62 && arg_120 == arg_91 && arg_120 == arg_117 && arg_120 == arg_157 && arg_120 == arg_143 && arg_120 == arg_185 && arg_120 == arg_59 && arg_120 == arg_175 && arg_120 == arg_179 && arg_120 == arg_188 && arg_120 == arg_35 && arg_120 == arg_12 && arg_120 == arg_45 && arg_120 == arg_142 && arg_120 == arg_174 && arg_120 == arg_138 && arg_120 == arg_166 && arg_120 == arg_85 && arg_120 == arg_95 && arg_120 == arg_63 && arg_120 == arg_23 && arg_120 == arg_163 && arg_120 == arg_121 && arg_120 == arg_94 && arg_120 == arg_167 && arg_120 == arg_13 && arg_120 == arg_17 && arg_120 == arg_132 && arg_120 == arg_110 && arg_120 == arg_152 && arg_120 == arg_27 && arg_120 == arg_69 && arg_120 == arg_80 && arg_120 == arg_16 && arg_120 == arg_156 && arg_120 == arg_73 && arg_120 == arg_90 && arg_120 == arg_128 && arg_120 == arg_38 && arg_120 == arg_72 && arg_120 == arg_139 && arg_120 == arg_106 && arg_120 == arg_111 && arg_120 == arg_129 && arg_120 == arg_116 && arg_120 == arg_107 && arg_120 == arg_49 && arg_120 == arg_26 && arg_62 == arg_91 && arg_62 == arg_117 && arg_62 == arg_157 && arg_62 == arg_143 && arg_62 == arg_185 && arg_62 == arg_59 && arg_62 == arg_175 && arg_62 == arg_179 && arg_62 == arg_188 && arg_62 == arg_35 && arg_62 == arg_12 && arg_62 == arg_45 && arg_62 == arg_142 && arg_62 == arg_174 && arg_62 == arg_138 && arg_62 == arg_166 && arg_62 == arg_85 && arg_62 == arg_95 && arg_62 == arg_63 && arg_62 == arg_23 && arg_62 == arg_163 && arg_62 == arg_121 && arg_62 == arg_94 && arg_62 == arg_167 && arg_62 == arg_13 && arg_62 == arg_17 && arg_62 == arg_132 && arg_62 == arg_110 && arg_62 == arg_152 && arg_62 == arg_27 && arg_62 == arg_69 && arg_62 == arg_80 && arg_62 == arg_16 && arg_62 == arg_156 && arg_62 == arg_73 && arg_62 == arg_90 && arg_62 == arg_128 && arg_62 == arg_38 && arg_62 == arg_72 && arg_62 == arg_139 && arg_62 == arg_106 && arg_62 == arg_111 && arg_62 == arg_129 && arg_62 == arg_116 && arg_62 == arg_107 && arg_62 == arg_49 && arg_62 == arg_26 && arg_91 == arg_117 && arg_91 == arg_157 && arg_91 == arg_143 && arg_91 == arg_185 && arg_91 == arg_59 && arg_91 == arg_175 && arg_91 == arg_179 && arg_91 == arg_188 && arg_91 == arg_35 && arg_91 == arg_12 && arg_91 == arg_45 && arg_91 == arg_142 && arg_91 == arg_174 && arg_91 == arg_138 && arg_91 == arg_166 && arg_91 == arg_85 && arg_91 == arg_95 && arg_91 == arg_63 && arg_91 == arg_23 && arg_91 == arg_163 && arg_91 == arg_121 && arg_91 == arg_94 && arg_91 == arg_167 && arg_91 == arg_13 && arg_91 == arg_17 && arg_91 == arg_132 && arg_91 == arg_110 && arg_91 == arg_152 && arg_91 == arg_27 && arg_91 == arg_69 && arg_91 == arg_80 && arg_91 == arg_16 && arg_91 == arg_156 && arg_91 == arg_73 && arg_91 == arg_90 && arg_91 == arg_128 && arg_91 == arg_38 && arg_91 == arg_72 && arg_91 == arg_139 && arg_91 == arg_106 && arg_91 == arg_111 && arg_91 == arg_129 && arg_91 == arg_116 && arg_91 == arg_107 && arg_91 == arg_49 && arg_91 == arg_26 && arg_117 == arg_157 && arg_117 == arg_143 && arg_117 == arg_185 && arg_117 == arg_59 && arg_117 == arg_175 && arg_117 == arg_179 && arg_117 == arg_188 && arg_117 == arg_35 && arg_117 == arg_12 && arg_117 == arg_45 && arg_117 == arg_142 && arg_117 == arg_174 && arg_117 == arg_138 && arg_117 == arg_166 && arg_117 == arg_85 && arg_117 == arg_95 && arg_117 == arg_63 && arg_117 == arg_23 && arg_117 == arg_163 && arg_117 == arg_121 && arg_117 == arg_94 && arg_117 == arg_167 && arg_117 == arg_13 && arg_117 == arg_17 && arg_117 == arg_132 && arg_117 == arg_110 && arg_117 == arg_152 && arg_117 == arg_27 && arg_117 == arg_69 && arg_117 == arg_80 && arg_117 == arg_16 && arg_117 == arg_156 && arg_117 == arg_73 && arg_117 == arg_90 && arg_117 == arg_128 && arg_117 == arg_38 && arg_117 == arg_72 && arg_117 == arg_139 && arg_117 == arg_106 && arg_117 == arg_111 && arg_117 == arg_129 && arg_117 == arg_116 && arg_117 == arg_107 && arg_117 == arg_49 && arg_117 == arg_26 && arg_157 == arg_143 && arg_157 == arg_185 && arg_157 == arg_59 && arg_157 == arg_175 && arg_157 == arg_179 && arg_157 == arg_188 && arg_157 == arg_35 && arg_157 == arg_12 && arg_157 == arg_45 && arg_157 == arg_142 && arg_157 == arg_174 && arg_157 == arg_138 && arg_157 == arg_166 && arg_157 == arg_85 && arg_157 == arg_95 && arg_157 == arg_63 && arg_157 == arg_23 && arg_157 == arg_163 && arg_157 == arg_121 && arg_157 == arg_94 && arg_157 == arg_167 && arg_157 == arg_13 && arg_157 == arg_17 && arg_157 == arg_132 && arg_157 == arg_110 && arg_157 == arg_152 && arg_157 == arg_27 && arg_157 == arg_69 && arg_157 == arg_80 && arg_157 == arg_16 && arg_157 == arg_156 && arg_157 == arg_73 && arg_157 == arg_90 && arg_157 == arg_128 && arg_157 == arg_38 && arg_157 == arg_72 && arg_157 == arg_139 && arg_157 == arg_106 && arg_157 == arg_111 && arg_157 == arg_129 && arg_157 == arg_116 && arg_157 == arg_107 && arg_157 == arg_49 && arg_157 == arg_26 && arg_143 == arg_185 && arg_143 == arg_59 && arg_143 == arg_175 && arg_143 == arg_179 && arg_143 == arg_188 && arg_143 == arg_35 && arg_143 == arg_12 && arg_143 == arg_45 && arg_143 == arg_142 && arg_143 == arg_174 && arg_143 == arg_138 && arg_143 == arg_166 && arg_143 == arg_85 && arg_143 == arg_95 && arg_143 == arg_63 && arg_143 == arg_23 && arg_143 == arg_163 && arg_143 == arg_121 && arg_143 == arg_94 && arg_143 == arg_167 && arg_143 == arg_13 && arg_143 == arg_17 && arg_143 == arg_132 && arg_143 == arg_110 && arg_143 == arg_152 && arg_143 == arg_27 && arg_143 == arg_69 && arg_143 == arg_80 && arg_143 == arg_16 && arg_143 == arg_156 && arg_143 == arg_73 && arg_143 == arg_90 && arg_143 == arg_128 && arg_143 == arg_38 && arg_143 == arg_72 && arg_143 == arg_139 && arg_143 == arg_106 && arg_143 == arg_111 && arg_143 == arg_129 && arg_143 == arg_116 && arg_143 == arg_107 && arg_143 == arg_49 && arg_143 == arg_26 && arg_185 == arg_59 && arg_185 == arg_175 && arg_185 == arg_179 && arg_185 == arg_188 && arg_185 == arg_35 && arg_185 == arg_12 && arg_185 == arg_45 && arg_185 == arg_142 && arg_185 == arg_174 && arg_185 == arg_138 && arg_185 == arg_166 && arg_185 == arg_85 && arg_185 == arg_95 && arg_185 == arg_63 && arg_185 == arg_23 && arg_185 == arg_163 && arg_185 == arg_121 && arg_185 == arg_94 && arg_185 == arg_167 && arg_185 == arg_13 && arg_185 == arg_17 && arg_185 == arg_132 && arg_185 == arg_110 && arg_185 == arg_152 && arg_185 == arg_27 && arg_185 == arg_69 && arg_185 == arg_80 && arg_185 == arg_16 && arg_185 == arg_156 && arg_185 == arg_73 && arg_185 == arg_90 && arg_185 == arg_128 && arg_185 == arg_38 && arg_185 == arg_72 && arg_185 == arg_139 && arg_185 == arg_106 && arg_185 == arg_111 && arg_185 == arg_129 && arg_185 == arg_116 && arg_185 == arg_107 && arg_185 == arg_49 && arg_185 == arg_26 && arg_59 == arg_175 && arg_59 == arg_179 && arg_59 == arg_188 && arg_59 == arg_35 && arg_59 == arg_12 && arg_59 == arg_45 && arg_59 == arg_142 && arg_59 == arg_174 && arg_59 == arg_138 && arg_59 == arg_166 && arg_59 == arg_85 && arg_59 == arg_95 && arg_59 == arg_63 && arg_59 == arg_23 && arg_59 == arg_163 && arg_59 == arg_121 && arg_59 == arg_94 && arg_59 == arg_167 && arg_59 == arg_13 && arg_59 == arg_17 && arg_59 == arg_132 && arg_59 == arg_110 && arg_59 == arg_152 && arg_59 == arg_27 && arg_59 == arg_69 && arg_59 == arg_80 && arg_59 == arg_16 && arg_59 == arg_156 && arg_59 == arg_73 && arg_59 == arg_90 && arg_59 == arg_128 && arg_59 == arg_38 && arg_59 == arg_72 && arg_59 == arg_139 && arg_59 == arg_106 && arg_59 == arg_111 && arg_59 == arg_129 && arg_59 == arg_116 && arg_59 == arg_107 && arg_59 == arg_49 && arg_59 == arg_26 && arg_175 == arg_179 && arg_175 == arg_188 && arg_175 == arg_35 && arg_175 == arg_12 && arg_175 == arg_45 && arg_175 == arg_142 && arg_175 == arg_174 && arg_175 == arg_138 && arg_175 == arg_166 && arg_175 == arg_85 && arg_175 == arg_95 && arg_175 == arg_63 && arg_175 == arg_23 && arg_175 == arg_163 && arg_175 == arg_121 && arg_175 == arg_94 && arg_175 == arg_167 && arg_175 == arg_13 && arg_175 == arg_17 && arg_175 == arg_132 && arg_175 == arg_110 && arg_175 == arg_152 && arg_175 == arg_27 && arg_175 == arg_69 && arg_175 == arg_80 && arg_175 == arg_16 && arg_175 == arg_156 && arg_175 == arg_73 && arg_175 == arg_90 && arg_175 == arg_128 && arg_175 == arg_38 && arg_175 == arg_72 && arg_175 == arg_139 && arg_175 == arg_106 && arg_175 == arg_111 && arg_175 == arg_129 && arg_175 == arg_116 && arg_175 == arg_107 && arg_175 == arg_49 && arg_175 == arg_26 && arg_179 == arg_188 && arg_179 == arg_35 && arg_179 == arg_12 && arg_179 == arg_45 && arg_179 == arg_142 && arg_179 == arg_174 && arg_179 == arg_138 && arg_179 == arg_166 && arg_179 == arg_85 && arg_179 == arg_95 && arg_179 == arg_63 && arg_179 == arg_23 && arg_179 == arg_163 && arg_179 == arg_121 && arg_179 == arg_94 && arg_179 == arg_167 && arg_179 == arg_13 && arg_179 == arg_17 && arg_179 == arg_132 && arg_179 == arg_110 && arg_179 == arg_152 && arg_179 == arg_27 && arg_179 == arg_69 && arg_179 == arg_80 && arg_179 == arg_16 && arg_179 == arg_156 && arg_179 == arg_73 && arg_179 == arg_90 && arg_179 == arg_128 && arg_179 == arg_38 && arg_179 == arg_72 && arg_179 == arg_139 && arg_179 == arg_106 && arg_179 == arg_111 && arg_179 == arg_129 && arg_179 == arg_116 && arg_179 == arg_107 && arg_179 == arg_49 && arg_179 == arg_26 && arg_188 == arg_35 && arg_188 == arg_12 && arg_188 == arg_45 && arg_188 == arg_142 && arg_188 == arg_174 && arg_188 == arg_138 && arg_188 == arg_166 && arg_188 == arg_85 && arg_188 == arg_95 && arg_188 == arg_63 && arg_188 == arg_23 && arg_188 == arg_163 && arg_188 == arg_121 && arg_188 == arg_94 && arg_188 == arg_167 && arg_188 == arg_13 && arg_188 == arg_17 && arg_188 == arg_132 && arg_188 == arg_110 && arg_188 == arg_152 && arg_188 == arg_27 && arg_188 == arg_69 && arg_188 == arg_80 && arg_188 == arg_16 && arg_188 == arg_156 && arg_188 == arg_73 && arg_188 == arg_90 && arg_188 == arg_128 && arg_188 == arg_38 && arg_188 == arg_72 && arg_188 == arg_139 && arg_188 == arg_106 && arg_188 == arg_111 && arg_188 == arg_129 && arg_188 == arg_116 && arg_188 == arg_107 && arg_188 == arg_49 && arg_188 == arg_26 && arg_35 == arg_12 && arg_35 == arg_45 && arg_35 == arg_142 && arg_35 == arg_174 && arg_35 == arg_138 && arg_35 == arg_166 && arg_35 == arg_85 && arg_35 == arg_95 && arg_35 == arg_63 && arg_35 == arg_23 && arg_35 == arg_163 && arg_35 == arg_121 && arg_35 == arg_94 && arg_35 == arg_167 && arg_35 == arg_13 && arg_35 == arg_17 && arg_35 == arg_132 && arg_35 == arg_110 && arg_35 == arg_152 && arg_35 == arg_27 && arg_35 == arg_69 && arg_35 == arg_80 && arg_35 == arg_16 && arg_35 == arg_156 && arg_35 == arg_73 && arg_35 == arg_90 && arg_35 == arg_128 && arg_35 == arg_38 && arg_35 == arg_72 && arg_35 == arg_139 && arg_35 == arg_106 && arg_35 == arg_111 && arg_35 == arg_129 && arg_35 == arg_116 && arg_35 == arg_107 && arg_35 == arg_49 && arg_35 == arg_26 && arg_12 == arg_45 && arg_12 == arg_142 && arg_12 == arg_174 && arg_12 == arg_138 && arg_12 == arg_166 && arg_12 == arg_85 && arg_12 == arg_95 && arg_12 == arg_63 && arg_12 == arg_23 && arg_12 == arg_163 && arg_12 == arg_121 && arg_12 == arg_94 && arg_12 == arg_167 && arg_12 == arg_13 && arg_12 == arg_17 && arg_12 == arg_132 && arg_12 == arg_110 && arg_12 == arg_152 && arg_12 == arg_27 && arg_12 == arg_69 && arg_12 == arg_80 && arg_12 == arg_16 && arg_12 == arg_156 && arg_12 == arg_73 && arg_12 == arg_90 && arg_12 == arg_128 && arg_12 == arg_38 && arg_12 == arg_72 && arg_12 == arg_139 && arg_12 == arg_106 && arg_12 == arg_111 && arg_12 == arg_129 && arg_12 == arg_116 && arg_12 == arg_107 && arg_12 == arg_49 && arg_12 == arg_26 && arg_45 == arg_142 && arg_45 == arg_174 && arg_45 == arg_138 && arg_45 == arg_166 && arg_45 == arg_85 && arg_45 == arg_95 && arg_45 == arg_63 && arg_45 == arg_23 && arg_45 == arg_163 && arg_45 == arg_121 && arg_45 == arg_94 && arg_45 == arg_167 && arg_45 == arg_13 && arg_45 == arg_17 && arg_45 == arg_132 && arg_45 == arg_110 && arg_45 == arg_152 && arg_45 == arg_27 && arg_45 == arg_69 && arg_45 == arg_80 && arg_45 == arg_16 && arg_45 == arg_156 && arg_45 == arg_73 && arg_45 == arg_90 && arg_45 == arg_128 && arg_45 == arg_38 && arg_45 == arg_72 && arg_45 == arg_139 && arg_45 == arg_106 && arg_45 == arg_111 && arg_45 == arg_129 && arg_45 == arg_116 && arg_45 == arg_107 && arg_45 == arg_49 && arg_45 == arg_26 && arg_142 == arg_174 && arg_142 == arg_138 && arg_142 == arg_166 && arg_142 == arg_85 && arg_142 == arg_95 && arg_142 == arg_63 && arg_142 == arg_23 && arg_142 == arg_163 && arg_142 == arg_121 && arg_142 == arg_94 && arg_142 == arg_167 && arg_142 == arg_13 && arg_142 == arg_17 && arg_142 == arg_132 && arg_142 == arg_110 && arg_142 == arg_152 && arg_142 == arg_27 && arg_142 == arg_69 && arg_142 == arg_80 && arg_142 == arg_16 && arg_142 == arg_156 && arg_142 == arg_73 && arg_142 == arg_90 && arg_142 == arg_128 && arg_142 == arg_38 && arg_142 == arg_72 && arg_142 == arg_139 && arg_142 == arg_106 && arg_142 == arg_111 && arg_142 == arg_129 && arg_142 == arg_116 && arg_142 == arg_107 && arg_142 == arg_49 && arg_142 == arg_26 && arg_174 == arg_138 && arg_174 == arg_166 && arg_174 == arg_85 && arg_174 == arg_95 && arg_174 == arg_63 && arg_174 == arg_23 && arg_174 == arg_163 && arg_174 == arg_121 && arg_174 == arg_94 && arg_174 == arg_167 && arg_174 == arg_13 && arg_174 == arg_17 && arg_174 == arg_132 && arg_174 == arg_110 && arg_174 == arg_152 && arg_174 == arg_27 && arg_174 == arg_69 && arg_174 == arg_80 && arg_174 == arg_16 && arg_174 == arg_156 && arg_174 == arg_73 && arg_174 == arg_90 && arg_174 == arg_128 && arg_174 == arg_38 && arg_174 == arg_72 && arg_174 == arg_139 && arg_174 == arg_106 && arg_174 == arg_111 && arg_174 == arg_129 && arg_174 == arg_116 && arg_174 == arg_107 && arg_174 == arg_49 && arg_174 == arg_26 && arg_138 == arg_166 && arg_138 == arg_85 && arg_138 == arg_95 && arg_138 == arg_63 && arg_138 == arg_23 && arg_138 == arg_163 && arg_138 == arg_121 && arg_138 == arg_94 && arg_138 == arg_167 && arg_138 == arg_13 && arg_138 == arg_17 && arg_138 == arg_132 && arg_138 == arg_110 && arg_138 == arg_152 && arg_138 == arg_27 && arg_138 == arg_69 && arg_138 == arg_80 && arg_138 == arg_16 && arg_138 == arg_156 && arg_138 == arg_73 && arg_138 == arg_90 && arg_138 == arg_128 && arg_138 == arg_38 && arg_138 == arg_72 && arg_138 == arg_139 && arg_138 == arg_106 && arg_138 == arg_111 && arg_138 == arg_129 && arg_138 == arg_116 && arg_138 == arg_107 && arg_138 == arg_49 && arg_138 == arg_26 && arg_166 == arg_85 && arg_166 == arg_95 && arg_166 == arg_63 && arg_166 == arg_23 && arg_166 == arg_163 && arg_166 == arg_121 && arg_166 == arg_94 && arg_166 == arg_167 && arg_166 == arg_13 && arg_166 == arg_17 && arg_166 == arg_132 && arg_166 == arg_110 && arg_166 == arg_152 && arg_166 == arg_27 && arg_166 == arg_69 && arg_166 == arg_80 && arg_166 == arg_16 && arg_166 == arg_156 && arg_166 == arg_73 && arg_166 == arg_90 && arg_166 == arg_128 && arg_166 == arg_38 && arg_166 == arg_72 && arg_166 == arg_139 && arg_166 == arg_106 && arg_166 == arg_111 && arg_166 == arg_129 && arg_166 == arg_116 && arg_166 == arg_107 && arg_166 == arg_49 && arg_166 == arg_26 && arg_85 == arg_95 && arg_85 == arg_63 && arg_85 == arg_23 && arg_85 == arg_163 && arg_85 == arg_121 && arg_85 == arg_94 && arg_85 == arg_167 && arg_85 == arg_13 && arg_85 == arg_17 && arg_85 == arg_132 && arg_85 == arg_110 && arg_85 == arg_152 && arg_85 == arg_27 && arg_85 == arg_69 && arg_85 == arg_80 && arg_85 == arg_16 && arg_85 == arg_156 && arg_85 == arg_73 && arg_85 == arg_90 && arg_85 == arg_128 && arg_85 == arg_38 && arg_85 == arg_72 && arg_85 == arg_139 && arg_85 == arg_106 && arg_85 == arg_111 && arg_85 == arg_129 && arg_85 == arg_116 && arg_85 == arg_107 && arg_85 == arg_49 && arg_85 == arg_26 && arg_95 == arg_63 && arg_95 == arg_23 && arg_95 == arg_163 && arg_95 == arg_121 && arg_95 == arg_94 && arg_95 == arg_167 && arg_95 == arg_13 && arg_95 == arg_17 && arg_95 == arg_132 && arg_95 == arg_110 && arg_95 == arg_152 && arg_95 == arg_27 && arg_95 == arg_69 && arg_95 == arg_80 && arg_95 == arg_16 && arg_95 == arg_156 && arg_95 == arg_73 && arg_95 == arg_90 && arg_95 == arg_128 && arg_95 == arg_38 && arg_95 == arg_72 && arg_95 == arg_139 && arg_95 == arg_106 && arg_95 == arg_111 && arg_95 == arg_129 && arg_95 == arg_116 && arg_95 == arg_107 && arg_95 == arg_49 && arg_95 == arg_26 && arg_63 == arg_23 && arg_63 == arg_163 && arg_63 == arg_121 && arg_63 == arg_94 && arg_63 == arg_167 && arg_63 == arg_13 && arg_63 == arg_17 && arg_63 == arg_132 && arg_63 == arg_110 && arg_63 == arg_152 && arg_63 == arg_27 && arg_63 == arg_69 && arg_63 == arg_80 && arg_63 == arg_16 && arg_63 == arg_156 && arg_63 == arg_73 && arg_63 == arg_90 && arg_63 == arg_128 && arg_63 == arg_38 && arg_63 == arg_72 && arg_63 == arg_139 && arg_63 == arg_106 && arg_63 == arg_111 && arg_63 == arg_129 && arg_63 == arg_116 && arg_63 == arg_107 && arg_63 == arg_49 && arg_63 == arg_26 && arg_23 == arg_163 && arg_23 == arg_121 && arg_23 == arg_94 && arg_23 == arg_167 && arg_23 == arg_13 && arg_23 == arg_17 && arg_23 == arg_132 && arg_23 == arg_110 && arg_23 == arg_152 && arg_23 == arg_27 && arg_23 == arg_69 && arg_23 == arg_80 && arg_23 == arg_16 && arg_23 == arg_156 && arg_23 == arg_73 && arg_23 == arg_90 && arg_23 == arg_128 && arg_23 == arg_38 && arg_23 == arg_72 && arg_23 == arg_139 && arg_23 == arg_106 && arg_23 == arg_111 && arg_23 == arg_129 && arg_23 == arg_116 && arg_23 == arg_107 && arg_23 == arg_49 && arg_23 == arg_26 && arg_163 == arg_121 && arg_163 == arg_94 && arg_163 == arg_167 && arg_163 == arg_13 && arg_163 == arg_17 && arg_163 == arg_132 && arg_163 == arg_110 && arg_163 == arg_152 && arg_163 == arg_27 && arg_163 == arg_69 && arg_163 == arg_80 && arg_163 == arg_16 && arg_163 == arg_156 && arg_163 == arg_73 && arg_163 == arg_90 && arg_163 == arg_128 && arg_163 == arg_38 && arg_163 == arg_72 && arg_163 == arg_139 && arg_163 == arg_106 && arg_163 == arg_111 && arg_163 == arg_129 && arg_163 == arg_116 && arg_163 == arg_107 && arg_163 == arg_49 && arg_163 == arg_26 && arg_121 == arg_94 && arg_121 == arg_167 && arg_121 == arg_13 && arg_121 == arg_17 && arg_121 == arg_132 && arg_121 == arg_110 && arg_121 == arg_152 && arg_121 == arg_27 && arg_121 == arg_69 && arg_121 == arg_80 && arg_121 == arg_16 && arg_121 == arg_156 && arg_121 == arg_73 && arg_121 == arg_90 && arg_121 == arg_128 && arg_121 == arg_38 && arg_121 == arg_72 && arg_121 == arg_139 && arg_121 == arg_106 && arg_121 == arg_111 && arg_121 == arg_129 && arg_121 == arg_116 && arg_121 == arg_107 && arg_121 == arg_49 && arg_121 == arg_26 && arg_94 == arg_167 && arg_94 == arg_13 && arg_94 == arg_17 && arg_94 == arg_132 && arg_94 == arg_110 && arg_94 == arg_152 && arg_94 == arg_27 && arg_94 == arg_69 && arg_94 == arg_80 && arg_94 == arg_16 && arg_94 == arg_156 && arg_94 == arg_73 && arg_94 == arg_90 && arg_94 == arg_128 && arg_94 == arg_38 && arg_94 == arg_72 && arg_94 == arg_139 && arg_94 == arg_106 && arg_94 == arg_111 && arg_94 == arg_129 && arg_94 == arg_116 && arg_94 == arg_107 && arg_94 == arg_49 && arg_94 == arg_26 && arg_167 == arg_13 && arg_167 == arg_17 && arg_167 == arg_132 && arg_167 == arg_110 && arg_167 == arg_152 && arg_167 == arg_27 && arg_167 == arg_69 && arg_167 == arg_80 && arg_167 == arg_16 && arg_167 == arg_156 && arg_167 == arg_73 && arg_167 == arg_90 && arg_167 == arg_128 && arg_167 == arg_38 && arg_167 == arg_72 && arg_167 == arg_139 && arg_167 == arg_106 && arg_167 == arg_111 && arg_167 == arg_129 && arg_167 == arg_116 && arg_167 == arg_107 && arg_167 == arg_49 && arg_167 == arg_26 && arg_13 == arg_17 && arg_13 == arg_132 && arg_13 == arg_110 && arg_13 == arg_152 && arg_13 == arg_27 && arg_13 == arg_69 && arg_13 == arg_80 && arg_13 == arg_16 && arg_13 == arg_156 && arg_13 == arg_73 && arg_13 == arg_90 && arg_13 == arg_128 && arg_13 == arg_38 && arg_13 == arg_72 && arg_13 == arg_139 && arg_13 == arg_106 && arg_13 == arg_111 && arg_13 == arg_129 && arg_13 == arg_116 && arg_13 == arg_107 && arg_13 == arg_49 && arg_13 == arg_26 && arg_17 == arg_132 && arg_17 == arg_110 && arg_17 == arg_152 && arg_17 == arg_27 && arg_17 == arg_69 && arg_17 == arg_80 && arg_17 == arg_16 && arg_17 == arg_156 && arg_17 == arg_73 && arg_17 == arg_90 && arg_17 == arg_128 && arg_17 == arg_38 && arg_17 == arg_72 && arg_17 == arg_139 && arg_17 == arg_106 && arg_17 == arg_111 && arg_17 == arg_129 && arg_17 == arg_116 && arg_17 == arg_107 && arg_17 == arg_49 && arg_17 == arg_26 && arg_132 == arg_110 && arg_132 == arg_152 && arg_132 == arg_27 && arg_132 == arg_69 && arg_132 == arg_80 && arg_132 == arg_16 && arg_132 == arg_156 && arg_132 == arg_73 && arg_132 == arg_90 && arg_132 == arg_128 && arg_132 == arg_38 && arg_132 == arg_72 && arg_132 == arg_139 && arg_132 == arg_106 && arg_132 == arg_111 && arg_132 == arg_129 && arg_132 == arg_116 && arg_132 == arg_107 && arg_132 == arg_49 && arg_132 == arg_26 && arg_110 == arg_152 && arg_110 == arg_27 && arg_110 == arg_69 && arg_110 == arg_80 && arg_110 == arg_16 && arg_110 == arg_156 && arg_110 == arg_73 && arg_110 == arg_90 && arg_110 == arg_128 && arg_110 == arg_38 && arg_110 == arg_72 && arg_110 == arg_139 && arg_110 == arg_106 && arg_110 == arg_111 && arg_110 == arg_129 && arg_110 == arg_116 && arg_110 == arg_107 && arg_110 == arg_49 && arg_110 == arg_26 && arg_152 == arg_27 && arg_152 == arg_69 && arg_152 == arg_80 && arg_152 == arg_16 && arg_152 == arg_156 && arg_152 == arg_73 && arg_152 == arg_90 && arg_152 == arg_128 && arg_152 == arg_38 && arg_152 == arg_72 && arg_152 == arg_139 && arg_152 == arg_106 && arg_152 == arg_111 && arg_152 == arg_129 && arg_152 == arg_116 && arg_152 == arg_107 && arg_152 == arg_49 && arg_152 == arg_26 && arg_27 == arg_69 && arg_27 == arg_80 && arg_27 == arg_16 && arg_27 == arg_156 && arg_27 == arg_73 && arg_27 == arg_90 && arg_27 == arg_128 && arg_27 == arg_38 && arg_27 == arg_72 && arg_27 == arg_139 && arg_27 == arg_106 && arg_27 == arg_111 && arg_27 == arg_129 && arg_27 == arg_116 && arg_27 == arg_107 && arg_27 == arg_49 && arg_27 == arg_26 && arg_69 == arg_80 && arg_69 == arg_16 && arg_69 == arg_156 && arg_69 == arg_73 && arg_69 == arg_90 && arg_69 == arg_128 && arg_69 == arg_38 && arg_69 == arg_72 && arg_69 == arg_139 && arg_69 == arg_106 && arg_69 == arg_111 && arg_69 == arg_129 && arg_69 == arg_116 && arg_69 == arg_107 && arg_69 == arg_49 && arg_69 == arg_26 && arg_80 == arg_16 && arg_80 == arg_156 && arg_80 == arg_73 && arg_80 == arg_90 && arg_80 == arg_128 && arg_80 == arg_38 && arg_80 == arg_72 && arg_80 == arg_139 && arg_80 == arg_106 && arg_80 == arg_111 && arg_80 == arg_129 && arg_80 == arg_116 && arg_80 == arg_107 && arg_80 == arg_49 && arg_80 == arg_26 && arg_16 == arg_156 && arg_16 == arg_73 && arg_16 == arg_90 && arg_16 == arg_128 && arg_16 == arg_38 && arg_16 == arg_72 && arg_16 == arg_139 && arg_16 == arg_106 && arg_16 == arg_111 && arg_16 == arg_129 && arg_16 == arg_116 && arg_16 == arg_107 && arg_16 == arg_49 && arg_16 == arg_26 && arg_156 == arg_73 && arg_156 == arg_90 && arg_156 == arg_128 && arg_156 == arg_38 && arg_156 == arg_72 && arg_156 == arg_139 && arg_156 == arg_106 && arg_156 == arg_111 && arg_156 == arg_129 && arg_156 == arg_116 && arg_156 == arg_107 && arg_156 == arg_49 && arg_156 == arg_26 && arg_73 == arg_90 && arg_73 == arg_128 && arg_73 == arg_38 && arg_73 == arg_72 && arg_73 == arg_139 && arg_73 == arg_106 && arg_73 == arg_111 && arg_73 == arg_129 && arg_73 == arg_116 && arg_73 == arg_107 && arg_73 == arg_49 && arg_73 == arg_26 && arg_90 == arg_128 && arg_90 == arg_38 && arg_90 == arg_72 && arg_90 == arg_139 && arg_90 == arg_106 && arg_90 == arg_111 && arg_90 == arg_129 && arg_90 == arg_116 && arg_90 == arg_107 && arg_90 == arg_49 && arg_90 == arg_26 && arg_128 == arg_38 && arg_128 == arg_72 && arg_128 == arg_139 && arg_128 == arg_106 && arg_128 == arg_111 && arg_128 == arg_129 && arg_128 == arg_116 && arg_128 == arg_107 && arg_128 == arg_49 && arg_128 == arg_26 && arg_38 == arg_72 && arg_38 == arg_139 && arg_38 == arg_106 && arg_38 == arg_111 && arg_38 == arg_129 && arg_38 == arg_116 && arg_38 == arg_107 && arg_38 == arg_49 && arg_38 == arg_26 && arg_72 == arg_139 && arg_72 == arg_106 && arg_72 == arg_111 && arg_72 == arg_129 && arg_72 == arg_116 && arg_72 == arg_107 && arg_72 == arg_49 && arg_72 == arg_26 && arg_139 == arg_106 && arg_139 == arg_111 && arg_139 == arg_129 && arg_139 == arg_116 && arg_139 == arg_107 && arg_139 == arg_49 && arg_139 == arg_26 && arg_106 == arg_111 && arg_106 == arg_129 && arg_106 == arg_116 && arg_106 == arg_107 && arg_106 == arg_49 && arg_106 == arg_26 && arg_111 == arg_129 && arg_111 == arg_116 && arg_111 == arg_107 && arg_111 == arg_49 && arg_111 == arg_26 && arg_129 == arg_116 && arg_129 == arg_107 && arg_129 == arg_49 && arg_129 == arg_26 && arg_116 == arg_107 && arg_116 == arg_49 && arg_116 == arg_26 && arg_107 == arg_49 && arg_107 == arg_26 && arg_49 == arg_26 {
let rep_insts = pos.func.dfg.inst_results(inst);
let rep_insts_0 = rep_insts[0];
pos.func.dfg.change_to_alias(arg_145, rep_insts_0);
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1379(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 24 {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_4) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_5 == 8 {
if rhs_4 == 16711680 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_6 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_6[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_7 = arg;
let rhs_8 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_7) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_9 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_9 == 8 {
if rhs_8 == 65280 {
match pos.func.dfg.value_def(arg_6[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_9 = arg;
let rhs_12 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_12 == 24 {
if rhs_1 == 2 {
if arg_5 == arg_8 && arg_5 == arg_9 && arg_5 == arg_3 && arg_8 == arg_9 && arg_8 == arg_3 && arg_9 == arg_3 {
let rhs_inst_12 = pos.ins().band_imm(arg_6[1], 2_u64 as i64);
let rhs_inst_13 = pos.ins().bnot(rhs_inst_12);
pos.func.dfg.replace(inst).bnot(rhs_inst_13);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1380(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 24 {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_4) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_5 == 8 {
if rhs_4 == 16711680 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_6 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_6[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_7 = arg;
let rhs_8 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_7) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_9 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_9 == 8 {
if rhs_8 == 65280 {
match pos.func.dfg.value_def(arg_6[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_9 = arg;
let rhs_12 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_12 == 24 {
if rhs_1 == 1 {
if arg_8 == arg_9 && arg_8 == arg_5 && arg_8 == arg_3 && arg_9 == arg_5 && arg_9 == arg_3 && arg_5 == arg_3 {
let rhs_inst_12 = pos.ins().band_imm(arg_6[1], 1_u64 as i64);
let rhs_inst_13 = pos.ins().bnot(rhs_inst_12);
pos.func.dfg.replace(inst).bnot(rhs_inst_13);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1381(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 24 {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_4) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_5 == 8 {
if rhs_4 == 16711680 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_6 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_6[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_7 = arg;
let rhs_8 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_7) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_9 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_9 == 8 {
if rhs_8 == 65280 {
match pos.func.dfg.value_def(arg_6[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_9 = arg;
let rhs_12 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_12 == 24 {
if rhs_1 == 3 {
if arg_3 == arg_8 && arg_3 == arg_5 && arg_3 == arg_9 && arg_8 == arg_5 && arg_8 == arg_9 && arg_5 == arg_9 {
let rhs_inst_12 = pos.ins().band_imm(arg_6[1], 3_u64 as i64);
let rhs_inst_13 = pos.ins().bnot(rhs_inst_12);
pos.func.dfg.replace(inst).bnot(rhs_inst_13);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1382(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 24 {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_4) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_5 == 8 {
if rhs_4 == 16711680 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_6 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_6[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_7 = arg;
let rhs_8 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_7) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_9 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_9 == 8 {
if rhs_8 == 65280 {
match pos.func.dfg.value_def(arg_6[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_9 = arg;
let rhs_12 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_12 == 24 {
if rhs_1 == 4 {
if arg_5 == arg_8 && arg_5 == arg_3 && arg_5 == arg_9 && arg_8 == arg_3 && arg_8 == arg_9 && arg_3 == arg_9 {
let rhs_inst_12 = pos.ins().band_imm(arg_6[1], 4_u64 as i64);
let rhs_inst_13 = pos.ins().bnot(rhs_inst_12);
pos.func.dfg.replace(inst).bnot(rhs_inst_13);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1383(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 24 {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_4) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_5 == 8 {
if rhs_4 == 16711680 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_6 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_6[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_7 = arg;
let rhs_8 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_7) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_9 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_9 == 8 {
if rhs_8 == 65280 {
match pos.func.dfg.value_def(arg_6[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_9 = arg;
let rhs_12 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_12 == 24 {
if rhs_1 == 15 {
if arg_3 == arg_8 && arg_3 == arg_5 && arg_3 == arg_9 && arg_8 == arg_5 && arg_8 == arg_9 && arg_5 == arg_9 {
let rhs_inst_12 = pos.ins().band_imm(arg_6[1], 15_u64 as i64);
let rhs_inst_13 = pos.ins().bnot(rhs_inst_12);
pos.func.dfg.replace(inst).bnot(rhs_inst_13);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1384(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_3 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_3[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_4 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_4[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 11 {
match pos.func.dfg.value_def(arg_4[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_5 == 10 {
match pos.func.dfg.value_def(arg_3[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_7 = arg;
let rhs_7 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_7 == 62463 {
if rhs_2 == -256 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_10 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_10 == 250 {
if rhs_1 == 65535 {
if arg_6 != arg_7 && arg_6 != arg_5 && arg_6 != arg_8 && arg_7 != arg_5 && arg_7 == arg_8 && arg_5 != arg_8 {
let rhs_inst_13 = pos.ins().band_imm(arg_2, 65530_u64 as i64);
let rhs_inst_14 = pos.ins().bnot(rhs_inst_13);
pos.func.dfg.replace(inst).bnot(rhs_inst_14);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1385(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_3 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_3[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_4) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_5 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_5[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_6) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_7 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_7[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_8) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_9 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_9[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_10 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_10) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_11 = arg;
let rhs_7 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_11) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_12 = arg;
let rhs_8 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_8 == -1 {
if rhs_7 == 4294967295 {
if rhs_6 == 1 {
match pos.func.dfg.value_def(arg_9[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_13 = arg;
let rhs_12 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_13) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_14 = arg;
let rhs_13 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_13 == -1 {
if rhs_12 == 4294967295 {
if rhs_5 == 2 {
match pos.func.dfg.value_def(arg_7[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_15 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_15[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_16 = arg;
let rhs_17 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_16) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_17 = arg;
let rhs_18 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_17) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_18 = arg;
let rhs_19 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_19 == -1 {
if rhs_18 == 4294967295 {
if rhs_17 == 1 {
match pos.func.dfg.value_def(arg_15[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_19 = arg;
let rhs_23 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_19) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_20 = arg;
let rhs_24 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_24 == -1 {
if rhs_23 == 4294967295 {
if rhs_4 == 4 {
match pos.func.dfg.value_def(arg_5[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_21 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_21[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_22 = arg;
let rhs_28 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_22) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_23 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_23[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_24 = arg;
let rhs_29 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_24) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_25 = arg;
let rhs_30 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_25) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_26 = arg;
let rhs_31 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_31 == -1 {
if rhs_30 == 4294967295 {
if rhs_29 == 1 {
match pos.func.dfg.value_def(arg_23[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_27 = arg;
let rhs_35 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_27) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_28 = arg;
let rhs_36 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_36 == -1 {
if rhs_35 == 4294967295 {
if rhs_28 == 2 {
match pos.func.dfg.value_def(arg_21[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_29 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_29[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_30 = arg;
let rhs_40 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_30) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_31 = arg;
let rhs_41 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_31) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_32 = arg;
let rhs_42 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_42 == -1 {
if rhs_41 == 4294967295 {
if rhs_40 == 1 {
match pos.func.dfg.value_def(arg_29[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_33 = arg;
let rhs_46 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_33) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_34 = arg;
let rhs_47 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_47 == -1 {
if rhs_46 == 4294967295 {
if rhs_3 == 8 {
match pos.func.dfg.value_def(arg_3[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_35 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_35[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_36 = arg;
let rhs_51 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_36) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_37 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_37[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_38 = arg;
let rhs_52 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_38) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_39 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_39[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_40 = arg;
let rhs_53 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_40) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_41 = arg;
let rhs_54 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_41) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_42 = arg;
let rhs_55 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_55 == -1 {
if rhs_54 == 4294967295 {
if rhs_53 == 1 {
match pos.func.dfg.value_def(arg_39[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_43 = arg;
let rhs_59 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_43) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_44 = arg;
let rhs_60 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_60 == -1 {
if rhs_59 == 4294967295 {
if rhs_52 == 2 {
match pos.func.dfg.value_def(arg_37[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_45 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_45[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_46 = arg;
let rhs_64 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_46) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_47 = arg;
let rhs_65 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_47) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_48 = arg;
let rhs_66 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_66 == -1 {
if rhs_65 == 4294967295 {
if rhs_64 == 1 {
match pos.func.dfg.value_def(arg_45[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_49 = arg;
let rhs_70 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_49) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_50 = arg;
let rhs_71 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_71 == -1 {
if rhs_70 == 4294967295 {
if rhs_51 == 4 {
match pos.func.dfg.value_def(arg_35[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_51 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_51[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_52 = arg;
let rhs_75 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_52) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_53 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_53[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_54 = arg;
let rhs_76 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_54) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_55 = arg;
let rhs_77 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_55) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_56 = arg;
let rhs_78 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_78 == -1 {
if rhs_77 == 4294967295 {
if rhs_76 == 1 {
match pos.func.dfg.value_def(arg_53[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_57 = arg;
let rhs_82 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_57) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_58 = arg;
let rhs_83 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_83 == -1 {
if rhs_82 == 4294967295 {
if rhs_75 == 2 {
match pos.func.dfg.value_def(arg_51[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_59 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_59[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_60 = arg;
let rhs_87 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_60) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_61 = arg;
let rhs_88 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_61) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_62 = arg;
let rhs_89 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_89 == -1 {
if rhs_88 == 4294967295 {
if rhs_87 == 1 {
match pos.func.dfg.value_def(arg_59[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_63 = arg;
let rhs_93 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_63) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_64 = arg;
let rhs_94 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_94 == -1 {
if rhs_93 == 4294967295 {
if rhs_2 == 16 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_65 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_65[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_66 = arg;
let rhs_98 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_66) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_67 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_67[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_68 = arg;
let rhs_99 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_68) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_69 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_69[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_70 = arg;
let rhs_100 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_70) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_71 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_71[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_72 = arg;
let rhs_101 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_72) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_73 = arg;
let rhs_102 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_73) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_74 = arg;
let rhs_103 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_103 == -1 {
if rhs_102 == 4294967295 {
if rhs_101 == 1 {
match pos.func.dfg.value_def(arg_71[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_75 = arg;
let rhs_107 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_75) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_76 = arg;
let rhs_108 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_108 == -1 {
if rhs_107 == 4294967295 {
if rhs_100 == 2 {
match pos.func.dfg.value_def(arg_69[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_77 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_77[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_78 = arg;
let rhs_112 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_78) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_79 = arg;
let rhs_113 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_79) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_80 = arg;
let rhs_114 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_114 == -1 {
if rhs_113 == 4294967295 {
if rhs_112 == 1 {
match pos.func.dfg.value_def(arg_77[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_81 = arg;
let rhs_118 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_81) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_82 = arg;
let rhs_119 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_119 == -1 {
if rhs_118 == 4294967295 {
if rhs_99 == 4 {
match pos.func.dfg.value_def(arg_67[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_83 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_83[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_84 = arg;
let rhs_123 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_84) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_85 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_85[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_86 = arg;
let rhs_124 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_86) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_87 = arg;
let rhs_125 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_87) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_88 = arg;
let rhs_126 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_126 == -1 {
if rhs_125 == 4294967295 {
if rhs_124 == 1 {
match pos.func.dfg.value_def(arg_85[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_89 = arg;
let rhs_130 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_89) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_90 = arg;
let rhs_131 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_131 == -1 {
if rhs_130 == 4294967295 {
if rhs_123 == 2 {
match pos.func.dfg.value_def(arg_83[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_91 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_91[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_92 = arg;
let rhs_135 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_92) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_93 = arg;
let rhs_136 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_93) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_94 = arg;
let rhs_137 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_137 == -1 {
if rhs_136 == 4294967295 {
if rhs_135 == 1 {
match pos.func.dfg.value_def(arg_91[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_95 = arg;
let rhs_141 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_95) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_96 = arg;
let rhs_142 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_142 == -1 {
if rhs_141 == 4294967295 {
if rhs_98 == 8 {
match pos.func.dfg.value_def(arg_65[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_97 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_97[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_98 = arg;
let rhs_146 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_98) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_99 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_99[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_100 = arg;
let rhs_147 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_100) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_101 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_101[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_102 = arg;
let rhs_148 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_102) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_103 = arg;
let rhs_149 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_103) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_104 = arg;
let rhs_150 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_150 == -1 {
if rhs_149 == 4294967295 {
if rhs_148 == 1 {
match pos.func.dfg.value_def(arg_101[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_105 = arg;
let rhs_154 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_105) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_106 = arg;
let rhs_155 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_155 == -1 {
if rhs_154 == 4294967295 {
if rhs_147 == 2 {
match pos.func.dfg.value_def(arg_99[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_107 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_107[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_108 = arg;
let rhs_159 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_108) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_109 = arg;
let rhs_160 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_109) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_110 = arg;
let rhs_161 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_161 == -1 {
if rhs_160 == 4294967295 {
if rhs_159 == 1 {
match pos.func.dfg.value_def(arg_107[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_111 = arg;
let rhs_165 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_111) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_112 = arg;
let rhs_166 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_166 == -1 {
if rhs_165 == 4294967295 {
if rhs_146 == 4 {
match pos.func.dfg.value_def(arg_97[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_113 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_113[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_114 = arg;
let rhs_170 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_114) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_115 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_115[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_116 = arg;
let rhs_171 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_116) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_117 = arg;
let rhs_172 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_117) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_118 = arg;
let rhs_173 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_173 == -1 {
if rhs_172 == 4294967295 {
if rhs_171 == 1 {
match pos.func.dfg.value_def(arg_115[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_119 = arg;
let rhs_177 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_119) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_120 = arg;
let rhs_178 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_178 == -1 {
if rhs_177 == 4294967295 {
if rhs_170 == 2 {
match pos.func.dfg.value_def(arg_113[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_121 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_121[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_122 = arg;
let rhs_182 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_122) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_123 = arg;
let rhs_183 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_123) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_124 = arg;
let rhs_184 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_184 == -1 {
if rhs_183 == 4294967295 {
if rhs_182 == 1 {
match pos.func.dfg.value_def(arg_121[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_125 = arg;
let rhs_188 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_125) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_126 = arg;
let rhs_189 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_189 == -1 {
if rhs_188 == 4294967295 {
if rhs_1 == 32 {
if arg_80 == arg_64 && arg_80 == arg_82 && arg_80 == arg_94 && arg_80 == arg_58 && arg_80 == arg_124 && arg_80 == arg_88 && arg_80 == arg_28 && arg_80 == arg_62 && arg_80 == arg_118 && arg_80 == arg_126 && arg_80 == arg_74 && arg_80 == arg_32 && arg_80 == arg_96 && arg_80 == arg_112 && arg_80 == arg_34 && arg_80 == arg_26 && arg_80 == arg_50 && arg_80 == arg_120 && arg_80 == arg_42 && arg_80 == arg_48 && arg_80 == arg_14 && arg_80 == arg_104 && arg_80 == arg_12 && arg_80 == arg_76 && arg_80 == arg_44 && arg_80 == arg_20 && arg_80 == arg_110 && arg_80 == arg_56 && arg_80 == arg_18 && arg_80 == arg_90 && arg_80 == arg_106 && arg_64 == arg_82 && arg_64 == arg_94 && arg_64 == arg_58 && arg_64 == arg_124 && arg_64 == arg_88 && arg_64 == arg_28 && arg_64 == arg_62 && arg_64 == arg_118 && arg_64 == arg_126 && arg_64 == arg_74 && arg_64 == arg_32 && arg_64 == arg_96 && arg_64 == arg_112 && arg_64 == arg_34 && arg_64 == arg_26 && arg_64 == arg_50 && arg_64 == arg_120 && arg_64 == arg_42 && arg_64 == arg_48 && arg_64 == arg_14 && arg_64 == arg_104 && arg_64 == arg_12 && arg_64 == arg_76 && arg_64 == arg_44 && arg_64 == arg_20 && arg_64 == arg_110 && arg_64 == arg_56 && arg_64 == arg_18 && arg_64 == arg_90 && arg_64 == arg_106 && arg_82 == arg_94 && arg_82 == arg_58 && arg_82 == arg_124 && arg_82 == arg_88 && arg_82 == arg_28 && arg_82 == arg_62 && arg_82 == arg_118 && arg_82 == arg_126 && arg_82 == arg_74 && arg_82 == arg_32 && arg_82 == arg_96 && arg_82 == arg_112 && arg_82 == arg_34 && arg_82 == arg_26 && arg_82 == arg_50 && arg_82 == arg_120 && arg_82 == arg_42 && arg_82 == arg_48 && arg_82 == arg_14 && arg_82 == arg_104 && arg_82 == arg_12 && arg_82 == arg_76 && arg_82 == arg_44 && arg_82 == arg_20 && arg_82 == arg_110 && arg_82 == arg_56 && arg_82 == arg_18 && arg_82 == arg_90 && arg_82 == arg_106 && arg_94 == arg_58 && arg_94 == arg_124 && arg_94 == arg_88 && arg_94 == arg_28 && arg_94 == arg_62 && arg_94 == arg_118 && arg_94 == arg_126 && arg_94 == arg_74 && arg_94 == arg_32 && arg_94 == arg_96 && arg_94 == arg_112 && arg_94 == arg_34 && arg_94 == arg_26 && arg_94 == arg_50 && arg_94 == arg_120 && arg_94 == arg_42 && arg_94 == arg_48 && arg_94 == arg_14 && arg_94 == arg_104 && arg_94 == arg_12 && arg_94 == arg_76 && arg_94 == arg_44 && arg_94 == arg_20 && arg_94 == arg_110 && arg_94 == arg_56 && arg_94 == arg_18 && arg_94 == arg_90 && arg_94 == arg_106 && arg_58 == arg_124 && arg_58 == arg_88 && arg_58 == arg_28 && arg_58 == arg_62 && arg_58 == arg_118 && arg_58 == arg_126 && arg_58 == arg_74 && arg_58 == arg_32 && arg_58 == arg_96 && arg_58 == arg_112 && arg_58 == arg_34 && arg_58 == arg_26 && arg_58 == arg_50 && arg_58 == arg_120 && arg_58 == arg_42 && arg_58 == arg_48 && arg_58 == arg_14 && arg_58 == arg_104 && arg_58 == arg_12 && arg_58 == arg_76 && arg_58 == arg_44 && arg_58 == arg_20 && arg_58 == arg_110 && arg_58 == arg_56 && arg_58 == arg_18 && arg_58 == arg_90 && arg_58 == arg_106 && arg_124 == arg_88 && arg_124 == arg_28 && arg_124 == arg_62 && arg_124 == arg_118 && arg_124 == arg_126 && arg_124 == arg_74 && arg_124 == arg_32 && arg_124 == arg_96 && arg_124 == arg_112 && arg_124 == arg_34 && arg_124 == arg_26 && arg_124 == arg_50 && arg_124 == arg_120 && arg_124 == arg_42 && arg_124 == arg_48 && arg_124 == arg_14 && arg_124 == arg_104 && arg_124 == arg_12 && arg_124 == arg_76 && arg_124 == arg_44 && arg_124 == arg_20 && arg_124 == arg_110 && arg_124 == arg_56 && arg_124 == arg_18 && arg_124 == arg_90 && arg_124 == arg_106 && arg_88 == arg_28 && arg_88 == arg_62 && arg_88 == arg_118 && arg_88 == arg_126 && arg_88 == arg_74 && arg_88 == arg_32 && arg_88 == arg_96 && arg_88 == arg_112 && arg_88 == arg_34 && arg_88 == arg_26 && arg_88 == arg_50 && arg_88 == arg_120 && arg_88 == arg_42 && arg_88 == arg_48 && arg_88 == arg_14 && arg_88 == arg_104 && arg_88 == arg_12 && arg_88 == arg_76 && arg_88 == arg_44 && arg_88 == arg_20 && arg_88 == arg_110 && arg_88 == arg_56 && arg_88 == arg_18 && arg_88 == arg_90 && arg_88 == arg_106 && arg_28 == arg_62 && arg_28 == arg_118 && arg_28 == arg_126 && arg_28 == arg_74 && arg_28 == arg_32 && arg_28 == arg_96 && arg_28 == arg_112 && arg_28 == arg_34 && arg_28 == arg_26 && arg_28 == arg_50 && arg_28 == arg_120 && arg_28 == arg_42 && arg_28 == arg_48 && arg_28 == arg_14 && arg_28 == arg_104 && arg_28 == arg_12 && arg_28 == arg_76 && arg_28 == arg_44 && arg_28 == arg_20 && arg_28 == arg_110 && arg_28 == arg_56 && arg_28 == arg_18 && arg_28 == arg_90 && arg_28 == arg_106 && arg_62 == arg_118 && arg_62 == arg_126 && arg_62 == arg_74 && arg_62 == arg_32 && arg_62 == arg_96 && arg_62 == arg_112 && arg_62 == arg_34 && arg_62 == arg_26 && arg_62 == arg_50 && arg_62 == arg_120 && arg_62 == arg_42 && arg_62 == arg_48 && arg_62 == arg_14 && arg_62 == arg_104 && arg_62 == arg_12 && arg_62 == arg_76 && arg_62 == arg_44 && arg_62 == arg_20 && arg_62 == arg_110 && arg_62 == arg_56 && arg_62 == arg_18 && arg_62 == arg_90 && arg_62 == arg_106 && arg_118 == arg_126 && arg_118 == arg_74 && arg_118 == arg_32 && arg_118 == arg_96 && arg_118 == arg_112 && arg_118 == arg_34 && arg_118 == arg_26 && arg_118 == arg_50 && arg_118 == arg_120 && arg_118 == arg_42 && arg_118 == arg_48 && arg_118 == arg_14 && arg_118 == arg_104 && arg_118 == arg_12 && arg_118 == arg_76 && arg_118 == arg_44 && arg_118 == arg_20 && arg_118 == arg_110 && arg_118 == arg_56 && arg_118 == arg_18 && arg_118 == arg_90 && arg_118 == arg_106 && arg_126 == arg_74 && arg_126 == arg_32 && arg_126 == arg_96 && arg_126 == arg_112 && arg_126 == arg_34 && arg_126 == arg_26 && arg_126 == arg_50 && arg_126 == arg_120 && arg_126 == arg_42 && arg_126 == arg_48 && arg_126 == arg_14 && arg_126 == arg_104 && arg_126 == arg_12 && arg_126 == arg_76 && arg_126 == arg_44 && arg_126 == arg_20 && arg_126 == arg_110 && arg_126 == arg_56 && arg_126 == arg_18 && arg_126 == arg_90 && arg_126 == arg_106 && arg_74 == arg_32 && arg_74 == arg_96 && arg_74 == arg_112 && arg_74 == arg_34 && arg_74 == arg_26 && arg_74 == arg_50 && arg_74 == arg_120 && arg_74 == arg_42 && arg_74 == arg_48 && arg_74 == arg_14 && arg_74 == arg_104 && arg_74 == arg_12 && arg_74 == arg_76 && arg_74 == arg_44 && arg_74 == arg_20 && arg_74 == arg_110 && arg_74 == arg_56 && arg_74 == arg_18 && arg_74 == arg_90 && arg_74 == arg_106 && arg_32 == arg_96 && arg_32 == arg_112 && arg_32 == arg_34 && arg_32 == arg_26 && arg_32 == arg_50 && arg_32 == arg_120 && arg_32 == arg_42 && arg_32 == arg_48 && arg_32 == arg_14 && arg_32 == arg_104 && arg_32 == arg_12 && arg_32 == arg_76 && arg_32 == arg_44 && arg_32 == arg_20 && arg_32 == arg_110 && arg_32 == arg_56 && arg_32 == arg_18 && arg_32 == arg_90 && arg_32 == arg_106 && arg_96 == arg_112 && arg_96 == arg_34 && arg_96 == arg_26 && arg_96 == arg_50 && arg_96 == arg_120 && arg_96 == arg_42 && arg_96 == arg_48 && arg_96 == arg_14 && arg_96 == arg_104 && arg_96 == arg_12 && arg_96 == arg_76 && arg_96 == arg_44 && arg_96 == arg_20 && arg_96 == arg_110 && arg_96 == arg_56 && arg_96 == arg_18 && arg_96 == arg_90 && arg_96 == arg_106 && arg_112 == arg_34 && arg_112 == arg_26 && arg_112 == arg_50 && arg_112 == arg_120 && arg_112 == arg_42 && arg_112 == arg_48 && arg_112 == arg_14 && arg_112 == arg_104 && arg_112 == arg_12 && arg_112 == arg_76 && arg_112 == arg_44 && arg_112 == arg_20 && arg_112 == arg_110 && arg_112 == arg_56 && arg_112 == arg_18 && arg_112 == arg_90 && arg_112 == arg_106 && arg_34 == arg_26 && arg_34 == arg_50 && arg_34 == arg_120 && arg_34 == arg_42 && arg_34 == arg_48 && arg_34 == arg_14 && arg_34 == arg_104 && arg_34 == arg_12 && arg_34 == arg_76 && arg_34 == arg_44 && arg_34 == arg_20 && arg_34 == arg_110 && arg_34 == arg_56 && arg_34 == arg_18 && arg_34 == arg_90 && arg_34 == arg_106 && arg_26 == arg_50 && arg_26 == arg_120 && arg_26 == arg_42 && arg_26 == arg_48 && arg_26 == arg_14 && arg_26 == arg_104 && arg_26 == arg_12 && arg_26 == arg_76 && arg_26 == arg_44 && arg_26 == arg_20 && arg_26 == arg_110 && arg_26 == arg_56 && arg_26 == arg_18 && arg_26 == arg_90 && arg_26 == arg_106 && arg_50 == arg_120 && arg_50 == arg_42 && arg_50 == arg_48 && arg_50 == arg_14 && arg_50 == arg_104 && arg_50 == arg_12 && arg_50 == arg_76 && arg_50 == arg_44 && arg_50 == arg_20 && arg_50 == arg_110 && arg_50 == arg_56 && arg_50 == arg_18 && arg_50 == arg_90 && arg_50 == arg_106 && arg_120 == arg_42 && arg_120 == arg_48 && arg_120 == arg_14 && arg_120 == arg_104 && arg_120 == arg_12 && arg_120 == arg_76 && arg_120 == arg_44 && arg_120 == arg_20 && arg_120 == arg_110 && arg_120 == arg_56 && arg_120 == arg_18 && arg_120 == arg_90 && arg_120 == arg_106 && arg_42 == arg_48 && arg_42 == arg_14 && arg_42 == arg_104 && arg_42 == arg_12 && arg_42 == arg_76 && arg_42 == arg_44 && arg_42 == arg_20 && arg_42 == arg_110 && arg_42 == arg_56 && arg_42 == arg_18 && arg_42 == arg_90 && arg_42 == arg_106 && arg_48 == arg_14 && arg_48 == arg_104 && arg_48 == arg_12 && arg_48 == arg_76 && arg_48 == arg_44 && arg_48 == arg_20 && arg_48 == arg_110 && arg_48 == arg_56 && arg_48 == arg_18 && arg_48 == arg_90 && arg_48 == arg_106 && arg_14 == arg_104 && arg_14 == arg_12 && arg_14 == arg_76 && arg_14 == arg_44 && arg_14 == arg_20 && arg_14 == arg_110 && arg_14 == arg_56 && arg_14 == arg_18 && arg_14 == arg_90 && arg_14 == arg_106 && arg_104 == arg_12 && arg_104 == arg_76 && arg_104 == arg_44 && arg_104 == arg_20 && arg_104 == arg_110 && arg_104 == arg_56 && arg_104 == arg_18 && arg_104 == arg_90 && arg_104 == arg_106 && arg_12 == arg_76 && arg_12 == arg_44 && arg_12 == arg_20 && arg_12 == arg_110 && arg_12 == arg_56 && arg_12 == arg_18 && arg_12 == arg_90 && arg_12 == arg_106 && arg_76 == arg_44 && arg_76 == arg_20 && arg_76 == arg_110 && arg_76 == arg_56 && arg_76 == arg_18 && arg_76 == arg_90 && arg_76 == arg_106 && arg_44 == arg_20 && arg_44 == arg_110 && arg_44 == arg_56 && arg_44 == arg_18 && arg_44 == arg_90 && arg_44 == arg_106 && arg_20 == arg_110 && arg_20 == arg_56 && arg_20 == arg_18 && arg_20 == arg_90 && arg_20 == arg_106 && arg_110 == arg_56 && arg_110 == arg_18 && arg_110 == arg_90 && arg_110 == arg_106 && arg_56 == arg_18 && arg_56 == arg_90 && arg_56 == arg_106 && arg_18 == arg_90 && arg_18 == arg_106 && arg_90 == arg_106 {
pos.func.dfg.replace(inst).iconst(I64, 0_u64 as i64); 
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1386(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Unary { opcode, arg } => {
let arg_4 = arg;
match opcode {
Opcode::Clz => {
if rhs_2 == 31 {
if rhs_1 == 24 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_5) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_6) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_7 = arg;
let rhs_7 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_7) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Unary { opcode, arg } => {
let arg_8 = arg;
match opcode {
Opcode::Clz => {
if rhs_7 == 31 {
if rhs_6 == 8 {
if rhs_5 == 16711680 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_9 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_9[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_10 = arg;
let rhs_11 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_10) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_11 = arg;
let rhs_12 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_11) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_12 = arg;
let rhs_13 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_12) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Unary { opcode, arg } => {
let arg_13 = arg;
match opcode {
Opcode::Clz => {
if rhs_13 == 31 {
if rhs_12 == 8 {
if rhs_11 == 65280 {
match pos.func.dfg.value_def(arg_9[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_14 = arg;
let rhs_17 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_14) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_15 = arg;
let rhs_18 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
match pos.func.dfg.value_def(arg_15) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Unary { opcode, arg } => {
let arg_16 = arg;
match opcode {
Opcode::Clz => {
if rhs_18 == 31 {
if rhs_17 == 24 {
if arg_4 == arg_13 && arg_4 == arg_16 && arg_4 == arg_8 && arg_13 == arg_16 && arg_13 == arg_8 && arg_16 == arg_8 {
let rhs_inst_13 = pos.ins().sshr(arg_1[0], arg_9[1]);
let rhs_inst_14 = pos.ins().bnot(rhs_inst_13);
pos.func.dfg.replace(inst).bnot(rhs_inst_14);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1387(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_4 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_4[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_5) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 254 {
if rhs_2 == 1 {
match pos.func.dfg.value_def(arg_4[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_7 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_6 == 6 {
if rhs_1 == -126 {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_9 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_8) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_9 = arg;
let rhs_10 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_9) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_10 = arg;
let rhs_11 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_11 == 254 {
if rhs_10 == 1 {
if rhs_9 == 4 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_11 = arg;
let rhs_15 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_11) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_12 = arg;
let rhs_16 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_12) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_13 = arg;
let rhs_17 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_17 == 254 {
if rhs_16 == 1 {
if rhs_15 == 8 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_14 = arg;
let rhs_21 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_14) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_15 = arg;
let rhs_22 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_15) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_16 = arg;
let rhs_23 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_23 == 254 {
if rhs_22 == 1 {
if rhs_21 == 16 {
if arg_10 == arg_13 && arg_10 == arg_7 && arg_10 == arg_6 && arg_10 == arg_16 && arg_13 == arg_7 && arg_13 == arg_6 && arg_13 == arg_16 && arg_7 == arg_6 && arg_7 == arg_16 && arg_6 == arg_16 {
let rhs_inst_13 = pos.ins().bor(arg_2[0], arg_14);
let rhs_inst_14 = pos.ins().iconst(I32, 97_u64 as i64);
let rhs_inst_15 = pos.ins().bor_not(rhs_inst_14, rhs_inst_13);
pos.func.dfg.replace(inst).bnot(rhs_inst_15);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1388(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_3 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_3[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_4) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_5 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_5[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_6) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_7 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_7[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_8) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_9 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_9[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_10 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_10) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_11 = arg;
let rhs_7 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_11) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_12 = args;
match opcode {
Opcode::Imul => {
if rhs_7 == 4294967295 {
if rhs_6 == 1 {
match pos.func.dfg.value_def(arg_9[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_13 = arg;
let rhs_10 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_13) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_14 = args;
match opcode {
Opcode::Imul => {
if rhs_10 == 4294967295 {
if rhs_5 == 2 {
match pos.func.dfg.value_def(arg_7[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_15 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_15[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_16 = arg;
let rhs_13 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_16) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_17 = arg;
let rhs_14 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_17) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_18 = args;
match opcode {
Opcode::Imul => {
if rhs_14 == 4294967295 {
if rhs_13 == 1 {
match pos.func.dfg.value_def(arg_15[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_19 = arg;
let rhs_17 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_19) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_20 = args;
match opcode {
Opcode::Imul => {
if rhs_17 == 4294967295 {
if rhs_4 == 4 {
match pos.func.dfg.value_def(arg_5[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_21 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_21[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_22 = arg;
let rhs_20 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_22) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_23 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_23[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_24 = arg;
let rhs_21 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_24) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_25 = arg;
let rhs_22 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_25) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_26 = args;
match opcode {
Opcode::Imul => {
if rhs_22 == 4294967295 {
if rhs_21 == 1 {
match pos.func.dfg.value_def(arg_23[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_27 = arg;
let rhs_25 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_27) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_28 = args;
match opcode {
Opcode::Imul => {
if rhs_25 == 4294967295 {
if rhs_20 == 2 {
match pos.func.dfg.value_def(arg_21[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_29 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_29[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_30 = arg;
let rhs_28 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_30) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_31 = arg;
let rhs_29 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_31) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_32 = args;
match opcode {
Opcode::Imul => {
if rhs_29 == 4294967295 {
if rhs_28 == 1 {
match pos.func.dfg.value_def(arg_29[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_33 = arg;
let rhs_32 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_33) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_34 = args;
match opcode {
Opcode::Imul => {
if rhs_32 == 4294967295 {
if rhs_3 == 8 {
match pos.func.dfg.value_def(arg_3[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_35 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_35[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_36 = arg;
let rhs_35 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_36) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_37 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_37[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_38 = arg;
let rhs_36 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_38) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_39 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_39[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_40 = arg;
let rhs_37 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_40) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_41 = arg;
let rhs_38 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_41) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_42 = args;
match opcode {
Opcode::Imul => {
if rhs_38 == 4294967295 {
if rhs_37 == 1 {
match pos.func.dfg.value_def(arg_39[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_43 = arg;
let rhs_41 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_43) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_44 = args;
match opcode {
Opcode::Imul => {
if rhs_41 == 4294967295 {
if rhs_36 == 2 {
match pos.func.dfg.value_def(arg_37[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_45 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_45[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_46 = arg;
let rhs_44 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_46) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_47 = arg;
let rhs_45 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_47) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_48 = args;
match opcode {
Opcode::Imul => {
if rhs_45 == 4294967295 {
if rhs_44 == 1 {
match pos.func.dfg.value_def(arg_45[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_49 = arg;
let rhs_48 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_49) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_50 = args;
match opcode {
Opcode::Imul => {
if rhs_48 == 4294967295 {
if rhs_35 == 4 {
match pos.func.dfg.value_def(arg_35[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_51 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_51[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_52 = arg;
let rhs_51 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_52) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_53 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_53[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_54 = arg;
let rhs_52 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_54) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_55 = arg;
let rhs_53 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_55) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_56 = args;
match opcode {
Opcode::Imul => {
if rhs_53 == 4294967295 {
if rhs_52 == 1 {
match pos.func.dfg.value_def(arg_53[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_57 = arg;
let rhs_56 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_57) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_58 = args;
match opcode {
Opcode::Imul => {
if rhs_56 == 4294967295 {
if rhs_51 == 2 {
match pos.func.dfg.value_def(arg_51[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_59 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_59[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_60 = arg;
let rhs_59 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_60) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_61 = arg;
let rhs_60 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_61) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_62 = args;
match opcode {
Opcode::Imul => {
if rhs_60 == 4294967295 {
if rhs_59 == 1 {
match pos.func.dfg.value_def(arg_59[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_63 = arg;
let rhs_63 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_63) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_64 = args;
match opcode {
Opcode::Imul => {
if rhs_63 == 4294967295 {
if rhs_2 == 16 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_65 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_65[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_66 = arg;
let rhs_66 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_66) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_67 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_67[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_68 = arg;
let rhs_67 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_68) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_69 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_69[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_70 = arg;
let rhs_68 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_70) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_71 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_71[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_72 = arg;
let rhs_69 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_72) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_73 = arg;
let rhs_70 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_73) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_74 = args;
match opcode {
Opcode::Imul => {
if rhs_70 == 4294967295 {
if rhs_69 == 1 {
match pos.func.dfg.value_def(arg_71[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_75 = arg;
let rhs_73 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_75) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_76 = args;
match opcode {
Opcode::Imul => {
if rhs_73 == 4294967295 {
if rhs_68 == 2 {
match pos.func.dfg.value_def(arg_69[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_77 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_77[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_78 = arg;
let rhs_76 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_78) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_79 = arg;
let rhs_77 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_79) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_80 = args;
match opcode {
Opcode::Imul => {
if rhs_77 == 4294967295 {
if rhs_76 == 1 {
match pos.func.dfg.value_def(arg_77[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_81 = arg;
let rhs_80 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_81) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_82 = args;
match opcode {
Opcode::Imul => {
if rhs_80 == 4294967295 {
if rhs_67 == 4 {
match pos.func.dfg.value_def(arg_67[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_83 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_83[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_84 = arg;
let rhs_83 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_84) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_85 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_85[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_86 = arg;
let rhs_84 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_86) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_87 = arg;
let rhs_85 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_87) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_88 = args;
match opcode {
Opcode::Imul => {
if rhs_85 == 4294967295 {
if rhs_84 == 1 {
match pos.func.dfg.value_def(arg_85[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_89 = arg;
let rhs_88 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_89) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_90 = args;
match opcode {
Opcode::Imul => {
if rhs_88 == 4294967295 {
if rhs_83 == 2 {
match pos.func.dfg.value_def(arg_83[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_91 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_91[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_92 = arg;
let rhs_91 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_92) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_93 = arg;
let rhs_92 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_93) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_94 = args;
match opcode {
Opcode::Imul => {
if rhs_92 == 4294967295 {
if rhs_91 == 1 {
match pos.func.dfg.value_def(arg_91[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_95 = arg;
let rhs_95 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_95) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_96 = args;
match opcode {
Opcode::Imul => {
if rhs_95 == 4294967295 {
if rhs_66 == 8 {
match pos.func.dfg.value_def(arg_65[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_97 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_97[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_98 = arg;
let rhs_98 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_98) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_99 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_99[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_100 = arg;
let rhs_99 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_100) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_101 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_101[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_102 = arg;
let rhs_100 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_102) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_103 = arg;
let rhs_101 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_103) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_104 = args;
match opcode {
Opcode::Imul => {
if rhs_101 == 4294967295 {
if rhs_100 == 1 {
match pos.func.dfg.value_def(arg_101[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_105 = arg;
let rhs_104 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_105) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_106 = args;
match opcode {
Opcode::Imul => {
if rhs_104 == 4294967295 {
if rhs_99 == 2 {
match pos.func.dfg.value_def(arg_99[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_107 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_107[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_108 = arg;
let rhs_107 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_108) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_109 = arg;
let rhs_108 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_109) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_110 = args;
match opcode {
Opcode::Imul => {
if rhs_108 == 4294967295 {
if rhs_107 == 1 {
match pos.func.dfg.value_def(arg_107[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_111 = arg;
let rhs_111 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_111) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_112 = args;
match opcode {
Opcode::Imul => {
if rhs_111 == 4294967295 {
if rhs_98 == 4 {
match pos.func.dfg.value_def(arg_97[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_113 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_113[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_114 = arg;
let rhs_114 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_114) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_115 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_115[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_116 = arg;
let rhs_115 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_116) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_117 = arg;
let rhs_116 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_117) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_118 = args;
match opcode {
Opcode::Imul => {
if rhs_116 == 4294967295 {
if rhs_115 == 1 {
match pos.func.dfg.value_def(arg_115[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_119 = arg;
let rhs_119 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_119) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_120 = args;
match opcode {
Opcode::Imul => {
if rhs_119 == 4294967295 {
if rhs_114 == 2 {
match pos.func.dfg.value_def(arg_113[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_121 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_121[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_122 = arg;
let rhs_122 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_122) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_123 = arg;
let rhs_123 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_123) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_124 = args;
match opcode {
Opcode::Imul => {
if rhs_123 == 4294967295 {
if rhs_122 == 1 {
match pos.func.dfg.value_def(arg_121[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_125 = arg;
let rhs_126 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_125) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_126 = args;
match opcode {
Opcode::Imul => {
if rhs_126 == 4294967295 {
if rhs_1 == 32 {
if arg_28[1] != arg_118[0] && arg_28[1] == arg_96[1] && arg_28[1] != arg_74[0] && arg_28[1] != arg_124[0] && arg_28[1] != arg_80[0] && arg_28[1] != arg_26[0] && arg_28[1] != arg_62[0] && arg_28[1] != arg_82[0] && arg_28[1] != arg_48[0] && arg_28[1] != arg_34[0] && arg_28[1] == arg_110[1] && arg_28[1] == arg_118[1] && arg_28[1] == arg_12[1] && arg_28[1] == arg_90[1] && arg_28[1] != arg_50[0] && arg_28[1] != arg_44[0] && arg_28[1] == arg_126[1] && arg_28[1] == arg_88[1] && arg_28[1] != arg_64[0] && arg_28[1] != arg_18[0] && arg_28[1] == arg_32[1] && arg_28[1] != arg_120[0] && arg_28[1] == arg_42[1] && arg_28[1] == arg_44[1] && arg_28[1] == arg_64[1] && arg_28[1] == arg_18[1] && arg_28[1] != arg_12[0] && arg_28[1] != arg_96[0] && arg_28[1] == arg_124[1] && arg_28[1] == arg_26[1] && arg_28[1] != arg_14[0] && arg_28[1] != arg_90[0] && arg_28[1] != arg_28[0] && arg_28[1] == arg_20[1] && arg_28[1] != arg_110[0] && arg_28[1] == arg_58[1] && arg_28[1] != arg_106[0] && arg_28[1] == arg_82[1] && arg_28[1] == arg_34[1] && arg_28[1] == arg_112[1] && arg_28[1] == arg_74[1] && arg_28[1] == arg_106[1] && arg_28[1] != arg_112[0] && arg_28[1] == arg_94[1] && arg_28[1] != arg_88[0] && arg_28[1] == arg_48[1] && arg_28[1] == arg_14[1] && arg_28[1] != arg_20[0] && arg_28[1] != arg_56[0] && arg_28[1] != arg_42[0] && arg_28[1] == arg_50[1] && arg_28[1] == arg_62[1] && arg_28[1] != arg_76[0] && arg_28[1] == arg_56[1] && arg_28[1] != arg_58[0] && arg_28[1] == arg_80[1] && arg_28[1] != arg_126[0] && arg_28[1] == arg_104[1] && arg_28[1] == arg_76[1] && arg_28[1] != arg_104[0] && arg_28[1] != arg_32[0] && arg_28[1] == arg_120[1] && arg_28[1] != arg_94[0] && arg_118[0] != arg_96[1] && arg_118[0] == arg_74[0] && arg_118[0] == arg_124[0] && arg_118[0] == arg_80[0] && arg_118[0] == arg_26[0] && arg_118[0] == arg_62[0] && arg_118[0] == arg_82[0] && arg_118[0] == arg_48[0] && arg_118[0] == arg_34[0] && arg_118[0] != arg_110[1] && arg_118[0] != arg_118[1] && arg_118[0] != arg_12[1] && arg_118[0] != arg_90[1] && arg_118[0] == arg_50[0] && arg_118[0] == arg_44[0] && arg_118[0] != arg_126[1] && arg_118[0] != arg_88[1] && arg_118[0] == arg_64[0] && arg_118[0] == arg_18[0] && arg_118[0] != arg_32[1] && arg_118[0] == arg_120[0] && arg_118[0] != arg_42[1] && arg_118[0] != arg_44[1] && arg_118[0] != arg_64[1] && arg_118[0] != arg_18[1] && arg_118[0] == arg_12[0] && arg_118[0] == arg_96[0] && arg_118[0] != arg_124[1] && arg_118[0] != arg_26[1] && arg_118[0] == arg_14[0] && arg_118[0] == arg_90[0] && arg_118[0] == arg_28[0] && arg_118[0] != arg_20[1] && arg_118[0] == arg_110[0] && arg_118[0] != arg_58[1] && arg_118[0] == arg_106[0] && arg_118[0] != arg_82[1] && arg_118[0] != arg_34[1] && arg_118[0] != arg_112[1] && arg_118[0] != arg_74[1] && arg_118[0] != arg_106[1] && arg_118[0] == arg_112[0] && arg_118[0] != arg_94[1] && arg_118[0] == arg_88[0] && arg_118[0] != arg_48[1] && arg_118[0] != arg_14[1] && arg_118[0] == arg_20[0] && arg_118[0] == arg_56[0] && arg_118[0] == arg_42[0] && arg_118[0] != arg_50[1] && arg_118[0] != arg_62[1] && arg_118[0] == arg_76[0] && arg_118[0] != arg_56[1] && arg_118[0] == arg_58[0] && arg_118[0] != arg_80[1] && arg_118[0] == arg_126[0] && arg_118[0] != arg_104[1] && arg_118[0] != arg_76[1] && arg_118[0] == arg_104[0] && arg_118[0] == arg_32[0] && arg_118[0] != arg_120[1] && arg_118[0] == arg_94[0] && arg_96[1] != arg_74[0] && arg_96[1] != arg_124[0] && arg_96[1] != arg_80[0] && arg_96[1] != arg_26[0] && arg_96[1] != arg_62[0] && arg_96[1] != arg_82[0] && arg_96[1] != arg_48[0] && arg_96[1] != arg_34[0] && arg_96[1] == arg_110[1] && arg_96[1] == arg_118[1] && arg_96[1] == arg_12[1] && arg_96[1] == arg_90[1] && arg_96[1] != arg_50[0] && arg_96[1] != arg_44[0] && arg_96[1] == arg_126[1] && arg_96[1] == arg_88[1] && arg_96[1] != arg_64[0] && arg_96[1] != arg_18[0] && arg_96[1] == arg_32[1] && arg_96[1] != arg_120[0] && arg_96[1] == arg_42[1] && arg_96[1] == arg_44[1] && arg_96[1] == arg_64[1] && arg_96[1] == arg_18[1] && arg_96[1] != arg_12[0] && arg_96[1] != arg_96[0] && arg_96[1] == arg_124[1] && arg_96[1] == arg_26[1] && arg_96[1] != arg_14[0] && arg_96[1] != arg_90[0] && arg_96[1] != arg_28[0] && arg_96[1] == arg_20[1] && arg_96[1] != arg_110[0] && arg_96[1] == arg_58[1] && arg_96[1] != arg_106[0] && arg_96[1] == arg_82[1] && arg_96[1] == arg_34[1] && arg_96[1] == arg_112[1] && arg_96[1] == arg_74[1] && arg_96[1] == arg_106[1] && arg_96[1] != arg_112[0] && arg_96[1] == arg_94[1] && arg_96[1] != arg_88[0] && arg_96[1] == arg_48[1] && arg_96[1] == arg_14[1] && arg_96[1] != arg_20[0] && arg_96[1] != arg_56[0] && arg_96[1] != arg_42[0] && arg_96[1] == arg_50[1] && arg_96[1] == arg_62[1] && arg_96[1] != arg_76[0] && arg_96[1] == arg_56[1] && arg_96[1] != arg_58[0] && arg_96[1] == arg_80[1] && arg_96[1] != arg_126[0] && arg_96[1] == arg_104[1] && arg_96[1] == arg_76[1] && arg_96[1] != arg_104[0] && arg_96[1] != arg_32[0] && arg_96[1] == arg_120[1] && arg_96[1] != arg_94[0] && arg_74[0] == arg_124[0] && arg_74[0] == arg_80[0] && arg_74[0] == arg_26[0] && arg_74[0] == arg_62[0] && arg_74[0] == arg_82[0] && arg_74[0] == arg_48[0] && arg_74[0] == arg_34[0] && arg_74[0] != arg_110[1] && arg_74[0] != arg_118[1] && arg_74[0] != arg_12[1] && arg_74[0] != arg_90[1] && arg_74[0] == arg_50[0] && arg_74[0] == arg_44[0] && arg_74[0] != arg_126[1] && arg_74[0] != arg_88[1] && arg_74[0] == arg_64[0] && arg_74[0] == arg_18[0] && arg_74[0] != arg_32[1] && arg_74[0] == arg_120[0] && arg_74[0] != arg_42[1] && arg_74[0] != arg_44[1] && arg_74[0] != arg_64[1] && arg_74[0] != arg_18[1] && arg_74[0] == arg_12[0] && arg_74[0] == arg_96[0] && arg_74[0] != arg_124[1] && arg_74[0] != arg_26[1] && arg_74[0] == arg_14[0] && arg_74[0] == arg_90[0] && arg_74[0] == arg_28[0] && arg_74[0] != arg_20[1] && arg_74[0] == arg_110[0] && arg_74[0] != arg_58[1] && arg_74[0] == arg_106[0] && arg_74[0] != arg_82[1] && arg_74[0] != arg_34[1] && arg_74[0] != arg_112[1] && arg_74[0] != arg_74[1] && arg_74[0] != arg_106[1] && arg_74[0] == arg_112[0] && arg_74[0] != arg_94[1] && arg_74[0] == arg_88[0] && arg_74[0] != arg_48[1] && arg_74[0] != arg_14[1] && arg_74[0] == arg_20[0] && arg_74[0] == arg_56[0] && arg_74[0] == arg_42[0] && arg_74[0] != arg_50[1] && arg_74[0] != arg_62[1] && arg_74[0] == arg_76[0] && arg_74[0] != arg_56[1] && arg_74[0] == arg_58[0] && arg_74[0] != arg_80[1] && arg_74[0] == arg_126[0] && arg_74[0] != arg_104[1] && arg_74[0] != arg_76[1] && arg_74[0] == arg_104[0] && arg_74[0] == arg_32[0] && arg_74[0] != arg_120[1] && arg_74[0] == arg_94[0] && arg_124[0] == arg_80[0] && arg_124[0] == arg_26[0] && arg_124[0] == arg_62[0] && arg_124[0] == arg_82[0] && arg_124[0] == arg_48[0] && arg_124[0] == arg_34[0] && arg_124[0] != arg_110[1] && arg_124[0] != arg_118[1] && arg_124[0] != arg_12[1] && arg_124[0] != arg_90[1] && arg_124[0] == arg_50[0] && arg_124[0] == arg_44[0] && arg_124[0] != arg_126[1] && arg_124[0] != arg_88[1] && arg_124[0] == arg_64[0] && arg_124[0] == arg_18[0] && arg_124[0] != arg_32[1] && arg_124[0] == arg_120[0] && arg_124[0] != arg_42[1] && arg_124[0] != arg_44[1] && arg_124[0] != arg_64[1] && arg_124[0] != arg_18[1] && arg_124[0] == arg_12[0] && arg_124[0] == arg_96[0] && arg_124[0] != arg_124[1] && arg_124[0] != arg_26[1] && arg_124[0] == arg_14[0] && arg_124[0] == arg_90[0] && arg_124[0] == arg_28[0] && arg_124[0] != arg_20[1] && arg_124[0] == arg_110[0] && arg_124[0] != arg_58[1] && arg_124[0] == arg_106[0] && arg_124[0] != arg_82[1] && arg_124[0] != arg_34[1] && arg_124[0] != arg_112[1] && arg_124[0] != arg_74[1] && arg_124[0] != arg_106[1] && arg_124[0] == arg_112[0] && arg_124[0] != arg_94[1] && arg_124[0] == arg_88[0] && arg_124[0] != arg_48[1] && arg_124[0] != arg_14[1] && arg_124[0] == arg_20[0] && arg_124[0] == arg_56[0] && arg_124[0] == arg_42[0] && arg_124[0] != arg_50[1] && arg_124[0] != arg_62[1] && arg_124[0] == arg_76[0] && arg_124[0] != arg_56[1] && arg_124[0] == arg_58[0] && arg_124[0] != arg_80[1] && arg_124[0] == arg_126[0] && arg_124[0] != arg_104[1] && arg_124[0] != arg_76[1] && arg_124[0] == arg_104[0] && arg_124[0] == arg_32[0] && arg_124[0] != arg_120[1] && arg_124[0] == arg_94[0] && arg_80[0] == arg_26[0] && arg_80[0] == arg_62[0] && arg_80[0] == arg_82[0] && arg_80[0] == arg_48[0] && arg_80[0] == arg_34[0] && arg_80[0] != arg_110[1] && arg_80[0] != arg_118[1] && arg_80[0] != arg_12[1] && arg_80[0] != arg_90[1] && arg_80[0] == arg_50[0] && arg_80[0] == arg_44[0] && arg_80[0] != arg_126[1] && arg_80[0] != arg_88[1] && arg_80[0] == arg_64[0] && arg_80[0] == arg_18[0] && arg_80[0] != arg_32[1] && arg_80[0] == arg_120[0] && arg_80[0] != arg_42[1] && arg_80[0] != arg_44[1] && arg_80[0] != arg_64[1] && arg_80[0] != arg_18[1] && arg_80[0] == arg_12[0] && arg_80[0] == arg_96[0] && arg_80[0] != arg_124[1] && arg_80[0] != arg_26[1] && arg_80[0] == arg_14[0] && arg_80[0] == arg_90[0] && arg_80[0] == arg_28[0] && arg_80[0] != arg_20[1] && arg_80[0] == arg_110[0] && arg_80[0] != arg_58[1] && arg_80[0] == arg_106[0] && arg_80[0] != arg_82[1] && arg_80[0] != arg_34[1] && arg_80[0] != arg_112[1] && arg_80[0] != arg_74[1] && arg_80[0] != arg_106[1] && arg_80[0] == arg_112[0] && arg_80[0] != arg_94[1] && arg_80[0] == arg_88[0] && arg_80[0] != arg_48[1] && arg_80[0] != arg_14[1] && arg_80[0] == arg_20[0] && arg_80[0] == arg_56[0] && arg_80[0] == arg_42[0] && arg_80[0] != arg_50[1] && arg_80[0] != arg_62[1] && arg_80[0] == arg_76[0] && arg_80[0] != arg_56[1] && arg_80[0] == arg_58[0] && arg_80[0] != arg_80[1] && arg_80[0] == arg_126[0] && arg_80[0] != arg_104[1] && arg_80[0] != arg_76[1] && arg_80[0] == arg_104[0] && arg_80[0] == arg_32[0] && arg_80[0] != arg_120[1] && arg_80[0] == arg_94[0] && arg_26[0] == arg_62[0] && arg_26[0] == arg_82[0] && arg_26[0] == arg_48[0] && arg_26[0] == arg_34[0] && arg_26[0] != arg_110[1] && arg_26[0] != arg_118[1] && arg_26[0] != arg_12[1] && arg_26[0] != arg_90[1] && arg_26[0] == arg_50[0] && arg_26[0] == arg_44[0] && arg_26[0] != arg_126[1] && arg_26[0] != arg_88[1] && arg_26[0] == arg_64[0] && arg_26[0] == arg_18[0] && arg_26[0] != arg_32[1] && arg_26[0] == arg_120[0] && arg_26[0] != arg_42[1] && arg_26[0] != arg_44[1] && arg_26[0] != arg_64[1] && arg_26[0] != arg_18[1] && arg_26[0] == arg_12[0] && arg_26[0] == arg_96[0] && arg_26[0] != arg_124[1] && arg_26[0] != arg_26[1] && arg_26[0] == arg_14[0] && arg_26[0] == arg_90[0] && arg_26[0] == arg_28[0] && arg_26[0] != arg_20[1] && arg_26[0] == arg_110[0] && arg_26[0] != arg_58[1] && arg_26[0] == arg_106[0] && arg_26[0] != arg_82[1] && arg_26[0] != arg_34[1] && arg_26[0] != arg_112[1] && arg_26[0] != arg_74[1] && arg_26[0] != arg_106[1] && arg_26[0] == arg_112[0] && arg_26[0] != arg_94[1] && arg_26[0] == arg_88[0] && arg_26[0] != arg_48[1] && arg_26[0] != arg_14[1] && arg_26[0] == arg_20[0] && arg_26[0] == arg_56[0] && arg_26[0] == arg_42[0] && arg_26[0] != arg_50[1] && arg_26[0] != arg_62[1] && arg_26[0] == arg_76[0] && arg_26[0] != arg_56[1] && arg_26[0] == arg_58[0] && arg_26[0] != arg_80[1] && arg_26[0] == arg_126[0] && arg_26[0] != arg_104[1] && arg_26[0] != arg_76[1] && arg_26[0] == arg_104[0] && arg_26[0] == arg_32[0] && arg_26[0] != arg_120[1] && arg_26[0] == arg_94[0] && arg_62[0] == arg_82[0] && arg_62[0] == arg_48[0] && arg_62[0] == arg_34[0] && arg_62[0] != arg_110[1] && arg_62[0] != arg_118[1] && arg_62[0] != arg_12[1] && arg_62[0] != arg_90[1] && arg_62[0] == arg_50[0] && arg_62[0] == arg_44[0] && arg_62[0] != arg_126[1] && arg_62[0] != arg_88[1] && arg_62[0] == arg_64[0] && arg_62[0] == arg_18[0] && arg_62[0] != arg_32[1] && arg_62[0] == arg_120[0] && arg_62[0] != arg_42[1] && arg_62[0] != arg_44[1] && arg_62[0] != arg_64[1] && arg_62[0] != arg_18[1] && arg_62[0] == arg_12[0] && arg_62[0] == arg_96[0] && arg_62[0] != arg_124[1] && arg_62[0] != arg_26[1] && arg_62[0] == arg_14[0] && arg_62[0] == arg_90[0] && arg_62[0] == arg_28[0] && arg_62[0] != arg_20[1] && arg_62[0] == arg_110[0] && arg_62[0] != arg_58[1] && arg_62[0] == arg_106[0] && arg_62[0] != arg_82[1] && arg_62[0] != arg_34[1] && arg_62[0] != arg_112[1] && arg_62[0] != arg_74[1] && arg_62[0] != arg_106[1] && arg_62[0] == arg_112[0] && arg_62[0] != arg_94[1] && arg_62[0] == arg_88[0] && arg_62[0] != arg_48[1] && arg_62[0] != arg_14[1] && arg_62[0] == arg_20[0] && arg_62[0] == arg_56[0] && arg_62[0] == arg_42[0] && arg_62[0] != arg_50[1] && arg_62[0] != arg_62[1] && arg_62[0] == arg_76[0] && arg_62[0] != arg_56[1] && arg_62[0] == arg_58[0] && arg_62[0] != arg_80[1] && arg_62[0] == arg_126[0] && arg_62[0] != arg_104[1] && arg_62[0] != arg_76[1] && arg_62[0] == arg_104[0] && arg_62[0] == arg_32[0] && arg_62[0] != arg_120[1] && arg_62[0] == arg_94[0] && arg_82[0] == arg_48[0] && arg_82[0] == arg_34[0] && arg_82[0] != arg_110[1] && arg_82[0] != arg_118[1] && arg_82[0] != arg_12[1] && arg_82[0] != arg_90[1] && arg_82[0] == arg_50[0] && arg_82[0] == arg_44[0] && arg_82[0] != arg_126[1] && arg_82[0] != arg_88[1] && arg_82[0] == arg_64[0] && arg_82[0] == arg_18[0] && arg_82[0] != arg_32[1] && arg_82[0] == arg_120[0] && arg_82[0] != arg_42[1] && arg_82[0] != arg_44[1] && arg_82[0] != arg_64[1] && arg_82[0] != arg_18[1] && arg_82[0] == arg_12[0] && arg_82[0] == arg_96[0] && arg_82[0] != arg_124[1] && arg_82[0] != arg_26[1] && arg_82[0] == arg_14[0] && arg_82[0] == arg_90[0] && arg_82[0] == arg_28[0] && arg_82[0] != arg_20[1] && arg_82[0] == arg_110[0] && arg_82[0] != arg_58[1] && arg_82[0] == arg_106[0] && arg_82[0] != arg_82[1] && arg_82[0] != arg_34[1] && arg_82[0] != arg_112[1] && arg_82[0] != arg_74[1] && arg_82[0] != arg_106[1] && arg_82[0] == arg_112[0] && arg_82[0] != arg_94[1] && arg_82[0] == arg_88[0] && arg_82[0] != arg_48[1] && arg_82[0] != arg_14[1] && arg_82[0] == arg_20[0] && arg_82[0] == arg_56[0] && arg_82[0] == arg_42[0] && arg_82[0] != arg_50[1] && arg_82[0] != arg_62[1] && arg_82[0] == arg_76[0] && arg_82[0] != arg_56[1] && arg_82[0] == arg_58[0] && arg_82[0] != arg_80[1] && arg_82[0] == arg_126[0] && arg_82[0] != arg_104[1] && arg_82[0] != arg_76[1] && arg_82[0] == arg_104[0] && arg_82[0] == arg_32[0] && arg_82[0] != arg_120[1] && arg_82[0] == arg_94[0] && arg_48[0] == arg_34[0] && arg_48[0] != arg_110[1] && arg_48[0] != arg_118[1] && arg_48[0] != arg_12[1] && arg_48[0] != arg_90[1] && arg_48[0] == arg_50[0] && arg_48[0] == arg_44[0] && arg_48[0] != arg_126[1] && arg_48[0] != arg_88[1] && arg_48[0] == arg_64[0] && arg_48[0] == arg_18[0] && arg_48[0] != arg_32[1] && arg_48[0] == arg_120[0] && arg_48[0] != arg_42[1] && arg_48[0] != arg_44[1] && arg_48[0] != arg_64[1] && arg_48[0] != arg_18[1] && arg_48[0] == arg_12[0] && arg_48[0] == arg_96[0] && arg_48[0] != arg_124[1] && arg_48[0] != arg_26[1] && arg_48[0] == arg_14[0] && arg_48[0] == arg_90[0] && arg_48[0] == arg_28[0] && arg_48[0] != arg_20[1] && arg_48[0] == arg_110[0] && arg_48[0] != arg_58[1] && arg_48[0] == arg_106[0] && arg_48[0] != arg_82[1] && arg_48[0] != arg_34[1] && arg_48[0] != arg_112[1] && arg_48[0] != arg_74[1] && arg_48[0] != arg_106[1] && arg_48[0] == arg_112[0] && arg_48[0] != arg_94[1] && arg_48[0] == arg_88[0] && arg_48[0] != arg_48[1] && arg_48[0] != arg_14[1] && arg_48[0] == arg_20[0] && arg_48[0] == arg_56[0] && arg_48[0] == arg_42[0] && arg_48[0] != arg_50[1] && arg_48[0] != arg_62[1] && arg_48[0] == arg_76[0] && arg_48[0] != arg_56[1] && arg_48[0] == arg_58[0] && arg_48[0] != arg_80[1] && arg_48[0] == arg_126[0] && arg_48[0] != arg_104[1] && arg_48[0] != arg_76[1] && arg_48[0] == arg_104[0] && arg_48[0] == arg_32[0] && arg_48[0] != arg_120[1] && arg_48[0] == arg_94[0] && arg_34[0] != arg_110[1] && arg_34[0] != arg_118[1] && arg_34[0] != arg_12[1] && arg_34[0] != arg_90[1] && arg_34[0] == arg_50[0] && arg_34[0] == arg_44[0] && arg_34[0] != arg_126[1] && arg_34[0] != arg_88[1] && arg_34[0] == arg_64[0] && arg_34[0] == arg_18[0] && arg_34[0] != arg_32[1] && arg_34[0] == arg_120[0] && arg_34[0] != arg_42[1] && arg_34[0] != arg_44[1] && arg_34[0] != arg_64[1] && arg_34[0] != arg_18[1] && arg_34[0] == arg_12[0] && arg_34[0] == arg_96[0] && arg_34[0] != arg_124[1] && arg_34[0] != arg_26[1] && arg_34[0] == arg_14[0] && arg_34[0] == arg_90[0] && arg_34[0] == arg_28[0] && arg_34[0] != arg_20[1] && arg_34[0] == arg_110[0] && arg_34[0] != arg_58[1] && arg_34[0] == arg_106[0] && arg_34[0] != arg_82[1] && arg_34[0] != arg_34[1] && arg_34[0] != arg_112[1] && arg_34[0] != arg_74[1] && arg_34[0] != arg_106[1] && arg_34[0] == arg_112[0] && arg_34[0] != arg_94[1] && arg_34[0] == arg_88[0] && arg_34[0] != arg_48[1] && arg_34[0] != arg_14[1] && arg_34[0] == arg_20[0] && arg_34[0] == arg_56[0] && arg_34[0] == arg_42[0] && arg_34[0] != arg_50[1] && arg_34[0] != arg_62[1] && arg_34[0] == arg_76[0] && arg_34[0] != arg_56[1] && arg_34[0] == arg_58[0] && arg_34[0] != arg_80[1] && arg_34[0] == arg_126[0] && arg_34[0] != arg_104[1] && arg_34[0] != arg_76[1] && arg_34[0] == arg_104[0] && arg_34[0] == arg_32[0] && arg_34[0] != arg_120[1] && arg_34[0] == arg_94[0] && arg_110[1] == arg_118[1] && arg_110[1] == arg_12[1] && arg_110[1] == arg_90[1] && arg_110[1] != arg_50[0] && arg_110[1] != arg_44[0] && arg_110[1] == arg_126[1] && arg_110[1] == arg_88[1] && arg_110[1] != arg_64[0] && arg_110[1] != arg_18[0] && arg_110[1] == arg_32[1] && arg_110[1] != arg_120[0] && arg_110[1] == arg_42[1] && arg_110[1] == arg_44[1] && arg_110[1] == arg_64[1] && arg_110[1] == arg_18[1] && arg_110[1] != arg_12[0] && arg_110[1] != arg_96[0] && arg_110[1] == arg_124[1] && arg_110[1] == arg_26[1] && arg_110[1] != arg_14[0] && arg_110[1] != arg_90[0] && arg_110[1] != arg_28[0] && arg_110[1] == arg_20[1] && arg_110[1] != arg_110[0] && arg_110[1] == arg_58[1] && arg_110[1] != arg_106[0] && arg_110[1] == arg_82[1] && arg_110[1] == arg_34[1] && arg_110[1] == arg_112[1] && arg_110[1] == arg_74[1] && arg_110[1] == arg_106[1] && arg_110[1] != arg_112[0] && arg_110[1] == arg_94[1] && arg_110[1] != arg_88[0] && arg_110[1] == arg_48[1] && arg_110[1] == arg_14[1] && arg_110[1] != arg_20[0] && arg_110[1] != arg_56[0] && arg_110[1] != arg_42[0] && arg_110[1] == arg_50[1] && arg_110[1] == arg_62[1] && arg_110[1] != arg_76[0] && arg_110[1] == arg_56[1] && arg_110[1] != arg_58[0] && arg_110[1] == arg_80[1] && arg_110[1] != arg_126[0] && arg_110[1] == arg_104[1] && arg_110[1] == arg_76[1] && arg_110[1] != arg_104[0] && arg_110[1] != arg_32[0] && arg_110[1] == arg_120[1] && arg_110[1] != arg_94[0] && arg_118[1] == arg_12[1] && arg_118[1] == arg_90[1] && arg_118[1] != arg_50[0] && arg_118[1] != arg_44[0] && arg_118[1] == arg_126[1] && arg_118[1] == arg_88[1] && arg_118[1] != arg_64[0] && arg_118[1] != arg_18[0] && arg_118[1] == arg_32[1] && arg_118[1] != arg_120[0] && arg_118[1] == arg_42[1] && arg_118[1] == arg_44[1] && arg_118[1] == arg_64[1] && arg_118[1] == arg_18[1] && arg_118[1] != arg_12[0] && arg_118[1] != arg_96[0] && arg_118[1] == arg_124[1] && arg_118[1] == arg_26[1] && arg_118[1] != arg_14[0] && arg_118[1] != arg_90[0] && arg_118[1] != arg_28[0] && arg_118[1] == arg_20[1] && arg_118[1] != arg_110[0] && arg_118[1] == arg_58[1] && arg_118[1] != arg_106[0] && arg_118[1] == arg_82[1] && arg_118[1] == arg_34[1] && arg_118[1] == arg_112[1] && arg_118[1] == arg_74[1] && arg_118[1] == arg_106[1] && arg_118[1] != arg_112[0] && arg_118[1] == arg_94[1] && arg_118[1] != arg_88[0] && arg_118[1] == arg_48[1] && arg_118[1] == arg_14[1] && arg_118[1] != arg_20[0] && arg_118[1] != arg_56[0] && arg_118[1] != arg_42[0] && arg_118[1] == arg_50[1] && arg_118[1] == arg_62[1] && arg_118[1] != arg_76[0] && arg_118[1] == arg_56[1] && arg_118[1] != arg_58[0] && arg_118[1] == arg_80[1] && arg_118[1] != arg_126[0] && arg_118[1] == arg_104[1] && arg_118[1] == arg_76[1] && arg_118[1] != arg_104[0] && arg_118[1] != arg_32[0] && arg_118[1] == arg_120[1] && arg_118[1] != arg_94[0] && arg_12[1] == arg_90[1] && arg_12[1] != arg_50[0] && arg_12[1] != arg_44[0] && arg_12[1] == arg_126[1] && arg_12[1] == arg_88[1] && arg_12[1] != arg_64[0] && arg_12[1] != arg_18[0] && arg_12[1] == arg_32[1] && arg_12[1] != arg_120[0] && arg_12[1] == arg_42[1] && arg_12[1] == arg_44[1] && arg_12[1] == arg_64[1] && arg_12[1] == arg_18[1] && arg_12[1] != arg_12[0] && arg_12[1] != arg_96[0] && arg_12[1] == arg_124[1] && arg_12[1] == arg_26[1] && arg_12[1] != arg_14[0] && arg_12[1] != arg_90[0] && arg_12[1] != arg_28[0] && arg_12[1] == arg_20[1] && arg_12[1] != arg_110[0] && arg_12[1] == arg_58[1] && arg_12[1] != arg_106[0] && arg_12[1] == arg_82[1] && arg_12[1] == arg_34[1] && arg_12[1] == arg_112[1] && arg_12[1] == arg_74[1] && arg_12[1] == arg_106[1] && arg_12[1] != arg_112[0] && arg_12[1] == arg_94[1] && arg_12[1] != arg_88[0] && arg_12[1] == arg_48[1] && arg_12[1] == arg_14[1] && arg_12[1] != arg_20[0] && arg_12[1] != arg_56[0] && arg_12[1] != arg_42[0] && arg_12[1] == arg_50[1] && arg_12[1] == arg_62[1] && arg_12[1] != arg_76[0] && arg_12[1] == arg_56[1] && arg_12[1] != arg_58[0] && arg_12[1] == arg_80[1] && arg_12[1] != arg_126[0] && arg_12[1] == arg_104[1] && arg_12[1] == arg_76[1] && arg_12[1] != arg_104[0] && arg_12[1] != arg_32[0] && arg_12[1] == arg_120[1] && arg_12[1] != arg_94[0] && arg_90[1] != arg_50[0] && arg_90[1] != arg_44[0] && arg_90[1] == arg_126[1] && arg_90[1] == arg_88[1] && arg_90[1] != arg_64[0] && arg_90[1] != arg_18[0] && arg_90[1] == arg_32[1] && arg_90[1] != arg_120[0] && arg_90[1] == arg_42[1] && arg_90[1] == arg_44[1] && arg_90[1] == arg_64[1] && arg_90[1] == arg_18[1] && arg_90[1] != arg_12[0] && arg_90[1] != arg_96[0] && arg_90[1] == arg_124[1] && arg_90[1] == arg_26[1] && arg_90[1] != arg_14[0] && arg_90[1] != arg_90[0] && arg_90[1] != arg_28[0] && arg_90[1] == arg_20[1] && arg_90[1] != arg_110[0] && arg_90[1] == arg_58[1] && arg_90[1] != arg_106[0] && arg_90[1] == arg_82[1] && arg_90[1] == arg_34[1] && arg_90[1] == arg_112[1] && arg_90[1] == arg_74[1] && arg_90[1] == arg_106[1] && arg_90[1] != arg_112[0] && arg_90[1] == arg_94[1] && arg_90[1] != arg_88[0] && arg_90[1] == arg_48[1] && arg_90[1] == arg_14[1] && arg_90[1] != arg_20[0] && arg_90[1] != arg_56[0] && arg_90[1] != arg_42[0] && arg_90[1] == arg_50[1] && arg_90[1] == arg_62[1] && arg_90[1] != arg_76[0] && arg_90[1] == arg_56[1] && arg_90[1] != arg_58[0] && arg_90[1] == arg_80[1] && arg_90[1] != arg_126[0] && arg_90[1] == arg_104[1] && arg_90[1] == arg_76[1] && arg_90[1] != arg_104[0] && arg_90[1] != arg_32[0] && arg_90[1] == arg_120[1] && arg_90[1] != arg_94[0] && arg_50[0] == arg_44[0] && arg_50[0] != arg_126[1] && arg_50[0] != arg_88[1] && arg_50[0] == arg_64[0] && arg_50[0] == arg_18[0] && arg_50[0] != arg_32[1] && arg_50[0] == arg_120[0] && arg_50[0] != arg_42[1] && arg_50[0] != arg_44[1] && arg_50[0] != arg_64[1] && arg_50[0] != arg_18[1] && arg_50[0] == arg_12[0] && arg_50[0] == arg_96[0] && arg_50[0] != arg_124[1] && arg_50[0] != arg_26[1] && arg_50[0] == arg_14[0] && arg_50[0] == arg_90[0] && arg_50[0] == arg_28[0] && arg_50[0] != arg_20[1] && arg_50[0] == arg_110[0] && arg_50[0] != arg_58[1] && arg_50[0] == arg_106[0] && arg_50[0] != arg_82[1] && arg_50[0] != arg_34[1] && arg_50[0] != arg_112[1] && arg_50[0] != arg_74[1] && arg_50[0] != arg_106[1] && arg_50[0] == arg_112[0] && arg_50[0] != arg_94[1] && arg_50[0] == arg_88[0] && arg_50[0] != arg_48[1] && arg_50[0] != arg_14[1] && arg_50[0] == arg_20[0] && arg_50[0] == arg_56[0] && arg_50[0] == arg_42[0] && arg_50[0] != arg_50[1] && arg_50[0] != arg_62[1] && arg_50[0] == arg_76[0] && arg_50[0] != arg_56[1] && arg_50[0] == arg_58[0] && arg_50[0] != arg_80[1] && arg_50[0] == arg_126[0] && arg_50[0] != arg_104[1] && arg_50[0] != arg_76[1] && arg_50[0] == arg_104[0] && arg_50[0] == arg_32[0] && arg_50[0] != arg_120[1] && arg_50[0] == arg_94[0] && arg_44[0] != arg_126[1] && arg_44[0] != arg_88[1] && arg_44[0] == arg_64[0] && arg_44[0] == arg_18[0] && arg_44[0] != arg_32[1] && arg_44[0] == arg_120[0] && arg_44[0] != arg_42[1] && arg_44[0] != arg_44[1] && arg_44[0] != arg_64[1] && arg_44[0] != arg_18[1] && arg_44[0] == arg_12[0] && arg_44[0] == arg_96[0] && arg_44[0] != arg_124[1] && arg_44[0] != arg_26[1] && arg_44[0] == arg_14[0] && arg_44[0] == arg_90[0] && arg_44[0] == arg_28[0] && arg_44[0] != arg_20[1] && arg_44[0] == arg_110[0] && arg_44[0] != arg_58[1] && arg_44[0] == arg_106[0] && arg_44[0] != arg_82[1] && arg_44[0] != arg_34[1] && arg_44[0] != arg_112[1] && arg_44[0] != arg_74[1] && arg_44[0] != arg_106[1] && arg_44[0] == arg_112[0] && arg_44[0] != arg_94[1] && arg_44[0] == arg_88[0] && arg_44[0] != arg_48[1] && arg_44[0] != arg_14[1] && arg_44[0] == arg_20[0] && arg_44[0] == arg_56[0] && arg_44[0] == arg_42[0] && arg_44[0] != arg_50[1] && arg_44[0] != arg_62[1] && arg_44[0] == arg_76[0] && arg_44[0] != arg_56[1] && arg_44[0] == arg_58[0] && arg_44[0] != arg_80[1] && arg_44[0] == arg_126[0] && arg_44[0] != arg_104[1] && arg_44[0] != arg_76[1] && arg_44[0] == arg_104[0] && arg_44[0] == arg_32[0] && arg_44[0] != arg_120[1] && arg_44[0] == arg_94[0] && arg_126[1] == arg_88[1] && arg_126[1] != arg_64[0] && arg_126[1] != arg_18[0] && arg_126[1] == arg_32[1] && arg_126[1] != arg_120[0] && arg_126[1] == arg_42[1] && arg_126[1] == arg_44[1] && arg_126[1] == arg_64[1] && arg_126[1] == arg_18[1] && arg_126[1] != arg_12[0] && arg_126[1] != arg_96[0] && arg_126[1] == arg_124[1] && arg_126[1] == arg_26[1] && arg_126[1] != arg_14[0] && arg_126[1] != arg_90[0] && arg_126[1] != arg_28[0] && arg_126[1] == arg_20[1] && arg_126[1] != arg_110[0] && arg_126[1] == arg_58[1] && arg_126[1] != arg_106[0] && arg_126[1] == arg_82[1] && arg_126[1] == arg_34[1] && arg_126[1] == arg_112[1] && arg_126[1] == arg_74[1] && arg_126[1] == arg_106[1] && arg_126[1] != arg_112[0] && arg_126[1] == arg_94[1] && arg_126[1] != arg_88[0] && arg_126[1] == arg_48[1] && arg_126[1] == arg_14[1] && arg_126[1] != arg_20[0] && arg_126[1] != arg_56[0] && arg_126[1] != arg_42[0] && arg_126[1] == arg_50[1] && arg_126[1] == arg_62[1] && arg_126[1] != arg_76[0] && arg_126[1] == arg_56[1] && arg_126[1] != arg_58[0] && arg_126[1] == arg_80[1] && arg_126[1] != arg_126[0] && arg_126[1] == arg_104[1] && arg_126[1] == arg_76[1] && arg_126[1] != arg_104[0] && arg_126[1] != arg_32[0] && arg_126[1] == arg_120[1] && arg_126[1] != arg_94[0] && arg_88[1] != arg_64[0] && arg_88[1] != arg_18[0] && arg_88[1] == arg_32[1] && arg_88[1] != arg_120[0] && arg_88[1] == arg_42[1] && arg_88[1] == arg_44[1] && arg_88[1] == arg_64[1] && arg_88[1] == arg_18[1] && arg_88[1] != arg_12[0] && arg_88[1] != arg_96[0] && arg_88[1] == arg_124[1] && arg_88[1] == arg_26[1] && arg_88[1] != arg_14[0] && arg_88[1] != arg_90[0] && arg_88[1] != arg_28[0] && arg_88[1] == arg_20[1] && arg_88[1] != arg_110[0] && arg_88[1] == arg_58[1] && arg_88[1] != arg_106[0] && arg_88[1] == arg_82[1] && arg_88[1] == arg_34[1] && arg_88[1] == arg_112[1] && arg_88[1] == arg_74[1] && arg_88[1] == arg_106[1] && arg_88[1] != arg_112[0] && arg_88[1] == arg_94[1] && arg_88[1] != arg_88[0] && arg_88[1] == arg_48[1] && arg_88[1] == arg_14[1] && arg_88[1] != arg_20[0] && arg_88[1] != arg_56[0] && arg_88[1] != arg_42[0] && arg_88[1] == arg_50[1] && arg_88[1] == arg_62[1] && arg_88[1] != arg_76[0] && arg_88[1] == arg_56[1] && arg_88[1] != arg_58[0] && arg_88[1] == arg_80[1] && arg_88[1] != arg_126[0] && arg_88[1] == arg_104[1] && arg_88[1] == arg_76[1] && arg_88[1] != arg_104[0] && arg_88[1] != arg_32[0] && arg_88[1] == arg_120[1] && arg_88[1] != arg_94[0] && arg_64[0] == arg_18[0] && arg_64[0] != arg_32[1] && arg_64[0] == arg_120[0] && arg_64[0] != arg_42[1] && arg_64[0] != arg_44[1] && arg_64[0] != arg_64[1] && arg_64[0] != arg_18[1] && arg_64[0] == arg_12[0] && arg_64[0] == arg_96[0] && arg_64[0] != arg_124[1] && arg_64[0] != arg_26[1] && arg_64[0] == arg_14[0] && arg_64[0] == arg_90[0] && arg_64[0] == arg_28[0] && arg_64[0] != arg_20[1] && arg_64[0] == arg_110[0] && arg_64[0] != arg_58[1] && arg_64[0] == arg_106[0] && arg_64[0] != arg_82[1] && arg_64[0] != arg_34[1] && arg_64[0] != arg_112[1] && arg_64[0] != arg_74[1] && arg_64[0] != arg_106[1] && arg_64[0] == arg_112[0] && arg_64[0] != arg_94[1] && arg_64[0] == arg_88[0] && arg_64[0] != arg_48[1] && arg_64[0] != arg_14[1] && arg_64[0] == arg_20[0] && arg_64[0] == arg_56[0] && arg_64[0] == arg_42[0] && arg_64[0] != arg_50[1] && arg_64[0] != arg_62[1] && arg_64[0] == arg_76[0] && arg_64[0] != arg_56[1] && arg_64[0] == arg_58[0] && arg_64[0] != arg_80[1] && arg_64[0] == arg_126[0] && arg_64[0] != arg_104[1] && arg_64[0] != arg_76[1] && arg_64[0] == arg_104[0] && arg_64[0] == arg_32[0] && arg_64[0] != arg_120[1] && arg_64[0] == arg_94[0] && arg_18[0] != arg_32[1] && arg_18[0] == arg_120[0] && arg_18[0] != arg_42[1] && arg_18[0] != arg_44[1] && arg_18[0] != arg_64[1] && arg_18[0] != arg_18[1] && arg_18[0] == arg_12[0] && arg_18[0] == arg_96[0] && arg_18[0] != arg_124[1] && arg_18[0] != arg_26[1] && arg_18[0] == arg_14[0] && arg_18[0] == arg_90[0] && arg_18[0] == arg_28[0] && arg_18[0] != arg_20[1] && arg_18[0] == arg_110[0] && arg_18[0] != arg_58[1] && arg_18[0] == arg_106[0] && arg_18[0] != arg_82[1] && arg_18[0] != arg_34[1] && arg_18[0] != arg_112[1] && arg_18[0] != arg_74[1] && arg_18[0] != arg_106[1] && arg_18[0] == arg_112[0] && arg_18[0] != arg_94[1] && arg_18[0] == arg_88[0] && arg_18[0] != arg_48[1] && arg_18[0] != arg_14[1] && arg_18[0] == arg_20[0] && arg_18[0] == arg_56[0] && arg_18[0] == arg_42[0] && arg_18[0] != arg_50[1] && arg_18[0] != arg_62[1] && arg_18[0] == arg_76[0] && arg_18[0] != arg_56[1] && arg_18[0] == arg_58[0] && arg_18[0] != arg_80[1] && arg_18[0] == arg_126[0] && arg_18[0] != arg_104[1] && arg_18[0] != arg_76[1] && arg_18[0] == arg_104[0] && arg_18[0] == arg_32[0] && arg_18[0] != arg_120[1] && arg_18[0] == arg_94[0] && arg_32[1] != arg_120[0] && arg_32[1] == arg_42[1] && arg_32[1] == arg_44[1] && arg_32[1] == arg_64[1] && arg_32[1] == arg_18[1] && arg_32[1] != arg_12[0] && arg_32[1] != arg_96[0] && arg_32[1] == arg_124[1] && arg_32[1] == arg_26[1] && arg_32[1] != arg_14[0] && arg_32[1] != arg_90[0] && arg_32[1] != arg_28[0] && arg_32[1] == arg_20[1] && arg_32[1] != arg_110[0] && arg_32[1] == arg_58[1] && arg_32[1] != arg_106[0] && arg_32[1] == arg_82[1] && arg_32[1] == arg_34[1] && arg_32[1] == arg_112[1] && arg_32[1] == arg_74[1] && arg_32[1] == arg_106[1] && arg_32[1] != arg_112[0] && arg_32[1] == arg_94[1] && arg_32[1] != arg_88[0] && arg_32[1] == arg_48[1] && arg_32[1] == arg_14[1] && arg_32[1] != arg_20[0] && arg_32[1] != arg_56[0] && arg_32[1] != arg_42[0] && arg_32[1] == arg_50[1] && arg_32[1] == arg_62[1] && arg_32[1] != arg_76[0] && arg_32[1] == arg_56[1] && arg_32[1] != arg_58[0] && arg_32[1] == arg_80[1] && arg_32[1] != arg_126[0] && arg_32[1] == arg_104[1] && arg_32[1] == arg_76[1] && arg_32[1] != arg_104[0] && arg_32[1] != arg_32[0] && arg_32[1] == arg_120[1] && arg_32[1] != arg_94[0] && arg_120[0] != arg_42[1] && arg_120[0] != arg_44[1] && arg_120[0] != arg_64[1] && arg_120[0] != arg_18[1] && arg_120[0] == arg_12[0] && arg_120[0] == arg_96[0] && arg_120[0] != arg_124[1] && arg_120[0] != arg_26[1] && arg_120[0] == arg_14[0] && arg_120[0] == arg_90[0] && arg_120[0] == arg_28[0] && arg_120[0] != arg_20[1] && arg_120[0] == arg_110[0] && arg_120[0] != arg_58[1] && arg_120[0] == arg_106[0] && arg_120[0] != arg_82[1] && arg_120[0] != arg_34[1] && arg_120[0] != arg_112[1] && arg_120[0] != arg_74[1] && arg_120[0] != arg_106[1] && arg_120[0] == arg_112[0] && arg_120[0] != arg_94[1] && arg_120[0] == arg_88[0] && arg_120[0] != arg_48[1] && arg_120[0] != arg_14[1] && arg_120[0] == arg_20[0] && arg_120[0] == arg_56[0] && arg_120[0] == arg_42[0] && arg_120[0] != arg_50[1] && arg_120[0] != arg_62[1] && arg_120[0] == arg_76[0] && arg_120[0] != arg_56[1] && arg_120[0] == arg_58[0] && arg_120[0] != arg_80[1] && arg_120[0] == arg_126[0] && arg_120[0] != arg_104[1] && arg_120[0] != arg_76[1] && arg_120[0] == arg_104[0] && arg_120[0] == arg_32[0] && arg_120[0] != arg_120[1] && arg_120[0] == arg_94[0] && arg_42[1] == arg_44[1] && arg_42[1] == arg_64[1] && arg_42[1] == arg_18[1] && arg_42[1] != arg_12[0] && arg_42[1] != arg_96[0] && arg_42[1] == arg_124[1] && arg_42[1] == arg_26[1] && arg_42[1] != arg_14[0] && arg_42[1] != arg_90[0] && arg_42[1] != arg_28[0] && arg_42[1] == arg_20[1] && arg_42[1] != arg_110[0] && arg_42[1] == arg_58[1] && arg_42[1] != arg_106[0] && arg_42[1] == arg_82[1] && arg_42[1] == arg_34[1] && arg_42[1] == arg_112[1] && arg_42[1] == arg_74[1] && arg_42[1] == arg_106[1] && arg_42[1] != arg_112[0] && arg_42[1] == arg_94[1] && arg_42[1] != arg_88[0] && arg_42[1] == arg_48[1] && arg_42[1] == arg_14[1] && arg_42[1] != arg_20[0] && arg_42[1] != arg_56[0] && arg_42[1] != arg_42[0] && arg_42[1] == arg_50[1] && arg_42[1] == arg_62[1] && arg_42[1] != arg_76[0] && arg_42[1] == arg_56[1] && arg_42[1] != arg_58[0] && arg_42[1] == arg_80[1] && arg_42[1] != arg_126[0] && arg_42[1] == arg_104[1] && arg_42[1] == arg_76[1] && arg_42[1] != arg_104[0] && arg_42[1] != arg_32[0] && arg_42[1] == arg_120[1] && arg_42[1] != arg_94[0] && arg_44[1] == arg_64[1] && arg_44[1] == arg_18[1] && arg_44[1] != arg_12[0] && arg_44[1] != arg_96[0] && arg_44[1] == arg_124[1] && arg_44[1] == arg_26[1] && arg_44[1] != arg_14[0] && arg_44[1] != arg_90[0] && arg_44[1] != arg_28[0] && arg_44[1] == arg_20[1] && arg_44[1] != arg_110[0] && arg_44[1] == arg_58[1] && arg_44[1] != arg_106[0] && arg_44[1] == arg_82[1] && arg_44[1] == arg_34[1] && arg_44[1] == arg_112[1] && arg_44[1] == arg_74[1] && arg_44[1] == arg_106[1] && arg_44[1] != arg_112[0] && arg_44[1] == arg_94[1] && arg_44[1] != arg_88[0] && arg_44[1] == arg_48[1] && arg_44[1] == arg_14[1] && arg_44[1] != arg_20[0] && arg_44[1] != arg_56[0] && arg_44[1] != arg_42[0] && arg_44[1] == arg_50[1] && arg_44[1] == arg_62[1] && arg_44[1] != arg_76[0] && arg_44[1] == arg_56[1] && arg_44[1] != arg_58[0] && arg_44[1] == arg_80[1] && arg_44[1] != arg_126[0] && arg_44[1] == arg_104[1] && arg_44[1] == arg_76[1] && arg_44[1] != arg_104[0] && arg_44[1] != arg_32[0] && arg_44[1] == arg_120[1] && arg_44[1] != arg_94[0] && arg_64[1] == arg_18[1] && arg_64[1] != arg_12[0] && arg_64[1] != arg_96[0] && arg_64[1] == arg_124[1] && arg_64[1] == arg_26[1] && arg_64[1] != arg_14[0] && arg_64[1] != arg_90[0] && arg_64[1] != arg_28[0] && arg_64[1] == arg_20[1] && arg_64[1] != arg_110[0] && arg_64[1] == arg_58[1] && arg_64[1] != arg_106[0] && arg_64[1] == arg_82[1] && arg_64[1] == arg_34[1] && arg_64[1] == arg_112[1] && arg_64[1] == arg_74[1] && arg_64[1] == arg_106[1] && arg_64[1] != arg_112[0] && arg_64[1] == arg_94[1] && arg_64[1] != arg_88[0] && arg_64[1] == arg_48[1] && arg_64[1] == arg_14[1] && arg_64[1] != arg_20[0] && arg_64[1] != arg_56[0] && arg_64[1] != arg_42[0] && arg_64[1] == arg_50[1] && arg_64[1] == arg_62[1] && arg_64[1] != arg_76[0] && arg_64[1] == arg_56[1] && arg_64[1] != arg_58[0] && arg_64[1] == arg_80[1] && arg_64[1] != arg_126[0] && arg_64[1] == arg_104[1] && arg_64[1] == arg_76[1] && arg_64[1] != arg_104[0] && arg_64[1] != arg_32[0] && arg_64[1] == arg_120[1] && arg_64[1] != arg_94[0] && arg_18[1] != arg_12[0] && arg_18[1] != arg_96[0] && arg_18[1] == arg_124[1] && arg_18[1] == arg_26[1] && arg_18[1] != arg_14[0] && arg_18[1] != arg_90[0] && arg_18[1] != arg_28[0] && arg_18[1] == arg_20[1] && arg_18[1] != arg_110[0] && arg_18[1] == arg_58[1] && arg_18[1] != arg_106[0] && arg_18[1] == arg_82[1] && arg_18[1] == arg_34[1] && arg_18[1] == arg_112[1] && arg_18[1] == arg_74[1] && arg_18[1] == arg_106[1] && arg_18[1] != arg_112[0] && arg_18[1] == arg_94[1] && arg_18[1] != arg_88[0] && arg_18[1] == arg_48[1] && arg_18[1] == arg_14[1] && arg_18[1] != arg_20[0] && arg_18[1] != arg_56[0] && arg_18[1] != arg_42[0] && arg_18[1] == arg_50[1] && arg_18[1] == arg_62[1] && arg_18[1] != arg_76[0] && arg_18[1] == arg_56[1] && arg_18[1] != arg_58[0] && arg_18[1] == arg_80[1] && arg_18[1] != arg_126[0] && arg_18[1] == arg_104[1] && arg_18[1] == arg_76[1] && arg_18[1] != arg_104[0] && arg_18[1] != arg_32[0] && arg_18[1] == arg_120[1] && arg_18[1] != arg_94[0] && arg_12[0] == arg_96[0] && arg_12[0] != arg_124[1] && arg_12[0] != arg_26[1] && arg_12[0] == arg_14[0] && arg_12[0] == arg_90[0] && arg_12[0] == arg_28[0] && arg_12[0] != arg_20[1] && arg_12[0] == arg_110[0] && arg_12[0] != arg_58[1] && arg_12[0] == arg_106[0] && arg_12[0] != arg_82[1] && arg_12[0] != arg_34[1] && arg_12[0] != arg_112[1] && arg_12[0] != arg_74[1] && arg_12[0] != arg_106[1] && arg_12[0] == arg_112[0] && arg_12[0] != arg_94[1] && arg_12[0] == arg_88[0] && arg_12[0] != arg_48[1] && arg_12[0] != arg_14[1] && arg_12[0] == arg_20[0] && arg_12[0] == arg_56[0] && arg_12[0] == arg_42[0] && arg_12[0] != arg_50[1] && arg_12[0] != arg_62[1] && arg_12[0] == arg_76[0] && arg_12[0] != arg_56[1] && arg_12[0] == arg_58[0] && arg_12[0] != arg_80[1] && arg_12[0] == arg_126[0] && arg_12[0] != arg_104[1] && arg_12[0] != arg_76[1] && arg_12[0] == arg_104[0] && arg_12[0] == arg_32[0] && arg_12[0] != arg_120[1] && arg_12[0] == arg_94[0] && arg_96[0] != arg_124[1] && arg_96[0] != arg_26[1] && arg_96[0] == arg_14[0] && arg_96[0] == arg_90[0] && arg_96[0] == arg_28[0] && arg_96[0] != arg_20[1] && arg_96[0] == arg_110[0] && arg_96[0] != arg_58[1] && arg_96[0] == arg_106[0] && arg_96[0] != arg_82[1] && arg_96[0] != arg_34[1] && arg_96[0] != arg_112[1] && arg_96[0] != arg_74[1] && arg_96[0] != arg_106[1] && arg_96[0] == arg_112[0] && arg_96[0] != arg_94[1] && arg_96[0] == arg_88[0] && arg_96[0] != arg_48[1] && arg_96[0] != arg_14[1] && arg_96[0] == arg_20[0] && arg_96[0] == arg_56[0] && arg_96[0] == arg_42[0] && arg_96[0] != arg_50[1] && arg_96[0] != arg_62[1] && arg_96[0] == arg_76[0] && arg_96[0] != arg_56[1] && arg_96[0] == arg_58[0] && arg_96[0] != arg_80[1] && arg_96[0] == arg_126[0] && arg_96[0] != arg_104[1] && arg_96[0] != arg_76[1] && arg_96[0] == arg_104[0] && arg_96[0] == arg_32[0] && arg_96[0] != arg_120[1] && arg_96[0] == arg_94[0] && arg_124[1] == arg_26[1] && arg_124[1] != arg_14[0] && arg_124[1] != arg_90[0] && arg_124[1] != arg_28[0] && arg_124[1] == arg_20[1] && arg_124[1] != arg_110[0] && arg_124[1] == arg_58[1] && arg_124[1] != arg_106[0] && arg_124[1] == arg_82[1] && arg_124[1] == arg_34[1] && arg_124[1] == arg_112[1] && arg_124[1] == arg_74[1] && arg_124[1] == arg_106[1] && arg_124[1] != arg_112[0] && arg_124[1] == arg_94[1] && arg_124[1] != arg_88[0] && arg_124[1] == arg_48[1] && arg_124[1] == arg_14[1] && arg_124[1] != arg_20[0] && arg_124[1] != arg_56[0] && arg_124[1] != arg_42[0] && arg_124[1] == arg_50[1] && arg_124[1] == arg_62[1] && arg_124[1] != arg_76[0] && arg_124[1] == arg_56[1] && arg_124[1] != arg_58[0] && arg_124[1] == arg_80[1] && arg_124[1] != arg_126[0] && arg_124[1] == arg_104[1] && arg_124[1] == arg_76[1] && arg_124[1] != arg_104[0] && arg_124[1] != arg_32[0] && arg_124[1] == arg_120[1] && arg_124[1] != arg_94[0] && arg_26[1] != arg_14[0] && arg_26[1] != arg_90[0] && arg_26[1] != arg_28[0] && arg_26[1] == arg_20[1] && arg_26[1] != arg_110[0] && arg_26[1] == arg_58[1] && arg_26[1] != arg_106[0] && arg_26[1] == arg_82[1] && arg_26[1] == arg_34[1] && arg_26[1] == arg_112[1] && arg_26[1] == arg_74[1] && arg_26[1] == arg_106[1] && arg_26[1] != arg_112[0] && arg_26[1] == arg_94[1] && arg_26[1] != arg_88[0] && arg_26[1] == arg_48[1] && arg_26[1] == arg_14[1] && arg_26[1] != arg_20[0] && arg_26[1] != arg_56[0] && arg_26[1] != arg_42[0] && arg_26[1] == arg_50[1] && arg_26[1] == arg_62[1] && arg_26[1] != arg_76[0] && arg_26[1] == arg_56[1] && arg_26[1] != arg_58[0] && arg_26[1] == arg_80[1] && arg_26[1] != arg_126[0] && arg_26[1] == arg_104[1] && arg_26[1] == arg_76[1] && arg_26[1] != arg_104[0] && arg_26[1] != arg_32[0] && arg_26[1] == arg_120[1] && arg_26[1] != arg_94[0] && arg_14[0] == arg_90[0] && arg_14[0] == arg_28[0] && arg_14[0] != arg_20[1] && arg_14[0] == arg_110[0] && arg_14[0] != arg_58[1] && arg_14[0] == arg_106[0] && arg_14[0] != arg_82[1] && arg_14[0] != arg_34[1] && arg_14[0] != arg_112[1] && arg_14[0] != arg_74[1] && arg_14[0] != arg_106[1] && arg_14[0] == arg_112[0] && arg_14[0] != arg_94[1] && arg_14[0] == arg_88[0] && arg_14[0] != arg_48[1] && arg_14[0] != arg_14[1] && arg_14[0] == arg_20[0] && arg_14[0] == arg_56[0] && arg_14[0] == arg_42[0] && arg_14[0] != arg_50[1] && arg_14[0] != arg_62[1] && arg_14[0] == arg_76[0] && arg_14[0] != arg_56[1] && arg_14[0] == arg_58[0] && arg_14[0] != arg_80[1] && arg_14[0] == arg_126[0] && arg_14[0] != arg_104[1] && arg_14[0] != arg_76[1] && arg_14[0] == arg_104[0] && arg_14[0] == arg_32[0] && arg_14[0] != arg_120[1] && arg_14[0] == arg_94[0] && arg_90[0] == arg_28[0] && arg_90[0] != arg_20[1] && arg_90[0] == arg_110[0] && arg_90[0] != arg_58[1] && arg_90[0] == arg_106[0] && arg_90[0] != arg_82[1] && arg_90[0] != arg_34[1] && arg_90[0] != arg_112[1] && arg_90[0] != arg_74[1] && arg_90[0] != arg_106[1] && arg_90[0] == arg_112[0] && arg_90[0] != arg_94[1] && arg_90[0] == arg_88[0] && arg_90[0] != arg_48[1] && arg_90[0] != arg_14[1] && arg_90[0] == arg_20[0] && arg_90[0] == arg_56[0] && arg_90[0] == arg_42[0] && arg_90[0] != arg_50[1] && arg_90[0] != arg_62[1] && arg_90[0] == arg_76[0] && arg_90[0] != arg_56[1] && arg_90[0] == arg_58[0] && arg_90[0] != arg_80[1] && arg_90[0] == arg_126[0] && arg_90[0] != arg_104[1] && arg_90[0] != arg_76[1] && arg_90[0] == arg_104[0] && arg_90[0] == arg_32[0] && arg_90[0] != arg_120[1] && arg_90[0] == arg_94[0] && arg_28[0] != arg_20[1] && arg_28[0] == arg_110[0] && arg_28[0] != arg_58[1] && arg_28[0] == arg_106[0] && arg_28[0] != arg_82[1] && arg_28[0] != arg_34[1] && arg_28[0] != arg_112[1] && arg_28[0] != arg_74[1] && arg_28[0] != arg_106[1] && arg_28[0] == arg_112[0] && arg_28[0] != arg_94[1] && arg_28[0] == arg_88[0] && arg_28[0] != arg_48[1] && arg_28[0] != arg_14[1] && arg_28[0] == arg_20[0] && arg_28[0] == arg_56[0] && arg_28[0] == arg_42[0] && arg_28[0] != arg_50[1] && arg_28[0] != arg_62[1] && arg_28[0] == arg_76[0] && arg_28[0] != arg_56[1] && arg_28[0] == arg_58[0] && arg_28[0] != arg_80[1] && arg_28[0] == arg_126[0] && arg_28[0] != arg_104[1] && arg_28[0] != arg_76[1] && arg_28[0] == arg_104[0] && arg_28[0] == arg_32[0] && arg_28[0] != arg_120[1] && arg_28[0] == arg_94[0] && arg_20[1] != arg_110[0] && arg_20[1] == arg_58[1] && arg_20[1] != arg_106[0] && arg_20[1] == arg_82[1] && arg_20[1] == arg_34[1] && arg_20[1] == arg_112[1] && arg_20[1] == arg_74[1] && arg_20[1] == arg_106[1] && arg_20[1] != arg_112[0] && arg_20[1] == arg_94[1] && arg_20[1] != arg_88[0] && arg_20[1] == arg_48[1] && arg_20[1] == arg_14[1] && arg_20[1] != arg_20[0] && arg_20[1] != arg_56[0] && arg_20[1] != arg_42[0] && arg_20[1] == arg_50[1] && arg_20[1] == arg_62[1] && arg_20[1] != arg_76[0] && arg_20[1] == arg_56[1] && arg_20[1] != arg_58[0] && arg_20[1] == arg_80[1] && arg_20[1] != arg_126[0] && arg_20[1] == arg_104[1] && arg_20[1] == arg_76[1] && arg_20[1] != arg_104[0] && arg_20[1] != arg_32[0] && arg_20[1] == arg_120[1] && arg_20[1] != arg_94[0] && arg_110[0] != arg_58[1] && arg_110[0] == arg_106[0] && arg_110[0] != arg_82[1] && arg_110[0] != arg_34[1] && arg_110[0] != arg_112[1] && arg_110[0] != arg_74[1] && arg_110[0] != arg_106[1] && arg_110[0] == arg_112[0] && arg_110[0] != arg_94[1] && arg_110[0] == arg_88[0] && arg_110[0] != arg_48[1] && arg_110[0] != arg_14[1] && arg_110[0] == arg_20[0] && arg_110[0] == arg_56[0] && arg_110[0] == arg_42[0] && arg_110[0] != arg_50[1] && arg_110[0] != arg_62[1] && arg_110[0] == arg_76[0] && arg_110[0] != arg_56[1] && arg_110[0] == arg_58[0] && arg_110[0] != arg_80[1] && arg_110[0] == arg_126[0] && arg_110[0] != arg_104[1] && arg_110[0] != arg_76[1] && arg_110[0] == arg_104[0] && arg_110[0] == arg_32[0] && arg_110[0] != arg_120[1] && arg_110[0] == arg_94[0] && arg_58[1] != arg_106[0] && arg_58[1] == arg_82[1] && arg_58[1] == arg_34[1] && arg_58[1] == arg_112[1] && arg_58[1] == arg_74[1] && arg_58[1] == arg_106[1] && arg_58[1] != arg_112[0] && arg_58[1] == arg_94[1] && arg_58[1] != arg_88[0] && arg_58[1] == arg_48[1] && arg_58[1] == arg_14[1] && arg_58[1] != arg_20[0] && arg_58[1] != arg_56[0] && arg_58[1] != arg_42[0] && arg_58[1] == arg_50[1] && arg_58[1] == arg_62[1] && arg_58[1] != arg_76[0] && arg_58[1] == arg_56[1] && arg_58[1] != arg_58[0] && arg_58[1] == arg_80[1] && arg_58[1] != arg_126[0] && arg_58[1] == arg_104[1] && arg_58[1] == arg_76[1] && arg_58[1] != arg_104[0] && arg_58[1] != arg_32[0] && arg_58[1] == arg_120[1] && arg_58[1] != arg_94[0] && arg_106[0] != arg_82[1] && arg_106[0] != arg_34[1] && arg_106[0] != arg_112[1] && arg_106[0] != arg_74[1] && arg_106[0] != arg_106[1] && arg_106[0] == arg_112[0] && arg_106[0] != arg_94[1] && arg_106[0] == arg_88[0] && arg_106[0] != arg_48[1] && arg_106[0] != arg_14[1] && arg_106[0] == arg_20[0] && arg_106[0] == arg_56[0] && arg_106[0] == arg_42[0] && arg_106[0] != arg_50[1] && arg_106[0] != arg_62[1] && arg_106[0] == arg_76[0] && arg_106[0] != arg_56[1] && arg_106[0] == arg_58[0] && arg_106[0] != arg_80[1] && arg_106[0] == arg_126[0] && arg_106[0] != arg_104[1] && arg_106[0] != arg_76[1] && arg_106[0] == arg_104[0] && arg_106[0] == arg_32[0] && arg_106[0] != arg_120[1] && arg_106[0] == arg_94[0] && arg_82[1] == arg_34[1] && arg_82[1] == arg_112[1] && arg_82[1] == arg_74[1] && arg_82[1] == arg_106[1] && arg_82[1] != arg_112[0] && arg_82[1] == arg_94[1] && arg_82[1] != arg_88[0] && arg_82[1] == arg_48[1] && arg_82[1] == arg_14[1] && arg_82[1] != arg_20[0] && arg_82[1] != arg_56[0] && arg_82[1] != arg_42[0] && arg_82[1] == arg_50[1] && arg_82[1] == arg_62[1] && arg_82[1] != arg_76[0] && arg_82[1] == arg_56[1] && arg_82[1] != arg_58[0] && arg_82[1] == arg_80[1] && arg_82[1] != arg_126[0] && arg_82[1] == arg_104[1] && arg_82[1] == arg_76[1] && arg_82[1] != arg_104[0] && arg_82[1] != arg_32[0] && arg_82[1] == arg_120[1] && arg_82[1] != arg_94[0] && arg_34[1] == arg_112[1] && arg_34[1] == arg_74[1] && arg_34[1] == arg_106[1] && arg_34[1] != arg_112[0] && arg_34[1] == arg_94[1] && arg_34[1] != arg_88[0] && arg_34[1] == arg_48[1] && arg_34[1] == arg_14[1] && arg_34[1] != arg_20[0] && arg_34[1] != arg_56[0] && arg_34[1] != arg_42[0] && arg_34[1] == arg_50[1] && arg_34[1] == arg_62[1] && arg_34[1] != arg_76[0] && arg_34[1] == arg_56[1] && arg_34[1] != arg_58[0] && arg_34[1] == arg_80[1] && arg_34[1] != arg_126[0] && arg_34[1] == arg_104[1] && arg_34[1] == arg_76[1] && arg_34[1] != arg_104[0] && arg_34[1] != arg_32[0] && arg_34[1] == arg_120[1] && arg_34[1] != arg_94[0] && arg_112[1] == arg_74[1] && arg_112[1] == arg_106[1] && arg_112[1] != arg_112[0] && arg_112[1] == arg_94[1] && arg_112[1] != arg_88[0] && arg_112[1] == arg_48[1] && arg_112[1] == arg_14[1] && arg_112[1] != arg_20[0] && arg_112[1] != arg_56[0] && arg_112[1] != arg_42[0] && arg_112[1] == arg_50[1] && arg_112[1] == arg_62[1] && arg_112[1] != arg_76[0] && arg_112[1] == arg_56[1] && arg_112[1] != arg_58[0] && arg_112[1] == arg_80[1] && arg_112[1] != arg_126[0] && arg_112[1] == arg_104[1] && arg_112[1] == arg_76[1] && arg_112[1] != arg_104[0] && arg_112[1] != arg_32[0] && arg_112[1] == arg_120[1] && arg_112[1] != arg_94[0] && arg_74[1] == arg_106[1] && arg_74[1] != arg_112[0] && arg_74[1] == arg_94[1] && arg_74[1] != arg_88[0] && arg_74[1] == arg_48[1] && arg_74[1] == arg_14[1] && arg_74[1] != arg_20[0] && arg_74[1] != arg_56[0] && arg_74[1] != arg_42[0] && arg_74[1] == arg_50[1] && arg_74[1] == arg_62[1] && arg_74[1] != arg_76[0] && arg_74[1] == arg_56[1] && arg_74[1] != arg_58[0] && arg_74[1] == arg_80[1] && arg_74[1] != arg_126[0] && arg_74[1] == arg_104[1] && arg_74[1] == arg_76[1] && arg_74[1] != arg_104[0] && arg_74[1] != arg_32[0] && arg_74[1] == arg_120[1] && arg_74[1] != arg_94[0] && arg_106[1] != arg_112[0] && arg_106[1] == arg_94[1] && arg_106[1] != arg_88[0] && arg_106[1] == arg_48[1] && arg_106[1] == arg_14[1] && arg_106[1] != arg_20[0] && arg_106[1] != arg_56[0] && arg_106[1] != arg_42[0] && arg_106[1] == arg_50[1] && arg_106[1] == arg_62[1] && arg_106[1] != arg_76[0] && arg_106[1] == arg_56[1] && arg_106[1] != arg_58[0] && arg_106[1] == arg_80[1] && arg_106[1] != arg_126[0] && arg_106[1] == arg_104[1] && arg_106[1] == arg_76[1] && arg_106[1] != arg_104[0] && arg_106[1] != arg_32[0] && arg_106[1] == arg_120[1] && arg_106[1] != arg_94[0] && arg_112[0] != arg_94[1] && arg_112[0] == arg_88[0] && arg_112[0] != arg_48[1] && arg_112[0] != arg_14[1] && arg_112[0] == arg_20[0] && arg_112[0] == arg_56[0] && arg_112[0] == arg_42[0] && arg_112[0] != arg_50[1] && arg_112[0] != arg_62[1] && arg_112[0] == arg_76[0] && arg_112[0] != arg_56[1] && arg_112[0] == arg_58[0] && arg_112[0] != arg_80[1] && arg_112[0] == arg_126[0] && arg_112[0] != arg_104[1] && arg_112[0] != arg_76[1] && arg_112[0] == arg_104[0] && arg_112[0] == arg_32[0] && arg_112[0] != arg_120[1] && arg_112[0] == arg_94[0] && arg_94[1] != arg_88[0] && arg_94[1] == arg_48[1] && arg_94[1] == arg_14[1] && arg_94[1] != arg_20[0] && arg_94[1] != arg_56[0] && arg_94[1] != arg_42[0] && arg_94[1] == arg_50[1] && arg_94[1] == arg_62[1] && arg_94[1] != arg_76[0] && arg_94[1] == arg_56[1] && arg_94[1] != arg_58[0] && arg_94[1] == arg_80[1] && arg_94[1] != arg_126[0] && arg_94[1] == arg_104[1] && arg_94[1] == arg_76[1] && arg_94[1] != arg_104[0] && arg_94[1] != arg_32[0] && arg_94[1] == arg_120[1] && arg_94[1] != arg_94[0] && arg_88[0] != arg_48[1] && arg_88[0] != arg_14[1] && arg_88[0] == arg_20[0] && arg_88[0] == arg_56[0] && arg_88[0] == arg_42[0] && arg_88[0] != arg_50[1] && arg_88[0] != arg_62[1] && arg_88[0] == arg_76[0] && arg_88[0] != arg_56[1] && arg_88[0] == arg_58[0] && arg_88[0] != arg_80[1] && arg_88[0] == arg_126[0] && arg_88[0] != arg_104[1] && arg_88[0] != arg_76[1] && arg_88[0] == arg_104[0] && arg_88[0] == arg_32[0] && arg_88[0] != arg_120[1] && arg_88[0] == arg_94[0] && arg_48[1] == arg_14[1] && arg_48[1] != arg_20[0] && arg_48[1] != arg_56[0] && arg_48[1] != arg_42[0] && arg_48[1] == arg_50[1] && arg_48[1] == arg_62[1] && arg_48[1] != arg_76[0] && arg_48[1] == arg_56[1] && arg_48[1] != arg_58[0] && arg_48[1] == arg_80[1] && arg_48[1] != arg_126[0] && arg_48[1] == arg_104[1] && arg_48[1] == arg_76[1] && arg_48[1] != arg_104[0] && arg_48[1] != arg_32[0] && arg_48[1] == arg_120[1] && arg_48[1] != arg_94[0] && arg_14[1] != arg_20[0] && arg_14[1] != arg_56[0] && arg_14[1] != arg_42[0] && arg_14[1] == arg_50[1] && arg_14[1] == arg_62[1] && arg_14[1] != arg_76[0] && arg_14[1] == arg_56[1] && arg_14[1] != arg_58[0] && arg_14[1] == arg_80[1] && arg_14[1] != arg_126[0] && arg_14[1] == arg_104[1] && arg_14[1] == arg_76[1] && arg_14[1] != arg_104[0] && arg_14[1] != arg_32[0] && arg_14[1] == arg_120[1] && arg_14[1] != arg_94[0] && arg_20[0] == arg_56[0] && arg_20[0] == arg_42[0] && arg_20[0] != arg_50[1] && arg_20[0] != arg_62[1] && arg_20[0] == arg_76[0] && arg_20[0] != arg_56[1] && arg_20[0] == arg_58[0] && arg_20[0] != arg_80[1] && arg_20[0] == arg_126[0] && arg_20[0] != arg_104[1] && arg_20[0] != arg_76[1] && arg_20[0] == arg_104[0] && arg_20[0] == arg_32[0] && arg_20[0] != arg_120[1] && arg_20[0] == arg_94[0] && arg_56[0] == arg_42[0] && arg_56[0] != arg_50[1] && arg_56[0] != arg_62[1] && arg_56[0] == arg_76[0] && arg_56[0] != arg_56[1] && arg_56[0] == arg_58[0] && arg_56[0] != arg_80[1] && arg_56[0] == arg_126[0] && arg_56[0] != arg_104[1] && arg_56[0] != arg_76[1] && arg_56[0] == arg_104[0] && arg_56[0] == arg_32[0] && arg_56[0] != arg_120[1] && arg_56[0] == arg_94[0] && arg_42[0] != arg_50[1] && arg_42[0] != arg_62[1] && arg_42[0] == arg_76[0] && arg_42[0] != arg_56[1] && arg_42[0] == arg_58[0] && arg_42[0] != arg_80[1] && arg_42[0] == arg_126[0] && arg_42[0] != arg_104[1] && arg_42[0] != arg_76[1] && arg_42[0] == arg_104[0] && arg_42[0] == arg_32[0] && arg_42[0] != arg_120[1] && arg_42[0] == arg_94[0] && arg_50[1] == arg_62[1] && arg_50[1] != arg_76[0] && arg_50[1] == arg_56[1] && arg_50[1] != arg_58[0] && arg_50[1] == arg_80[1] && arg_50[1] != arg_126[0] && arg_50[1] == arg_104[1] && arg_50[1] == arg_76[1] && arg_50[1] != arg_104[0] && arg_50[1] != arg_32[0] && arg_50[1] == arg_120[1] && arg_50[1] != arg_94[0] && arg_62[1] != arg_76[0] && arg_62[1] == arg_56[1] && arg_62[1] != arg_58[0] && arg_62[1] == arg_80[1] && arg_62[1] != arg_126[0] && arg_62[1] == arg_104[1] && arg_62[1] == arg_76[1] && arg_62[1] != arg_104[0] && arg_62[1] != arg_32[0] && arg_62[1] == arg_120[1] && arg_62[1] != arg_94[0] && arg_76[0] != arg_56[1] && arg_76[0] == arg_58[0] && arg_76[0] != arg_80[1] && arg_76[0] == arg_126[0] && arg_76[0] != arg_104[1] && arg_76[0] != arg_76[1] && arg_76[0] == arg_104[0] && arg_76[0] == arg_32[0] && arg_76[0] != arg_120[1] && arg_76[0] == arg_94[0] && arg_56[1] != arg_58[0] && arg_56[1] == arg_80[1] && arg_56[1] != arg_126[0] && arg_56[1] == arg_104[1] && arg_56[1] == arg_76[1] && arg_56[1] != arg_104[0] && arg_56[1] != arg_32[0] && arg_56[1] == arg_120[1] && arg_56[1] != arg_94[0] && arg_58[0] != arg_80[1] && arg_58[0] == arg_126[0] && arg_58[0] != arg_104[1] && arg_58[0] != arg_76[1] && arg_58[0] == arg_104[0] && arg_58[0] == arg_32[0] && arg_58[0] != arg_120[1] && arg_58[0] == arg_94[0] && arg_80[1] != arg_126[0] && arg_80[1] == arg_104[1] && arg_80[1] == arg_76[1] && arg_80[1] != arg_104[0] && arg_80[1] != arg_32[0] && arg_80[1] == arg_120[1] && arg_80[1] != arg_94[0] && arg_126[0] != arg_104[1] && arg_126[0] != arg_76[1] && arg_126[0] == arg_104[0] && arg_126[0] == arg_32[0] && arg_126[0] != arg_120[1] && arg_126[0] == arg_94[0] && arg_104[1] == arg_76[1] && arg_104[1] != arg_104[0] && arg_104[1] != arg_32[0] && arg_104[1] == arg_120[1] && arg_104[1] != arg_94[0] && arg_76[1] != arg_104[0] && arg_76[1] != arg_32[0] && arg_76[1] == arg_120[1] && arg_76[1] != arg_94[0] && arg_104[0] == arg_32[0] && arg_104[0] != arg_120[1] && arg_104[0] == arg_94[0] && arg_32[0] != arg_120[1] && arg_32[0] == arg_94[0] && arg_120[1] != arg_94[0] {
pos.func.dfg.replace(inst).iconst(I64, 0_u64 as i64); 
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1389(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_4 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_4[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_5) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_6 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_6[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_7 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_7) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_8 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_8[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_9 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_9) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_10 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_10[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_11 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_11) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_12 = arg;
let rhs_7 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_12) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_13 = arg;
let rhs_8 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_8 == -1 {
if rhs_7 == 4294967295 {
if rhs_6 == 1 {
match pos.func.dfg.value_def(arg_10[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_14 = arg;
let rhs_12 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_14) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_15 = arg;
let rhs_13 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_13 == -1 {
if rhs_12 == 4294967295 {
if rhs_5 == 2 {
match pos.func.dfg.value_def(arg_8[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_16 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_16[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_17 = arg;
let rhs_17 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_17) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_18 = arg;
let rhs_18 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_18) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_19 = arg;
let rhs_19 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_19 == -1 {
if rhs_18 == 4294967295 {
if rhs_17 == 1 {
match pos.func.dfg.value_def(arg_16[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_20 = arg;
let rhs_23 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_20) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_21 = arg;
let rhs_24 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_24 == -1 {
if rhs_23 == 4294967295 {
if rhs_4 == 4 {
match pos.func.dfg.value_def(arg_6[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_22 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_22[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_23 = arg;
let rhs_28 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_23) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_24 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_24[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_25 = arg;
let rhs_29 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_25) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_26 = arg;
let rhs_30 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_26) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_27 = arg;
let rhs_31 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_31 == -1 {
if rhs_30 == 4294967295 {
if rhs_29 == 1 {
match pos.func.dfg.value_def(arg_24[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_28 = arg;
let rhs_35 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_28) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_29 = arg;
let rhs_36 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_36 == -1 {
if rhs_35 == 4294967295 {
if rhs_28 == 2 {
match pos.func.dfg.value_def(arg_22[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_30 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_30[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_31 = arg;
let rhs_40 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_31) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_32 = arg;
let rhs_41 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_32) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_33 = arg;
let rhs_42 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_42 == -1 {
if rhs_41 == 4294967295 {
if rhs_40 == 1 {
match pos.func.dfg.value_def(arg_30[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_34 = arg;
let rhs_46 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_34) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_35 = arg;
let rhs_47 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_47 == -1 {
if rhs_46 == 4294967295 {
if rhs_3 == 8 {
match pos.func.dfg.value_def(arg_4[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_36 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_36[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_37 = arg;
let rhs_51 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_37) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_38 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_38[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_39 = arg;
let rhs_52 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_39) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_40 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_40[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_41 = arg;
let rhs_53 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_41) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_42 = arg;
let rhs_54 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_42) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_43 = arg;
let rhs_55 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_55 == -1 {
if rhs_54 == 4294967295 {
if rhs_53 == 1 {
match pos.func.dfg.value_def(arg_40[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_44 = arg;
let rhs_59 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_44) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_45 = arg;
let rhs_60 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_60 == -1 {
if rhs_59 == 4294967295 {
if rhs_52 == 2 {
match pos.func.dfg.value_def(arg_38[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_46 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_46[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_47 = arg;
let rhs_64 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_47) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_48 = arg;
let rhs_65 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_48) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_49 = arg;
let rhs_66 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_66 == -1 {
if rhs_65 == 4294967295 {
if rhs_64 == 1 {
match pos.func.dfg.value_def(arg_46[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_50 = arg;
let rhs_70 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_50) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_51 = arg;
let rhs_71 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_71 == -1 {
if rhs_70 == 4294967295 {
if rhs_51 == 4 {
match pos.func.dfg.value_def(arg_36[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_52 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_52[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_53 = arg;
let rhs_75 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_53) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_54 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_54[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_55 = arg;
let rhs_76 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_55) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_56 = arg;
let rhs_77 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_56) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_57 = arg;
let rhs_78 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_78 == -1 {
if rhs_77 == 4294967295 {
if rhs_76 == 1 {
match pos.func.dfg.value_def(arg_54[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_58 = arg;
let rhs_82 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_58) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_59 = arg;
let rhs_83 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_83 == -1 {
if rhs_82 == 4294967295 {
if rhs_75 == 2 {
match pos.func.dfg.value_def(arg_52[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_60 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_60[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_61 = arg;
let rhs_87 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_61) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_62 = arg;
let rhs_88 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_62) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_63 = arg;
let rhs_89 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_89 == -1 {
if rhs_88 == 4294967295 {
if rhs_87 == 1 {
match pos.func.dfg.value_def(arg_60[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_64 = arg;
let rhs_93 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_64) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_65 = arg;
let rhs_94 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_94 == -1 {
if rhs_93 == 4294967295 {
if rhs_2 == 16 {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_66 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_66[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_67 = arg;
let rhs_98 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_67) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_68 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_68[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_69 = arg;
let rhs_99 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_69) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_70 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_70[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_71 = arg;
let rhs_100 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_71) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_72 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_72[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_73 = arg;
let rhs_101 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_73) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_74 = arg;
let rhs_102 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_74) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_75 = arg;
let rhs_103 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_103 == -1 {
if rhs_102 == 4294967295 {
if rhs_101 == 1 {
match pos.func.dfg.value_def(arg_72[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_76 = arg;
let rhs_107 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_76) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_77 = arg;
let rhs_108 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_108 == -1 {
if rhs_107 == 4294967295 {
if rhs_100 == 2 {
match pos.func.dfg.value_def(arg_70[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_78 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_78[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_79 = arg;
let rhs_112 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_79) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_80 = arg;
let rhs_113 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_80) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_81 = arg;
let rhs_114 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_114 == -1 {
if rhs_113 == 4294967295 {
if rhs_112 == 1 {
match pos.func.dfg.value_def(arg_78[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_82 = arg;
let rhs_118 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_82) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_83 = arg;
let rhs_119 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_119 == -1 {
if rhs_118 == 4294967295 {
if rhs_99 == 4 {
match pos.func.dfg.value_def(arg_68[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_84 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_84[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_85 = arg;
let rhs_123 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_85) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_86 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_86[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_87 = arg;
let rhs_124 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_87) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_88 = arg;
let rhs_125 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_88) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_89 = arg;
let rhs_126 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_126 == -1 {
if rhs_125 == 4294967295 {
if rhs_124 == 1 {
match pos.func.dfg.value_def(arg_86[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_90 = arg;
let rhs_130 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_90) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_91 = arg;
let rhs_131 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_131 == -1 {
if rhs_130 == 4294967295 {
if rhs_123 == 2 {
match pos.func.dfg.value_def(arg_84[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_92 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_92[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_93 = arg;
let rhs_135 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_93) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_94 = arg;
let rhs_136 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_94) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_95 = arg;
let rhs_137 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_137 == -1 {
if rhs_136 == 4294967295 {
if rhs_135 == 1 {
match pos.func.dfg.value_def(arg_92[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_96 = arg;
let rhs_141 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_96) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_97 = arg;
let rhs_142 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_142 == -1 {
if rhs_141 == 4294967295 {
if rhs_98 == 8 {
match pos.func.dfg.value_def(arg_66[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_98 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_98[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_99 = arg;
let rhs_146 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_99) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_100 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_100[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_101 = arg;
let rhs_147 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_101) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_102 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_102[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_103 = arg;
let rhs_148 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_103) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_104 = arg;
let rhs_149 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_104) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_105 = arg;
let rhs_150 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_150 == -1 {
if rhs_149 == 4294967295 {
if rhs_148 == 1 {
match pos.func.dfg.value_def(arg_102[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_106 = arg;
let rhs_154 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_106) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_107 = arg;
let rhs_155 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_155 == -1 {
if rhs_154 == 4294967295 {
if rhs_147 == 2 {
match pos.func.dfg.value_def(arg_100[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_108 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_108[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_109 = arg;
let rhs_159 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_109) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_110 = arg;
let rhs_160 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_110) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_111 = arg;
let rhs_161 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_161 == -1 {
if rhs_160 == 4294967295 {
if rhs_159 == 1 {
match pos.func.dfg.value_def(arg_108[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_112 = arg;
let rhs_165 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_112) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_113 = arg;
let rhs_166 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_166 == -1 {
if rhs_165 == 4294967295 {
if rhs_146 == 4 {
match pos.func.dfg.value_def(arg_98[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_114 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_114[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_115 = arg;
let rhs_170 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_115) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_116 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_116[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_117 = arg;
let rhs_171 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_117) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_118 = arg;
let rhs_172 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_118) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_119 = arg;
let rhs_173 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_173 == -1 {
if rhs_172 == 4294967295 {
if rhs_171 == 1 {
match pos.func.dfg.value_def(arg_116[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_120 = arg;
let rhs_177 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_120) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_121 = arg;
let rhs_178 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_178 == -1 {
if rhs_177 == 4294967295 {
if rhs_170 == 2 {
match pos.func.dfg.value_def(arg_114[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_122 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_122[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_123 = arg;
let rhs_182 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_123) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_124 = arg;
let rhs_183 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_124) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_125 = arg;
let rhs_184 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_184 == -1 {
if rhs_183 == 4294967295 {
if rhs_182 == 1 {
match pos.func.dfg.value_def(arg_122[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_126 = arg;
let rhs_188 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_126) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_127 = arg;
let rhs_189 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_189 == -1 {
if rhs_188 == 4294967295 {
if rhs_1 == 32 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_128 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_128[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_129 = arg;
let rhs_193 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_129) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_130 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_130[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_131 = arg;
let rhs_194 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_131) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_132 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_132[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_133 = arg;
let rhs_195 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_133) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_134 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_134[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_135 = arg;
let rhs_196 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_135) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_136 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_136[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_137 = arg;
let rhs_197 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_137) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_138 = arg;
let rhs_198 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_138) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_139 = arg;
let rhs_199 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_199 == -1 {
if rhs_198 == 4294967295 {
if rhs_197 == 1 {
match pos.func.dfg.value_def(arg_136[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_140 = arg;
let rhs_203 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_140) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_141 = arg;
let rhs_204 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_204 == -1 {
if rhs_203 == 4294967295 {
if rhs_196 == 2 {
match pos.func.dfg.value_def(arg_134[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_142 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_142[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_143 = arg;
let rhs_208 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_143) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_144 = arg;
let rhs_209 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_144) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_145 = arg;
let rhs_210 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_210 == -1 {
if rhs_209 == 4294967295 {
if rhs_208 == 1 {
match pos.func.dfg.value_def(arg_142[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_146 = arg;
let rhs_214 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_146) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_147 = arg;
let rhs_215 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_215 == -1 {
if rhs_214 == 4294967295 {
if rhs_195 == 4 {
match pos.func.dfg.value_def(arg_132[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_148 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_148[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_149 = arg;
let rhs_219 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_149) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_150 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_150[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_151 = arg;
let rhs_220 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_151) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_152 = arg;
let rhs_221 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_152) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_153 = arg;
let rhs_222 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_222 == -1 {
if rhs_221 == 4294967295 {
if rhs_220 == 1 {
match pos.func.dfg.value_def(arg_150[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_154 = arg;
let rhs_226 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_154) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_155 = arg;
let rhs_227 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_227 == -1 {
if rhs_226 == 4294967295 {
if rhs_219 == 2 {
match pos.func.dfg.value_def(arg_148[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_156 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_156[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_157 = arg;
let rhs_231 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_157) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_158 = arg;
let rhs_232 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_158) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_159 = arg;
let rhs_233 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_233 == -1 {
if rhs_232 == 4294967295 {
if rhs_231 == 1 {
match pos.func.dfg.value_def(arg_156[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_160 = arg;
let rhs_237 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_160) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_161 = arg;
let rhs_238 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_238 == -1 {
if rhs_237 == 4294967295 {
if rhs_194 == 8 {
match pos.func.dfg.value_def(arg_130[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_162 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_162[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_163 = arg;
let rhs_242 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_163) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_164 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_164[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_165 = arg;
let rhs_243 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_165) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_166 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_166[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_167 = arg;
let rhs_244 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_167) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_168 = arg;
let rhs_245 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_168) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_169 = arg;
let rhs_246 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_246 == -1 {
if rhs_245 == 4294967295 {
if rhs_244 == 1 {
match pos.func.dfg.value_def(arg_166[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_170 = arg;
let rhs_250 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_170) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_171 = arg;
let rhs_251 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_251 == -1 {
if rhs_250 == 4294967295 {
if rhs_243 == 2 {
match pos.func.dfg.value_def(arg_164[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_172 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_172[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_173 = arg;
let rhs_255 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_173) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_174 = arg;
let rhs_256 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_174) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_175 = arg;
let rhs_257 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_257 == -1 {
if rhs_256 == 4294967295 {
if rhs_255 == 1 {
match pos.func.dfg.value_def(arg_172[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_176 = arg;
let rhs_261 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_176) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_177 = arg;
let rhs_262 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_262 == -1 {
if rhs_261 == 4294967295 {
if rhs_242 == 4 {
match pos.func.dfg.value_def(arg_162[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_178 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_178[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_179 = arg;
let rhs_266 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_179) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_180 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_180[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_181 = arg;
let rhs_267 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_181) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_182 = arg;
let rhs_268 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_182) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_183 = arg;
let rhs_269 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_269 == -1 {
if rhs_268 == 4294967295 {
if rhs_267 == 1 {
match pos.func.dfg.value_def(arg_180[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_184 = arg;
let rhs_273 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_184) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_185 = arg;
let rhs_274 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_274 == -1 {
if rhs_273 == 4294967295 {
if rhs_266 == 2 {
match pos.func.dfg.value_def(arg_178[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_186 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_186[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_187 = arg;
let rhs_278 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_187) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_188 = arg;
let rhs_279 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_188) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_189 = arg;
let rhs_280 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_280 == -1 {
if rhs_279 == 4294967295 {
if rhs_278 == 1 {
match pos.func.dfg.value_def(arg_186[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_190 = arg;
let rhs_284 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_190) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_191 = arg;
let rhs_285 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_285 == -1 {
if rhs_284 == 4294967295 {
if rhs_193 == 16 {
match pos.func.dfg.value_def(arg_128[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_192 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_192[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_193 = arg;
let rhs_289 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_193) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_194 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_194[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_195 = arg;
let rhs_290 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_195) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_196 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_196[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_197 = arg;
let rhs_291 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_197) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_198 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_198[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_199 = arg;
let rhs_292 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_199) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_200 = arg;
let rhs_293 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_200) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_201 = arg;
let rhs_294 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_294 == -1 {
if rhs_293 == 4294967295 {
if rhs_292 == 1 {
match pos.func.dfg.value_def(arg_198[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_202 = arg;
let rhs_298 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_202) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_203 = arg;
let rhs_299 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_299 == -1 {
if rhs_298 == 4294967295 {
if rhs_291 == 2 {
match pos.func.dfg.value_def(arg_196[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_204 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_204[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_205 = arg;
let rhs_303 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_205) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_206 = arg;
let rhs_304 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_206) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_207 = arg;
let rhs_305 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_305 == -1 {
if rhs_304 == 4294967295 {
if rhs_303 == 1 {
match pos.func.dfg.value_def(arg_204[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_208 = arg;
let rhs_309 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_208) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_209 = arg;
let rhs_310 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_310 == -1 {
if rhs_309 == 4294967295 {
if rhs_290 == 4 {
match pos.func.dfg.value_def(arg_194[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_210 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_210[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_211 = arg;
let rhs_314 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_211) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_212 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_212[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_213 = arg;
let rhs_315 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_213) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_214 = arg;
let rhs_316 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_214) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_215 = arg;
let rhs_317 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_317 == -1 {
if rhs_316 == 4294967295 {
if rhs_315 == 1 {
match pos.func.dfg.value_def(arg_212[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_216 = arg;
let rhs_321 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_216) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_217 = arg;
let rhs_322 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_322 == -1 {
if rhs_321 == 4294967295 {
if rhs_314 == 2 {
match pos.func.dfg.value_def(arg_210[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_218 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_218[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_219 = arg;
let rhs_326 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_219) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_220 = arg;
let rhs_327 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_220) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_221 = arg;
let rhs_328 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_328 == -1 {
if rhs_327 == 4294967295 {
if rhs_326 == 1 {
match pos.func.dfg.value_def(arg_218[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_222 = arg;
let rhs_332 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_222) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_223 = arg;
let rhs_333 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_333 == -1 {
if rhs_332 == 4294967295 {
if rhs_289 == 8 {
match pos.func.dfg.value_def(arg_192[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_224 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_224[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_225 = arg;
let rhs_337 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_225) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_226 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_226[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_227 = arg;
let rhs_338 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_227) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_228 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_228[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_229 = arg;
let rhs_339 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_229) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_230 = arg;
let rhs_340 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_230) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_231 = arg;
let rhs_341 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_341 == -1 {
if rhs_340 == 4294967295 {
if rhs_339 == 1 {
match pos.func.dfg.value_def(arg_228[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_232 = arg;
let rhs_345 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_232) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_233 = arg;
let rhs_346 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_346 == -1 {
if rhs_345 == 4294967295 {
if rhs_338 == 2 {
match pos.func.dfg.value_def(arg_226[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_234 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_234[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_235 = arg;
let rhs_350 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_235) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_236 = arg;
let rhs_351 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_236) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_237 = arg;
let rhs_352 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_352 == -1 {
if rhs_351 == 4294967295 {
if rhs_350 == 1 {
match pos.func.dfg.value_def(arg_234[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_238 = arg;
let rhs_356 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_238) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_239 = arg;
let rhs_357 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_357 == -1 {
if rhs_356 == 4294967295 {
if rhs_337 == 4 {
match pos.func.dfg.value_def(arg_224[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_240 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_240[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_241 = arg;
let rhs_361 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_241) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_242 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_242[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_243 = arg;
let rhs_362 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_243) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_244 = arg;
let rhs_363 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_244) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_245 = arg;
let rhs_364 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_364 == -1 {
if rhs_363 == 4294967295 {
if rhs_362 == 1 {
match pos.func.dfg.value_def(arg_242[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_246 = arg;
let rhs_368 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_246) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_247 = arg;
let rhs_369 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_369 == -1 {
if rhs_368 == 4294967295 {
if rhs_361 == 2 {
match pos.func.dfg.value_def(arg_240[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_248 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_248[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_249 = arg;
let rhs_373 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_249) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_250 = arg;
let rhs_374 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_250) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_251 = arg;
let rhs_375 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_375 == -1 {
if rhs_374 == 4294967295 {
if rhs_373 == 1 {
match pos.func.dfg.value_def(arg_248[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_252 = arg;
let rhs_379 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_252) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_253 = arg;
let rhs_380 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_380 == -1 {
if rhs_379 == 4294967295 {
if arg_189 == arg_125 && arg_189 == arg_91 && arg_189 == arg_153 && arg_189 == arg_237 && arg_189 == arg_77 && arg_189 == arg_29 && arg_189 == arg_13 && arg_189 == arg_27 && arg_189 == arg_119 && arg_189 == arg_121 && arg_189 == arg_97 && arg_189 == arg_231 && arg_189 == arg_33 && arg_189 == arg_217 && arg_189 == arg_63 && arg_189 == arg_141 && arg_189 == arg_139 && arg_189 == arg_111 && arg_189 == arg_89 && arg_189 == arg_171 && arg_189 == arg_159 && arg_189 == arg_175 && arg_189 == arg_221 && arg_189 == arg_207 && arg_189 == arg_113 && arg_189 == arg_105 && arg_189 == arg_245 && arg_189 == arg_19 && arg_189 == arg_95 && arg_189 == arg_209 && arg_189 == arg_183 && arg_189 == arg_21 && arg_189 == arg_147 && arg_189 == arg_15 && arg_189 == arg_75 && arg_189 == arg_251 && arg_189 == arg_223 && arg_189 == arg_145 && arg_189 == arg_43 && arg_189 == arg_127 && arg_189 == arg_51 && arg_189 == arg_59 && arg_189 == arg_49 && arg_189 == arg_215 && arg_189 == arg_57 && arg_189 == arg_155 && arg_189 == arg_233 && arg_189 == arg_45 && arg_189 == arg_177 && arg_189 == arg_239 && arg_189 == arg_81 && arg_189 == arg_35 && arg_189 == arg_107 && arg_189 == arg_161 && arg_189 == arg_185 && arg_189 == arg_191 && arg_189 == arg_201 && arg_189 == arg_169 && arg_189 == arg_203 && arg_189 == arg_253 && arg_189 == arg_65 && arg_189 == arg_83 && arg_189 == arg_247 && arg_125 == arg_91 && arg_125 == arg_153 && arg_125 == arg_237 && arg_125 == arg_77 && arg_125 == arg_29 && arg_125 == arg_13 && arg_125 == arg_27 && arg_125 == arg_119 && arg_125 == arg_121 && arg_125 == arg_97 && arg_125 == arg_231 && arg_125 == arg_33 && arg_125 == arg_217 && arg_125 == arg_63 && arg_125 == arg_141 && arg_125 == arg_139 && arg_125 == arg_111 && arg_125 == arg_89 && arg_125 == arg_171 && arg_125 == arg_159 && arg_125 == arg_175 && arg_125 == arg_221 && arg_125 == arg_207 && arg_125 == arg_113 && arg_125 == arg_105 && arg_125 == arg_245 && arg_125 == arg_19 && arg_125 == arg_95 && arg_125 == arg_209 && arg_125 == arg_183 && arg_125 == arg_21 && arg_125 == arg_147 && arg_125 == arg_15 && arg_125 == arg_75 && arg_125 == arg_251 && arg_125 == arg_223 && arg_125 == arg_145 && arg_125 == arg_43 && arg_125 == arg_127 && arg_125 == arg_51 && arg_125 == arg_59 && arg_125 == arg_49 && arg_125 == arg_215 && arg_125 == arg_57 && arg_125 == arg_155 && arg_125 == arg_233 && arg_125 == arg_45 && arg_125 == arg_177 && arg_125 == arg_239 && arg_125 == arg_81 && arg_125 == arg_35 && arg_125 == arg_107 && arg_125 == arg_161 && arg_125 == arg_185 && arg_125 == arg_191 && arg_125 == arg_201 && arg_125 == arg_169 && arg_125 == arg_203 && arg_125 == arg_253 && arg_125 == arg_65 && arg_125 == arg_83 && arg_125 == arg_247 && arg_91 == arg_153 && arg_91 == arg_237 && arg_91 == arg_77 && arg_91 == arg_29 && arg_91 == arg_13 && arg_91 == arg_27 && arg_91 == arg_119 && arg_91 == arg_121 && arg_91 == arg_97 && arg_91 == arg_231 && arg_91 == arg_33 && arg_91 == arg_217 && arg_91 == arg_63 && arg_91 == arg_141 && arg_91 == arg_139 && arg_91 == arg_111 && arg_91 == arg_89 && arg_91 == arg_171 && arg_91 == arg_159 && arg_91 == arg_175 && arg_91 == arg_221 && arg_91 == arg_207 && arg_91 == arg_113 && arg_91 == arg_105 && arg_91 == arg_245 && arg_91 == arg_19 && arg_91 == arg_95 && arg_91 == arg_209 && arg_91 == arg_183 && arg_91 == arg_21 && arg_91 == arg_147 && arg_91 == arg_15 && arg_91 == arg_75 && arg_91 == arg_251 && arg_91 == arg_223 && arg_91 == arg_145 && arg_91 == arg_43 && arg_91 == arg_127 && arg_91 == arg_51 && arg_91 == arg_59 && arg_91 == arg_49 && arg_91 == arg_215 && arg_91 == arg_57 && arg_91 == arg_155 && arg_91 == arg_233 && arg_91 == arg_45 && arg_91 == arg_177 && arg_91 == arg_239 && arg_91 == arg_81 && arg_91 == arg_35 && arg_91 == arg_107 && arg_91 == arg_161 && arg_91 == arg_185 && arg_91 == arg_191 && arg_91 == arg_201 && arg_91 == arg_169 && arg_91 == arg_203 && arg_91 == arg_253 && arg_91 == arg_65 && arg_91 == arg_83 && arg_91 == arg_247 && arg_153 == arg_237 && arg_153 == arg_77 && arg_153 == arg_29 && arg_153 == arg_13 && arg_153 == arg_27 && arg_153 == arg_119 && arg_153 == arg_121 && arg_153 == arg_97 && arg_153 == arg_231 && arg_153 == arg_33 && arg_153 == arg_217 && arg_153 == arg_63 && arg_153 == arg_141 && arg_153 == arg_139 && arg_153 == arg_111 && arg_153 == arg_89 && arg_153 == arg_171 && arg_153 == arg_159 && arg_153 == arg_175 && arg_153 == arg_221 && arg_153 == arg_207 && arg_153 == arg_113 && arg_153 == arg_105 && arg_153 == arg_245 && arg_153 == arg_19 && arg_153 == arg_95 && arg_153 == arg_209 && arg_153 == arg_183 && arg_153 == arg_21 && arg_153 == arg_147 && arg_153 == arg_15 && arg_153 == arg_75 && arg_153 == arg_251 && arg_153 == arg_223 && arg_153 == arg_145 && arg_153 == arg_43 && arg_153 == arg_127 && arg_153 == arg_51 && arg_153 == arg_59 && arg_153 == arg_49 && arg_153 == arg_215 && arg_153 == arg_57 && arg_153 == arg_155 && arg_153 == arg_233 && arg_153 == arg_45 && arg_153 == arg_177 && arg_153 == arg_239 && arg_153 == arg_81 && arg_153 == arg_35 && arg_153 == arg_107 && arg_153 == arg_161 && arg_153 == arg_185 && arg_153 == arg_191 && arg_153 == arg_201 && arg_153 == arg_169 && arg_153 == arg_203 && arg_153 == arg_253 && arg_153 == arg_65 && arg_153 == arg_83 && arg_153 == arg_247 && arg_237 == arg_77 && arg_237 == arg_29 && arg_237 == arg_13 && arg_237 == arg_27 && arg_237 == arg_119 && arg_237 == arg_121 && arg_237 == arg_97 && arg_237 == arg_231 && arg_237 == arg_33 && arg_237 == arg_217 && arg_237 == arg_63 && arg_237 == arg_141 && arg_237 == arg_139 && arg_237 == arg_111 && arg_237 == arg_89 && arg_237 == arg_171 && arg_237 == arg_159 && arg_237 == arg_175 && arg_237 == arg_221 && arg_237 == arg_207 && arg_237 == arg_113 && arg_237 == arg_105 && arg_237 == arg_245 && arg_237 == arg_19 && arg_237 == arg_95 && arg_237 == arg_209 && arg_237 == arg_183 && arg_237 == arg_21 && arg_237 == arg_147 && arg_237 == arg_15 && arg_237 == arg_75 && arg_237 == arg_251 && arg_237 == arg_223 && arg_237 == arg_145 && arg_237 == arg_43 && arg_237 == arg_127 && arg_237 == arg_51 && arg_237 == arg_59 && arg_237 == arg_49 && arg_237 == arg_215 && arg_237 == arg_57 && arg_237 == arg_155 && arg_237 == arg_233 && arg_237 == arg_45 && arg_237 == arg_177 && arg_237 == arg_239 && arg_237 == arg_81 && arg_237 == arg_35 && arg_237 == arg_107 && arg_237 == arg_161 && arg_237 == arg_185 && arg_237 == arg_191 && arg_237 == arg_201 && arg_237 == arg_169 && arg_237 == arg_203 && arg_237 == arg_253 && arg_237 == arg_65 && arg_237 == arg_83 && arg_237 == arg_247 && arg_77 == arg_29 && arg_77 == arg_13 && arg_77 == arg_27 && arg_77 == arg_119 && arg_77 == arg_121 && arg_77 == arg_97 && arg_77 == arg_231 && arg_77 == arg_33 && arg_77 == arg_217 && arg_77 == arg_63 && arg_77 == arg_141 && arg_77 == arg_139 && arg_77 == arg_111 && arg_77 == arg_89 && arg_77 == arg_171 && arg_77 == arg_159 && arg_77 == arg_175 && arg_77 == arg_221 && arg_77 == arg_207 && arg_77 == arg_113 && arg_77 == arg_105 && arg_77 == arg_245 && arg_77 == arg_19 && arg_77 == arg_95 && arg_77 == arg_209 && arg_77 == arg_183 && arg_77 == arg_21 && arg_77 == arg_147 && arg_77 == arg_15 && arg_77 == arg_75 && arg_77 == arg_251 && arg_77 == arg_223 && arg_77 == arg_145 && arg_77 == arg_43 && arg_77 == arg_127 && arg_77 == arg_51 && arg_77 == arg_59 && arg_77 == arg_49 && arg_77 == arg_215 && arg_77 == arg_57 && arg_77 == arg_155 && arg_77 == arg_233 && arg_77 == arg_45 && arg_77 == arg_177 && arg_77 == arg_239 && arg_77 == arg_81 && arg_77 == arg_35 && arg_77 == arg_107 && arg_77 == arg_161 && arg_77 == arg_185 && arg_77 == arg_191 && arg_77 == arg_201 && arg_77 == arg_169 && arg_77 == arg_203 && arg_77 == arg_253 && arg_77 == arg_65 && arg_77 == arg_83 && arg_77 == arg_247 && arg_29 == arg_13 && arg_29 == arg_27 && arg_29 == arg_119 && arg_29 == arg_121 && arg_29 == arg_97 && arg_29 == arg_231 && arg_29 == arg_33 && arg_29 == arg_217 && arg_29 == arg_63 && arg_29 == arg_141 && arg_29 == arg_139 && arg_29 == arg_111 && arg_29 == arg_89 && arg_29 == arg_171 && arg_29 == arg_159 && arg_29 == arg_175 && arg_29 == arg_221 && arg_29 == arg_207 && arg_29 == arg_113 && arg_29 == arg_105 && arg_29 == arg_245 && arg_29 == arg_19 && arg_29 == arg_95 && arg_29 == arg_209 && arg_29 == arg_183 && arg_29 == arg_21 && arg_29 == arg_147 && arg_29 == arg_15 && arg_29 == arg_75 && arg_29 == arg_251 && arg_29 == arg_223 && arg_29 == arg_145 && arg_29 == arg_43 && arg_29 == arg_127 && arg_29 == arg_51 && arg_29 == arg_59 && arg_29 == arg_49 && arg_29 == arg_215 && arg_29 == arg_57 && arg_29 == arg_155 && arg_29 == arg_233 && arg_29 == arg_45 && arg_29 == arg_177 && arg_29 == arg_239 && arg_29 == arg_81 && arg_29 == arg_35 && arg_29 == arg_107 && arg_29 == arg_161 && arg_29 == arg_185 && arg_29 == arg_191 && arg_29 == arg_201 && arg_29 == arg_169 && arg_29 == arg_203 && arg_29 == arg_253 && arg_29 == arg_65 && arg_29 == arg_83 && arg_29 == arg_247 && arg_13 == arg_27 && arg_13 == arg_119 && arg_13 == arg_121 && arg_13 == arg_97 && arg_13 == arg_231 && arg_13 == arg_33 && arg_13 == arg_217 && arg_13 == arg_63 && arg_13 == arg_141 && arg_13 == arg_139 && arg_13 == arg_111 && arg_13 == arg_89 && arg_13 == arg_171 && arg_13 == arg_159 && arg_13 == arg_175 && arg_13 == arg_221 && arg_13 == arg_207 && arg_13 == arg_113 && arg_13 == arg_105 && arg_13 == arg_245 && arg_13 == arg_19 && arg_13 == arg_95 && arg_13 == arg_209 && arg_13 == arg_183 && arg_13 == arg_21 && arg_13 == arg_147 && arg_13 == arg_15 && arg_13 == arg_75 && arg_13 == arg_251 && arg_13 == arg_223 && arg_13 == arg_145 && arg_13 == arg_43 && arg_13 == arg_127 && arg_13 == arg_51 && arg_13 == arg_59 && arg_13 == arg_49 && arg_13 == arg_215 && arg_13 == arg_57 && arg_13 == arg_155 && arg_13 == arg_233 && arg_13 == arg_45 && arg_13 == arg_177 && arg_13 == arg_239 && arg_13 == arg_81 && arg_13 == arg_35 && arg_13 == arg_107 && arg_13 == arg_161 && arg_13 == arg_185 && arg_13 == arg_191 && arg_13 == arg_201 && arg_13 == arg_169 && arg_13 == arg_203 && arg_13 == arg_253 && arg_13 == arg_65 && arg_13 == arg_83 && arg_13 == arg_247 && arg_27 == arg_119 && arg_27 == arg_121 && arg_27 == arg_97 && arg_27 == arg_231 && arg_27 == arg_33 && arg_27 == arg_217 && arg_27 == arg_63 && arg_27 == arg_141 && arg_27 == arg_139 && arg_27 == arg_111 && arg_27 == arg_89 && arg_27 == arg_171 && arg_27 == arg_159 && arg_27 == arg_175 && arg_27 == arg_221 && arg_27 == arg_207 && arg_27 == arg_113 && arg_27 == arg_105 && arg_27 == arg_245 && arg_27 == arg_19 && arg_27 == arg_95 && arg_27 == arg_209 && arg_27 == arg_183 && arg_27 == arg_21 && arg_27 == arg_147 && arg_27 == arg_15 && arg_27 == arg_75 && arg_27 == arg_251 && arg_27 == arg_223 && arg_27 == arg_145 && arg_27 == arg_43 && arg_27 == arg_127 && arg_27 == arg_51 && arg_27 == arg_59 && arg_27 == arg_49 && arg_27 == arg_215 && arg_27 == arg_57 && arg_27 == arg_155 && arg_27 == arg_233 && arg_27 == arg_45 && arg_27 == arg_177 && arg_27 == arg_239 && arg_27 == arg_81 && arg_27 == arg_35 && arg_27 == arg_107 && arg_27 == arg_161 && arg_27 == arg_185 && arg_27 == arg_191 && arg_27 == arg_201 && arg_27 == arg_169 && arg_27 == arg_203 && arg_27 == arg_253 && arg_27 == arg_65 && arg_27 == arg_83 && arg_27 == arg_247 && arg_119 == arg_121 && arg_119 == arg_97 && arg_119 == arg_231 && arg_119 == arg_33 && arg_119 == arg_217 && arg_119 == arg_63 && arg_119 == arg_141 && arg_119 == arg_139 && arg_119 == arg_111 && arg_119 == arg_89 && arg_119 == arg_171 && arg_119 == arg_159 && arg_119 == arg_175 && arg_119 == arg_221 && arg_119 == arg_207 && arg_119 == arg_113 && arg_119 == arg_105 && arg_119 == arg_245 && arg_119 == arg_19 && arg_119 == arg_95 && arg_119 == arg_209 && arg_119 == arg_183 && arg_119 == arg_21 && arg_119 == arg_147 && arg_119 == arg_15 && arg_119 == arg_75 && arg_119 == arg_251 && arg_119 == arg_223 && arg_119 == arg_145 && arg_119 == arg_43 && arg_119 == arg_127 && arg_119 == arg_51 && arg_119 == arg_59 && arg_119 == arg_49 && arg_119 == arg_215 && arg_119 == arg_57 && arg_119 == arg_155 && arg_119 == arg_233 && arg_119 == arg_45 && arg_119 == arg_177 && arg_119 == arg_239 && arg_119 == arg_81 && arg_119 == arg_35 && arg_119 == arg_107 && arg_119 == arg_161 && arg_119 == arg_185 && arg_119 == arg_191 && arg_119 == arg_201 && arg_119 == arg_169 && arg_119 == arg_203 && arg_119 == arg_253 && arg_119 == arg_65 && arg_119 == arg_83 && arg_119 == arg_247 && arg_121 == arg_97 && arg_121 == arg_231 && arg_121 == arg_33 && arg_121 == arg_217 && arg_121 == arg_63 && arg_121 == arg_141 && arg_121 == arg_139 && arg_121 == arg_111 && arg_121 == arg_89 && arg_121 == arg_171 && arg_121 == arg_159 && arg_121 == arg_175 && arg_121 == arg_221 && arg_121 == arg_207 && arg_121 == arg_113 && arg_121 == arg_105 && arg_121 == arg_245 && arg_121 == arg_19 && arg_121 == arg_95 && arg_121 == arg_209 && arg_121 == arg_183 && arg_121 == arg_21 && arg_121 == arg_147 && arg_121 == arg_15 && arg_121 == arg_75 && arg_121 == arg_251 && arg_121 == arg_223 && arg_121 == arg_145 && arg_121 == arg_43 && arg_121 == arg_127 && arg_121 == arg_51 && arg_121 == arg_59 && arg_121 == arg_49 && arg_121 == arg_215 && arg_121 == arg_57 && arg_121 == arg_155 && arg_121 == arg_233 && arg_121 == arg_45 && arg_121 == arg_177 && arg_121 == arg_239 && arg_121 == arg_81 && arg_121 == arg_35 && arg_121 == arg_107 && arg_121 == arg_161 && arg_121 == arg_185 && arg_121 == arg_191 && arg_121 == arg_201 && arg_121 == arg_169 && arg_121 == arg_203 && arg_121 == arg_253 && arg_121 == arg_65 && arg_121 == arg_83 && arg_121 == arg_247 && arg_97 == arg_231 && arg_97 == arg_33 && arg_97 == arg_217 && arg_97 == arg_63 && arg_97 == arg_141 && arg_97 == arg_139 && arg_97 == arg_111 && arg_97 == arg_89 && arg_97 == arg_171 && arg_97 == arg_159 && arg_97 == arg_175 && arg_97 == arg_221 && arg_97 == arg_207 && arg_97 == arg_113 && arg_97 == arg_105 && arg_97 == arg_245 && arg_97 == arg_19 && arg_97 == arg_95 && arg_97 == arg_209 && arg_97 == arg_183 && arg_97 == arg_21 && arg_97 == arg_147 && arg_97 == arg_15 && arg_97 == arg_75 && arg_97 == arg_251 && arg_97 == arg_223 && arg_97 == arg_145 && arg_97 == arg_43 && arg_97 == arg_127 && arg_97 == arg_51 && arg_97 == arg_59 && arg_97 == arg_49 && arg_97 == arg_215 && arg_97 == arg_57 && arg_97 == arg_155 && arg_97 == arg_233 && arg_97 == arg_45 && arg_97 == arg_177 && arg_97 == arg_239 && arg_97 == arg_81 && arg_97 == arg_35 && arg_97 == arg_107 && arg_97 == arg_161 && arg_97 == arg_185 && arg_97 == arg_191 && arg_97 == arg_201 && arg_97 == arg_169 && arg_97 == arg_203 && arg_97 == arg_253 && arg_97 == arg_65 && arg_97 == arg_83 && arg_97 == arg_247 && arg_231 == arg_33 && arg_231 == arg_217 && arg_231 == arg_63 && arg_231 == arg_141 && arg_231 == arg_139 && arg_231 == arg_111 && arg_231 == arg_89 && arg_231 == arg_171 && arg_231 == arg_159 && arg_231 == arg_175 && arg_231 == arg_221 && arg_231 == arg_207 && arg_231 == arg_113 && arg_231 == arg_105 && arg_231 == arg_245 && arg_231 == arg_19 && arg_231 == arg_95 && arg_231 == arg_209 && arg_231 == arg_183 && arg_231 == arg_21 && arg_231 == arg_147 && arg_231 == arg_15 && arg_231 == arg_75 && arg_231 == arg_251 && arg_231 == arg_223 && arg_231 == arg_145 && arg_231 == arg_43 && arg_231 == arg_127 && arg_231 == arg_51 && arg_231 == arg_59 && arg_231 == arg_49 && arg_231 == arg_215 && arg_231 == arg_57 && arg_231 == arg_155 && arg_231 == arg_233 && arg_231 == arg_45 && arg_231 == arg_177 && arg_231 == arg_239 && arg_231 == arg_81 && arg_231 == arg_35 && arg_231 == arg_107 && arg_231 == arg_161 && arg_231 == arg_185 && arg_231 == arg_191 && arg_231 == arg_201 && arg_231 == arg_169 && arg_231 == arg_203 && arg_231 == arg_253 && arg_231 == arg_65 && arg_231 == arg_83 && arg_231 == arg_247 && arg_33 == arg_217 && arg_33 == arg_63 && arg_33 == arg_141 && arg_33 == arg_139 && arg_33 == arg_111 && arg_33 == arg_89 && arg_33 == arg_171 && arg_33 == arg_159 && arg_33 == arg_175 && arg_33 == arg_221 && arg_33 == arg_207 && arg_33 == arg_113 && arg_33 == arg_105 && arg_33 == arg_245 && arg_33 == arg_19 && arg_33 == arg_95 && arg_33 == arg_209 && arg_33 == arg_183 && arg_33 == arg_21 && arg_33 == arg_147 && arg_33 == arg_15 && arg_33 == arg_75 && arg_33 == arg_251 && arg_33 == arg_223 && arg_33 == arg_145 && arg_33 == arg_43 && arg_33 == arg_127 && arg_33 == arg_51 && arg_33 == arg_59 && arg_33 == arg_49 && arg_33 == arg_215 && arg_33 == arg_57 && arg_33 == arg_155 && arg_33 == arg_233 && arg_33 == arg_45 && arg_33 == arg_177 && arg_33 == arg_239 && arg_33 == arg_81 && arg_33 == arg_35 && arg_33 == arg_107 && arg_33 == arg_161 && arg_33 == arg_185 && arg_33 == arg_191 && arg_33 == arg_201 && arg_33 == arg_169 && arg_33 == arg_203 && arg_33 == arg_253 && arg_33 == arg_65 && arg_33 == arg_83 && arg_33 == arg_247 && arg_217 == arg_63 && arg_217 == arg_141 && arg_217 == arg_139 && arg_217 == arg_111 && arg_217 == arg_89 && arg_217 == arg_171 && arg_217 == arg_159 && arg_217 == arg_175 && arg_217 == arg_221 && arg_217 == arg_207 && arg_217 == arg_113 && arg_217 == arg_105 && arg_217 == arg_245 && arg_217 == arg_19 && arg_217 == arg_95 && arg_217 == arg_209 && arg_217 == arg_183 && arg_217 == arg_21 && arg_217 == arg_147 && arg_217 == arg_15 && arg_217 == arg_75 && arg_217 == arg_251 && arg_217 == arg_223 && arg_217 == arg_145 && arg_217 == arg_43 && arg_217 == arg_127 && arg_217 == arg_51 && arg_217 == arg_59 && arg_217 == arg_49 && arg_217 == arg_215 && arg_217 == arg_57 && arg_217 == arg_155 && arg_217 == arg_233 && arg_217 == arg_45 && arg_217 == arg_177 && arg_217 == arg_239 && arg_217 == arg_81 && arg_217 == arg_35 && arg_217 == arg_107 && arg_217 == arg_161 && arg_217 == arg_185 && arg_217 == arg_191 && arg_217 == arg_201 && arg_217 == arg_169 && arg_217 == arg_203 && arg_217 == arg_253 && arg_217 == arg_65 && arg_217 == arg_83 && arg_217 == arg_247 && arg_63 == arg_141 && arg_63 == arg_139 && arg_63 == arg_111 && arg_63 == arg_89 && arg_63 == arg_171 && arg_63 == arg_159 && arg_63 == arg_175 && arg_63 == arg_221 && arg_63 == arg_207 && arg_63 == arg_113 && arg_63 == arg_105 && arg_63 == arg_245 && arg_63 == arg_19 && arg_63 == arg_95 && arg_63 == arg_209 && arg_63 == arg_183 && arg_63 == arg_21 && arg_63 == arg_147 && arg_63 == arg_15 && arg_63 == arg_75 && arg_63 == arg_251 && arg_63 == arg_223 && arg_63 == arg_145 && arg_63 == arg_43 && arg_63 == arg_127 && arg_63 == arg_51 && arg_63 == arg_59 && arg_63 == arg_49 && arg_63 == arg_215 && arg_63 == arg_57 && arg_63 == arg_155 && arg_63 == arg_233 && arg_63 == arg_45 && arg_63 == arg_177 && arg_63 == arg_239 && arg_63 == arg_81 && arg_63 == arg_35 && arg_63 == arg_107 && arg_63 == arg_161 && arg_63 == arg_185 && arg_63 == arg_191 && arg_63 == arg_201 && arg_63 == arg_169 && arg_63 == arg_203 && arg_63 == arg_253 && arg_63 == arg_65 && arg_63 == arg_83 && arg_63 == arg_247 && arg_141 == arg_139 && arg_141 == arg_111 && arg_141 == arg_89 && arg_141 == arg_171 && arg_141 == arg_159 && arg_141 == arg_175 && arg_141 == arg_221 && arg_141 == arg_207 && arg_141 == arg_113 && arg_141 == arg_105 && arg_141 == arg_245 && arg_141 == arg_19 && arg_141 == arg_95 && arg_141 == arg_209 && arg_141 == arg_183 && arg_141 == arg_21 && arg_141 == arg_147 && arg_141 == arg_15 && arg_141 == arg_75 && arg_141 == arg_251 && arg_141 == arg_223 && arg_141 == arg_145 && arg_141 == arg_43 && arg_141 == arg_127 && arg_141 == arg_51 && arg_141 == arg_59 && arg_141 == arg_49 && arg_141 == arg_215 && arg_141 == arg_57 && arg_141 == arg_155 && arg_141 == arg_233 && arg_141 == arg_45 && arg_141 == arg_177 && arg_141 == arg_239 && arg_141 == arg_81 && arg_141 == arg_35 && arg_141 == arg_107 && arg_141 == arg_161 && arg_141 == arg_185 && arg_141 == arg_191 && arg_141 == arg_201 && arg_141 == arg_169 && arg_141 == arg_203 && arg_141 == arg_253 && arg_141 == arg_65 && arg_141 == arg_83 && arg_141 == arg_247 && arg_139 == arg_111 && arg_139 == arg_89 && arg_139 == arg_171 && arg_139 == arg_159 && arg_139 == arg_175 && arg_139 == arg_221 && arg_139 == arg_207 && arg_139 == arg_113 && arg_139 == arg_105 && arg_139 == arg_245 && arg_139 == arg_19 && arg_139 == arg_95 && arg_139 == arg_209 && arg_139 == arg_183 && arg_139 == arg_21 && arg_139 == arg_147 && arg_139 == arg_15 && arg_139 == arg_75 && arg_139 == arg_251 && arg_139 == arg_223 && arg_139 == arg_145 && arg_139 == arg_43 && arg_139 == arg_127 && arg_139 == arg_51 && arg_139 == arg_59 && arg_139 == arg_49 && arg_139 == arg_215 && arg_139 == arg_57 && arg_139 == arg_155 && arg_139 == arg_233 && arg_139 == arg_45 && arg_139 == arg_177 && arg_139 == arg_239 && arg_139 == arg_81 && arg_139 == arg_35 && arg_139 == arg_107 && arg_139 == arg_161 && arg_139 == arg_185 && arg_139 == arg_191 && arg_139 == arg_201 && arg_139 == arg_169 && arg_139 == arg_203 && arg_139 == arg_253 && arg_139 == arg_65 && arg_139 == arg_83 && arg_139 == arg_247 && arg_111 == arg_89 && arg_111 == arg_171 && arg_111 == arg_159 && arg_111 == arg_175 && arg_111 == arg_221 && arg_111 == arg_207 && arg_111 == arg_113 && arg_111 == arg_105 && arg_111 == arg_245 && arg_111 == arg_19 && arg_111 == arg_95 && arg_111 == arg_209 && arg_111 == arg_183 && arg_111 == arg_21 && arg_111 == arg_147 && arg_111 == arg_15 && arg_111 == arg_75 && arg_111 == arg_251 && arg_111 == arg_223 && arg_111 == arg_145 && arg_111 == arg_43 && arg_111 == arg_127 && arg_111 == arg_51 && arg_111 == arg_59 && arg_111 == arg_49 && arg_111 == arg_215 && arg_111 == arg_57 && arg_111 == arg_155 && arg_111 == arg_233 && arg_111 == arg_45 && arg_111 == arg_177 && arg_111 == arg_239 && arg_111 == arg_81 && arg_111 == arg_35 && arg_111 == arg_107 && arg_111 == arg_161 && arg_111 == arg_185 && arg_111 == arg_191 && arg_111 == arg_201 && arg_111 == arg_169 && arg_111 == arg_203 && arg_111 == arg_253 && arg_111 == arg_65 && arg_111 == arg_83 && arg_111 == arg_247 && arg_89 == arg_171 && arg_89 == arg_159 && arg_89 == arg_175 && arg_89 == arg_221 && arg_89 == arg_207 && arg_89 == arg_113 && arg_89 == arg_105 && arg_89 == arg_245 && arg_89 == arg_19 && arg_89 == arg_95 && arg_89 == arg_209 && arg_89 == arg_183 && arg_89 == arg_21 && arg_89 == arg_147 && arg_89 == arg_15 && arg_89 == arg_75 && arg_89 == arg_251 && arg_89 == arg_223 && arg_89 == arg_145 && arg_89 == arg_43 && arg_89 == arg_127 && arg_89 == arg_51 && arg_89 == arg_59 && arg_89 == arg_49 && arg_89 == arg_215 && arg_89 == arg_57 && arg_89 == arg_155 && arg_89 == arg_233 && arg_89 == arg_45 && arg_89 == arg_177 && arg_89 == arg_239 && arg_89 == arg_81 && arg_89 == arg_35 && arg_89 == arg_107 && arg_89 == arg_161 && arg_89 == arg_185 && arg_89 == arg_191 && arg_89 == arg_201 && arg_89 == arg_169 && arg_89 == arg_203 && arg_89 == arg_253 && arg_89 == arg_65 && arg_89 == arg_83 && arg_89 == arg_247 && arg_171 == arg_159 && arg_171 == arg_175 && arg_171 == arg_221 && arg_171 == arg_207 && arg_171 == arg_113 && arg_171 == arg_105 && arg_171 == arg_245 && arg_171 == arg_19 && arg_171 == arg_95 && arg_171 == arg_209 && arg_171 == arg_183 && arg_171 == arg_21 && arg_171 == arg_147 && arg_171 == arg_15 && arg_171 == arg_75 && arg_171 == arg_251 && arg_171 == arg_223 && arg_171 == arg_145 && arg_171 == arg_43 && arg_171 == arg_127 && arg_171 == arg_51 && arg_171 == arg_59 && arg_171 == arg_49 && arg_171 == arg_215 && arg_171 == arg_57 && arg_171 == arg_155 && arg_171 == arg_233 && arg_171 == arg_45 && arg_171 == arg_177 && arg_171 == arg_239 && arg_171 == arg_81 && arg_171 == arg_35 && arg_171 == arg_107 && arg_171 == arg_161 && arg_171 == arg_185 && arg_171 == arg_191 && arg_171 == arg_201 && arg_171 == arg_169 && arg_171 == arg_203 && arg_171 == arg_253 && arg_171 == arg_65 && arg_171 == arg_83 && arg_171 == arg_247 && arg_159 == arg_175 && arg_159 == arg_221 && arg_159 == arg_207 && arg_159 == arg_113 && arg_159 == arg_105 && arg_159 == arg_245 && arg_159 == arg_19 && arg_159 == arg_95 && arg_159 == arg_209 && arg_159 == arg_183 && arg_159 == arg_21 && arg_159 == arg_147 && arg_159 == arg_15 && arg_159 == arg_75 && arg_159 == arg_251 && arg_159 == arg_223 && arg_159 == arg_145 && arg_159 == arg_43 && arg_159 == arg_127 && arg_159 == arg_51 && arg_159 == arg_59 && arg_159 == arg_49 && arg_159 == arg_215 && arg_159 == arg_57 && arg_159 == arg_155 && arg_159 == arg_233 && arg_159 == arg_45 && arg_159 == arg_177 && arg_159 == arg_239 && arg_159 == arg_81 && arg_159 == arg_35 && arg_159 == arg_107 && arg_159 == arg_161 && arg_159 == arg_185 && arg_159 == arg_191 && arg_159 == arg_201 && arg_159 == arg_169 && arg_159 == arg_203 && arg_159 == arg_253 && arg_159 == arg_65 && arg_159 == arg_83 && arg_159 == arg_247 && arg_175 == arg_221 && arg_175 == arg_207 && arg_175 == arg_113 && arg_175 == arg_105 && arg_175 == arg_245 && arg_175 == arg_19 && arg_175 == arg_95 && arg_175 == arg_209 && arg_175 == arg_183 && arg_175 == arg_21 && arg_175 == arg_147 && arg_175 == arg_15 && arg_175 == arg_75 && arg_175 == arg_251 && arg_175 == arg_223 && arg_175 == arg_145 && arg_175 == arg_43 && arg_175 == arg_127 && arg_175 == arg_51 && arg_175 == arg_59 && arg_175 == arg_49 && arg_175 == arg_215 && arg_175 == arg_57 && arg_175 == arg_155 && arg_175 == arg_233 && arg_175 == arg_45 && arg_175 == arg_177 && arg_175 == arg_239 && arg_175 == arg_81 && arg_175 == arg_35 && arg_175 == arg_107 && arg_175 == arg_161 && arg_175 == arg_185 && arg_175 == arg_191 && arg_175 == arg_201 && arg_175 == arg_169 && arg_175 == arg_203 && arg_175 == arg_253 && arg_175 == arg_65 && arg_175 == arg_83 && arg_175 == arg_247 && arg_221 == arg_207 && arg_221 == arg_113 && arg_221 == arg_105 && arg_221 == arg_245 && arg_221 == arg_19 && arg_221 == arg_95 && arg_221 == arg_209 && arg_221 == arg_183 && arg_221 == arg_21 && arg_221 == arg_147 && arg_221 == arg_15 && arg_221 == arg_75 && arg_221 == arg_251 && arg_221 == arg_223 && arg_221 == arg_145 && arg_221 == arg_43 && arg_221 == arg_127 && arg_221 == arg_51 && arg_221 == arg_59 && arg_221 == arg_49 && arg_221 == arg_215 && arg_221 == arg_57 && arg_221 == arg_155 && arg_221 == arg_233 && arg_221 == arg_45 && arg_221 == arg_177 && arg_221 == arg_239 && arg_221 == arg_81 && arg_221 == arg_35 && arg_221 == arg_107 && arg_221 == arg_161 && arg_221 == arg_185 && arg_221 == arg_191 && arg_221 == arg_201 && arg_221 == arg_169 && arg_221 == arg_203 && arg_221 == arg_253 && arg_221 == arg_65 && arg_221 == arg_83 && arg_221 == arg_247 && arg_207 == arg_113 && arg_207 == arg_105 && arg_207 == arg_245 && arg_207 == arg_19 && arg_207 == arg_95 && arg_207 == arg_209 && arg_207 == arg_183 && arg_207 == arg_21 && arg_207 == arg_147 && arg_207 == arg_15 && arg_207 == arg_75 && arg_207 == arg_251 && arg_207 == arg_223 && arg_207 == arg_145 && arg_207 == arg_43 && arg_207 == arg_127 && arg_207 == arg_51 && arg_207 == arg_59 && arg_207 == arg_49 && arg_207 == arg_215 && arg_207 == arg_57 && arg_207 == arg_155 && arg_207 == arg_233 && arg_207 == arg_45 && arg_207 == arg_177 && arg_207 == arg_239 && arg_207 == arg_81 && arg_207 == arg_35 && arg_207 == arg_107 && arg_207 == arg_161 && arg_207 == arg_185 && arg_207 == arg_191 && arg_207 == arg_201 && arg_207 == arg_169 && arg_207 == arg_203 && arg_207 == arg_253 && arg_207 == arg_65 && arg_207 == arg_83 && arg_207 == arg_247 && arg_113 == arg_105 && arg_113 == arg_245 && arg_113 == arg_19 && arg_113 == arg_95 && arg_113 == arg_209 && arg_113 == arg_183 && arg_113 == arg_21 && arg_113 == arg_147 && arg_113 == arg_15 && arg_113 == arg_75 && arg_113 == arg_251 && arg_113 == arg_223 && arg_113 == arg_145 && arg_113 == arg_43 && arg_113 == arg_127 && arg_113 == arg_51 && arg_113 == arg_59 && arg_113 == arg_49 && arg_113 == arg_215 && arg_113 == arg_57 && arg_113 == arg_155 && arg_113 == arg_233 && arg_113 == arg_45 && arg_113 == arg_177 && arg_113 == arg_239 && arg_113 == arg_81 && arg_113 == arg_35 && arg_113 == arg_107 && arg_113 == arg_161 && arg_113 == arg_185 && arg_113 == arg_191 && arg_113 == arg_201 && arg_113 == arg_169 && arg_113 == arg_203 && arg_113 == arg_253 && arg_113 == arg_65 && arg_113 == arg_83 && arg_113 == arg_247 && arg_105 == arg_245 && arg_105 == arg_19 && arg_105 == arg_95 && arg_105 == arg_209 && arg_105 == arg_183 && arg_105 == arg_21 && arg_105 == arg_147 && arg_105 == arg_15 && arg_105 == arg_75 && arg_105 == arg_251 && arg_105 == arg_223 && arg_105 == arg_145 && arg_105 == arg_43 && arg_105 == arg_127 && arg_105 == arg_51 && arg_105 == arg_59 && arg_105 == arg_49 && arg_105 == arg_215 && arg_105 == arg_57 && arg_105 == arg_155 && arg_105 == arg_233 && arg_105 == arg_45 && arg_105 == arg_177 && arg_105 == arg_239 && arg_105 == arg_81 && arg_105 == arg_35 && arg_105 == arg_107 && arg_105 == arg_161 && arg_105 == arg_185 && arg_105 == arg_191 && arg_105 == arg_201 && arg_105 == arg_169 && arg_105 == arg_203 && arg_105 == arg_253 && arg_105 == arg_65 && arg_105 == arg_83 && arg_105 == arg_247 && arg_245 == arg_19 && arg_245 == arg_95 && arg_245 == arg_209 && arg_245 == arg_183 && arg_245 == arg_21 && arg_245 == arg_147 && arg_245 == arg_15 && arg_245 == arg_75 && arg_245 == arg_251 && arg_245 == arg_223 && arg_245 == arg_145 && arg_245 == arg_43 && arg_245 == arg_127 && arg_245 == arg_51 && arg_245 == arg_59 && arg_245 == arg_49 && arg_245 == arg_215 && arg_245 == arg_57 && arg_245 == arg_155 && arg_245 == arg_233 && arg_245 == arg_45 && arg_245 == arg_177 && arg_245 == arg_239 && arg_245 == arg_81 && arg_245 == arg_35 && arg_245 == arg_107 && arg_245 == arg_161 && arg_245 == arg_185 && arg_245 == arg_191 && arg_245 == arg_201 && arg_245 == arg_169 && arg_245 == arg_203 && arg_245 == arg_253 && arg_245 == arg_65 && arg_245 == arg_83 && arg_245 == arg_247 && arg_19 == arg_95 && arg_19 == arg_209 && arg_19 == arg_183 && arg_19 == arg_21 && arg_19 == arg_147 && arg_19 == arg_15 && arg_19 == arg_75 && arg_19 == arg_251 && arg_19 == arg_223 && arg_19 == arg_145 && arg_19 == arg_43 && arg_19 == arg_127 && arg_19 == arg_51 && arg_19 == arg_59 && arg_19 == arg_49 && arg_19 == arg_215 && arg_19 == arg_57 && arg_19 == arg_155 && arg_19 == arg_233 && arg_19 == arg_45 && arg_19 == arg_177 && arg_19 == arg_239 && arg_19 == arg_81 && arg_19 == arg_35 && arg_19 == arg_107 && arg_19 == arg_161 && arg_19 == arg_185 && arg_19 == arg_191 && arg_19 == arg_201 && arg_19 == arg_169 && arg_19 == arg_203 && arg_19 == arg_253 && arg_19 == arg_65 && arg_19 == arg_83 && arg_19 == arg_247 && arg_95 == arg_209 && arg_95 == arg_183 && arg_95 == arg_21 && arg_95 == arg_147 && arg_95 == arg_15 && arg_95 == arg_75 && arg_95 == arg_251 && arg_95 == arg_223 && arg_95 == arg_145 && arg_95 == arg_43 && arg_95 == arg_127 && arg_95 == arg_51 && arg_95 == arg_59 && arg_95 == arg_49 && arg_95 == arg_215 && arg_95 == arg_57 && arg_95 == arg_155 && arg_95 == arg_233 && arg_95 == arg_45 && arg_95 == arg_177 && arg_95 == arg_239 && arg_95 == arg_81 && arg_95 == arg_35 && arg_95 == arg_107 && arg_95 == arg_161 && arg_95 == arg_185 && arg_95 == arg_191 && arg_95 == arg_201 && arg_95 == arg_169 && arg_95 == arg_203 && arg_95 == arg_253 && arg_95 == arg_65 && arg_95 == arg_83 && arg_95 == arg_247 && arg_209 == arg_183 && arg_209 == arg_21 && arg_209 == arg_147 && arg_209 == arg_15 && arg_209 == arg_75 && arg_209 == arg_251 && arg_209 == arg_223 && arg_209 == arg_145 && arg_209 == arg_43 && arg_209 == arg_127 && arg_209 == arg_51 && arg_209 == arg_59 && arg_209 == arg_49 && arg_209 == arg_215 && arg_209 == arg_57 && arg_209 == arg_155 && arg_209 == arg_233 && arg_209 == arg_45 && arg_209 == arg_177 && arg_209 == arg_239 && arg_209 == arg_81 && arg_209 == arg_35 && arg_209 == arg_107 && arg_209 == arg_161 && arg_209 == arg_185 && arg_209 == arg_191 && arg_209 == arg_201 && arg_209 == arg_169 && arg_209 == arg_203 && arg_209 == arg_253 && arg_209 == arg_65 && arg_209 == arg_83 && arg_209 == arg_247 && arg_183 == arg_21 && arg_183 == arg_147 && arg_183 == arg_15 && arg_183 == arg_75 && arg_183 == arg_251 && arg_183 == arg_223 && arg_183 == arg_145 && arg_183 == arg_43 && arg_183 == arg_127 && arg_183 == arg_51 && arg_183 == arg_59 && arg_183 == arg_49 && arg_183 == arg_215 && arg_183 == arg_57 && arg_183 == arg_155 && arg_183 == arg_233 && arg_183 == arg_45 && arg_183 == arg_177 && arg_183 == arg_239 && arg_183 == arg_81 && arg_183 == arg_35 && arg_183 == arg_107 && arg_183 == arg_161 && arg_183 == arg_185 && arg_183 == arg_191 && arg_183 == arg_201 && arg_183 == arg_169 && arg_183 == arg_203 && arg_183 == arg_253 && arg_183 == arg_65 && arg_183 == arg_83 && arg_183 == arg_247 && arg_21 == arg_147 && arg_21 == arg_15 && arg_21 == arg_75 && arg_21 == arg_251 && arg_21 == arg_223 && arg_21 == arg_145 && arg_21 == arg_43 && arg_21 == arg_127 && arg_21 == arg_51 && arg_21 == arg_59 && arg_21 == arg_49 && arg_21 == arg_215 && arg_21 == arg_57 && arg_21 == arg_155 && arg_21 == arg_233 && arg_21 == arg_45 && arg_21 == arg_177 && arg_21 == arg_239 && arg_21 == arg_81 && arg_21 == arg_35 && arg_21 == arg_107 && arg_21 == arg_161 && arg_21 == arg_185 && arg_21 == arg_191 && arg_21 == arg_201 && arg_21 == arg_169 && arg_21 == arg_203 && arg_21 == arg_253 && arg_21 == arg_65 && arg_21 == arg_83 && arg_21 == arg_247 && arg_147 == arg_15 && arg_147 == arg_75 && arg_147 == arg_251 && arg_147 == arg_223 && arg_147 == arg_145 && arg_147 == arg_43 && arg_147 == arg_127 && arg_147 == arg_51 && arg_147 == arg_59 && arg_147 == arg_49 && arg_147 == arg_215 && arg_147 == arg_57 && arg_147 == arg_155 && arg_147 == arg_233 && arg_147 == arg_45 && arg_147 == arg_177 && arg_147 == arg_239 && arg_147 == arg_81 && arg_147 == arg_35 && arg_147 == arg_107 && arg_147 == arg_161 && arg_147 == arg_185 && arg_147 == arg_191 && arg_147 == arg_201 && arg_147 == arg_169 && arg_147 == arg_203 && arg_147 == arg_253 && arg_147 == arg_65 && arg_147 == arg_83 && arg_147 == arg_247 && arg_15 == arg_75 && arg_15 == arg_251 && arg_15 == arg_223 && arg_15 == arg_145 && arg_15 == arg_43 && arg_15 == arg_127 && arg_15 == arg_51 && arg_15 == arg_59 && arg_15 == arg_49 && arg_15 == arg_215 && arg_15 == arg_57 && arg_15 == arg_155 && arg_15 == arg_233 && arg_15 == arg_45 && arg_15 == arg_177 && arg_15 == arg_239 && arg_15 == arg_81 && arg_15 == arg_35 && arg_15 == arg_107 && arg_15 == arg_161 && arg_15 == arg_185 && arg_15 == arg_191 && arg_15 == arg_201 && arg_15 == arg_169 && arg_15 == arg_203 && arg_15 == arg_253 && arg_15 == arg_65 && arg_15 == arg_83 && arg_15 == arg_247 && arg_75 == arg_251 && arg_75 == arg_223 && arg_75 == arg_145 && arg_75 == arg_43 && arg_75 == arg_127 && arg_75 == arg_51 && arg_75 == arg_59 && arg_75 == arg_49 && arg_75 == arg_215 && arg_75 == arg_57 && arg_75 == arg_155 && arg_75 == arg_233 && arg_75 == arg_45 && arg_75 == arg_177 && arg_75 == arg_239 && arg_75 == arg_81 && arg_75 == arg_35 && arg_75 == arg_107 && arg_75 == arg_161 && arg_75 == arg_185 && arg_75 == arg_191 && arg_75 == arg_201 && arg_75 == arg_169 && arg_75 == arg_203 && arg_75 == arg_253 && arg_75 == arg_65 && arg_75 == arg_83 && arg_75 == arg_247 && arg_251 == arg_223 && arg_251 == arg_145 && arg_251 == arg_43 && arg_251 == arg_127 && arg_251 == arg_51 && arg_251 == arg_59 && arg_251 == arg_49 && arg_251 == arg_215 && arg_251 == arg_57 && arg_251 == arg_155 && arg_251 == arg_233 && arg_251 == arg_45 && arg_251 == arg_177 && arg_251 == arg_239 && arg_251 == arg_81 && arg_251 == arg_35 && arg_251 == arg_107 && arg_251 == arg_161 && arg_251 == arg_185 && arg_251 == arg_191 && arg_251 == arg_201 && arg_251 == arg_169 && arg_251 == arg_203 && arg_251 == arg_253 && arg_251 == arg_65 && arg_251 == arg_83 && arg_251 == arg_247 && arg_223 == arg_145 && arg_223 == arg_43 && arg_223 == arg_127 && arg_223 == arg_51 && arg_223 == arg_59 && arg_223 == arg_49 && arg_223 == arg_215 && arg_223 == arg_57 && arg_223 == arg_155 && arg_223 == arg_233 && arg_223 == arg_45 && arg_223 == arg_177 && arg_223 == arg_239 && arg_223 == arg_81 && arg_223 == arg_35 && arg_223 == arg_107 && arg_223 == arg_161 && arg_223 == arg_185 && arg_223 == arg_191 && arg_223 == arg_201 && arg_223 == arg_169 && arg_223 == arg_203 && arg_223 == arg_253 && arg_223 == arg_65 && arg_223 == arg_83 && arg_223 == arg_247 && arg_145 == arg_43 && arg_145 == arg_127 && arg_145 == arg_51 && arg_145 == arg_59 && arg_145 == arg_49 && arg_145 == arg_215 && arg_145 == arg_57 && arg_145 == arg_155 && arg_145 == arg_233 && arg_145 == arg_45 && arg_145 == arg_177 && arg_145 == arg_239 && arg_145 == arg_81 && arg_145 == arg_35 && arg_145 == arg_107 && arg_145 == arg_161 && arg_145 == arg_185 && arg_145 == arg_191 && arg_145 == arg_201 && arg_145 == arg_169 && arg_145 == arg_203 && arg_145 == arg_253 && arg_145 == arg_65 && arg_145 == arg_83 && arg_145 == arg_247 && arg_43 == arg_127 && arg_43 == arg_51 && arg_43 == arg_59 && arg_43 == arg_49 && arg_43 == arg_215 && arg_43 == arg_57 && arg_43 == arg_155 && arg_43 == arg_233 && arg_43 == arg_45 && arg_43 == arg_177 && arg_43 == arg_239 && arg_43 == arg_81 && arg_43 == arg_35 && arg_43 == arg_107 && arg_43 == arg_161 && arg_43 == arg_185 && arg_43 == arg_191 && arg_43 == arg_201 && arg_43 == arg_169 && arg_43 == arg_203 && arg_43 == arg_253 && arg_43 == arg_65 && arg_43 == arg_83 && arg_43 == arg_247 && arg_127 == arg_51 && arg_127 == arg_59 && arg_127 == arg_49 && arg_127 == arg_215 && arg_127 == arg_57 && arg_127 == arg_155 && arg_127 == arg_233 && arg_127 == arg_45 && arg_127 == arg_177 && arg_127 == arg_239 && arg_127 == arg_81 && arg_127 == arg_35 && arg_127 == arg_107 && arg_127 == arg_161 && arg_127 == arg_185 && arg_127 == arg_191 && arg_127 == arg_201 && arg_127 == arg_169 && arg_127 == arg_203 && arg_127 == arg_253 && arg_127 == arg_65 && arg_127 == arg_83 && arg_127 == arg_247 && arg_51 == arg_59 && arg_51 == arg_49 && arg_51 == arg_215 && arg_51 == arg_57 && arg_51 == arg_155 && arg_51 == arg_233 && arg_51 == arg_45 && arg_51 == arg_177 && arg_51 == arg_239 && arg_51 == arg_81 && arg_51 == arg_35 && arg_51 == arg_107 && arg_51 == arg_161 && arg_51 == arg_185 && arg_51 == arg_191 && arg_51 == arg_201 && arg_51 == arg_169 && arg_51 == arg_203 && arg_51 == arg_253 && arg_51 == arg_65 && arg_51 == arg_83 && arg_51 == arg_247 && arg_59 == arg_49 && arg_59 == arg_215 && arg_59 == arg_57 && arg_59 == arg_155 && arg_59 == arg_233 && arg_59 == arg_45 && arg_59 == arg_177 && arg_59 == arg_239 && arg_59 == arg_81 && arg_59 == arg_35 && arg_59 == arg_107 && arg_59 == arg_161 && arg_59 == arg_185 && arg_59 == arg_191 && arg_59 == arg_201 && arg_59 == arg_169 && arg_59 == arg_203 && arg_59 == arg_253 && arg_59 == arg_65 && arg_59 == arg_83 && arg_59 == arg_247 && arg_49 == arg_215 && arg_49 == arg_57 && arg_49 == arg_155 && arg_49 == arg_233 && arg_49 == arg_45 && arg_49 == arg_177 && arg_49 == arg_239 && arg_49 == arg_81 && arg_49 == arg_35 && arg_49 == arg_107 && arg_49 == arg_161 && arg_49 == arg_185 && arg_49 == arg_191 && arg_49 == arg_201 && arg_49 == arg_169 && arg_49 == arg_203 && arg_49 == arg_253 && arg_49 == arg_65 && arg_49 == arg_83 && arg_49 == arg_247 && arg_215 == arg_57 && arg_215 == arg_155 && arg_215 == arg_233 && arg_215 == arg_45 && arg_215 == arg_177 && arg_215 == arg_239 && arg_215 == arg_81 && arg_215 == arg_35 && arg_215 == arg_107 && arg_215 == arg_161 && arg_215 == arg_185 && arg_215 == arg_191 && arg_215 == arg_201 && arg_215 == arg_169 && arg_215 == arg_203 && arg_215 == arg_253 && arg_215 == arg_65 && arg_215 == arg_83 && arg_215 == arg_247 && arg_57 == arg_155 && arg_57 == arg_233 && arg_57 == arg_45 && arg_57 == arg_177 && arg_57 == arg_239 && arg_57 == arg_81 && arg_57 == arg_35 && arg_57 == arg_107 && arg_57 == arg_161 && arg_57 == arg_185 && arg_57 == arg_191 && arg_57 == arg_201 && arg_57 == arg_169 && arg_57 == arg_203 && arg_57 == arg_253 && arg_57 == arg_65 && arg_57 == arg_83 && arg_57 == arg_247 && arg_155 == arg_233 && arg_155 == arg_45 && arg_155 == arg_177 && arg_155 == arg_239 && arg_155 == arg_81 && arg_155 == arg_35 && arg_155 == arg_107 && arg_155 == arg_161 && arg_155 == arg_185 && arg_155 == arg_191 && arg_155 == arg_201 && arg_155 == arg_169 && arg_155 == arg_203 && arg_155 == arg_253 && arg_155 == arg_65 && arg_155 == arg_83 && arg_155 == arg_247 && arg_233 == arg_45 && arg_233 == arg_177 && arg_233 == arg_239 && arg_233 == arg_81 && arg_233 == arg_35 && arg_233 == arg_107 && arg_233 == arg_161 && arg_233 == arg_185 && arg_233 == arg_191 && arg_233 == arg_201 && arg_233 == arg_169 && arg_233 == arg_203 && arg_233 == arg_253 && arg_233 == arg_65 && arg_233 == arg_83 && arg_233 == arg_247 && arg_45 == arg_177 && arg_45 == arg_239 && arg_45 == arg_81 && arg_45 == arg_35 && arg_45 == arg_107 && arg_45 == arg_161 && arg_45 == arg_185 && arg_45 == arg_191 && arg_45 == arg_201 && arg_45 == arg_169 && arg_45 == arg_203 && arg_45 == arg_253 && arg_45 == arg_65 && arg_45 == arg_83 && arg_45 == arg_247 && arg_177 == arg_239 && arg_177 == arg_81 && arg_177 == arg_35 && arg_177 == arg_107 && arg_177 == arg_161 && arg_177 == arg_185 && arg_177 == arg_191 && arg_177 == arg_201 && arg_177 == arg_169 && arg_177 == arg_203 && arg_177 == arg_253 && arg_177 == arg_65 && arg_177 == arg_83 && arg_177 == arg_247 && arg_239 == arg_81 && arg_239 == arg_35 && arg_239 == arg_107 && arg_239 == arg_161 && arg_239 == arg_185 && arg_239 == arg_191 && arg_239 == arg_201 && arg_239 == arg_169 && arg_239 == arg_203 && arg_239 == arg_253 && arg_239 == arg_65 && arg_239 == arg_83 && arg_239 == arg_247 && arg_81 == arg_35 && arg_81 == arg_107 && arg_81 == arg_161 && arg_81 == arg_185 && arg_81 == arg_191 && arg_81 == arg_201 && arg_81 == arg_169 && arg_81 == arg_203 && arg_81 == arg_253 && arg_81 == arg_65 && arg_81 == arg_83 && arg_81 == arg_247 && arg_35 == arg_107 && arg_35 == arg_161 && arg_35 == arg_185 && arg_35 == arg_191 && arg_35 == arg_201 && arg_35 == arg_169 && arg_35 == arg_203 && arg_35 == arg_253 && arg_35 == arg_65 && arg_35 == arg_83 && arg_35 == arg_247 && arg_107 == arg_161 && arg_107 == arg_185 && arg_107 == arg_191 && arg_107 == arg_201 && arg_107 == arg_169 && arg_107 == arg_203 && arg_107 == arg_253 && arg_107 == arg_65 && arg_107 == arg_83 && arg_107 == arg_247 && arg_161 == arg_185 && arg_161 == arg_191 && arg_161 == arg_201 && arg_161 == arg_169 && arg_161 == arg_203 && arg_161 == arg_253 && arg_161 == arg_65 && arg_161 == arg_83 && arg_161 == arg_247 && arg_185 == arg_191 && arg_185 == arg_201 && arg_185 == arg_169 && arg_185 == arg_203 && arg_185 == arg_253 && arg_185 == arg_65 && arg_185 == arg_83 && arg_185 == arg_247 && arg_191 == arg_201 && arg_191 == arg_169 && arg_191 == arg_203 && arg_191 == arg_253 && arg_191 == arg_65 && arg_191 == arg_83 && arg_191 == arg_247 && arg_201 == arg_169 && arg_201 == arg_203 && arg_201 == arg_253 && arg_201 == arg_65 && arg_201 == arg_83 && arg_201 == arg_247 && arg_169 == arg_203 && arg_169 == arg_253 && arg_169 == arg_65 && arg_169 == arg_83 && arg_169 == arg_247 && arg_203 == arg_253 && arg_203 == arg_65 && arg_203 == arg_83 && arg_203 == arg_247 && arg_253 == arg_65 && arg_253 == arg_83 && arg_253 == arg_247 && arg_65 == arg_83 && arg_65 == arg_247 && arg_83 == arg_247 {
let rep_insts = pos.func.dfg.inst_results(inst);
let rep_insts_0 = rep_insts[0];
pos.func.dfg.change_to_alias(arg_1, rep_insts_0);
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1390(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_3 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_3[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_4 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_4[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_3 == 12 {
match pos.func.dfg.value_def(arg_4[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_6) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_7 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_6 == 10 {
if rhs_5 == 3072 {
match pos.func.dfg.value_def(arg_3[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_9 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_9 == 58367 {
if rhs_2 == -256 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_9 = arg;
let rhs_12 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_12 == 250 {
if rhs_1 == 65535 {
if arg_7 != arg_8 && arg_7 != arg_9 && arg_7 != arg_5 && arg_8 == arg_9 && arg_8 != arg_5 && arg_9 != arg_5 {
let rhs_inst_14 = pos.ins().band_imm(arg_2, 65530_u64 as i64);
let rhs_inst_15 = pos.ins().bnot(rhs_inst_14);
pos.func.dfg.replace(inst).bnot(rhs_inst_15);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1391(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_4 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_4[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_5) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_6 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_6[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_7 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_7) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_8 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_8[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_9 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_9) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_10 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_10[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_11 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_11) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_12 = arg;
let rhs_7 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_12) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_13 = args;
match opcode {
Opcode::Imul => {
if rhs_7 == 4294967295 {
if rhs_6 == 1 {
match pos.func.dfg.value_def(arg_10[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_14 = arg;
let rhs_10 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_14) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_15 = args;
match opcode {
Opcode::Imul => {
if rhs_10 == 4294967295 {
if rhs_5 == 2 {
match pos.func.dfg.value_def(arg_8[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_16 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_16[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_17 = arg;
let rhs_13 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_17) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_18 = arg;
let rhs_14 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_18) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_19 = args;
match opcode {
Opcode::Imul => {
if rhs_14 == 4294967295 {
if rhs_13 == 1 {
match pos.func.dfg.value_def(arg_16[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_20 = arg;
let rhs_17 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_20) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_21 = args;
match opcode {
Opcode::Imul => {
if rhs_17 == 4294967295 {
if rhs_4 == 4 {
match pos.func.dfg.value_def(arg_6[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_22 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_22[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_23 = arg;
let rhs_20 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_23) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_24 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_24[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_25 = arg;
let rhs_21 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_25) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_26 = arg;
let rhs_22 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_26) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_27 = args;
match opcode {
Opcode::Imul => {
if rhs_22 == 4294967295 {
if rhs_21 == 1 {
match pos.func.dfg.value_def(arg_24[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_28 = arg;
let rhs_25 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_28) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_29 = args;
match opcode {
Opcode::Imul => {
if rhs_25 == 4294967295 {
if rhs_20 == 2 {
match pos.func.dfg.value_def(arg_22[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_30 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_30[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_31 = arg;
let rhs_28 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_31) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_32 = arg;
let rhs_29 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_32) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_33 = args;
match opcode {
Opcode::Imul => {
if rhs_29 == 4294967295 {
if rhs_28 == 1 {
match pos.func.dfg.value_def(arg_30[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_34 = arg;
let rhs_32 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_34) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_35 = args;
match opcode {
Opcode::Imul => {
if rhs_32 == 4294967295 {
if rhs_3 == 8 {
match pos.func.dfg.value_def(arg_4[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_36 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_36[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_37 = arg;
let rhs_35 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_37) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_38 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_38[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_39 = arg;
let rhs_36 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_39) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_40 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_40[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_41 = arg;
let rhs_37 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_41) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_42 = arg;
let rhs_38 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_42) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_43 = args;
match opcode {
Opcode::Imul => {
if rhs_38 == 4294967295 {
if rhs_37 == 1 {
match pos.func.dfg.value_def(arg_40[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_44 = arg;
let rhs_41 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_44) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_45 = args;
match opcode {
Opcode::Imul => {
if rhs_41 == 4294967295 {
if rhs_36 == 2 {
match pos.func.dfg.value_def(arg_38[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_46 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_46[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_47 = arg;
let rhs_44 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_47) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_48 = arg;
let rhs_45 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_48) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_49 = args;
match opcode {
Opcode::Imul => {
if rhs_45 == 4294967295 {
if rhs_44 == 1 {
match pos.func.dfg.value_def(arg_46[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_50 = arg;
let rhs_48 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_50) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_51 = args;
match opcode {
Opcode::Imul => {
if rhs_48 == 4294967295 {
if rhs_35 == 4 {
match pos.func.dfg.value_def(arg_36[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_52 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_52[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_53 = arg;
let rhs_51 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_53) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_54 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_54[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_55 = arg;
let rhs_52 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_55) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_56 = arg;
let rhs_53 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_56) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_57 = args;
match opcode {
Opcode::Imul => {
if rhs_53 == 4294967295 {
if rhs_52 == 1 {
match pos.func.dfg.value_def(arg_54[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_58 = arg;
let rhs_56 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_58) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_59 = args;
match opcode {
Opcode::Imul => {
if rhs_56 == 4294967295 {
if rhs_51 == 2 {
match pos.func.dfg.value_def(arg_52[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_60 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_60[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_61 = arg;
let rhs_59 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_61) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_62 = arg;
let rhs_60 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_62) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_63 = args;
match opcode {
Opcode::Imul => {
if rhs_60 == 4294967295 {
if rhs_59 == 1 {
match pos.func.dfg.value_def(arg_60[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_64 = arg;
let rhs_63 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_64) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_65 = args;
match opcode {
Opcode::Imul => {
if rhs_63 == 4294967295 {
if rhs_2 == 16 {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_66 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_66[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_67 = arg;
let rhs_66 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_67) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_68 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_68[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_69 = arg;
let rhs_67 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_69) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_70 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_70[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_71 = arg;
let rhs_68 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_71) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_72 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_72[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_73 = arg;
let rhs_69 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_73) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_74 = arg;
let rhs_70 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_74) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_75 = args;
match opcode {
Opcode::Imul => {
if rhs_70 == 4294967295 {
if rhs_69 == 1 {
match pos.func.dfg.value_def(arg_72[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_76 = arg;
let rhs_73 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_76) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_77 = args;
match opcode {
Opcode::Imul => {
if rhs_73 == 4294967295 {
if rhs_68 == 2 {
match pos.func.dfg.value_def(arg_70[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_78 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_78[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_79 = arg;
let rhs_76 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_79) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_80 = arg;
let rhs_77 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_80) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_81 = args;
match opcode {
Opcode::Imul => {
if rhs_77 == 4294967295 {
if rhs_76 == 1 {
match pos.func.dfg.value_def(arg_78[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_82 = arg;
let rhs_80 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_82) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_83 = args;
match opcode {
Opcode::Imul => {
if rhs_80 == 4294967295 {
if rhs_67 == 4 {
match pos.func.dfg.value_def(arg_68[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_84 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_84[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_85 = arg;
let rhs_83 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_85) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_86 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_86[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_87 = arg;
let rhs_84 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_87) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_88 = arg;
let rhs_85 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_88) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_89 = args;
match opcode {
Opcode::Imul => {
if rhs_85 == 4294967295 {
if rhs_84 == 1 {
match pos.func.dfg.value_def(arg_86[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_90 = arg;
let rhs_88 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_90) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_91 = args;
match opcode {
Opcode::Imul => {
if rhs_88 == 4294967295 {
if rhs_83 == 2 {
match pos.func.dfg.value_def(arg_84[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_92 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_92[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_93 = arg;
let rhs_91 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_93) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_94 = arg;
let rhs_92 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_94) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_95 = args;
match opcode {
Opcode::Imul => {
if rhs_92 == 4294967295 {
if rhs_91 == 1 {
match pos.func.dfg.value_def(arg_92[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_96 = arg;
let rhs_95 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_96) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_97 = args;
match opcode {
Opcode::Imul => {
if rhs_95 == 4294967295 {
if rhs_66 == 8 {
match pos.func.dfg.value_def(arg_66[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_98 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_98[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_99 = arg;
let rhs_98 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_99) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_100 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_100[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_101 = arg;
let rhs_99 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_101) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_102 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_102[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_103 = arg;
let rhs_100 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_103) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_104 = arg;
let rhs_101 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_104) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_105 = args;
match opcode {
Opcode::Imul => {
if rhs_101 == 4294967295 {
if rhs_100 == 1 {
match pos.func.dfg.value_def(arg_102[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_106 = arg;
let rhs_104 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_106) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_107 = args;
match opcode {
Opcode::Imul => {
if rhs_104 == 4294967295 {
if rhs_99 == 2 {
match pos.func.dfg.value_def(arg_100[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_108 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_108[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_109 = arg;
let rhs_107 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_109) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_110 = arg;
let rhs_108 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_110) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_111 = args;
match opcode {
Opcode::Imul => {
if rhs_108 == 4294967295 {
if rhs_107 == 1 {
match pos.func.dfg.value_def(arg_108[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_112 = arg;
let rhs_111 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_112) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_113 = args;
match opcode {
Opcode::Imul => {
if rhs_111 == 4294967295 {
if rhs_98 == 4 {
match pos.func.dfg.value_def(arg_98[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_114 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_114[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_115 = arg;
let rhs_114 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_115) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_116 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_116[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_117 = arg;
let rhs_115 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_117) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_118 = arg;
let rhs_116 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_118) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_119 = args;
match opcode {
Opcode::Imul => {
if rhs_116 == 4294967295 {
if rhs_115 == 1 {
match pos.func.dfg.value_def(arg_116[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_120 = arg;
let rhs_119 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_120) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_121 = args;
match opcode {
Opcode::Imul => {
if rhs_119 == 4294967295 {
if rhs_114 == 2 {
match pos.func.dfg.value_def(arg_114[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_122 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_122[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_123 = arg;
let rhs_122 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_123) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_124 = arg;
let rhs_123 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_124) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_125 = args;
match opcode {
Opcode::Imul => {
if rhs_123 == 4294967295 {
if rhs_122 == 1 {
match pos.func.dfg.value_def(arg_122[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_126 = arg;
let rhs_126 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_126) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_127 = args;
match opcode {
Opcode::Imul => {
if rhs_126 == 4294967295 {
if rhs_1 == 32 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_128 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_128[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_129 = arg;
let rhs_129 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_129) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_130 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_130[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_131 = arg;
let rhs_130 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_131) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_132 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_132[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_133 = arg;
let rhs_131 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_133) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_134 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_134[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_135 = arg;
let rhs_132 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_135) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_136 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_136[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_137 = arg;
let rhs_133 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_137) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_138 = arg;
let rhs_134 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_138) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_139 = args;
match opcode {
Opcode::Imul => {
if rhs_134 == 4294967295 {
if rhs_133 == 1 {
match pos.func.dfg.value_def(arg_136[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_140 = arg;
let rhs_137 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_140) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_141 = args;
match opcode {
Opcode::Imul => {
if rhs_137 == 4294967295 {
if rhs_132 == 2 {
match pos.func.dfg.value_def(arg_134[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_142 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_142[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_143 = arg;
let rhs_140 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_143) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_144 = arg;
let rhs_141 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_144) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_145 = args;
match opcode {
Opcode::Imul => {
if rhs_141 == 4294967295 {
if rhs_140 == 1 {
match pos.func.dfg.value_def(arg_142[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_146 = arg;
let rhs_144 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_146) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_147 = args;
match opcode {
Opcode::Imul => {
if rhs_144 == 4294967295 {
if rhs_131 == 4 {
match pos.func.dfg.value_def(arg_132[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_148 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_148[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_149 = arg;
let rhs_147 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_149) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_150 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_150[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_151 = arg;
let rhs_148 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_151) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_152 = arg;
let rhs_149 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_152) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_153 = args;
match opcode {
Opcode::Imul => {
if rhs_149 == 4294967295 {
if rhs_148 == 1 {
match pos.func.dfg.value_def(arg_150[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_154 = arg;
let rhs_152 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_154) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_155 = args;
match opcode {
Opcode::Imul => {
if rhs_152 == 4294967295 {
if rhs_147 == 2 {
match pos.func.dfg.value_def(arg_148[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_156 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_156[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_157 = arg;
let rhs_155 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_157) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_158 = arg;
let rhs_156 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_158) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_159 = args;
match opcode {
Opcode::Imul => {
if rhs_156 == 4294967295 {
if rhs_155 == 1 {
match pos.func.dfg.value_def(arg_156[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_160 = arg;
let rhs_159 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_160) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_161 = args;
match opcode {
Opcode::Imul => {
if rhs_159 == 4294967295 {
if rhs_130 == 8 {
match pos.func.dfg.value_def(arg_130[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_162 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_162[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_163 = arg;
let rhs_162 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_163) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_164 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_164[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_165 = arg;
let rhs_163 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_165) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_166 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_166[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_167 = arg;
let rhs_164 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_167) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_168 = arg;
let rhs_165 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_168) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_169 = args;
match opcode {
Opcode::Imul => {
if rhs_165 == 4294967295 {
if rhs_164 == 1 {
match pos.func.dfg.value_def(arg_166[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_170 = arg;
let rhs_168 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_170) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_171 = args;
match opcode {
Opcode::Imul => {
if rhs_168 == 4294967295 {
if rhs_163 == 2 {
match pos.func.dfg.value_def(arg_164[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_172 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_172[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_173 = arg;
let rhs_171 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_173) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_174 = arg;
let rhs_172 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_174) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_175 = args;
match opcode {
Opcode::Imul => {
if rhs_172 == 4294967295 {
if rhs_171 == 1 {
match pos.func.dfg.value_def(arg_172[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_176 = arg;
let rhs_175 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_176) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_177 = args;
match opcode {
Opcode::Imul => {
if rhs_175 == 4294967295 {
if rhs_162 == 4 {
match pos.func.dfg.value_def(arg_162[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_178 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_178[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_179 = arg;
let rhs_178 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_179) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_180 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_180[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_181 = arg;
let rhs_179 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_181) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_182 = arg;
let rhs_180 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_182) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_183 = args;
match opcode {
Opcode::Imul => {
if rhs_180 == 4294967295 {
if rhs_179 == 1 {
match pos.func.dfg.value_def(arg_180[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_184 = arg;
let rhs_183 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_184) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_185 = args;
match opcode {
Opcode::Imul => {
if rhs_183 == 4294967295 {
if rhs_178 == 2 {
match pos.func.dfg.value_def(arg_178[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_186 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_186[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_187 = arg;
let rhs_186 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_187) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_188 = arg;
let rhs_187 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_188) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_189 = args;
match opcode {
Opcode::Imul => {
if rhs_187 == 4294967295 {
if rhs_186 == 1 {
match pos.func.dfg.value_def(arg_186[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_190 = arg;
let rhs_190 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_190) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_191 = args;
match opcode {
Opcode::Imul => {
if rhs_190 == 4294967295 {
if rhs_129 == 16 {
match pos.func.dfg.value_def(arg_128[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_192 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_192[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_193 = arg;
let rhs_193 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_193) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_194 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_194[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_195 = arg;
let rhs_194 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_195) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_196 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_196[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_197 = arg;
let rhs_195 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_197) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_198 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_198[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_199 = arg;
let rhs_196 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_199) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_200 = arg;
let rhs_197 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_200) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_201 = args;
match opcode {
Opcode::Imul => {
if rhs_197 == 4294967295 {
if rhs_196 == 1 {
match pos.func.dfg.value_def(arg_198[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_202 = arg;
let rhs_200 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_202) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_203 = args;
match opcode {
Opcode::Imul => {
if rhs_200 == 4294967295 {
if rhs_195 == 2 {
match pos.func.dfg.value_def(arg_196[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_204 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_204[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_205 = arg;
let rhs_203 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_205) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_206 = arg;
let rhs_204 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_206) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_207 = args;
match opcode {
Opcode::Imul => {
if rhs_204 == 4294967295 {
if rhs_203 == 1 {
match pos.func.dfg.value_def(arg_204[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_208 = arg;
let rhs_207 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_208) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_209 = args;
match opcode {
Opcode::Imul => {
if rhs_207 == 4294967295 {
if rhs_194 == 4 {
match pos.func.dfg.value_def(arg_194[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_210 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_210[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_211 = arg;
let rhs_210 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_211) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_212 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_212[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_213 = arg;
let rhs_211 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_213) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_214 = arg;
let rhs_212 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_214) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_215 = args;
match opcode {
Opcode::Imul => {
if rhs_212 == 4294967295 {
if rhs_211 == 1 {
match pos.func.dfg.value_def(arg_212[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_216 = arg;
let rhs_215 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_216) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_217 = args;
match opcode {
Opcode::Imul => {
if rhs_215 == 4294967295 {
if rhs_210 == 2 {
match pos.func.dfg.value_def(arg_210[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_218 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_218[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_219 = arg;
let rhs_218 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_219) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_220 = arg;
let rhs_219 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_220) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_221 = args;
match opcode {
Opcode::Imul => {
if rhs_219 == 4294967295 {
if rhs_218 == 1 {
match pos.func.dfg.value_def(arg_218[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_222 = arg;
let rhs_222 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_222) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_223 = args;
match opcode {
Opcode::Imul => {
if rhs_222 == 4294967295 {
if rhs_193 == 8 {
match pos.func.dfg.value_def(arg_192[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_224 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_224[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_225 = arg;
let rhs_225 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_225) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_226 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_226[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_227 = arg;
let rhs_226 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_227) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_228 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_228[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_229 = arg;
let rhs_227 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_229) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_230 = arg;
let rhs_228 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_230) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_231 = args;
match opcode {
Opcode::Imul => {
if rhs_228 == 4294967295 {
if rhs_227 == 1 {
match pos.func.dfg.value_def(arg_228[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_232 = arg;
let rhs_231 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_232) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_233 = args;
match opcode {
Opcode::Imul => {
if rhs_231 == 4294967295 {
if rhs_226 == 2 {
match pos.func.dfg.value_def(arg_226[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_234 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_234[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_235 = arg;
let rhs_234 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_235) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_236 = arg;
let rhs_235 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_236) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_237 = args;
match opcode {
Opcode::Imul => {
if rhs_235 == 4294967295 {
if rhs_234 == 1 {
match pos.func.dfg.value_def(arg_234[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_238 = arg;
let rhs_238 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_238) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_239 = args;
match opcode {
Opcode::Imul => {
if rhs_238 == 4294967295 {
if rhs_225 == 4 {
match pos.func.dfg.value_def(arg_224[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_240 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_240[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_241 = arg;
let rhs_241 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_241) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_242 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_242[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_243 = arg;
let rhs_242 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_243) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_244 = arg;
let rhs_243 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_244) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_245 = args;
match opcode {
Opcode::Imul => {
if rhs_243 == 4294967295 {
if rhs_242 == 1 {
match pos.func.dfg.value_def(arg_242[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_246 = arg;
let rhs_246 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_246) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_247 = args;
match opcode {
Opcode::Imul => {
if rhs_246 == 4294967295 {
if rhs_241 == 2 {
match pos.func.dfg.value_def(arg_240[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_248 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_248[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_249 = arg;
let rhs_249 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_249) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_250 = arg;
let rhs_250 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_250) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_251 = args;
match opcode {
Opcode::Imul => {
if rhs_250 == 4294967295 {
if rhs_249 == 1 {
match pos.func.dfg.value_def(arg_248[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_252 = arg;
let rhs_253 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_252) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_253 = args;
match opcode {
Opcode::Imul => {
if rhs_253 == 4294967295 {
if arg_237[1] == arg_49[1] && arg_237[1] != arg_113[0] && arg_237[1] == arg_201[1] && arg_237[1] == arg_75[1] && arg_237[1] != arg_185[0] && arg_237[1] == arg_43[1] && arg_237[1] == arg_245[1] && arg_237[1] == arg_57[1] && arg_237[1] != arg_209[0] && arg_237[1] != arg_15[0] && arg_237[1] == arg_105[1] && arg_237[1] != arg_107[0] && arg_237[1] == arg_185[1] && arg_237[1] != arg_51[0] && arg_237[1] != arg_147[0] && arg_237[1] != arg_145[0] && arg_237[1] != arg_215[0] && arg_237[1] == arg_155[1] && arg_237[1] == arg_217[1] && arg_237[1] == arg_253[1] && arg_237[1] != arg_171[0] && arg_237[1] != arg_43[0] && arg_237[1] != arg_239[0] && arg_237[1] == arg_29[1] && arg_237[1] == arg_113[1] && arg_237[1] == arg_203[1] && arg_237[1] == arg_239[1] && arg_237[1] != arg_65[0] && arg_237[1] != arg_191[0] && arg_237[1] != arg_127[0] && arg_237[1] == arg_33[1] && arg_237[1] == arg_13[1] && arg_237[1] == arg_89[1] && arg_237[1] == arg_127[1] && arg_237[1] == arg_223[1] && arg_237[1] == arg_45[1] && arg_237[1] == arg_119[1] && arg_237[1] != arg_59[0] && arg_237[1] == arg_161[1] && arg_237[1] == arg_169[1] && arg_237[1] != arg_35[0] && arg_237[1] == arg_83[1] && arg_237[1] == arg_125[1] && arg_237[1] != arg_217[0] && arg_237[1] != arg_245[0] && arg_237[1] != arg_21[0] && arg_237[1] != arg_97[0] && arg_237[1] != arg_75[0] && arg_237[1] != arg_161[0] && arg_237[1] == arg_209[1] && arg_237[1] == arg_97[1] && arg_237[1] == arg_121[1] && arg_237[1] == arg_247[1] && arg_237[1] != arg_19[0] && arg_237[1] == arg_145[1] && arg_237[1] == arg_251[1] && arg_237[1] != arg_29[0] && arg_237[1] == arg_107[1] && arg_237[1] != arg_231[0] && arg_237[1] != arg_81[0] && arg_237[1] != arg_63[0] && arg_237[1] == arg_215[1] && arg_237[1] == arg_35[1] && arg_237[1] == arg_153[1] && arg_237[1] != arg_121[0] && arg_237[1] != arg_33[0] && arg_237[1] == arg_111[1] && arg_237[1] != arg_177[0] && arg_237[1] != arg_203[0] && arg_237[1] != arg_153[0] && arg_237[1] != arg_95[0] && arg_237[1] != arg_83[0] && arg_237[1] == arg_175[1] && arg_237[1] != arg_159[0] && arg_237[1] != arg_141[0] && arg_237[1] != arg_201[0] && arg_237[1] == arg_177[1] && arg_237[1] != arg_111[0] && arg_237[1] == arg_189[1] && arg_237[1] == arg_27[1] && arg_237[1] == arg_233[1] && arg_237[1] == arg_231[1] && arg_237[1] != arg_175[0] && arg_237[1] != arg_125[0] && arg_237[1] != arg_223[0] && arg_237[1] == arg_207[1] && arg_237[1] == arg_139[1] && arg_237[1] == arg_77[1] && arg_237[1] != arg_183[0] && arg_237[1] != arg_27[0] && arg_237[1] == arg_65[1] && arg_237[1] != arg_49[0] && arg_237[1] != arg_189[0] && arg_237[1] == arg_59[1] && arg_237[1] != arg_105[0] && arg_237[1] != arg_221[0] && arg_237[1] != arg_247[0] && arg_237[1] == arg_19[1] && arg_237[1] != arg_253[0] && arg_237[1] != arg_77[0] && arg_237[1] == arg_15[1] && arg_237[1] == arg_81[1] && arg_237[1] != arg_91[0] && arg_237[1] == arg_91[1] && arg_237[1] != arg_155[0] && arg_237[1] == arg_159[1] && arg_237[1] == arg_191[1] && arg_237[1] == arg_95[1] && arg_237[1] == arg_221[1] && arg_237[1] != arg_251[0] && arg_237[1] != arg_45[0] && arg_237[1] == arg_21[1] && arg_237[1] != arg_139[0] && arg_237[1] == arg_171[1] && arg_237[1] != arg_89[0] && arg_237[1] == arg_183[1] && arg_237[1] == arg_141[1] && arg_237[1] != arg_207[0] && arg_237[1] == arg_51[1] && arg_237[1] != arg_233[0] && arg_237[1] != arg_13[0] && arg_237[1] != arg_237[0] && arg_237[1] == arg_147[1] && arg_237[1] != arg_57[0] && arg_237[1] != arg_119[0] && arg_237[1] == arg_63[1] && arg_237[1] != arg_169[0] && arg_49[1] != arg_113[0] && arg_49[1] == arg_201[1] && arg_49[1] == arg_75[1] && arg_49[1] != arg_185[0] && arg_49[1] == arg_43[1] && arg_49[1] == arg_245[1] && arg_49[1] == arg_57[1] && arg_49[1] != arg_209[0] && arg_49[1] != arg_15[0] && arg_49[1] == arg_105[1] && arg_49[1] != arg_107[0] && arg_49[1] == arg_185[1] && arg_49[1] != arg_51[0] && arg_49[1] != arg_147[0] && arg_49[1] != arg_145[0] && arg_49[1] != arg_215[0] && arg_49[1] == arg_155[1] && arg_49[1] == arg_217[1] && arg_49[1] == arg_253[1] && arg_49[1] != arg_171[0] && arg_49[1] != arg_43[0] && arg_49[1] != arg_239[0] && arg_49[1] == arg_29[1] && arg_49[1] == arg_113[1] && arg_49[1] == arg_203[1] && arg_49[1] == arg_239[1] && arg_49[1] != arg_65[0] && arg_49[1] != arg_191[0] && arg_49[1] != arg_127[0] && arg_49[1] == arg_33[1] && arg_49[1] == arg_13[1] && arg_49[1] == arg_89[1] && arg_49[1] == arg_127[1] && arg_49[1] == arg_223[1] && arg_49[1] == arg_45[1] && arg_49[1] == arg_119[1] && arg_49[1] != arg_59[0] && arg_49[1] == arg_161[1] && arg_49[1] == arg_169[1] && arg_49[1] != arg_35[0] && arg_49[1] == arg_83[1] && arg_49[1] == arg_125[1] && arg_49[1] != arg_217[0] && arg_49[1] != arg_245[0] && arg_49[1] != arg_21[0] && arg_49[1] != arg_97[0] && arg_49[1] != arg_75[0] && arg_49[1] != arg_161[0] && arg_49[1] == arg_209[1] && arg_49[1] == arg_97[1] && arg_49[1] == arg_121[1] && arg_49[1] == arg_247[1] && arg_49[1] != arg_19[0] && arg_49[1] == arg_145[1] && arg_49[1] == arg_251[1] && arg_49[1] != arg_29[0] && arg_49[1] == arg_107[1] && arg_49[1] != arg_231[0] && arg_49[1] != arg_81[0] && arg_49[1] != arg_63[0] && arg_49[1] == arg_215[1] && arg_49[1] == arg_35[1] && arg_49[1] == arg_153[1] && arg_49[1] != arg_121[0] && arg_49[1] != arg_33[0] && arg_49[1] == arg_111[1] && arg_49[1] != arg_177[0] && arg_49[1] != arg_203[0] && arg_49[1] != arg_153[0] && arg_49[1] != arg_95[0] && arg_49[1] != arg_83[0] && arg_49[1] == arg_175[1] && arg_49[1] != arg_159[0] && arg_49[1] != arg_141[0] && arg_49[1] != arg_201[0] && arg_49[1] == arg_177[1] && arg_49[1] != arg_111[0] && arg_49[1] == arg_189[1] && arg_49[1] == arg_27[1] && arg_49[1] == arg_233[1] && arg_49[1] == arg_231[1] && arg_49[1] != arg_175[0] && arg_49[1] != arg_125[0] && arg_49[1] != arg_223[0] && arg_49[1] == arg_207[1] && arg_49[1] == arg_139[1] && arg_49[1] == arg_77[1] && arg_49[1] != arg_183[0] && arg_49[1] != arg_27[0] && arg_49[1] == arg_65[1] && arg_49[1] != arg_49[0] && arg_49[1] != arg_189[0] && arg_49[1] == arg_59[1] && arg_49[1] != arg_105[0] && arg_49[1] != arg_221[0] && arg_49[1] != arg_247[0] && arg_49[1] == arg_19[1] && arg_49[1] != arg_253[0] && arg_49[1] != arg_77[0] && arg_49[1] == arg_15[1] && arg_49[1] == arg_81[1] && arg_49[1] != arg_91[0] && arg_49[1] == arg_91[1] && arg_49[1] != arg_155[0] && arg_49[1] == arg_159[1] && arg_49[1] == arg_191[1] && arg_49[1] == arg_95[1] && arg_49[1] == arg_221[1] && arg_49[1] != arg_251[0] && arg_49[1] != arg_45[0] && arg_49[1] == arg_21[1] && arg_49[1] != arg_139[0] && arg_49[1] == arg_171[1] && arg_49[1] != arg_89[0] && arg_49[1] == arg_183[1] && arg_49[1] == arg_141[1] && arg_49[1] != arg_207[0] && arg_49[1] == arg_51[1] && arg_49[1] != arg_233[0] && arg_49[1] != arg_13[0] && arg_49[1] != arg_237[0] && arg_49[1] == arg_147[1] && arg_49[1] != arg_57[0] && arg_49[1] != arg_119[0] && arg_49[1] == arg_63[1] && arg_49[1] != arg_169[0] && arg_113[0] != arg_201[1] && arg_113[0] != arg_75[1] && arg_113[0] == arg_185[0] && arg_113[0] != arg_43[1] && arg_113[0] != arg_245[1] && arg_113[0] != arg_57[1] && arg_113[0] == arg_209[0] && arg_113[0] == arg_15[0] && arg_113[0] != arg_105[1] && arg_113[0] == arg_107[0] && arg_113[0] != arg_185[1] && arg_113[0] == arg_51[0] && arg_113[0] == arg_147[0] && arg_113[0] == arg_145[0] && arg_113[0] == arg_215[0] && arg_113[0] != arg_155[1] && arg_113[0] != arg_217[1] && arg_113[0] != arg_253[1] && arg_113[0] == arg_171[0] && arg_113[0] == arg_43[0] && arg_113[0] == arg_239[0] && arg_113[0] != arg_29[1] && arg_113[0] != arg_113[1] && arg_113[0] != arg_203[1] && arg_113[0] != arg_239[1] && arg_113[0] == arg_65[0] && arg_113[0] == arg_191[0] && arg_113[0] == arg_127[0] && arg_113[0] != arg_33[1] && arg_113[0] != arg_13[1] && arg_113[0] != arg_89[1] && arg_113[0] != arg_127[1] && arg_113[0] != arg_223[1] && arg_113[0] != arg_45[1] && arg_113[0] != arg_119[1] && arg_113[0] == arg_59[0] && arg_113[0] != arg_161[1] && arg_113[0] != arg_169[1] && arg_113[0] == arg_35[0] && arg_113[0] != arg_83[1] && arg_113[0] != arg_125[1] && arg_113[0] == arg_217[0] && arg_113[0] == arg_245[0] && arg_113[0] == arg_21[0] && arg_113[0] == arg_97[0] && arg_113[0] == arg_75[0] && arg_113[0] == arg_161[0] && arg_113[0] != arg_209[1] && arg_113[0] != arg_97[1] && arg_113[0] != arg_121[1] && arg_113[0] != arg_247[1] && arg_113[0] == arg_19[0] && arg_113[0] != arg_145[1] && arg_113[0] != arg_251[1] && arg_113[0] == arg_29[0] && arg_113[0] != arg_107[1] && arg_113[0] == arg_231[0] && arg_113[0] == arg_81[0] && arg_113[0] == arg_63[0] && arg_113[0] != arg_215[1] && arg_113[0] != arg_35[1] && arg_113[0] != arg_153[1] && arg_113[0] == arg_121[0] && arg_113[0] == arg_33[0] && arg_113[0] != arg_111[1] && arg_113[0] == arg_177[0] && arg_113[0] == arg_203[0] && arg_113[0] == arg_153[0] && arg_113[0] == arg_95[0] && arg_113[0] == arg_83[0] && arg_113[0] != arg_175[1] && arg_113[0] == arg_159[0] && arg_113[0] == arg_141[0] && arg_113[0] == arg_201[0] && arg_113[0] != arg_177[1] && arg_113[0] == arg_111[0] && arg_113[0] != arg_189[1] && arg_113[0] != arg_27[1] && arg_113[0] != arg_233[1] && arg_113[0] != arg_231[1] && arg_113[0] == arg_175[0] && arg_113[0] == arg_125[0] && arg_113[0] == arg_223[0] && arg_113[0] != arg_207[1] && arg_113[0] != arg_139[1] && arg_113[0] != arg_77[1] && arg_113[0] == arg_183[0] && arg_113[0] == arg_27[0] && arg_113[0] != arg_65[1] && arg_113[0] == arg_49[0] && arg_113[0] == arg_189[0] && arg_113[0] != arg_59[1] && arg_113[0] == arg_105[0] && arg_113[0] == arg_221[0] && arg_113[0] == arg_247[0] && arg_113[0] != arg_19[1] && arg_113[0] == arg_253[0] && arg_113[0] == arg_77[0] && arg_113[0] != arg_15[1] && arg_113[0] != arg_81[1] && arg_113[0] == arg_91[0] && arg_113[0] != arg_91[1] && arg_113[0] == arg_155[0] && arg_113[0] != arg_159[1] && arg_113[0] != arg_191[1] && arg_113[0] != arg_95[1] && arg_113[0] != arg_221[1] && arg_113[0] == arg_251[0] && arg_113[0] == arg_45[0] && arg_113[0] != arg_21[1] && arg_113[0] == arg_139[0] && arg_113[0] != arg_171[1] && arg_113[0] == arg_89[0] && arg_113[0] != arg_183[1] && arg_113[0] != arg_141[1] && arg_113[0] == arg_207[0] && arg_113[0] != arg_51[1] && arg_113[0] == arg_233[0] && arg_113[0] == arg_13[0] && arg_113[0] == arg_237[0] && arg_113[0] != arg_147[1] && arg_113[0] == arg_57[0] && arg_113[0] == arg_119[0] && arg_113[0] != arg_63[1] && arg_113[0] == arg_169[0] && arg_201[1] == arg_75[1] && arg_201[1] != arg_185[0] && arg_201[1] == arg_43[1] && arg_201[1] == arg_245[1] && arg_201[1] == arg_57[1] && arg_201[1] != arg_209[0] && arg_201[1] != arg_15[0] && arg_201[1] == arg_105[1] && arg_201[1] != arg_107[0] && arg_201[1] == arg_185[1] && arg_201[1] != arg_51[0] && arg_201[1] != arg_147[0] && arg_201[1] != arg_145[0] && arg_201[1] != arg_215[0] && arg_201[1] == arg_155[1] && arg_201[1] == arg_217[1] && arg_201[1] == arg_253[1] && arg_201[1] != arg_171[0] && arg_201[1] != arg_43[0] && arg_201[1] != arg_239[0] && arg_201[1] == arg_29[1] && arg_201[1] == arg_113[1] && arg_201[1] == arg_203[1] && arg_201[1] == arg_239[1] && arg_201[1] != arg_65[0] && arg_201[1] != arg_191[0] && arg_201[1] != arg_127[0] && arg_201[1] == arg_33[1] && arg_201[1] == arg_13[1] && arg_201[1] == arg_89[1] && arg_201[1] == arg_127[1] && arg_201[1] == arg_223[1] && arg_201[1] == arg_45[1] && arg_201[1] == arg_119[1] && arg_201[1] != arg_59[0] && arg_201[1] == arg_161[1] && arg_201[1] == arg_169[1] && arg_201[1] != arg_35[0] && arg_201[1] == arg_83[1] && arg_201[1] == arg_125[1] && arg_201[1] != arg_217[0] && arg_201[1] != arg_245[0] && arg_201[1] != arg_21[0] && arg_201[1] != arg_97[0] && arg_201[1] != arg_75[0] && arg_201[1] != arg_161[0] && arg_201[1] == arg_209[1] && arg_201[1] == arg_97[1] && arg_201[1] == arg_121[1] && arg_201[1] == arg_247[1] && arg_201[1] != arg_19[0] && arg_201[1] == arg_145[1] && arg_201[1] == arg_251[1] && arg_201[1] != arg_29[0] && arg_201[1] == arg_107[1] && arg_201[1] != arg_231[0] && arg_201[1] != arg_81[0] && arg_201[1] != arg_63[0] && arg_201[1] == arg_215[1] && arg_201[1] == arg_35[1] && arg_201[1] == arg_153[1] && arg_201[1] != arg_121[0] && arg_201[1] != arg_33[0] && arg_201[1] == arg_111[1] && arg_201[1] != arg_177[0] && arg_201[1] != arg_203[0] && arg_201[1] != arg_153[0] && arg_201[1] != arg_95[0] && arg_201[1] != arg_83[0] && arg_201[1] == arg_175[1] && arg_201[1] != arg_159[0] && arg_201[1] != arg_141[0] && arg_201[1] != arg_201[0] && arg_201[1] == arg_177[1] && arg_201[1] != arg_111[0] && arg_201[1] == arg_189[1] && arg_201[1] == arg_27[1] && arg_201[1] == arg_233[1] && arg_201[1] == arg_231[1] && arg_201[1] != arg_175[0] && arg_201[1] != arg_125[0] && arg_201[1] != arg_223[0] && arg_201[1] == arg_207[1] && arg_201[1] == arg_139[1] && arg_201[1] == arg_77[1] && arg_201[1] != arg_183[0] && arg_201[1] != arg_27[0] && arg_201[1] == arg_65[1] && arg_201[1] != arg_49[0] && arg_201[1] != arg_189[0] && arg_201[1] == arg_59[1] && arg_201[1] != arg_105[0] && arg_201[1] != arg_221[0] && arg_201[1] != arg_247[0] && arg_201[1] == arg_19[1] && arg_201[1] != arg_253[0] && arg_201[1] != arg_77[0] && arg_201[1] == arg_15[1] && arg_201[1] == arg_81[1] && arg_201[1] != arg_91[0] && arg_201[1] == arg_91[1] && arg_201[1] != arg_155[0] && arg_201[1] == arg_159[1] && arg_201[1] == arg_191[1] && arg_201[1] == arg_95[1] && arg_201[1] == arg_221[1] && arg_201[1] != arg_251[0] && arg_201[1] != arg_45[0] && arg_201[1] == arg_21[1] && arg_201[1] != arg_139[0] && arg_201[1] == arg_171[1] && arg_201[1] != arg_89[0] && arg_201[1] == arg_183[1] && arg_201[1] == arg_141[1] && arg_201[1] != arg_207[0] && arg_201[1] == arg_51[1] && arg_201[1] != arg_233[0] && arg_201[1] != arg_13[0] && arg_201[1] != arg_237[0] && arg_201[1] == arg_147[1] && arg_201[1] != arg_57[0] && arg_201[1] != arg_119[0] && arg_201[1] == arg_63[1] && arg_201[1] != arg_169[0] && arg_75[1] != arg_185[0] && arg_75[1] == arg_43[1] && arg_75[1] == arg_245[1] && arg_75[1] == arg_57[1] && arg_75[1] != arg_209[0] && arg_75[1] != arg_15[0] && arg_75[1] == arg_105[1] && arg_75[1] != arg_107[0] && arg_75[1] == arg_185[1] && arg_75[1] != arg_51[0] && arg_75[1] != arg_147[0] && arg_75[1] != arg_145[0] && arg_75[1] != arg_215[0] && arg_75[1] == arg_155[1] && arg_75[1] == arg_217[1] && arg_75[1] == arg_253[1] && arg_75[1] != arg_171[0] && arg_75[1] != arg_43[0] && arg_75[1] != arg_239[0] && arg_75[1] == arg_29[1] && arg_75[1] == arg_113[1] && arg_75[1] == arg_203[1] && arg_75[1] == arg_239[1] && arg_75[1] != arg_65[0] && arg_75[1] != arg_191[0] && arg_75[1] != arg_127[0] && arg_75[1] == arg_33[1] && arg_75[1] == arg_13[1] && arg_75[1] == arg_89[1] && arg_75[1] == arg_127[1] && arg_75[1] == arg_223[1] && arg_75[1] == arg_45[1] && arg_75[1] == arg_119[1] && arg_75[1] != arg_59[0] && arg_75[1] == arg_161[1] && arg_75[1] == arg_169[1] && arg_75[1] != arg_35[0] && arg_75[1] == arg_83[1] && arg_75[1] == arg_125[1] && arg_75[1] != arg_217[0] && arg_75[1] != arg_245[0] && arg_75[1] != arg_21[0] && arg_75[1] != arg_97[0] && arg_75[1] != arg_75[0] && arg_75[1] != arg_161[0] && arg_75[1] == arg_209[1] && arg_75[1] == arg_97[1] && arg_75[1] == arg_121[1] && arg_75[1] == arg_247[1] && arg_75[1] != arg_19[0] && arg_75[1] == arg_145[1] && arg_75[1] == arg_251[1] && arg_75[1] != arg_29[0] && arg_75[1] == arg_107[1] && arg_75[1] != arg_231[0] && arg_75[1] != arg_81[0] && arg_75[1] != arg_63[0] && arg_75[1] == arg_215[1] && arg_75[1] == arg_35[1] && arg_75[1] == arg_153[1] && arg_75[1] != arg_121[0] && arg_75[1] != arg_33[0] && arg_75[1] == arg_111[1] && arg_75[1] != arg_177[0] && arg_75[1] != arg_203[0] && arg_75[1] != arg_153[0] && arg_75[1] != arg_95[0] && arg_75[1] != arg_83[0] && arg_75[1] == arg_175[1] && arg_75[1] != arg_159[0] && arg_75[1] != arg_141[0] && arg_75[1] != arg_201[0] && arg_75[1] == arg_177[1] && arg_75[1] != arg_111[0] && arg_75[1] == arg_189[1] && arg_75[1] == arg_27[1] && arg_75[1] == arg_233[1] && arg_75[1] == arg_231[1] && arg_75[1] != arg_175[0] && arg_75[1] != arg_125[0] && arg_75[1] != arg_223[0] && arg_75[1] == arg_207[1] && arg_75[1] == arg_139[1] && arg_75[1] == arg_77[1] && arg_75[1] != arg_183[0] && arg_75[1] != arg_27[0] && arg_75[1] == arg_65[1] && arg_75[1] != arg_49[0] && arg_75[1] != arg_189[0] && arg_75[1] == arg_59[1] && arg_75[1] != arg_105[0] && arg_75[1] != arg_221[0] && arg_75[1] != arg_247[0] && arg_75[1] == arg_19[1] && arg_75[1] != arg_253[0] && arg_75[1] != arg_77[0] && arg_75[1] == arg_15[1] && arg_75[1] == arg_81[1] && arg_75[1] != arg_91[0] && arg_75[1] == arg_91[1] && arg_75[1] != arg_155[0] && arg_75[1] == arg_159[1] && arg_75[1] == arg_191[1] && arg_75[1] == arg_95[1] && arg_75[1] == arg_221[1] && arg_75[1] != arg_251[0] && arg_75[1] != arg_45[0] && arg_75[1] == arg_21[1] && arg_75[1] != arg_139[0] && arg_75[1] == arg_171[1] && arg_75[1] != arg_89[0] && arg_75[1] == arg_183[1] && arg_75[1] == arg_141[1] && arg_75[1] != arg_207[0] && arg_75[1] == arg_51[1] && arg_75[1] != arg_233[0] && arg_75[1] != arg_13[0] && arg_75[1] != arg_237[0] && arg_75[1] == arg_147[1] && arg_75[1] != arg_57[0] && arg_75[1] != arg_119[0] && arg_75[1] == arg_63[1] && arg_75[1] != arg_169[0] && arg_185[0] != arg_43[1] && arg_185[0] != arg_245[1] && arg_185[0] != arg_57[1] && arg_185[0] == arg_209[0] && arg_185[0] == arg_15[0] && arg_185[0] != arg_105[1] && arg_185[0] == arg_107[0] && arg_185[0] != arg_185[1] && arg_185[0] == arg_51[0] && arg_185[0] == arg_147[0] && arg_185[0] == arg_145[0] && arg_185[0] == arg_215[0] && arg_185[0] != arg_155[1] && arg_185[0] != arg_217[1] && arg_185[0] != arg_253[1] && arg_185[0] == arg_171[0] && arg_185[0] == arg_43[0] && arg_185[0] == arg_239[0] && arg_185[0] != arg_29[1] && arg_185[0] != arg_113[1] && arg_185[0] != arg_203[1] && arg_185[0] != arg_239[1] && arg_185[0] == arg_65[0] && arg_185[0] == arg_191[0] && arg_185[0] == arg_127[0] && arg_185[0] != arg_33[1] && arg_185[0] != arg_13[1] && arg_185[0] != arg_89[1] && arg_185[0] != arg_127[1] && arg_185[0] != arg_223[1] && arg_185[0] != arg_45[1] && arg_185[0] != arg_119[1] && arg_185[0] == arg_59[0] && arg_185[0] != arg_161[1] && arg_185[0] != arg_169[1] && arg_185[0] == arg_35[0] && arg_185[0] != arg_83[1] && arg_185[0] != arg_125[1] && arg_185[0] == arg_217[0] && arg_185[0] == arg_245[0] && arg_185[0] == arg_21[0] && arg_185[0] == arg_97[0] && arg_185[0] == arg_75[0] && arg_185[0] == arg_161[0] && arg_185[0] != arg_209[1] && arg_185[0] != arg_97[1] && arg_185[0] != arg_121[1] && arg_185[0] != arg_247[1] && arg_185[0] == arg_19[0] && arg_185[0] != arg_145[1] && arg_185[0] != arg_251[1] && arg_185[0] == arg_29[0] && arg_185[0] != arg_107[1] && arg_185[0] == arg_231[0] && arg_185[0] == arg_81[0] && arg_185[0] == arg_63[0] && arg_185[0] != arg_215[1] && arg_185[0] != arg_35[1] && arg_185[0] != arg_153[1] && arg_185[0] == arg_121[0] && arg_185[0] == arg_33[0] && arg_185[0] != arg_111[1] && arg_185[0] == arg_177[0] && arg_185[0] == arg_203[0] && arg_185[0] == arg_153[0] && arg_185[0] == arg_95[0] && arg_185[0] == arg_83[0] && arg_185[0] != arg_175[1] && arg_185[0] == arg_159[0] && arg_185[0] == arg_141[0] && arg_185[0] == arg_201[0] && arg_185[0] != arg_177[1] && arg_185[0] == arg_111[0] && arg_185[0] != arg_189[1] && arg_185[0] != arg_27[1] && arg_185[0] != arg_233[1] && arg_185[0] != arg_231[1] && arg_185[0] == arg_175[0] && arg_185[0] == arg_125[0] && arg_185[0] == arg_223[0] && arg_185[0] != arg_207[1] && arg_185[0] != arg_139[1] && arg_185[0] != arg_77[1] && arg_185[0] == arg_183[0] && arg_185[0] == arg_27[0] && arg_185[0] != arg_65[1] && arg_185[0] == arg_49[0] && arg_185[0] == arg_189[0] && arg_185[0] != arg_59[1] && arg_185[0] == arg_105[0] && arg_185[0] == arg_221[0] && arg_185[0] == arg_247[0] && arg_185[0] != arg_19[1] && arg_185[0] == arg_253[0] && arg_185[0] == arg_77[0] && arg_185[0] != arg_15[1] && arg_185[0] != arg_81[1] && arg_185[0] == arg_91[0] && arg_185[0] != arg_91[1] && arg_185[0] == arg_155[0] && arg_185[0] != arg_159[1] && arg_185[0] != arg_191[1] && arg_185[0] != arg_95[1] && arg_185[0] != arg_221[1] && arg_185[0] == arg_251[0] && arg_185[0] == arg_45[0] && arg_185[0] != arg_21[1] && arg_185[0] == arg_139[0] && arg_185[0] != arg_171[1] && arg_185[0] == arg_89[0] && arg_185[0] != arg_183[1] && arg_185[0] != arg_141[1] && arg_185[0] == arg_207[0] && arg_185[0] != arg_51[1] && arg_185[0] == arg_233[0] && arg_185[0] == arg_13[0] && arg_185[0] == arg_237[0] && arg_185[0] != arg_147[1] && arg_185[0] == arg_57[0] && arg_185[0] == arg_119[0] && arg_185[0] != arg_63[1] && arg_185[0] == arg_169[0] && arg_43[1] == arg_245[1] && arg_43[1] == arg_57[1] && arg_43[1] != arg_209[0] && arg_43[1] != arg_15[0] && arg_43[1] == arg_105[1] && arg_43[1] != arg_107[0] && arg_43[1] == arg_185[1] && arg_43[1] != arg_51[0] && arg_43[1] != arg_147[0] && arg_43[1] != arg_145[0] && arg_43[1] != arg_215[0] && arg_43[1] == arg_155[1] && arg_43[1] == arg_217[1] && arg_43[1] == arg_253[1] && arg_43[1] != arg_171[0] && arg_43[1] != arg_43[0] && arg_43[1] != arg_239[0] && arg_43[1] == arg_29[1] && arg_43[1] == arg_113[1] && arg_43[1] == arg_203[1] && arg_43[1] == arg_239[1] && arg_43[1] != arg_65[0] && arg_43[1] != arg_191[0] && arg_43[1] != arg_127[0] && arg_43[1] == arg_33[1] && arg_43[1] == arg_13[1] && arg_43[1] == arg_89[1] && arg_43[1] == arg_127[1] && arg_43[1] == arg_223[1] && arg_43[1] == arg_45[1] && arg_43[1] == arg_119[1] && arg_43[1] != arg_59[0] && arg_43[1] == arg_161[1] && arg_43[1] == arg_169[1] && arg_43[1] != arg_35[0] && arg_43[1] == arg_83[1] && arg_43[1] == arg_125[1] && arg_43[1] != arg_217[0] && arg_43[1] != arg_245[0] && arg_43[1] != arg_21[0] && arg_43[1] != arg_97[0] && arg_43[1] != arg_75[0] && arg_43[1] != arg_161[0] && arg_43[1] == arg_209[1] && arg_43[1] == arg_97[1] && arg_43[1] == arg_121[1] && arg_43[1] == arg_247[1] && arg_43[1] != arg_19[0] && arg_43[1] == arg_145[1] && arg_43[1] == arg_251[1] && arg_43[1] != arg_29[0] && arg_43[1] == arg_107[1] && arg_43[1] != arg_231[0] && arg_43[1] != arg_81[0] && arg_43[1] != arg_63[0] && arg_43[1] == arg_215[1] && arg_43[1] == arg_35[1] && arg_43[1] == arg_153[1] && arg_43[1] != arg_121[0] && arg_43[1] != arg_33[0] && arg_43[1] == arg_111[1] && arg_43[1] != arg_177[0] && arg_43[1] != arg_203[0] && arg_43[1] != arg_153[0] && arg_43[1] != arg_95[0] && arg_43[1] != arg_83[0] && arg_43[1] == arg_175[1] && arg_43[1] != arg_159[0] && arg_43[1] != arg_141[0] && arg_43[1] != arg_201[0] && arg_43[1] == arg_177[1] && arg_43[1] != arg_111[0] && arg_43[1] == arg_189[1] && arg_43[1] == arg_27[1] && arg_43[1] == arg_233[1] && arg_43[1] == arg_231[1] && arg_43[1] != arg_175[0] && arg_43[1] != arg_125[0] && arg_43[1] != arg_223[0] && arg_43[1] == arg_207[1] && arg_43[1] == arg_139[1] && arg_43[1] == arg_77[1] && arg_43[1] != arg_183[0] && arg_43[1] != arg_27[0] && arg_43[1] == arg_65[1] && arg_43[1] != arg_49[0] && arg_43[1] != arg_189[0] && arg_43[1] == arg_59[1] && arg_43[1] != arg_105[0] && arg_43[1] != arg_221[0] && arg_43[1] != arg_247[0] && arg_43[1] == arg_19[1] && arg_43[1] != arg_253[0] && arg_43[1] != arg_77[0] && arg_43[1] == arg_15[1] && arg_43[1] == arg_81[1] && arg_43[1] != arg_91[0] && arg_43[1] == arg_91[1] && arg_43[1] != arg_155[0] && arg_43[1] == arg_159[1] && arg_43[1] == arg_191[1] && arg_43[1] == arg_95[1] && arg_43[1] == arg_221[1] && arg_43[1] != arg_251[0] && arg_43[1] != arg_45[0] && arg_43[1] == arg_21[1] && arg_43[1] != arg_139[0] && arg_43[1] == arg_171[1] && arg_43[1] != arg_89[0] && arg_43[1] == arg_183[1] && arg_43[1] == arg_141[1] && arg_43[1] != arg_207[0] && arg_43[1] == arg_51[1] && arg_43[1] != arg_233[0] && arg_43[1] != arg_13[0] && arg_43[1] != arg_237[0] && arg_43[1] == arg_147[1] && arg_43[1] != arg_57[0] && arg_43[1] != arg_119[0] && arg_43[1] == arg_63[1] && arg_43[1] != arg_169[0] && arg_245[1] == arg_57[1] && arg_245[1] != arg_209[0] && arg_245[1] != arg_15[0] && arg_245[1] == arg_105[1] && arg_245[1] != arg_107[0] && arg_245[1] == arg_185[1] && arg_245[1] != arg_51[0] && arg_245[1] != arg_147[0] && arg_245[1] != arg_145[0] && arg_245[1] != arg_215[0] && arg_245[1] == arg_155[1] && arg_245[1] == arg_217[1] && arg_245[1] == arg_253[1] && arg_245[1] != arg_171[0] && arg_245[1] != arg_43[0] && arg_245[1] != arg_239[0] && arg_245[1] == arg_29[1] && arg_245[1] == arg_113[1] && arg_245[1] == arg_203[1] && arg_245[1] == arg_239[1] && arg_245[1] != arg_65[0] && arg_245[1] != arg_191[0] && arg_245[1] != arg_127[0] && arg_245[1] == arg_33[1] && arg_245[1] == arg_13[1] && arg_245[1] == arg_89[1] && arg_245[1] == arg_127[1] && arg_245[1] == arg_223[1] && arg_245[1] == arg_45[1] && arg_245[1] == arg_119[1] && arg_245[1] != arg_59[0] && arg_245[1] == arg_161[1] && arg_245[1] == arg_169[1] && arg_245[1] != arg_35[0] && arg_245[1] == arg_83[1] && arg_245[1] == arg_125[1] && arg_245[1] != arg_217[0] && arg_245[1] != arg_245[0] && arg_245[1] != arg_21[0] && arg_245[1] != arg_97[0] && arg_245[1] != arg_75[0] && arg_245[1] != arg_161[0] && arg_245[1] == arg_209[1] && arg_245[1] == arg_97[1] && arg_245[1] == arg_121[1] && arg_245[1] == arg_247[1] && arg_245[1] != arg_19[0] && arg_245[1] == arg_145[1] && arg_245[1] == arg_251[1] && arg_245[1] != arg_29[0] && arg_245[1] == arg_107[1] && arg_245[1] != arg_231[0] && arg_245[1] != arg_81[0] && arg_245[1] != arg_63[0] && arg_245[1] == arg_215[1] && arg_245[1] == arg_35[1] && arg_245[1] == arg_153[1] && arg_245[1] != arg_121[0] && arg_245[1] != arg_33[0] && arg_245[1] == arg_111[1] && arg_245[1] != arg_177[0] && arg_245[1] != arg_203[0] && arg_245[1] != arg_153[0] && arg_245[1] != arg_95[0] && arg_245[1] != arg_83[0] && arg_245[1] == arg_175[1] && arg_245[1] != arg_159[0] && arg_245[1] != arg_141[0] && arg_245[1] != arg_201[0] && arg_245[1] == arg_177[1] && arg_245[1] != arg_111[0] && arg_245[1] == arg_189[1] && arg_245[1] == arg_27[1] && arg_245[1] == arg_233[1] && arg_245[1] == arg_231[1] && arg_245[1] != arg_175[0] && arg_245[1] != arg_125[0] && arg_245[1] != arg_223[0] && arg_245[1] == arg_207[1] && arg_245[1] == arg_139[1] && arg_245[1] == arg_77[1] && arg_245[1] != arg_183[0] && arg_245[1] != arg_27[0] && arg_245[1] == arg_65[1] && arg_245[1] != arg_49[0] && arg_245[1] != arg_189[0] && arg_245[1] == arg_59[1] && arg_245[1] != arg_105[0] && arg_245[1] != arg_221[0] && arg_245[1] != arg_247[0] && arg_245[1] == arg_19[1] && arg_245[1] != arg_253[0] && arg_245[1] != arg_77[0] && arg_245[1] == arg_15[1] && arg_245[1] == arg_81[1] && arg_245[1] != arg_91[0] && arg_245[1] == arg_91[1] && arg_245[1] != arg_155[0] && arg_245[1] == arg_159[1] && arg_245[1] == arg_191[1] && arg_245[1] == arg_95[1] && arg_245[1] == arg_221[1] && arg_245[1] != arg_251[0] && arg_245[1] != arg_45[0] && arg_245[1] == arg_21[1] && arg_245[1] != arg_139[0] && arg_245[1] == arg_171[1] && arg_245[1] != arg_89[0] && arg_245[1] == arg_183[1] && arg_245[1] == arg_141[1] && arg_245[1] != arg_207[0] && arg_245[1] == arg_51[1] && arg_245[1] != arg_233[0] && arg_245[1] != arg_13[0] && arg_245[1] != arg_237[0] && arg_245[1] == arg_147[1] && arg_245[1] != arg_57[0] && arg_245[1] != arg_119[0] && arg_245[1] == arg_63[1] && arg_245[1] != arg_169[0] && arg_57[1] != arg_209[0] && arg_57[1] != arg_15[0] && arg_57[1] == arg_105[1] && arg_57[1] != arg_107[0] && arg_57[1] == arg_185[1] && arg_57[1] != arg_51[0] && arg_57[1] != arg_147[0] && arg_57[1] != arg_145[0] && arg_57[1] != arg_215[0] && arg_57[1] == arg_155[1] && arg_57[1] == arg_217[1] && arg_57[1] == arg_253[1] && arg_57[1] != arg_171[0] && arg_57[1] != arg_43[0] && arg_57[1] != arg_239[0] && arg_57[1] == arg_29[1] && arg_57[1] == arg_113[1] && arg_57[1] == arg_203[1] && arg_57[1] == arg_239[1] && arg_57[1] != arg_65[0] && arg_57[1] != arg_191[0] && arg_57[1] != arg_127[0] && arg_57[1] == arg_33[1] && arg_57[1] == arg_13[1] && arg_57[1] == arg_89[1] && arg_57[1] == arg_127[1] && arg_57[1] == arg_223[1] && arg_57[1] == arg_45[1] && arg_57[1] == arg_119[1] && arg_57[1] != arg_59[0] && arg_57[1] == arg_161[1] && arg_57[1] == arg_169[1] && arg_57[1] != arg_35[0] && arg_57[1] == arg_83[1] && arg_57[1] == arg_125[1] && arg_57[1] != arg_217[0] && arg_57[1] != arg_245[0] && arg_57[1] != arg_21[0] && arg_57[1] != arg_97[0] && arg_57[1] != arg_75[0] && arg_57[1] != arg_161[0] && arg_57[1] == arg_209[1] && arg_57[1] == arg_97[1] && arg_57[1] == arg_121[1] && arg_57[1] == arg_247[1] && arg_57[1] != arg_19[0] && arg_57[1] == arg_145[1] && arg_57[1] == arg_251[1] && arg_57[1] != arg_29[0] && arg_57[1] == arg_107[1] && arg_57[1] != arg_231[0] && arg_57[1] != arg_81[0] && arg_57[1] != arg_63[0] && arg_57[1] == arg_215[1] && arg_57[1] == arg_35[1] && arg_57[1] == arg_153[1] && arg_57[1] != arg_121[0] && arg_57[1] != arg_33[0] && arg_57[1] == arg_111[1] && arg_57[1] != arg_177[0] && arg_57[1] != arg_203[0] && arg_57[1] != arg_153[0] && arg_57[1] != arg_95[0] && arg_57[1] != arg_83[0] && arg_57[1] == arg_175[1] && arg_57[1] != arg_159[0] && arg_57[1] != arg_141[0] && arg_57[1] != arg_201[0] && arg_57[1] == arg_177[1] && arg_57[1] != arg_111[0] && arg_57[1] == arg_189[1] && arg_57[1] == arg_27[1] && arg_57[1] == arg_233[1] && arg_57[1] == arg_231[1] && arg_57[1] != arg_175[0] && arg_57[1] != arg_125[0] && arg_57[1] != arg_223[0] && arg_57[1] == arg_207[1] && arg_57[1] == arg_139[1] && arg_57[1] == arg_77[1] && arg_57[1] != arg_183[0] && arg_57[1] != arg_27[0] && arg_57[1] == arg_65[1] && arg_57[1] != arg_49[0] && arg_57[1] != arg_189[0] && arg_57[1] == arg_59[1] && arg_57[1] != arg_105[0] && arg_57[1] != arg_221[0] && arg_57[1] != arg_247[0] && arg_57[1] == arg_19[1] && arg_57[1] != arg_253[0] && arg_57[1] != arg_77[0] && arg_57[1] == arg_15[1] && arg_57[1] == arg_81[1] && arg_57[1] != arg_91[0] && arg_57[1] == arg_91[1] && arg_57[1] != arg_155[0] && arg_57[1] == arg_159[1] && arg_57[1] == arg_191[1] && arg_57[1] == arg_95[1] && arg_57[1] == arg_221[1] && arg_57[1] != arg_251[0] && arg_57[1] != arg_45[0] && arg_57[1] == arg_21[1] && arg_57[1] != arg_139[0] && arg_57[1] == arg_171[1] && arg_57[1] != arg_89[0] && arg_57[1] == arg_183[1] && arg_57[1] == arg_141[1] && arg_57[1] != arg_207[0] && arg_57[1] == arg_51[1] && arg_57[1] != arg_233[0] && arg_57[1] != arg_13[0] && arg_57[1] != arg_237[0] && arg_57[1] == arg_147[1] && arg_57[1] != arg_57[0] && arg_57[1] != arg_119[0] && arg_57[1] == arg_63[1] && arg_57[1] != arg_169[0] && arg_209[0] == arg_15[0] && arg_209[0] != arg_105[1] && arg_209[0] == arg_107[0] && arg_209[0] != arg_185[1] && arg_209[0] == arg_51[0] && arg_209[0] == arg_147[0] && arg_209[0] == arg_145[0] && arg_209[0] == arg_215[0] && arg_209[0] != arg_155[1] && arg_209[0] != arg_217[1] && arg_209[0] != arg_253[1] && arg_209[0] == arg_171[0] && arg_209[0] == arg_43[0] && arg_209[0] == arg_239[0] && arg_209[0] != arg_29[1] && arg_209[0] != arg_113[1] && arg_209[0] != arg_203[1] && arg_209[0] != arg_239[1] && arg_209[0] == arg_65[0] && arg_209[0] == arg_191[0] && arg_209[0] == arg_127[0] && arg_209[0] != arg_33[1] && arg_209[0] != arg_13[1] && arg_209[0] != arg_89[1] && arg_209[0] != arg_127[1] && arg_209[0] != arg_223[1] && arg_209[0] != arg_45[1] && arg_209[0] != arg_119[1] && arg_209[0] == arg_59[0] && arg_209[0] != arg_161[1] && arg_209[0] != arg_169[1] && arg_209[0] == arg_35[0] && arg_209[0] != arg_83[1] && arg_209[0] != arg_125[1] && arg_209[0] == arg_217[0] && arg_209[0] == arg_245[0] && arg_209[0] == arg_21[0] && arg_209[0] == arg_97[0] && arg_209[0] == arg_75[0] && arg_209[0] == arg_161[0] && arg_209[0] != arg_209[1] && arg_209[0] != arg_97[1] && arg_209[0] != arg_121[1] && arg_209[0] != arg_247[1] && arg_209[0] == arg_19[0] && arg_209[0] != arg_145[1] && arg_209[0] != arg_251[1] && arg_209[0] == arg_29[0] && arg_209[0] != arg_107[1] && arg_209[0] == arg_231[0] && arg_209[0] == arg_81[0] && arg_209[0] == arg_63[0] && arg_209[0] != arg_215[1] && arg_209[0] != arg_35[1] && arg_209[0] != arg_153[1] && arg_209[0] == arg_121[0] && arg_209[0] == arg_33[0] && arg_209[0] != arg_111[1] && arg_209[0] == arg_177[0] && arg_209[0] == arg_203[0] && arg_209[0] == arg_153[0] && arg_209[0] == arg_95[0] && arg_209[0] == arg_83[0] && arg_209[0] != arg_175[1] && arg_209[0] == arg_159[0] && arg_209[0] == arg_141[0] && arg_209[0] == arg_201[0] && arg_209[0] != arg_177[1] && arg_209[0] == arg_111[0] && arg_209[0] != arg_189[1] && arg_209[0] != arg_27[1] && arg_209[0] != arg_233[1] && arg_209[0] != arg_231[1] && arg_209[0] == arg_175[0] && arg_209[0] == arg_125[0] && arg_209[0] == arg_223[0] && arg_209[0] != arg_207[1] && arg_209[0] != arg_139[1] && arg_209[0] != arg_77[1] && arg_209[0] == arg_183[0] && arg_209[0] == arg_27[0] && arg_209[0] != arg_65[1] && arg_209[0] == arg_49[0] && arg_209[0] == arg_189[0] && arg_209[0] != arg_59[1] && arg_209[0] == arg_105[0] && arg_209[0] == arg_221[0] && arg_209[0] == arg_247[0] && arg_209[0] != arg_19[1] && arg_209[0] == arg_253[0] && arg_209[0] == arg_77[0] && arg_209[0] != arg_15[1] && arg_209[0] != arg_81[1] && arg_209[0] == arg_91[0] && arg_209[0] != arg_91[1] && arg_209[0] == arg_155[0] && arg_209[0] != arg_159[1] && arg_209[0] != arg_191[1] && arg_209[0] != arg_95[1] && arg_209[0] != arg_221[1] && arg_209[0] == arg_251[0] && arg_209[0] == arg_45[0] && arg_209[0] != arg_21[1] && arg_209[0] == arg_139[0] && arg_209[0] != arg_171[1] && arg_209[0] == arg_89[0] && arg_209[0] != arg_183[1] && arg_209[0] != arg_141[1] && arg_209[0] == arg_207[0] && arg_209[0] != arg_51[1] && arg_209[0] == arg_233[0] && arg_209[0] == arg_13[0] && arg_209[0] == arg_237[0] && arg_209[0] != arg_147[1] && arg_209[0] == arg_57[0] && arg_209[0] == arg_119[0] && arg_209[0] != arg_63[1] && arg_209[0] == arg_169[0] && arg_15[0] != arg_105[1] && arg_15[0] == arg_107[0] && arg_15[0] != arg_185[1] && arg_15[0] == arg_51[0] && arg_15[0] == arg_147[0] && arg_15[0] == arg_145[0] && arg_15[0] == arg_215[0] && arg_15[0] != arg_155[1] && arg_15[0] != arg_217[1] && arg_15[0] != arg_253[1] && arg_15[0] == arg_171[0] && arg_15[0] == arg_43[0] && arg_15[0] == arg_239[0] && arg_15[0] != arg_29[1] && arg_15[0] != arg_113[1] && arg_15[0] != arg_203[1] && arg_15[0] != arg_239[1] && arg_15[0] == arg_65[0] && arg_15[0] == arg_191[0] && arg_15[0] == arg_127[0] && arg_15[0] != arg_33[1] && arg_15[0] != arg_13[1] && arg_15[0] != arg_89[1] && arg_15[0] != arg_127[1] && arg_15[0] != arg_223[1] && arg_15[0] != arg_45[1] && arg_15[0] != arg_119[1] && arg_15[0] == arg_59[0] && arg_15[0] != arg_161[1] && arg_15[0] != arg_169[1] && arg_15[0] == arg_35[0] && arg_15[0] != arg_83[1] && arg_15[0] != arg_125[1] && arg_15[0] == arg_217[0] && arg_15[0] == arg_245[0] && arg_15[0] == arg_21[0] && arg_15[0] == arg_97[0] && arg_15[0] == arg_75[0] && arg_15[0] == arg_161[0] && arg_15[0] != arg_209[1] && arg_15[0] != arg_97[1] && arg_15[0] != arg_121[1] && arg_15[0] != arg_247[1] && arg_15[0] == arg_19[0] && arg_15[0] != arg_145[1] && arg_15[0] != arg_251[1] && arg_15[0] == arg_29[0] && arg_15[0] != arg_107[1] && arg_15[0] == arg_231[0] && arg_15[0] == arg_81[0] && arg_15[0] == arg_63[0] && arg_15[0] != arg_215[1] && arg_15[0] != arg_35[1] && arg_15[0] != arg_153[1] && arg_15[0] == arg_121[0] && arg_15[0] == arg_33[0] && arg_15[0] != arg_111[1] && arg_15[0] == arg_177[0] && arg_15[0] == arg_203[0] && arg_15[0] == arg_153[0] && arg_15[0] == arg_95[0] && arg_15[0] == arg_83[0] && arg_15[0] != arg_175[1] && arg_15[0] == arg_159[0] && arg_15[0] == arg_141[0] && arg_15[0] == arg_201[0] && arg_15[0] != arg_177[1] && arg_15[0] == arg_111[0] && arg_15[0] != arg_189[1] && arg_15[0] != arg_27[1] && arg_15[0] != arg_233[1] && arg_15[0] != arg_231[1] && arg_15[0] == arg_175[0] && arg_15[0] == arg_125[0] && arg_15[0] == arg_223[0] && arg_15[0] != arg_207[1] && arg_15[0] != arg_139[1] && arg_15[0] != arg_77[1] && arg_15[0] == arg_183[0] && arg_15[0] == arg_27[0] && arg_15[0] != arg_65[1] && arg_15[0] == arg_49[0] && arg_15[0] == arg_189[0] && arg_15[0] != arg_59[1] && arg_15[0] == arg_105[0] && arg_15[0] == arg_221[0] && arg_15[0] == arg_247[0] && arg_15[0] != arg_19[1] && arg_15[0] == arg_253[0] && arg_15[0] == arg_77[0] && arg_15[0] != arg_15[1] && arg_15[0] != arg_81[1] && arg_15[0] == arg_91[0] && arg_15[0] != arg_91[1] && arg_15[0] == arg_155[0] && arg_15[0] != arg_159[1] && arg_15[0] != arg_191[1] && arg_15[0] != arg_95[1] && arg_15[0] != arg_221[1] && arg_15[0] == arg_251[0] && arg_15[0] == arg_45[0] && arg_15[0] != arg_21[1] && arg_15[0] == arg_139[0] && arg_15[0] != arg_171[1] && arg_15[0] == arg_89[0] && arg_15[0] != arg_183[1] && arg_15[0] != arg_141[1] && arg_15[0] == arg_207[0] && arg_15[0] != arg_51[1] && arg_15[0] == arg_233[0] && arg_15[0] == arg_13[0] && arg_15[0] == arg_237[0] && arg_15[0] != arg_147[1] && arg_15[0] == arg_57[0] && arg_15[0] == arg_119[0] && arg_15[0] != arg_63[1] && arg_15[0] == arg_169[0] && arg_105[1] != arg_107[0] && arg_105[1] == arg_185[1] && arg_105[1] != arg_51[0] && arg_105[1] != arg_147[0] && arg_105[1] != arg_145[0] && arg_105[1] != arg_215[0] && arg_105[1] == arg_155[1] && arg_105[1] == arg_217[1] && arg_105[1] == arg_253[1] && arg_105[1] != arg_171[0] && arg_105[1] != arg_43[0] && arg_105[1] != arg_239[0] && arg_105[1] == arg_29[1] && arg_105[1] == arg_113[1] && arg_105[1] == arg_203[1] && arg_105[1] == arg_239[1] && arg_105[1] != arg_65[0] && arg_105[1] != arg_191[0] && arg_105[1] != arg_127[0] && arg_105[1] == arg_33[1] && arg_105[1] == arg_13[1] && arg_105[1] == arg_89[1] && arg_105[1] == arg_127[1] && arg_105[1] == arg_223[1] && arg_105[1] == arg_45[1] && arg_105[1] == arg_119[1] && arg_105[1] != arg_59[0] && arg_105[1] == arg_161[1] && arg_105[1] == arg_169[1] && arg_105[1] != arg_35[0] && arg_105[1] == arg_83[1] && arg_105[1] == arg_125[1] && arg_105[1] != arg_217[0] && arg_105[1] != arg_245[0] && arg_105[1] != arg_21[0] && arg_105[1] != arg_97[0] && arg_105[1] != arg_75[0] && arg_105[1] != arg_161[0] && arg_105[1] == arg_209[1] && arg_105[1] == arg_97[1] && arg_105[1] == arg_121[1] && arg_105[1] == arg_247[1] && arg_105[1] != arg_19[0] && arg_105[1] == arg_145[1] && arg_105[1] == arg_251[1] && arg_105[1] != arg_29[0] && arg_105[1] == arg_107[1] && arg_105[1] != arg_231[0] && arg_105[1] != arg_81[0] && arg_105[1] != arg_63[0] && arg_105[1] == arg_215[1] && arg_105[1] == arg_35[1] && arg_105[1] == arg_153[1] && arg_105[1] != arg_121[0] && arg_105[1] != arg_33[0] && arg_105[1] == arg_111[1] && arg_105[1] != arg_177[0] && arg_105[1] != arg_203[0] && arg_105[1] != arg_153[0] && arg_105[1] != arg_95[0] && arg_105[1] != arg_83[0] && arg_105[1] == arg_175[1] && arg_105[1] != arg_159[0] && arg_105[1] != arg_141[0] && arg_105[1] != arg_201[0] && arg_105[1] == arg_177[1] && arg_105[1] != arg_111[0] && arg_105[1] == arg_189[1] && arg_105[1] == arg_27[1] && arg_105[1] == arg_233[1] && arg_105[1] == arg_231[1] && arg_105[1] != arg_175[0] && arg_105[1] != arg_125[0] && arg_105[1] != arg_223[0] && arg_105[1] == arg_207[1] && arg_105[1] == arg_139[1] && arg_105[1] == arg_77[1] && arg_105[1] != arg_183[0] && arg_105[1] != arg_27[0] && arg_105[1] == arg_65[1] && arg_105[1] != arg_49[0] && arg_105[1] != arg_189[0] && arg_105[1] == arg_59[1] && arg_105[1] != arg_105[0] && arg_105[1] != arg_221[0] && arg_105[1] != arg_247[0] && arg_105[1] == arg_19[1] && arg_105[1] != arg_253[0] && arg_105[1] != arg_77[0] && arg_105[1] == arg_15[1] && arg_105[1] == arg_81[1] && arg_105[1] != arg_91[0] && arg_105[1] == arg_91[1] && arg_105[1] != arg_155[0] && arg_105[1] == arg_159[1] && arg_105[1] == arg_191[1] && arg_105[1] == arg_95[1] && arg_105[1] == arg_221[1] && arg_105[1] != arg_251[0] && arg_105[1] != arg_45[0] && arg_105[1] == arg_21[1] && arg_105[1] != arg_139[0] && arg_105[1] == arg_171[1] && arg_105[1] != arg_89[0] && arg_105[1] == arg_183[1] && arg_105[1] == arg_141[1] && arg_105[1] != arg_207[0] && arg_105[1] == arg_51[1] && arg_105[1] != arg_233[0] && arg_105[1] != arg_13[0] && arg_105[1] != arg_237[0] && arg_105[1] == arg_147[1] && arg_105[1] != arg_57[0] && arg_105[1] != arg_119[0] && arg_105[1] == arg_63[1] && arg_105[1] != arg_169[0] && arg_107[0] != arg_185[1] && arg_107[0] == arg_51[0] && arg_107[0] == arg_147[0] && arg_107[0] == arg_145[0] && arg_107[0] == arg_215[0] && arg_107[0] != arg_155[1] && arg_107[0] != arg_217[1] && arg_107[0] != arg_253[1] && arg_107[0] == arg_171[0] && arg_107[0] == arg_43[0] && arg_107[0] == arg_239[0] && arg_107[0] != arg_29[1] && arg_107[0] != arg_113[1] && arg_107[0] != arg_203[1] && arg_107[0] != arg_239[1] && arg_107[0] == arg_65[0] && arg_107[0] == arg_191[0] && arg_107[0] == arg_127[0] && arg_107[0] != arg_33[1] && arg_107[0] != arg_13[1] && arg_107[0] != arg_89[1] && arg_107[0] != arg_127[1] && arg_107[0] != arg_223[1] && arg_107[0] != arg_45[1] && arg_107[0] != arg_119[1] && arg_107[0] == arg_59[0] && arg_107[0] != arg_161[1] && arg_107[0] != arg_169[1] && arg_107[0] == arg_35[0] && arg_107[0] != arg_83[1] && arg_107[0] != arg_125[1] && arg_107[0] == arg_217[0] && arg_107[0] == arg_245[0] && arg_107[0] == arg_21[0] && arg_107[0] == arg_97[0] && arg_107[0] == arg_75[0] && arg_107[0] == arg_161[0] && arg_107[0] != arg_209[1] && arg_107[0] != arg_97[1] && arg_107[0] != arg_121[1] && arg_107[0] != arg_247[1] && arg_107[0] == arg_19[0] && arg_107[0] != arg_145[1] && arg_107[0] != arg_251[1] && arg_107[0] == arg_29[0] && arg_107[0] != arg_107[1] && arg_107[0] == arg_231[0] && arg_107[0] == arg_81[0] && arg_107[0] == arg_63[0] && arg_107[0] != arg_215[1] && arg_107[0] != arg_35[1] && arg_107[0] != arg_153[1] && arg_107[0] == arg_121[0] && arg_107[0] == arg_33[0] && arg_107[0] != arg_111[1] && arg_107[0] == arg_177[0] && arg_107[0] == arg_203[0] && arg_107[0] == arg_153[0] && arg_107[0] == arg_95[0] && arg_107[0] == arg_83[0] && arg_107[0] != arg_175[1] && arg_107[0] == arg_159[0] && arg_107[0] == arg_141[0] && arg_107[0] == arg_201[0] && arg_107[0] != arg_177[1] && arg_107[0] == arg_111[0] && arg_107[0] != arg_189[1] && arg_107[0] != arg_27[1] && arg_107[0] != arg_233[1] && arg_107[0] != arg_231[1] && arg_107[0] == arg_175[0] && arg_107[0] == arg_125[0] && arg_107[0] == arg_223[0] && arg_107[0] != arg_207[1] && arg_107[0] != arg_139[1] && arg_107[0] != arg_77[1] && arg_107[0] == arg_183[0] && arg_107[0] == arg_27[0] && arg_107[0] != arg_65[1] && arg_107[0] == arg_49[0] && arg_107[0] == arg_189[0] && arg_107[0] != arg_59[1] && arg_107[0] == arg_105[0] && arg_107[0] == arg_221[0] && arg_107[0] == arg_247[0] && arg_107[0] != arg_19[1] && arg_107[0] == arg_253[0] && arg_107[0] == arg_77[0] && arg_107[0] != arg_15[1] && arg_107[0] != arg_81[1] && arg_107[0] == arg_91[0] && arg_107[0] != arg_91[1] && arg_107[0] == arg_155[0] && arg_107[0] != arg_159[1] && arg_107[0] != arg_191[1] && arg_107[0] != arg_95[1] && arg_107[0] != arg_221[1] && arg_107[0] == arg_251[0] && arg_107[0] == arg_45[0] && arg_107[0] != arg_21[1] && arg_107[0] == arg_139[0] && arg_107[0] != arg_171[1] && arg_107[0] == arg_89[0] && arg_107[0] != arg_183[1] && arg_107[0] != arg_141[1] && arg_107[0] == arg_207[0] && arg_107[0] != arg_51[1] && arg_107[0] == arg_233[0] && arg_107[0] == arg_13[0] && arg_107[0] == arg_237[0] && arg_107[0] != arg_147[1] && arg_107[0] == arg_57[0] && arg_107[0] == arg_119[0] && arg_107[0] != arg_63[1] && arg_107[0] == arg_169[0] && arg_185[1] != arg_51[0] && arg_185[1] != arg_147[0] && arg_185[1] != arg_145[0] && arg_185[1] != arg_215[0] && arg_185[1] == arg_155[1] && arg_185[1] == arg_217[1] && arg_185[1] == arg_253[1] && arg_185[1] != arg_171[0] && arg_185[1] != arg_43[0] && arg_185[1] != arg_239[0] && arg_185[1] == arg_29[1] && arg_185[1] == arg_113[1] && arg_185[1] == arg_203[1] && arg_185[1] == arg_239[1] && arg_185[1] != arg_65[0] && arg_185[1] != arg_191[0] && arg_185[1] != arg_127[0] && arg_185[1] == arg_33[1] && arg_185[1] == arg_13[1] && arg_185[1] == arg_89[1] && arg_185[1] == arg_127[1] && arg_185[1] == arg_223[1] && arg_185[1] == arg_45[1] && arg_185[1] == arg_119[1] && arg_185[1] != arg_59[0] && arg_185[1] == arg_161[1] && arg_185[1] == arg_169[1] && arg_185[1] != arg_35[0] && arg_185[1] == arg_83[1] && arg_185[1] == arg_125[1] && arg_185[1] != arg_217[0] && arg_185[1] != arg_245[0] && arg_185[1] != arg_21[0] && arg_185[1] != arg_97[0] && arg_185[1] != arg_75[0] && arg_185[1] != arg_161[0] && arg_185[1] == arg_209[1] && arg_185[1] == arg_97[1] && arg_185[1] == arg_121[1] && arg_185[1] == arg_247[1] && arg_185[1] != arg_19[0] && arg_185[1] == arg_145[1] && arg_185[1] == arg_251[1] && arg_185[1] != arg_29[0] && arg_185[1] == arg_107[1] && arg_185[1] != arg_231[0] && arg_185[1] != arg_81[0] && arg_185[1] != arg_63[0] && arg_185[1] == arg_215[1] && arg_185[1] == arg_35[1] && arg_185[1] == arg_153[1] && arg_185[1] != arg_121[0] && arg_185[1] != arg_33[0] && arg_185[1] == arg_111[1] && arg_185[1] != arg_177[0] && arg_185[1] != arg_203[0] && arg_185[1] != arg_153[0] && arg_185[1] != arg_95[0] && arg_185[1] != arg_83[0] && arg_185[1] == arg_175[1] && arg_185[1] != arg_159[0] && arg_185[1] != arg_141[0] && arg_185[1] != arg_201[0] && arg_185[1] == arg_177[1] && arg_185[1] != arg_111[0] && arg_185[1] == arg_189[1] && arg_185[1] == arg_27[1] && arg_185[1] == arg_233[1] && arg_185[1] == arg_231[1] && arg_185[1] != arg_175[0] && arg_185[1] != arg_125[0] && arg_185[1] != arg_223[0] && arg_185[1] == arg_207[1] && arg_185[1] == arg_139[1] && arg_185[1] == arg_77[1] && arg_185[1] != arg_183[0] && arg_185[1] != arg_27[0] && arg_185[1] == arg_65[1] && arg_185[1] != arg_49[0] && arg_185[1] != arg_189[0] && arg_185[1] == arg_59[1] && arg_185[1] != arg_105[0] && arg_185[1] != arg_221[0] && arg_185[1] != arg_247[0] && arg_185[1] == arg_19[1] && arg_185[1] != arg_253[0] && arg_185[1] != arg_77[0] && arg_185[1] == arg_15[1] && arg_185[1] == arg_81[1] && arg_185[1] != arg_91[0] && arg_185[1] == arg_91[1] && arg_185[1] != arg_155[0] && arg_185[1] == arg_159[1] && arg_185[1] == arg_191[1] && arg_185[1] == arg_95[1] && arg_185[1] == arg_221[1] && arg_185[1] != arg_251[0] && arg_185[1] != arg_45[0] && arg_185[1] == arg_21[1] && arg_185[1] != arg_139[0] && arg_185[1] == arg_171[1] && arg_185[1] != arg_89[0] && arg_185[1] == arg_183[1] && arg_185[1] == arg_141[1] && arg_185[1] != arg_207[0] && arg_185[1] == arg_51[1] && arg_185[1] != arg_233[0] && arg_185[1] != arg_13[0] && arg_185[1] != arg_237[0] && arg_185[1] == arg_147[1] && arg_185[1] != arg_57[0] && arg_185[1] != arg_119[0] && arg_185[1] == arg_63[1] && arg_185[1] != arg_169[0] && arg_51[0] == arg_147[0] && arg_51[0] == arg_145[0] && arg_51[0] == arg_215[0] && arg_51[0] != arg_155[1] && arg_51[0] != arg_217[1] && arg_51[0] != arg_253[1] && arg_51[0] == arg_171[0] && arg_51[0] == arg_43[0] && arg_51[0] == arg_239[0] && arg_51[0] != arg_29[1] && arg_51[0] != arg_113[1] && arg_51[0] != arg_203[1] && arg_51[0] != arg_239[1] && arg_51[0] == arg_65[0] && arg_51[0] == arg_191[0] && arg_51[0] == arg_127[0] && arg_51[0] != arg_33[1] && arg_51[0] != arg_13[1] && arg_51[0] != arg_89[1] && arg_51[0] != arg_127[1] && arg_51[0] != arg_223[1] && arg_51[0] != arg_45[1] && arg_51[0] != arg_119[1] && arg_51[0] == arg_59[0] && arg_51[0] != arg_161[1] && arg_51[0] != arg_169[1] && arg_51[0] == arg_35[0] && arg_51[0] != arg_83[1] && arg_51[0] != arg_125[1] && arg_51[0] == arg_217[0] && arg_51[0] == arg_245[0] && arg_51[0] == arg_21[0] && arg_51[0] == arg_97[0] && arg_51[0] == arg_75[0] && arg_51[0] == arg_161[0] && arg_51[0] != arg_209[1] && arg_51[0] != arg_97[1] && arg_51[0] != arg_121[1] && arg_51[0] != arg_247[1] && arg_51[0] == arg_19[0] && arg_51[0] != arg_145[1] && arg_51[0] != arg_251[1] && arg_51[0] == arg_29[0] && arg_51[0] != arg_107[1] && arg_51[0] == arg_231[0] && arg_51[0] == arg_81[0] && arg_51[0] == arg_63[0] && arg_51[0] != arg_215[1] && arg_51[0] != arg_35[1] && arg_51[0] != arg_153[1] && arg_51[0] == arg_121[0] && arg_51[0] == arg_33[0] && arg_51[0] != arg_111[1] && arg_51[0] == arg_177[0] && arg_51[0] == arg_203[0] && arg_51[0] == arg_153[0] && arg_51[0] == arg_95[0] && arg_51[0] == arg_83[0] && arg_51[0] != arg_175[1] && arg_51[0] == arg_159[0] && arg_51[0] == arg_141[0] && arg_51[0] == arg_201[0] && arg_51[0] != arg_177[1] && arg_51[0] == arg_111[0] && arg_51[0] != arg_189[1] && arg_51[0] != arg_27[1] && arg_51[0] != arg_233[1] && arg_51[0] != arg_231[1] && arg_51[0] == arg_175[0] && arg_51[0] == arg_125[0] && arg_51[0] == arg_223[0] && arg_51[0] != arg_207[1] && arg_51[0] != arg_139[1] && arg_51[0] != arg_77[1] && arg_51[0] == arg_183[0] && arg_51[0] == arg_27[0] && arg_51[0] != arg_65[1] && arg_51[0] == arg_49[0] && arg_51[0] == arg_189[0] && arg_51[0] != arg_59[1] && arg_51[0] == arg_105[0] && arg_51[0] == arg_221[0] && arg_51[0] == arg_247[0] && arg_51[0] != arg_19[1] && arg_51[0] == arg_253[0] && arg_51[0] == arg_77[0] && arg_51[0] != arg_15[1] && arg_51[0] != arg_81[1] && arg_51[0] == arg_91[0] && arg_51[0] != arg_91[1] && arg_51[0] == arg_155[0] && arg_51[0] != arg_159[1] && arg_51[0] != arg_191[1] && arg_51[0] != arg_95[1] && arg_51[0] != arg_221[1] && arg_51[0] == arg_251[0] && arg_51[0] == arg_45[0] && arg_51[0] != arg_21[1] && arg_51[0] == arg_139[0] && arg_51[0] != arg_171[1] && arg_51[0] == arg_89[0] && arg_51[0] != arg_183[1] && arg_51[0] != arg_141[1] && arg_51[0] == arg_207[0] && arg_51[0] != arg_51[1] && arg_51[0] == arg_233[0] && arg_51[0] == arg_13[0] && arg_51[0] == arg_237[0] && arg_51[0] != arg_147[1] && arg_51[0] == arg_57[0] && arg_51[0] == arg_119[0] && arg_51[0] != arg_63[1] && arg_51[0] == arg_169[0] && arg_147[0] == arg_145[0] && arg_147[0] == arg_215[0] && arg_147[0] != arg_155[1] && arg_147[0] != arg_217[1] && arg_147[0] != arg_253[1] && arg_147[0] == arg_171[0] && arg_147[0] == arg_43[0] && arg_147[0] == arg_239[0] && arg_147[0] != arg_29[1] && arg_147[0] != arg_113[1] && arg_147[0] != arg_203[1] && arg_147[0] != arg_239[1] && arg_147[0] == arg_65[0] && arg_147[0] == arg_191[0] && arg_147[0] == arg_127[0] && arg_147[0] != arg_33[1] && arg_147[0] != arg_13[1] && arg_147[0] != arg_89[1] && arg_147[0] != arg_127[1] && arg_147[0] != arg_223[1] && arg_147[0] != arg_45[1] && arg_147[0] != arg_119[1] && arg_147[0] == arg_59[0] && arg_147[0] != arg_161[1] && arg_147[0] != arg_169[1] && arg_147[0] == arg_35[0] && arg_147[0] != arg_83[1] && arg_147[0] != arg_125[1] && arg_147[0] == arg_217[0] && arg_147[0] == arg_245[0] && arg_147[0] == arg_21[0] && arg_147[0] == arg_97[0] && arg_147[0] == arg_75[0] && arg_147[0] == arg_161[0] && arg_147[0] != arg_209[1] && arg_147[0] != arg_97[1] && arg_147[0] != arg_121[1] && arg_147[0] != arg_247[1] && arg_147[0] == arg_19[0] && arg_147[0] != arg_145[1] && arg_147[0] != arg_251[1] && arg_147[0] == arg_29[0] && arg_147[0] != arg_107[1] && arg_147[0] == arg_231[0] && arg_147[0] == arg_81[0] && arg_147[0] == arg_63[0] && arg_147[0] != arg_215[1] && arg_147[0] != arg_35[1] && arg_147[0] != arg_153[1] && arg_147[0] == arg_121[0] && arg_147[0] == arg_33[0] && arg_147[0] != arg_111[1] && arg_147[0] == arg_177[0] && arg_147[0] == arg_203[0] && arg_147[0] == arg_153[0] && arg_147[0] == arg_95[0] && arg_147[0] == arg_83[0] && arg_147[0] != arg_175[1] && arg_147[0] == arg_159[0] && arg_147[0] == arg_141[0] && arg_147[0] == arg_201[0] && arg_147[0] != arg_177[1] && arg_147[0] == arg_111[0] && arg_147[0] != arg_189[1] && arg_147[0] != arg_27[1] && arg_147[0] != arg_233[1] && arg_147[0] != arg_231[1] && arg_147[0] == arg_175[0] && arg_147[0] == arg_125[0] && arg_147[0] == arg_223[0] && arg_147[0] != arg_207[1] && arg_147[0] != arg_139[1] && arg_147[0] != arg_77[1] && arg_147[0] == arg_183[0] && arg_147[0] == arg_27[0] && arg_147[0] != arg_65[1] && arg_147[0] == arg_49[0] && arg_147[0] == arg_189[0] && arg_147[0] != arg_59[1] && arg_147[0] == arg_105[0] && arg_147[0] == arg_221[0] && arg_147[0] == arg_247[0] && arg_147[0] != arg_19[1] && arg_147[0] == arg_253[0] && arg_147[0] == arg_77[0] && arg_147[0] != arg_15[1] && arg_147[0] != arg_81[1] && arg_147[0] == arg_91[0] && arg_147[0] != arg_91[1] && arg_147[0] == arg_155[0] && arg_147[0] != arg_159[1] && arg_147[0] != arg_191[1] && arg_147[0] != arg_95[1] && arg_147[0] != arg_221[1] && arg_147[0] == arg_251[0] && arg_147[0] == arg_45[0] && arg_147[0] != arg_21[1] && arg_147[0] == arg_139[0] && arg_147[0] != arg_171[1] && arg_147[0] == arg_89[0] && arg_147[0] != arg_183[1] && arg_147[0] != arg_141[1] && arg_147[0] == arg_207[0] && arg_147[0] != arg_51[1] && arg_147[0] == arg_233[0] && arg_147[0] == arg_13[0] && arg_147[0] == arg_237[0] && arg_147[0] != arg_147[1] && arg_147[0] == arg_57[0] && arg_147[0] == arg_119[0] && arg_147[0] != arg_63[1] && arg_147[0] == arg_169[0] && arg_145[0] == arg_215[0] && arg_145[0] != arg_155[1] && arg_145[0] != arg_217[1] && arg_145[0] != arg_253[1] && arg_145[0] == arg_171[0] && arg_145[0] == arg_43[0] && arg_145[0] == arg_239[0] && arg_145[0] != arg_29[1] && arg_145[0] != arg_113[1] && arg_145[0] != arg_203[1] && arg_145[0] != arg_239[1] && arg_145[0] == arg_65[0] && arg_145[0] == arg_191[0] && arg_145[0] == arg_127[0] && arg_145[0] != arg_33[1] && arg_145[0] != arg_13[1] && arg_145[0] != arg_89[1] && arg_145[0] != arg_127[1] && arg_145[0] != arg_223[1] && arg_145[0] != arg_45[1] && arg_145[0] != arg_119[1] && arg_145[0] == arg_59[0] && arg_145[0] != arg_161[1] && arg_145[0] != arg_169[1] && arg_145[0] == arg_35[0] && arg_145[0] != arg_83[1] && arg_145[0] != arg_125[1] && arg_145[0] == arg_217[0] && arg_145[0] == arg_245[0] && arg_145[0] == arg_21[0] && arg_145[0] == arg_97[0] && arg_145[0] == arg_75[0] && arg_145[0] == arg_161[0] && arg_145[0] != arg_209[1] && arg_145[0] != arg_97[1] && arg_145[0] != arg_121[1] && arg_145[0] != arg_247[1] && arg_145[0] == arg_19[0] && arg_145[0] != arg_145[1] && arg_145[0] != arg_251[1] && arg_145[0] == arg_29[0] && arg_145[0] != arg_107[1] && arg_145[0] == arg_231[0] && arg_145[0] == arg_81[0] && arg_145[0] == arg_63[0] && arg_145[0] != arg_215[1] && arg_145[0] != arg_35[1] && arg_145[0] != arg_153[1] && arg_145[0] == arg_121[0] && arg_145[0] == arg_33[0] && arg_145[0] != arg_111[1] && arg_145[0] == arg_177[0] && arg_145[0] == arg_203[0] && arg_145[0] == arg_153[0] && arg_145[0] == arg_95[0] && arg_145[0] == arg_83[0] && arg_145[0] != arg_175[1] && arg_145[0] == arg_159[0] && arg_145[0] == arg_141[0] && arg_145[0] == arg_201[0] && arg_145[0] != arg_177[1] && arg_145[0] == arg_111[0] && arg_145[0] != arg_189[1] && arg_145[0] != arg_27[1] && arg_145[0] != arg_233[1] && arg_145[0] != arg_231[1] && arg_145[0] == arg_175[0] && arg_145[0] == arg_125[0] && arg_145[0] == arg_223[0] && arg_145[0] != arg_207[1] && arg_145[0] != arg_139[1] && arg_145[0] != arg_77[1] && arg_145[0] == arg_183[0] && arg_145[0] == arg_27[0] && arg_145[0] != arg_65[1] && arg_145[0] == arg_49[0] && arg_145[0] == arg_189[0] && arg_145[0] != arg_59[1] && arg_145[0] == arg_105[0] && arg_145[0] == arg_221[0] && arg_145[0] == arg_247[0] && arg_145[0] != arg_19[1] && arg_145[0] == arg_253[0] && arg_145[0] == arg_77[0] && arg_145[0] != arg_15[1] && arg_145[0] != arg_81[1] && arg_145[0] == arg_91[0] && arg_145[0] != arg_91[1] && arg_145[0] == arg_155[0] && arg_145[0] != arg_159[1] && arg_145[0] != arg_191[1] && arg_145[0] != arg_95[1] && arg_145[0] != arg_221[1] && arg_145[0] == arg_251[0] && arg_145[0] == arg_45[0] && arg_145[0] != arg_21[1] && arg_145[0] == arg_139[0] && arg_145[0] != arg_171[1] && arg_145[0] == arg_89[0] && arg_145[0] != arg_183[1] && arg_145[0] != arg_141[1] && arg_145[0] == arg_207[0] && arg_145[0] != arg_51[1] && arg_145[0] == arg_233[0] && arg_145[0] == arg_13[0] && arg_145[0] == arg_237[0] && arg_145[0] != arg_147[1] && arg_145[0] == arg_57[0] && arg_145[0] == arg_119[0] && arg_145[0] != arg_63[1] && arg_145[0] == arg_169[0] && arg_215[0] != arg_155[1] && arg_215[0] != arg_217[1] && arg_215[0] != arg_253[1] && arg_215[0] == arg_171[0] && arg_215[0] == arg_43[0] && arg_215[0] == arg_239[0] && arg_215[0] != arg_29[1] && arg_215[0] != arg_113[1] && arg_215[0] != arg_203[1] && arg_215[0] != arg_239[1] && arg_215[0] == arg_65[0] && arg_215[0] == arg_191[0] && arg_215[0] == arg_127[0] && arg_215[0] != arg_33[1] && arg_215[0] != arg_13[1] && arg_215[0] != arg_89[1] && arg_215[0] != arg_127[1] && arg_215[0] != arg_223[1] && arg_215[0] != arg_45[1] && arg_215[0] != arg_119[1] && arg_215[0] == arg_59[0] && arg_215[0] != arg_161[1] && arg_215[0] != arg_169[1] && arg_215[0] == arg_35[0] && arg_215[0] != arg_83[1] && arg_215[0] != arg_125[1] && arg_215[0] == arg_217[0] && arg_215[0] == arg_245[0] && arg_215[0] == arg_21[0] && arg_215[0] == arg_97[0] && arg_215[0] == arg_75[0] && arg_215[0] == arg_161[0] && arg_215[0] != arg_209[1] && arg_215[0] != arg_97[1] && arg_215[0] != arg_121[1] && arg_215[0] != arg_247[1] && arg_215[0] == arg_19[0] && arg_215[0] != arg_145[1] && arg_215[0] != arg_251[1] && arg_215[0] == arg_29[0] && arg_215[0] != arg_107[1] && arg_215[0] == arg_231[0] && arg_215[0] == arg_81[0] && arg_215[0] == arg_63[0] && arg_215[0] != arg_215[1] && arg_215[0] != arg_35[1] && arg_215[0] != arg_153[1] && arg_215[0] == arg_121[0] && arg_215[0] == arg_33[0] && arg_215[0] != arg_111[1] && arg_215[0] == arg_177[0] && arg_215[0] == arg_203[0] && arg_215[0] == arg_153[0] && arg_215[0] == arg_95[0] && arg_215[0] == arg_83[0] && arg_215[0] != arg_175[1] && arg_215[0] == arg_159[0] && arg_215[0] == arg_141[0] && arg_215[0] == arg_201[0] && arg_215[0] != arg_177[1] && arg_215[0] == arg_111[0] && arg_215[0] != arg_189[1] && arg_215[0] != arg_27[1] && arg_215[0] != arg_233[1] && arg_215[0] != arg_231[1] && arg_215[0] == arg_175[0] && arg_215[0] == arg_125[0] && arg_215[0] == arg_223[0] && arg_215[0] != arg_207[1] && arg_215[0] != arg_139[1] && arg_215[0] != arg_77[1] && arg_215[0] == arg_183[0] && arg_215[0] == arg_27[0] && arg_215[0] != arg_65[1] && arg_215[0] == arg_49[0] && arg_215[0] == arg_189[0] && arg_215[0] != arg_59[1] && arg_215[0] == arg_105[0] && arg_215[0] == arg_221[0] && arg_215[0] == arg_247[0] && arg_215[0] != arg_19[1] && arg_215[0] == arg_253[0] && arg_215[0] == arg_77[0] && arg_215[0] != arg_15[1] && arg_215[0] != arg_81[1] && arg_215[0] == arg_91[0] && arg_215[0] != arg_91[1] && arg_215[0] == arg_155[0] && arg_215[0] != arg_159[1] && arg_215[0] != arg_191[1] && arg_215[0] != arg_95[1] && arg_215[0] != arg_221[1] && arg_215[0] == arg_251[0] && arg_215[0] == arg_45[0] && arg_215[0] != arg_21[1] && arg_215[0] == arg_139[0] && arg_215[0] != arg_171[1] && arg_215[0] == arg_89[0] && arg_215[0] != arg_183[1] && arg_215[0] != arg_141[1] && arg_215[0] == arg_207[0] && arg_215[0] != arg_51[1] && arg_215[0] == arg_233[0] && arg_215[0] == arg_13[0] && arg_215[0] == arg_237[0] && arg_215[0] != arg_147[1] && arg_215[0] == arg_57[0] && arg_215[0] == arg_119[0] && arg_215[0] != arg_63[1] && arg_215[0] == arg_169[0] && arg_155[1] == arg_217[1] && arg_155[1] == arg_253[1] && arg_155[1] != arg_171[0] && arg_155[1] != arg_43[0] && arg_155[1] != arg_239[0] && arg_155[1] == arg_29[1] && arg_155[1] == arg_113[1] && arg_155[1] == arg_203[1] && arg_155[1] == arg_239[1] && arg_155[1] != arg_65[0] && arg_155[1] != arg_191[0] && arg_155[1] != arg_127[0] && arg_155[1] == arg_33[1] && arg_155[1] == arg_13[1] && arg_155[1] == arg_89[1] && arg_155[1] == arg_127[1] && arg_155[1] == arg_223[1] && arg_155[1] == arg_45[1] && arg_155[1] == arg_119[1] && arg_155[1] != arg_59[0] && arg_155[1] == arg_161[1] && arg_155[1] == arg_169[1] && arg_155[1] != arg_35[0] && arg_155[1] == arg_83[1] && arg_155[1] == arg_125[1] && arg_155[1] != arg_217[0] && arg_155[1] != arg_245[0] && arg_155[1] != arg_21[0] && arg_155[1] != arg_97[0] && arg_155[1] != arg_75[0] && arg_155[1] != arg_161[0] && arg_155[1] == arg_209[1] && arg_155[1] == arg_97[1] && arg_155[1] == arg_121[1] && arg_155[1] == arg_247[1] && arg_155[1] != arg_19[0] && arg_155[1] == arg_145[1] && arg_155[1] == arg_251[1] && arg_155[1] != arg_29[0] && arg_155[1] == arg_107[1] && arg_155[1] != arg_231[0] && arg_155[1] != arg_81[0] && arg_155[1] != arg_63[0] && arg_155[1] == arg_215[1] && arg_155[1] == arg_35[1] && arg_155[1] == arg_153[1] && arg_155[1] != arg_121[0] && arg_155[1] != arg_33[0] && arg_155[1] == arg_111[1] && arg_155[1] != arg_177[0] && arg_155[1] != arg_203[0] && arg_155[1] != arg_153[0] && arg_155[1] != arg_95[0] && arg_155[1] != arg_83[0] && arg_155[1] == arg_175[1] && arg_155[1] != arg_159[0] && arg_155[1] != arg_141[0] && arg_155[1] != arg_201[0] && arg_155[1] == arg_177[1] && arg_155[1] != arg_111[0] && arg_155[1] == arg_189[1] && arg_155[1] == arg_27[1] && arg_155[1] == arg_233[1] && arg_155[1] == arg_231[1] && arg_155[1] != arg_175[0] && arg_155[1] != arg_125[0] && arg_155[1] != arg_223[0] && arg_155[1] == arg_207[1] && arg_155[1] == arg_139[1] && arg_155[1] == arg_77[1] && arg_155[1] != arg_183[0] && arg_155[1] != arg_27[0] && arg_155[1] == arg_65[1] && arg_155[1] != arg_49[0] && arg_155[1] != arg_189[0] && arg_155[1] == arg_59[1] && arg_155[1] != arg_105[0] && arg_155[1] != arg_221[0] && arg_155[1] != arg_247[0] && arg_155[1] == arg_19[1] && arg_155[1] != arg_253[0] && arg_155[1] != arg_77[0] && arg_155[1] == arg_15[1] && arg_155[1] == arg_81[1] && arg_155[1] != arg_91[0] && arg_155[1] == arg_91[1] && arg_155[1] != arg_155[0] && arg_155[1] == arg_159[1] && arg_155[1] == arg_191[1] && arg_155[1] == arg_95[1] && arg_155[1] == arg_221[1] && arg_155[1] != arg_251[0] && arg_155[1] != arg_45[0] && arg_155[1] == arg_21[1] && arg_155[1] != arg_139[0] && arg_155[1] == arg_171[1] && arg_155[1] != arg_89[0] && arg_155[1] == arg_183[1] && arg_155[1] == arg_141[1] && arg_155[1] != arg_207[0] && arg_155[1] == arg_51[1] && arg_155[1] != arg_233[0] && arg_155[1] != arg_13[0] && arg_155[1] != arg_237[0] && arg_155[1] == arg_147[1] && arg_155[1] != arg_57[0] && arg_155[1] != arg_119[0] && arg_155[1] == arg_63[1] && arg_155[1] != arg_169[0] && arg_217[1] == arg_253[1] && arg_217[1] != arg_171[0] && arg_217[1] != arg_43[0] && arg_217[1] != arg_239[0] && arg_217[1] == arg_29[1] && arg_217[1] == arg_113[1] && arg_217[1] == arg_203[1] && arg_217[1] == arg_239[1] && arg_217[1] != arg_65[0] && arg_217[1] != arg_191[0] && arg_217[1] != arg_127[0] && arg_217[1] == arg_33[1] && arg_217[1] == arg_13[1] && arg_217[1] == arg_89[1] && arg_217[1] == arg_127[1] && arg_217[1] == arg_223[1] && arg_217[1] == arg_45[1] && arg_217[1] == arg_119[1] && arg_217[1] != arg_59[0] && arg_217[1] == arg_161[1] && arg_217[1] == arg_169[1] && arg_217[1] != arg_35[0] && arg_217[1] == arg_83[1] && arg_217[1] == arg_125[1] && arg_217[1] != arg_217[0] && arg_217[1] != arg_245[0] && arg_217[1] != arg_21[0] && arg_217[1] != arg_97[0] && arg_217[1] != arg_75[0] && arg_217[1] != arg_161[0] && arg_217[1] == arg_209[1] && arg_217[1] == arg_97[1] && arg_217[1] == arg_121[1] && arg_217[1] == arg_247[1] && arg_217[1] != arg_19[0] && arg_217[1] == arg_145[1] && arg_217[1] == arg_251[1] && arg_217[1] != arg_29[0] && arg_217[1] == arg_107[1] && arg_217[1] != arg_231[0] && arg_217[1] != arg_81[0] && arg_217[1] != arg_63[0] && arg_217[1] == arg_215[1] && arg_217[1] == arg_35[1] && arg_217[1] == arg_153[1] && arg_217[1] != arg_121[0] && arg_217[1] != arg_33[0] && arg_217[1] == arg_111[1] && arg_217[1] != arg_177[0] && arg_217[1] != arg_203[0] && arg_217[1] != arg_153[0] && arg_217[1] != arg_95[0] && arg_217[1] != arg_83[0] && arg_217[1] == arg_175[1] && arg_217[1] != arg_159[0] && arg_217[1] != arg_141[0] && arg_217[1] != arg_201[0] && arg_217[1] == arg_177[1] && arg_217[1] != arg_111[0] && arg_217[1] == arg_189[1] && arg_217[1] == arg_27[1] && arg_217[1] == arg_233[1] && arg_217[1] == arg_231[1] && arg_217[1] != arg_175[0] && arg_217[1] != arg_125[0] && arg_217[1] != arg_223[0] && arg_217[1] == arg_207[1] && arg_217[1] == arg_139[1] && arg_217[1] == arg_77[1] && arg_217[1] != arg_183[0] && arg_217[1] != arg_27[0] && arg_217[1] == arg_65[1] && arg_217[1] != arg_49[0] && arg_217[1] != arg_189[0] && arg_217[1] == arg_59[1] && arg_217[1] != arg_105[0] && arg_217[1] != arg_221[0] && arg_217[1] != arg_247[0] && arg_217[1] == arg_19[1] && arg_217[1] != arg_253[0] && arg_217[1] != arg_77[0] && arg_217[1] == arg_15[1] && arg_217[1] == arg_81[1] && arg_217[1] != arg_91[0] && arg_217[1] == arg_91[1] && arg_217[1] != arg_155[0] && arg_217[1] == arg_159[1] && arg_217[1] == arg_191[1] && arg_217[1] == arg_95[1] && arg_217[1] == arg_221[1] && arg_217[1] != arg_251[0] && arg_217[1] != arg_45[0] && arg_217[1] == arg_21[1] && arg_217[1] != arg_139[0] && arg_217[1] == arg_171[1] && arg_217[1] != arg_89[0] && arg_217[1] == arg_183[1] && arg_217[1] == arg_141[1] && arg_217[1] != arg_207[0] && arg_217[1] == arg_51[1] && arg_217[1] != arg_233[0] && arg_217[1] != arg_13[0] && arg_217[1] != arg_237[0] && arg_217[1] == arg_147[1] && arg_217[1] != arg_57[0] && arg_217[1] != arg_119[0] && arg_217[1] == arg_63[1] && arg_217[1] != arg_169[0] && arg_253[1] != arg_171[0] && arg_253[1] != arg_43[0] && arg_253[1] != arg_239[0] && arg_253[1] == arg_29[1] && arg_253[1] == arg_113[1] && arg_253[1] == arg_203[1] && arg_253[1] == arg_239[1] && arg_253[1] != arg_65[0] && arg_253[1] != arg_191[0] && arg_253[1] != arg_127[0] && arg_253[1] == arg_33[1] && arg_253[1] == arg_13[1] && arg_253[1] == arg_89[1] && arg_253[1] == arg_127[1] && arg_253[1] == arg_223[1] && arg_253[1] == arg_45[1] && arg_253[1] == arg_119[1] && arg_253[1] != arg_59[0] && arg_253[1] == arg_161[1] && arg_253[1] == arg_169[1] && arg_253[1] != arg_35[0] && arg_253[1] == arg_83[1] && arg_253[1] == arg_125[1] && arg_253[1] != arg_217[0] && arg_253[1] != arg_245[0] && arg_253[1] != arg_21[0] && arg_253[1] != arg_97[0] && arg_253[1] != arg_75[0] && arg_253[1] != arg_161[0] && arg_253[1] == arg_209[1] && arg_253[1] == arg_97[1] && arg_253[1] == arg_121[1] && arg_253[1] == arg_247[1] && arg_253[1] != arg_19[0] && arg_253[1] == arg_145[1] && arg_253[1] == arg_251[1] && arg_253[1] != arg_29[0] && arg_253[1] == arg_107[1] && arg_253[1] != arg_231[0] && arg_253[1] != arg_81[0] && arg_253[1] != arg_63[0] && arg_253[1] == arg_215[1] && arg_253[1] == arg_35[1] && arg_253[1] == arg_153[1] && arg_253[1] != arg_121[0] && arg_253[1] != arg_33[0] && arg_253[1] == arg_111[1] && arg_253[1] != arg_177[0] && arg_253[1] != arg_203[0] && arg_253[1] != arg_153[0] && arg_253[1] != arg_95[0] && arg_253[1] != arg_83[0] && arg_253[1] == arg_175[1] && arg_253[1] != arg_159[0] && arg_253[1] != arg_141[0] && arg_253[1] != arg_201[0] && arg_253[1] == arg_177[1] && arg_253[1] != arg_111[0] && arg_253[1] == arg_189[1] && arg_253[1] == arg_27[1] && arg_253[1] == arg_233[1] && arg_253[1] == arg_231[1] && arg_253[1] != arg_175[0] && arg_253[1] != arg_125[0] && arg_253[1] != arg_223[0] && arg_253[1] == arg_207[1] && arg_253[1] == arg_139[1] && arg_253[1] == arg_77[1] && arg_253[1] != arg_183[0] && arg_253[1] != arg_27[0] && arg_253[1] == arg_65[1] && arg_253[1] != arg_49[0] && arg_253[1] != arg_189[0] && arg_253[1] == arg_59[1] && arg_253[1] != arg_105[0] && arg_253[1] != arg_221[0] && arg_253[1] != arg_247[0] && arg_253[1] == arg_19[1] && arg_253[1] != arg_253[0] && arg_253[1] != arg_77[0] && arg_253[1] == arg_15[1] && arg_253[1] == arg_81[1] && arg_253[1] != arg_91[0] && arg_253[1] == arg_91[1] && arg_253[1] != arg_155[0] && arg_253[1] == arg_159[1] && arg_253[1] == arg_191[1] && arg_253[1] == arg_95[1] && arg_253[1] == arg_221[1] && arg_253[1] != arg_251[0] && arg_253[1] != arg_45[0] && arg_253[1] == arg_21[1] && arg_253[1] != arg_139[0] && arg_253[1] == arg_171[1] && arg_253[1] != arg_89[0] && arg_253[1] == arg_183[1] && arg_253[1] == arg_141[1] && arg_253[1] != arg_207[0] && arg_253[1] == arg_51[1] && arg_253[1] != arg_233[0] && arg_253[1] != arg_13[0] && arg_253[1] != arg_237[0] && arg_253[1] == arg_147[1] && arg_253[1] != arg_57[0] && arg_253[1] != arg_119[0] && arg_253[1] == arg_63[1] && arg_253[1] != arg_169[0] && arg_171[0] == arg_43[0] && arg_171[0] == arg_239[0] && arg_171[0] != arg_29[1] && arg_171[0] != arg_113[1] && arg_171[0] != arg_203[1] && arg_171[0] != arg_239[1] && arg_171[0] == arg_65[0] && arg_171[0] == arg_191[0] && arg_171[0] == arg_127[0] && arg_171[0] != arg_33[1] && arg_171[0] != arg_13[1] && arg_171[0] != arg_89[1] && arg_171[0] != arg_127[1] && arg_171[0] != arg_223[1] && arg_171[0] != arg_45[1] && arg_171[0] != arg_119[1] && arg_171[0] == arg_59[0] && arg_171[0] != arg_161[1] && arg_171[0] != arg_169[1] && arg_171[0] == arg_35[0] && arg_171[0] != arg_83[1] && arg_171[0] != arg_125[1] && arg_171[0] == arg_217[0] && arg_171[0] == arg_245[0] && arg_171[0] == arg_21[0] && arg_171[0] == arg_97[0] && arg_171[0] == arg_75[0] && arg_171[0] == arg_161[0] && arg_171[0] != arg_209[1] && arg_171[0] != arg_97[1] && arg_171[0] != arg_121[1] && arg_171[0] != arg_247[1] && arg_171[0] == arg_19[0] && arg_171[0] != arg_145[1] && arg_171[0] != arg_251[1] && arg_171[0] == arg_29[0] && arg_171[0] != arg_107[1] && arg_171[0] == arg_231[0] && arg_171[0] == arg_81[0] && arg_171[0] == arg_63[0] && arg_171[0] != arg_215[1] && arg_171[0] != arg_35[1] && arg_171[0] != arg_153[1] && arg_171[0] == arg_121[0] && arg_171[0] == arg_33[0] && arg_171[0] != arg_111[1] && arg_171[0] == arg_177[0] && arg_171[0] == arg_203[0] && arg_171[0] == arg_153[0] && arg_171[0] == arg_95[0] && arg_171[0] == arg_83[0] && arg_171[0] != arg_175[1] && arg_171[0] == arg_159[0] && arg_171[0] == arg_141[0] && arg_171[0] == arg_201[0] && arg_171[0] != arg_177[1] && arg_171[0] == arg_111[0] && arg_171[0] != arg_189[1] && arg_171[0] != arg_27[1] && arg_171[0] != arg_233[1] && arg_171[0] != arg_231[1] && arg_171[0] == arg_175[0] && arg_171[0] == arg_125[0] && arg_171[0] == arg_223[0] && arg_171[0] != arg_207[1] && arg_171[0] != arg_139[1] && arg_171[0] != arg_77[1] && arg_171[0] == arg_183[0] && arg_171[0] == arg_27[0] && arg_171[0] != arg_65[1] && arg_171[0] == arg_49[0] && arg_171[0] == arg_189[0] && arg_171[0] != arg_59[1] && arg_171[0] == arg_105[0] && arg_171[0] == arg_221[0] && arg_171[0] == arg_247[0] && arg_171[0] != arg_19[1] && arg_171[0] == arg_253[0] && arg_171[0] == arg_77[0] && arg_171[0] != arg_15[1] && arg_171[0] != arg_81[1] && arg_171[0] == arg_91[0] && arg_171[0] != arg_91[1] && arg_171[0] == arg_155[0] && arg_171[0] != arg_159[1] && arg_171[0] != arg_191[1] && arg_171[0] != arg_95[1] && arg_171[0] != arg_221[1] && arg_171[0] == arg_251[0] && arg_171[0] == arg_45[0] && arg_171[0] != arg_21[1] && arg_171[0] == arg_139[0] && arg_171[0] != arg_171[1] && arg_171[0] == arg_89[0] && arg_171[0] != arg_183[1] && arg_171[0] != arg_141[1] && arg_171[0] == arg_207[0] && arg_171[0] != arg_51[1] && arg_171[0] == arg_233[0] && arg_171[0] == arg_13[0] && arg_171[0] == arg_237[0] && arg_171[0] != arg_147[1] && arg_171[0] == arg_57[0] && arg_171[0] == arg_119[0] && arg_171[0] != arg_63[1] && arg_171[0] == arg_169[0] && arg_43[0] == arg_239[0] && arg_43[0] != arg_29[1] && arg_43[0] != arg_113[1] && arg_43[0] != arg_203[1] && arg_43[0] != arg_239[1] && arg_43[0] == arg_65[0] && arg_43[0] == arg_191[0] && arg_43[0] == arg_127[0] && arg_43[0] != arg_33[1] && arg_43[0] != arg_13[1] && arg_43[0] != arg_89[1] && arg_43[0] != arg_127[1] && arg_43[0] != arg_223[1] && arg_43[0] != arg_45[1] && arg_43[0] != arg_119[1] && arg_43[0] == arg_59[0] && arg_43[0] != arg_161[1] && arg_43[0] != arg_169[1] && arg_43[0] == arg_35[0] && arg_43[0] != arg_83[1] && arg_43[0] != arg_125[1] && arg_43[0] == arg_217[0] && arg_43[0] == arg_245[0] && arg_43[0] == arg_21[0] && arg_43[0] == arg_97[0] && arg_43[0] == arg_75[0] && arg_43[0] == arg_161[0] && arg_43[0] != arg_209[1] && arg_43[0] != arg_97[1] && arg_43[0] != arg_121[1] && arg_43[0] != arg_247[1] && arg_43[0] == arg_19[0] && arg_43[0] != arg_145[1] && arg_43[0] != arg_251[1] && arg_43[0] == arg_29[0] && arg_43[0] != arg_107[1] && arg_43[0] == arg_231[0] && arg_43[0] == arg_81[0] && arg_43[0] == arg_63[0] && arg_43[0] != arg_215[1] && arg_43[0] != arg_35[1] && arg_43[0] != arg_153[1] && arg_43[0] == arg_121[0] && arg_43[0] == arg_33[0] && arg_43[0] != arg_111[1] && arg_43[0] == arg_177[0] && arg_43[0] == arg_203[0] && arg_43[0] == arg_153[0] && arg_43[0] == arg_95[0] && arg_43[0] == arg_83[0] && arg_43[0] != arg_175[1] && arg_43[0] == arg_159[0] && arg_43[0] == arg_141[0] && arg_43[0] == arg_201[0] && arg_43[0] != arg_177[1] && arg_43[0] == arg_111[0] && arg_43[0] != arg_189[1] && arg_43[0] != arg_27[1] && arg_43[0] != arg_233[1] && arg_43[0] != arg_231[1] && arg_43[0] == arg_175[0] && arg_43[0] == arg_125[0] && arg_43[0] == arg_223[0] && arg_43[0] != arg_207[1] && arg_43[0] != arg_139[1] && arg_43[0] != arg_77[1] && arg_43[0] == arg_183[0] && arg_43[0] == arg_27[0] && arg_43[0] != arg_65[1] && arg_43[0] == arg_49[0] && arg_43[0] == arg_189[0] && arg_43[0] != arg_59[1] && arg_43[0] == arg_105[0] && arg_43[0] == arg_221[0] && arg_43[0] == arg_247[0] && arg_43[0] != arg_19[1] && arg_43[0] == arg_253[0] && arg_43[0] == arg_77[0] && arg_43[0] != arg_15[1] && arg_43[0] != arg_81[1] && arg_43[0] == arg_91[0] && arg_43[0] != arg_91[1] && arg_43[0] == arg_155[0] && arg_43[0] != arg_159[1] && arg_43[0] != arg_191[1] && arg_43[0] != arg_95[1] && arg_43[0] != arg_221[1] && arg_43[0] == arg_251[0] && arg_43[0] == arg_45[0] && arg_43[0] != arg_21[1] && arg_43[0] == arg_139[0] && arg_43[0] != arg_171[1] && arg_43[0] == arg_89[0] && arg_43[0] != arg_183[1] && arg_43[0] != arg_141[1] && arg_43[0] == arg_207[0] && arg_43[0] != arg_51[1] && arg_43[0] == arg_233[0] && arg_43[0] == arg_13[0] && arg_43[0] == arg_237[0] && arg_43[0] != arg_147[1] && arg_43[0] == arg_57[0] && arg_43[0] == arg_119[0] && arg_43[0] != arg_63[1] && arg_43[0] == arg_169[0] && arg_239[0] != arg_29[1] && arg_239[0] != arg_113[1] && arg_239[0] != arg_203[1] && arg_239[0] != arg_239[1] && arg_239[0] == arg_65[0] && arg_239[0] == arg_191[0] && arg_239[0] == arg_127[0] && arg_239[0] != arg_33[1] && arg_239[0] != arg_13[1] && arg_239[0] != arg_89[1] && arg_239[0] != arg_127[1] && arg_239[0] != arg_223[1] && arg_239[0] != arg_45[1] && arg_239[0] != arg_119[1] && arg_239[0] == arg_59[0] && arg_239[0] != arg_161[1] && arg_239[0] != arg_169[1] && arg_239[0] == arg_35[0] && arg_239[0] != arg_83[1] && arg_239[0] != arg_125[1] && arg_239[0] == arg_217[0] && arg_239[0] == arg_245[0] && arg_239[0] == arg_21[0] && arg_239[0] == arg_97[0] && arg_239[0] == arg_75[0] && arg_239[0] == arg_161[0] && arg_239[0] != arg_209[1] && arg_239[0] != arg_97[1] && arg_239[0] != arg_121[1] && arg_239[0] != arg_247[1] && arg_239[0] == arg_19[0] && arg_239[0] != arg_145[1] && arg_239[0] != arg_251[1] && arg_239[0] == arg_29[0] && arg_239[0] != arg_107[1] && arg_239[0] == arg_231[0] && arg_239[0] == arg_81[0] && arg_239[0] == arg_63[0] && arg_239[0] != arg_215[1] && arg_239[0] != arg_35[1] && arg_239[0] != arg_153[1] && arg_239[0] == arg_121[0] && arg_239[0] == arg_33[0] && arg_239[0] != arg_111[1] && arg_239[0] == arg_177[0] && arg_239[0] == arg_203[0] && arg_239[0] == arg_153[0] && arg_239[0] == arg_95[0] && arg_239[0] == arg_83[0] && arg_239[0] != arg_175[1] && arg_239[0] == arg_159[0] && arg_239[0] == arg_141[0] && arg_239[0] == arg_201[0] && arg_239[0] != arg_177[1] && arg_239[0] == arg_111[0] && arg_239[0] != arg_189[1] && arg_239[0] != arg_27[1] && arg_239[0] != arg_233[1] && arg_239[0] != arg_231[1] && arg_239[0] == arg_175[0] && arg_239[0] == arg_125[0] && arg_239[0] == arg_223[0] && arg_239[0] != arg_207[1] && arg_239[0] != arg_139[1] && arg_239[0] != arg_77[1] && arg_239[0] == arg_183[0] && arg_239[0] == arg_27[0] && arg_239[0] != arg_65[1] && arg_239[0] == arg_49[0] && arg_239[0] == arg_189[0] && arg_239[0] != arg_59[1] && arg_239[0] == arg_105[0] && arg_239[0] == arg_221[0] && arg_239[0] == arg_247[0] && arg_239[0] != arg_19[1] && arg_239[0] == arg_253[0] && arg_239[0] == arg_77[0] && arg_239[0] != arg_15[1] && arg_239[0] != arg_81[1] && arg_239[0] == arg_91[0] && arg_239[0] != arg_91[1] && arg_239[0] == arg_155[0] && arg_239[0] != arg_159[1] && arg_239[0] != arg_191[1] && arg_239[0] != arg_95[1] && arg_239[0] != arg_221[1] && arg_239[0] == arg_251[0] && arg_239[0] == arg_45[0] && arg_239[0] != arg_21[1] && arg_239[0] == arg_139[0] && arg_239[0] != arg_171[1] && arg_239[0] == arg_89[0] && arg_239[0] != arg_183[1] && arg_239[0] != arg_141[1] && arg_239[0] == arg_207[0] && arg_239[0] != arg_51[1] && arg_239[0] == arg_233[0] && arg_239[0] == arg_13[0] && arg_239[0] == arg_237[0] && arg_239[0] != arg_147[1] && arg_239[0] == arg_57[0] && arg_239[0] == arg_119[0] && arg_239[0] != arg_63[1] && arg_239[0] == arg_169[0] && arg_29[1] == arg_113[1] && arg_29[1] == arg_203[1] && arg_29[1] == arg_239[1] && arg_29[1] != arg_65[0] && arg_29[1] != arg_191[0] && arg_29[1] != arg_127[0] && arg_29[1] == arg_33[1] && arg_29[1] == arg_13[1] && arg_29[1] == arg_89[1] && arg_29[1] == arg_127[1] && arg_29[1] == arg_223[1] && arg_29[1] == arg_45[1] && arg_29[1] == arg_119[1] && arg_29[1] != arg_59[0] && arg_29[1] == arg_161[1] && arg_29[1] == arg_169[1] && arg_29[1] != arg_35[0] && arg_29[1] == arg_83[1] && arg_29[1] == arg_125[1] && arg_29[1] != arg_217[0] && arg_29[1] != arg_245[0] && arg_29[1] != arg_21[0] && arg_29[1] != arg_97[0] && arg_29[1] != arg_75[0] && arg_29[1] != arg_161[0] && arg_29[1] == arg_209[1] && arg_29[1] == arg_97[1] && arg_29[1] == arg_121[1] && arg_29[1] == arg_247[1] && arg_29[1] != arg_19[0] && arg_29[1] == arg_145[1] && arg_29[1] == arg_251[1] && arg_29[1] != arg_29[0] && arg_29[1] == arg_107[1] && arg_29[1] != arg_231[0] && arg_29[1] != arg_81[0] && arg_29[1] != arg_63[0] && arg_29[1] == arg_215[1] && arg_29[1] == arg_35[1] && arg_29[1] == arg_153[1] && arg_29[1] != arg_121[0] && arg_29[1] != arg_33[0] && arg_29[1] == arg_111[1] && arg_29[1] != arg_177[0] && arg_29[1] != arg_203[0] && arg_29[1] != arg_153[0] && arg_29[1] != arg_95[0] && arg_29[1] != arg_83[0] && arg_29[1] == arg_175[1] && arg_29[1] != arg_159[0] && arg_29[1] != arg_141[0] && arg_29[1] != arg_201[0] && arg_29[1] == arg_177[1] && arg_29[1] != arg_111[0] && arg_29[1] == arg_189[1] && arg_29[1] == arg_27[1] && arg_29[1] == arg_233[1] && arg_29[1] == arg_231[1] && arg_29[1] != arg_175[0] && arg_29[1] != arg_125[0] && arg_29[1] != arg_223[0] && arg_29[1] == arg_207[1] && arg_29[1] == arg_139[1] && arg_29[1] == arg_77[1] && arg_29[1] != arg_183[0] && arg_29[1] != arg_27[0] && arg_29[1] == arg_65[1] && arg_29[1] != arg_49[0] && arg_29[1] != arg_189[0] && arg_29[1] == arg_59[1] && arg_29[1] != arg_105[0] && arg_29[1] != arg_221[0] && arg_29[1] != arg_247[0] && arg_29[1] == arg_19[1] && arg_29[1] != arg_253[0] && arg_29[1] != arg_77[0] && arg_29[1] == arg_15[1] && arg_29[1] == arg_81[1] && arg_29[1] != arg_91[0] && arg_29[1] == arg_91[1] && arg_29[1] != arg_155[0] && arg_29[1] == arg_159[1] && arg_29[1] == arg_191[1] && arg_29[1] == arg_95[1] && arg_29[1] == arg_221[1] && arg_29[1] != arg_251[0] && arg_29[1] != arg_45[0] && arg_29[1] == arg_21[1] && arg_29[1] != arg_139[0] && arg_29[1] == arg_171[1] && arg_29[1] != arg_89[0] && arg_29[1] == arg_183[1] && arg_29[1] == arg_141[1] && arg_29[1] != arg_207[0] && arg_29[1] == arg_51[1] && arg_29[1] != arg_233[0] && arg_29[1] != arg_13[0] && arg_29[1] != arg_237[0] && arg_29[1] == arg_147[1] && arg_29[1] != arg_57[0] && arg_29[1] != arg_119[0] && arg_29[1] == arg_63[1] && arg_29[1] != arg_169[0] && arg_113[1] == arg_203[1] && arg_113[1] == arg_239[1] && arg_113[1] != arg_65[0] && arg_113[1] != arg_191[0] && arg_113[1] != arg_127[0] && arg_113[1] == arg_33[1] && arg_113[1] == arg_13[1] && arg_113[1] == arg_89[1] && arg_113[1] == arg_127[1] && arg_113[1] == arg_223[1] && arg_113[1] == arg_45[1] && arg_113[1] == arg_119[1] && arg_113[1] != arg_59[0] && arg_113[1] == arg_161[1] && arg_113[1] == arg_169[1] && arg_113[1] != arg_35[0] && arg_113[1] == arg_83[1] && arg_113[1] == arg_125[1] && arg_113[1] != arg_217[0] && arg_113[1] != arg_245[0] && arg_113[1] != arg_21[0] && arg_113[1] != arg_97[0] && arg_113[1] != arg_75[0] && arg_113[1] != arg_161[0] && arg_113[1] == arg_209[1] && arg_113[1] == arg_97[1] && arg_113[1] == arg_121[1] && arg_113[1] == arg_247[1] && arg_113[1] != arg_19[0] && arg_113[1] == arg_145[1] && arg_113[1] == arg_251[1] && arg_113[1] != arg_29[0] && arg_113[1] == arg_107[1] && arg_113[1] != arg_231[0] && arg_113[1] != arg_81[0] && arg_113[1] != arg_63[0] && arg_113[1] == arg_215[1] && arg_113[1] == arg_35[1] && arg_113[1] == arg_153[1] && arg_113[1] != arg_121[0] && arg_113[1] != arg_33[0] && arg_113[1] == arg_111[1] && arg_113[1] != arg_177[0] && arg_113[1] != arg_203[0] && arg_113[1] != arg_153[0] && arg_113[1] != arg_95[0] && arg_113[1] != arg_83[0] && arg_113[1] == arg_175[1] && arg_113[1] != arg_159[0] && arg_113[1] != arg_141[0] && arg_113[1] != arg_201[0] && arg_113[1] == arg_177[1] && arg_113[1] != arg_111[0] && arg_113[1] == arg_189[1] && arg_113[1] == arg_27[1] && arg_113[1] == arg_233[1] && arg_113[1] == arg_231[1] && arg_113[1] != arg_175[0] && arg_113[1] != arg_125[0] && arg_113[1] != arg_223[0] && arg_113[1] == arg_207[1] && arg_113[1] == arg_139[1] && arg_113[1] == arg_77[1] && arg_113[1] != arg_183[0] && arg_113[1] != arg_27[0] && arg_113[1] == arg_65[1] && arg_113[1] != arg_49[0] && arg_113[1] != arg_189[0] && arg_113[1] == arg_59[1] && arg_113[1] != arg_105[0] && arg_113[1] != arg_221[0] && arg_113[1] != arg_247[0] && arg_113[1] == arg_19[1] && arg_113[1] != arg_253[0] && arg_113[1] != arg_77[0] && arg_113[1] == arg_15[1] && arg_113[1] == arg_81[1] && arg_113[1] != arg_91[0] && arg_113[1] == arg_91[1] && arg_113[1] != arg_155[0] && arg_113[1] == arg_159[1] && arg_113[1] == arg_191[1] && arg_113[1] == arg_95[1] && arg_113[1] == arg_221[1] && arg_113[1] != arg_251[0] && arg_113[1] != arg_45[0] && arg_113[1] == arg_21[1] && arg_113[1] != arg_139[0] && arg_113[1] == arg_171[1] && arg_113[1] != arg_89[0] && arg_113[1] == arg_183[1] && arg_113[1] == arg_141[1] && arg_113[1] != arg_207[0] && arg_113[1] == arg_51[1] && arg_113[1] != arg_233[0] && arg_113[1] != arg_13[0] && arg_113[1] != arg_237[0] && arg_113[1] == arg_147[1] && arg_113[1] != arg_57[0] && arg_113[1] != arg_119[0] && arg_113[1] == arg_63[1] && arg_113[1] != arg_169[0] && arg_203[1] == arg_239[1] && arg_203[1] != arg_65[0] && arg_203[1] != arg_191[0] && arg_203[1] != arg_127[0] && arg_203[1] == arg_33[1] && arg_203[1] == arg_13[1] && arg_203[1] == arg_89[1] && arg_203[1] == arg_127[1] && arg_203[1] == arg_223[1] && arg_203[1] == arg_45[1] && arg_203[1] == arg_119[1] && arg_203[1] != arg_59[0] && arg_203[1] == arg_161[1] && arg_203[1] == arg_169[1] && arg_203[1] != arg_35[0] && arg_203[1] == arg_83[1] && arg_203[1] == arg_125[1] && arg_203[1] != arg_217[0] && arg_203[1] != arg_245[0] && arg_203[1] != arg_21[0] && arg_203[1] != arg_97[0] && arg_203[1] != arg_75[0] && arg_203[1] != arg_161[0] && arg_203[1] == arg_209[1] && arg_203[1] == arg_97[1] && arg_203[1] == arg_121[1] && arg_203[1] == arg_247[1] && arg_203[1] != arg_19[0] && arg_203[1] == arg_145[1] && arg_203[1] == arg_251[1] && arg_203[1] != arg_29[0] && arg_203[1] == arg_107[1] && arg_203[1] != arg_231[0] && arg_203[1] != arg_81[0] && arg_203[1] != arg_63[0] && arg_203[1] == arg_215[1] && arg_203[1] == arg_35[1] && arg_203[1] == arg_153[1] && arg_203[1] != arg_121[0] && arg_203[1] != arg_33[0] && arg_203[1] == arg_111[1] && arg_203[1] != arg_177[0] && arg_203[1] != arg_203[0] && arg_203[1] != arg_153[0] && arg_203[1] != arg_95[0] && arg_203[1] != arg_83[0] && arg_203[1] == arg_175[1] && arg_203[1] != arg_159[0] && arg_203[1] != arg_141[0] && arg_203[1] != arg_201[0] && arg_203[1] == arg_177[1] && arg_203[1] != arg_111[0] && arg_203[1] == arg_189[1] && arg_203[1] == arg_27[1] && arg_203[1] == arg_233[1] && arg_203[1] == arg_231[1] && arg_203[1] != arg_175[0] && arg_203[1] != arg_125[0] && arg_203[1] != arg_223[0] && arg_203[1] == arg_207[1] && arg_203[1] == arg_139[1] && arg_203[1] == arg_77[1] && arg_203[1] != arg_183[0] && arg_203[1] != arg_27[0] && arg_203[1] == arg_65[1] && arg_203[1] != arg_49[0] && arg_203[1] != arg_189[0] && arg_203[1] == arg_59[1] && arg_203[1] != arg_105[0] && arg_203[1] != arg_221[0] && arg_203[1] != arg_247[0] && arg_203[1] == arg_19[1] && arg_203[1] != arg_253[0] && arg_203[1] != arg_77[0] && arg_203[1] == arg_15[1] && arg_203[1] == arg_81[1] && arg_203[1] != arg_91[0] && arg_203[1] == arg_91[1] && arg_203[1] != arg_155[0] && arg_203[1] == arg_159[1] && arg_203[1] == arg_191[1] && arg_203[1] == arg_95[1] && arg_203[1] == arg_221[1] && arg_203[1] != arg_251[0] && arg_203[1] != arg_45[0] && arg_203[1] == arg_21[1] && arg_203[1] != arg_139[0] && arg_203[1] == arg_171[1] && arg_203[1] != arg_89[0] && arg_203[1] == arg_183[1] && arg_203[1] == arg_141[1] && arg_203[1] != arg_207[0] && arg_203[1] == arg_51[1] && arg_203[1] != arg_233[0] && arg_203[1] != arg_13[0] && arg_203[1] != arg_237[0] && arg_203[1] == arg_147[1] && arg_203[1] != arg_57[0] && arg_203[1] != arg_119[0] && arg_203[1] == arg_63[1] && arg_203[1] != arg_169[0] && arg_239[1] != arg_65[0] && arg_239[1] != arg_191[0] && arg_239[1] != arg_127[0] && arg_239[1] == arg_33[1] && arg_239[1] == arg_13[1] && arg_239[1] == arg_89[1] && arg_239[1] == arg_127[1] && arg_239[1] == arg_223[1] && arg_239[1] == arg_45[1] && arg_239[1] == arg_119[1] && arg_239[1] != arg_59[0] && arg_239[1] == arg_161[1] && arg_239[1] == arg_169[1] && arg_239[1] != arg_35[0] && arg_239[1] == arg_83[1] && arg_239[1] == arg_125[1] && arg_239[1] != arg_217[0] && arg_239[1] != arg_245[0] && arg_239[1] != arg_21[0] && arg_239[1] != arg_97[0] && arg_239[1] != arg_75[0] && arg_239[1] != arg_161[0] && arg_239[1] == arg_209[1] && arg_239[1] == arg_97[1] && arg_239[1] == arg_121[1] && arg_239[1] == arg_247[1] && arg_239[1] != arg_19[0] && arg_239[1] == arg_145[1] && arg_239[1] == arg_251[1] && arg_239[1] != arg_29[0] && arg_239[1] == arg_107[1] && arg_239[1] != arg_231[0] && arg_239[1] != arg_81[0] && arg_239[1] != arg_63[0] && arg_239[1] == arg_215[1] && arg_239[1] == arg_35[1] && arg_239[1] == arg_153[1] && arg_239[1] != arg_121[0] && arg_239[1] != arg_33[0] && arg_239[1] == arg_111[1] && arg_239[1] != arg_177[0] && arg_239[1] != arg_203[0] && arg_239[1] != arg_153[0] && arg_239[1] != arg_95[0] && arg_239[1] != arg_83[0] && arg_239[1] == arg_175[1] && arg_239[1] != arg_159[0] && arg_239[1] != arg_141[0] && arg_239[1] != arg_201[0] && arg_239[1] == arg_177[1] && arg_239[1] != arg_111[0] && arg_239[1] == arg_189[1] && arg_239[1] == arg_27[1] && arg_239[1] == arg_233[1] && arg_239[1] == arg_231[1] && arg_239[1] != arg_175[0] && arg_239[1] != arg_125[0] && arg_239[1] != arg_223[0] && arg_239[1] == arg_207[1] && arg_239[1] == arg_139[1] && arg_239[1] == arg_77[1] && arg_239[1] != arg_183[0] && arg_239[1] != arg_27[0] && arg_239[1] == arg_65[1] && arg_239[1] != arg_49[0] && arg_239[1] != arg_189[0] && arg_239[1] == arg_59[1] && arg_239[1] != arg_105[0] && arg_239[1] != arg_221[0] && arg_239[1] != arg_247[0] && arg_239[1] == arg_19[1] && arg_239[1] != arg_253[0] && arg_239[1] != arg_77[0] && arg_239[1] == arg_15[1] && arg_239[1] == arg_81[1] && arg_239[1] != arg_91[0] && arg_239[1] == arg_91[1] && arg_239[1] != arg_155[0] && arg_239[1] == arg_159[1] && arg_239[1] == arg_191[1] && arg_239[1] == arg_95[1] && arg_239[1] == arg_221[1] && arg_239[1] != arg_251[0] && arg_239[1] != arg_45[0] && arg_239[1] == arg_21[1] && arg_239[1] != arg_139[0] && arg_239[1] == arg_171[1] && arg_239[1] != arg_89[0] && arg_239[1] == arg_183[1] && arg_239[1] == arg_141[1] && arg_239[1] != arg_207[0] && arg_239[1] == arg_51[1] && arg_239[1] != arg_233[0] && arg_239[1] != arg_13[0] && arg_239[1] != arg_237[0] && arg_239[1] == arg_147[1] && arg_239[1] != arg_57[0] && arg_239[1] != arg_119[0] && arg_239[1] == arg_63[1] && arg_239[1] != arg_169[0] && arg_65[0] == arg_191[0] && arg_65[0] == arg_127[0] && arg_65[0] != arg_33[1] && arg_65[0] != arg_13[1] && arg_65[0] != arg_89[1] && arg_65[0] != arg_127[1] && arg_65[0] != arg_223[1] && arg_65[0] != arg_45[1] && arg_65[0] != arg_119[1] && arg_65[0] == arg_59[0] && arg_65[0] != arg_161[1] && arg_65[0] != arg_169[1] && arg_65[0] == arg_35[0] && arg_65[0] != arg_83[1] && arg_65[0] != arg_125[1] && arg_65[0] == arg_217[0] && arg_65[0] == arg_245[0] && arg_65[0] == arg_21[0] && arg_65[0] == arg_97[0] && arg_65[0] == arg_75[0] && arg_65[0] == arg_161[0] && arg_65[0] != arg_209[1] && arg_65[0] != arg_97[1] && arg_65[0] != arg_121[1] && arg_65[0] != arg_247[1] && arg_65[0] == arg_19[0] && arg_65[0] != arg_145[1] && arg_65[0] != arg_251[1] && arg_65[0] == arg_29[0] && arg_65[0] != arg_107[1] && arg_65[0] == arg_231[0] && arg_65[0] == arg_81[0] && arg_65[0] == arg_63[0] && arg_65[0] != arg_215[1] && arg_65[0] != arg_35[1] && arg_65[0] != arg_153[1] && arg_65[0] == arg_121[0] && arg_65[0] == arg_33[0] && arg_65[0] != arg_111[1] && arg_65[0] == arg_177[0] && arg_65[0] == arg_203[0] && arg_65[0] == arg_153[0] && arg_65[0] == arg_95[0] && arg_65[0] == arg_83[0] && arg_65[0] != arg_175[1] && arg_65[0] == arg_159[0] && arg_65[0] == arg_141[0] && arg_65[0] == arg_201[0] && arg_65[0] != arg_177[1] && arg_65[0] == arg_111[0] && arg_65[0] != arg_189[1] && arg_65[0] != arg_27[1] && arg_65[0] != arg_233[1] && arg_65[0] != arg_231[1] && arg_65[0] == arg_175[0] && arg_65[0] == arg_125[0] && arg_65[0] == arg_223[0] && arg_65[0] != arg_207[1] && arg_65[0] != arg_139[1] && arg_65[0] != arg_77[1] && arg_65[0] == arg_183[0] && arg_65[0] == arg_27[0] && arg_65[0] != arg_65[1] && arg_65[0] == arg_49[0] && arg_65[0] == arg_189[0] && arg_65[0] != arg_59[1] && arg_65[0] == arg_105[0] && arg_65[0] == arg_221[0] && arg_65[0] == arg_247[0] && arg_65[0] != arg_19[1] && arg_65[0] == arg_253[0] && arg_65[0] == arg_77[0] && arg_65[0] != arg_15[1] && arg_65[0] != arg_81[1] && arg_65[0] == arg_91[0] && arg_65[0] != arg_91[1] && arg_65[0] == arg_155[0] && arg_65[0] != arg_159[1] && arg_65[0] != arg_191[1] && arg_65[0] != arg_95[1] && arg_65[0] != arg_221[1] && arg_65[0] == arg_251[0] && arg_65[0] == arg_45[0] && arg_65[0] != arg_21[1] && arg_65[0] == arg_139[0] && arg_65[0] != arg_171[1] && arg_65[0] == arg_89[0] && arg_65[0] != arg_183[1] && arg_65[0] != arg_141[1] && arg_65[0] == arg_207[0] && arg_65[0] != arg_51[1] && arg_65[0] == arg_233[0] && arg_65[0] == arg_13[0] && arg_65[0] == arg_237[0] && arg_65[0] != arg_147[1] && arg_65[0] == arg_57[0] && arg_65[0] == arg_119[0] && arg_65[0] != arg_63[1] && arg_65[0] == arg_169[0] && arg_191[0] == arg_127[0] && arg_191[0] != arg_33[1] && arg_191[0] != arg_13[1] && arg_191[0] != arg_89[1] && arg_191[0] != arg_127[1] && arg_191[0] != arg_223[1] && arg_191[0] != arg_45[1] && arg_191[0] != arg_119[1] && arg_191[0] == arg_59[0] && arg_191[0] != arg_161[1] && arg_191[0] != arg_169[1] && arg_191[0] == arg_35[0] && arg_191[0] != arg_83[1] && arg_191[0] != arg_125[1] && arg_191[0] == arg_217[0] && arg_191[0] == arg_245[0] && arg_191[0] == arg_21[0] && arg_191[0] == arg_97[0] && arg_191[0] == arg_75[0] && arg_191[0] == arg_161[0] && arg_191[0] != arg_209[1] && arg_191[0] != arg_97[1] && arg_191[0] != arg_121[1] && arg_191[0] != arg_247[1] && arg_191[0] == arg_19[0] && arg_191[0] != arg_145[1] && arg_191[0] != arg_251[1] && arg_191[0] == arg_29[0] && arg_191[0] != arg_107[1] && arg_191[0] == arg_231[0] && arg_191[0] == arg_81[0] && arg_191[0] == arg_63[0] && arg_191[0] != arg_215[1] && arg_191[0] != arg_35[1] && arg_191[0] != arg_153[1] && arg_191[0] == arg_121[0] && arg_191[0] == arg_33[0] && arg_191[0] != arg_111[1] && arg_191[0] == arg_177[0] && arg_191[0] == arg_203[0] && arg_191[0] == arg_153[0] && arg_191[0] == arg_95[0] && arg_191[0] == arg_83[0] && arg_191[0] != arg_175[1] && arg_191[0] == arg_159[0] && arg_191[0] == arg_141[0] && arg_191[0] == arg_201[0] && arg_191[0] != arg_177[1] && arg_191[0] == arg_111[0] && arg_191[0] != arg_189[1] && arg_191[0] != arg_27[1] && arg_191[0] != arg_233[1] && arg_191[0] != arg_231[1] && arg_191[0] == arg_175[0] && arg_191[0] == arg_125[0] && arg_191[0] == arg_223[0] && arg_191[0] != arg_207[1] && arg_191[0] != arg_139[1] && arg_191[0] != arg_77[1] && arg_191[0] == arg_183[0] && arg_191[0] == arg_27[0] && arg_191[0] != arg_65[1] && arg_191[0] == arg_49[0] && arg_191[0] == arg_189[0] && arg_191[0] != arg_59[1] && arg_191[0] == arg_105[0] && arg_191[0] == arg_221[0] && arg_191[0] == arg_247[0] && arg_191[0] != arg_19[1] && arg_191[0] == arg_253[0] && arg_191[0] == arg_77[0] && arg_191[0] != arg_15[1] && arg_191[0] != arg_81[1] && arg_191[0] == arg_91[0] && arg_191[0] != arg_91[1] && arg_191[0] == arg_155[0] && arg_191[0] != arg_159[1] && arg_191[0] != arg_191[1] && arg_191[0] != arg_95[1] && arg_191[0] != arg_221[1] && arg_191[0] == arg_251[0] && arg_191[0] == arg_45[0] && arg_191[0] != arg_21[1] && arg_191[0] == arg_139[0] && arg_191[0] != arg_171[1] && arg_191[0] == arg_89[0] && arg_191[0] != arg_183[1] && arg_191[0] != arg_141[1] && arg_191[0] == arg_207[0] && arg_191[0] != arg_51[1] && arg_191[0] == arg_233[0] && arg_191[0] == arg_13[0] && arg_191[0] == arg_237[0] && arg_191[0] != arg_147[1] && arg_191[0] == arg_57[0] && arg_191[0] == arg_119[0] && arg_191[0] != arg_63[1] && arg_191[0] == arg_169[0] && arg_127[0] != arg_33[1] && arg_127[0] != arg_13[1] && arg_127[0] != arg_89[1] && arg_127[0] != arg_127[1] && arg_127[0] != arg_223[1] && arg_127[0] != arg_45[1] && arg_127[0] != arg_119[1] && arg_127[0] == arg_59[0] && arg_127[0] != arg_161[1] && arg_127[0] != arg_169[1] && arg_127[0] == arg_35[0] && arg_127[0] != arg_83[1] && arg_127[0] != arg_125[1] && arg_127[0] == arg_217[0] && arg_127[0] == arg_245[0] && arg_127[0] == arg_21[0] && arg_127[0] == arg_97[0] && arg_127[0] == arg_75[0] && arg_127[0] == arg_161[0] && arg_127[0] != arg_209[1] && arg_127[0] != arg_97[1] && arg_127[0] != arg_121[1] && arg_127[0] != arg_247[1] && arg_127[0] == arg_19[0] && arg_127[0] != arg_145[1] && arg_127[0] != arg_251[1] && arg_127[0] == arg_29[0] && arg_127[0] != arg_107[1] && arg_127[0] == arg_231[0] && arg_127[0] == arg_81[0] && arg_127[0] == arg_63[0] && arg_127[0] != arg_215[1] && arg_127[0] != arg_35[1] && arg_127[0] != arg_153[1] && arg_127[0] == arg_121[0] && arg_127[0] == arg_33[0] && arg_127[0] != arg_111[1] && arg_127[0] == arg_177[0] && arg_127[0] == arg_203[0] && arg_127[0] == arg_153[0] && arg_127[0] == arg_95[0] && arg_127[0] == arg_83[0] && arg_127[0] != arg_175[1] && arg_127[0] == arg_159[0] && arg_127[0] == arg_141[0] && arg_127[0] == arg_201[0] && arg_127[0] != arg_177[1] && arg_127[0] == arg_111[0] && arg_127[0] != arg_189[1] && arg_127[0] != arg_27[1] && arg_127[0] != arg_233[1] && arg_127[0] != arg_231[1] && arg_127[0] == arg_175[0] && arg_127[0] == arg_125[0] && arg_127[0] == arg_223[0] && arg_127[0] != arg_207[1] && arg_127[0] != arg_139[1] && arg_127[0] != arg_77[1] && arg_127[0] == arg_183[0] && arg_127[0] == arg_27[0] && arg_127[0] != arg_65[1] && arg_127[0] == arg_49[0] && arg_127[0] == arg_189[0] && arg_127[0] != arg_59[1] && arg_127[0] == arg_105[0] && arg_127[0] == arg_221[0] && arg_127[0] == arg_247[0] && arg_127[0] != arg_19[1] && arg_127[0] == arg_253[0] && arg_127[0] == arg_77[0] && arg_127[0] != arg_15[1] && arg_127[0] != arg_81[1] && arg_127[0] == arg_91[0] && arg_127[0] != arg_91[1] && arg_127[0] == arg_155[0] && arg_127[0] != arg_159[1] && arg_127[0] != arg_191[1] && arg_127[0] != arg_95[1] && arg_127[0] != arg_221[1] && arg_127[0] == arg_251[0] && arg_127[0] == arg_45[0] && arg_127[0] != arg_21[1] && arg_127[0] == arg_139[0] && arg_127[0] != arg_171[1] && arg_127[0] == arg_89[0] && arg_127[0] != arg_183[1] && arg_127[0] != arg_141[1] && arg_127[0] == arg_207[0] && arg_127[0] != arg_51[1] && arg_127[0] == arg_233[0] && arg_127[0] == arg_13[0] && arg_127[0] == arg_237[0] && arg_127[0] != arg_147[1] && arg_127[0] == arg_57[0] && arg_127[0] == arg_119[0] && arg_127[0] != arg_63[1] && arg_127[0] == arg_169[0] && arg_33[1] == arg_13[1] && arg_33[1] == arg_89[1] && arg_33[1] == arg_127[1] && arg_33[1] == arg_223[1] && arg_33[1] == arg_45[1] && arg_33[1] == arg_119[1] && arg_33[1] != arg_59[0] && arg_33[1] == arg_161[1] && arg_33[1] == arg_169[1] && arg_33[1] != arg_35[0] && arg_33[1] == arg_83[1] && arg_33[1] == arg_125[1] && arg_33[1] != arg_217[0] && arg_33[1] != arg_245[0] && arg_33[1] != arg_21[0] && arg_33[1] != arg_97[0] && arg_33[1] != arg_75[0] && arg_33[1] != arg_161[0] && arg_33[1] == arg_209[1] && arg_33[1] == arg_97[1] && arg_33[1] == arg_121[1] && arg_33[1] == arg_247[1] && arg_33[1] != arg_19[0] && arg_33[1] == arg_145[1] && arg_33[1] == arg_251[1] && arg_33[1] != arg_29[0] && arg_33[1] == arg_107[1] && arg_33[1] != arg_231[0] && arg_33[1] != arg_81[0] && arg_33[1] != arg_63[0] && arg_33[1] == arg_215[1] && arg_33[1] == arg_35[1] && arg_33[1] == arg_153[1] && arg_33[1] != arg_121[0] && arg_33[1] != arg_33[0] && arg_33[1] == arg_111[1] && arg_33[1] != arg_177[0] && arg_33[1] != arg_203[0] && arg_33[1] != arg_153[0] && arg_33[1] != arg_95[0] && arg_33[1] != arg_83[0] && arg_33[1] == arg_175[1] && arg_33[1] != arg_159[0] && arg_33[1] != arg_141[0] && arg_33[1] != arg_201[0] && arg_33[1] == arg_177[1] && arg_33[1] != arg_111[0] && arg_33[1] == arg_189[1] && arg_33[1] == arg_27[1] && arg_33[1] == arg_233[1] && arg_33[1] == arg_231[1] && arg_33[1] != arg_175[0] && arg_33[1] != arg_125[0] && arg_33[1] != arg_223[0] && arg_33[1] == arg_207[1] && arg_33[1] == arg_139[1] && arg_33[1] == arg_77[1] && arg_33[1] != arg_183[0] && arg_33[1] != arg_27[0] && arg_33[1] == arg_65[1] && arg_33[1] != arg_49[0] && arg_33[1] != arg_189[0] && arg_33[1] == arg_59[1] && arg_33[1] != arg_105[0] && arg_33[1] != arg_221[0] && arg_33[1] != arg_247[0] && arg_33[1] == arg_19[1] && arg_33[1] != arg_253[0] && arg_33[1] != arg_77[0] && arg_33[1] == arg_15[1] && arg_33[1] == arg_81[1] && arg_33[1] != arg_91[0] && arg_33[1] == arg_91[1] && arg_33[1] != arg_155[0] && arg_33[1] == arg_159[1] && arg_33[1] == arg_191[1] && arg_33[1] == arg_95[1] && arg_33[1] == arg_221[1] && arg_33[1] != arg_251[0] && arg_33[1] != arg_45[0] && arg_33[1] == arg_21[1] && arg_33[1] != arg_139[0] && arg_33[1] == arg_171[1] && arg_33[1] != arg_89[0] && arg_33[1] == arg_183[1] && arg_33[1] == arg_141[1] && arg_33[1] != arg_207[0] && arg_33[1] == arg_51[1] && arg_33[1] != arg_233[0] && arg_33[1] != arg_13[0] && arg_33[1] != arg_237[0] && arg_33[1] == arg_147[1] && arg_33[1] != arg_57[0] && arg_33[1] != arg_119[0] && arg_33[1] == arg_63[1] && arg_33[1] != arg_169[0] && arg_13[1] == arg_89[1] && arg_13[1] == arg_127[1] && arg_13[1] == arg_223[1] && arg_13[1] == arg_45[1] && arg_13[1] == arg_119[1] && arg_13[1] != arg_59[0] && arg_13[1] == arg_161[1] && arg_13[1] == arg_169[1] && arg_13[1] != arg_35[0] && arg_13[1] == arg_83[1] && arg_13[1] == arg_125[1] && arg_13[1] != arg_217[0] && arg_13[1] != arg_245[0] && arg_13[1] != arg_21[0] && arg_13[1] != arg_97[0] && arg_13[1] != arg_75[0] && arg_13[1] != arg_161[0] && arg_13[1] == arg_209[1] && arg_13[1] == arg_97[1] && arg_13[1] == arg_121[1] && arg_13[1] == arg_247[1] && arg_13[1] != arg_19[0] && arg_13[1] == arg_145[1] && arg_13[1] == arg_251[1] && arg_13[1] != arg_29[0] && arg_13[1] == arg_107[1] && arg_13[1] != arg_231[0] && arg_13[1] != arg_81[0] && arg_13[1] != arg_63[0] && arg_13[1] == arg_215[1] && arg_13[1] == arg_35[1] && arg_13[1] == arg_153[1] && arg_13[1] != arg_121[0] && arg_13[1] != arg_33[0] && arg_13[1] == arg_111[1] && arg_13[1] != arg_177[0] && arg_13[1] != arg_203[0] && arg_13[1] != arg_153[0] && arg_13[1] != arg_95[0] && arg_13[1] != arg_83[0] && arg_13[1] == arg_175[1] && arg_13[1] != arg_159[0] && arg_13[1] != arg_141[0] && arg_13[1] != arg_201[0] && arg_13[1] == arg_177[1] && arg_13[1] != arg_111[0] && arg_13[1] == arg_189[1] && arg_13[1] == arg_27[1] && arg_13[1] == arg_233[1] && arg_13[1] == arg_231[1] && arg_13[1] != arg_175[0] && arg_13[1] != arg_125[0] && arg_13[1] != arg_223[0] && arg_13[1] == arg_207[1] && arg_13[1] == arg_139[1] && arg_13[1] == arg_77[1] && arg_13[1] != arg_183[0] && arg_13[1] != arg_27[0] && arg_13[1] == arg_65[1] && arg_13[1] != arg_49[0] && arg_13[1] != arg_189[0] && arg_13[1] == arg_59[1] && arg_13[1] != arg_105[0] && arg_13[1] != arg_221[0] && arg_13[1] != arg_247[0] && arg_13[1] == arg_19[1] && arg_13[1] != arg_253[0] && arg_13[1] != arg_77[0] && arg_13[1] == arg_15[1] && arg_13[1] == arg_81[1] && arg_13[1] != arg_91[0] && arg_13[1] == arg_91[1] && arg_13[1] != arg_155[0] && arg_13[1] == arg_159[1] && arg_13[1] == arg_191[1] && arg_13[1] == arg_95[1] && arg_13[1] == arg_221[1] && arg_13[1] != arg_251[0] && arg_13[1] != arg_45[0] && arg_13[1] == arg_21[1] && arg_13[1] != arg_139[0] && arg_13[1] == arg_171[1] && arg_13[1] != arg_89[0] && arg_13[1] == arg_183[1] && arg_13[1] == arg_141[1] && arg_13[1] != arg_207[0] && arg_13[1] == arg_51[1] && arg_13[1] != arg_233[0] && arg_13[1] != arg_13[0] && arg_13[1] != arg_237[0] && arg_13[1] == arg_147[1] && arg_13[1] != arg_57[0] && arg_13[1] != arg_119[0] && arg_13[1] == arg_63[1] && arg_13[1] != arg_169[0] && arg_89[1] == arg_127[1] && arg_89[1] == arg_223[1] && arg_89[1] == arg_45[1] && arg_89[1] == arg_119[1] && arg_89[1] != arg_59[0] && arg_89[1] == arg_161[1] && arg_89[1] == arg_169[1] && arg_89[1] != arg_35[0] && arg_89[1] == arg_83[1] && arg_89[1] == arg_125[1] && arg_89[1] != arg_217[0] && arg_89[1] != arg_245[0] && arg_89[1] != arg_21[0] && arg_89[1] != arg_97[0] && arg_89[1] != arg_75[0] && arg_89[1] != arg_161[0] && arg_89[1] == arg_209[1] && arg_89[1] == arg_97[1] && arg_89[1] == arg_121[1] && arg_89[1] == arg_247[1] && arg_89[1] != arg_19[0] && arg_89[1] == arg_145[1] && arg_89[1] == arg_251[1] && arg_89[1] != arg_29[0] && arg_89[1] == arg_107[1] && arg_89[1] != arg_231[0] && arg_89[1] != arg_81[0] && arg_89[1] != arg_63[0] && arg_89[1] == arg_215[1] && arg_89[1] == arg_35[1] && arg_89[1] == arg_153[1] && arg_89[1] != arg_121[0] && arg_89[1] != arg_33[0] && arg_89[1] == arg_111[1] && arg_89[1] != arg_177[0] && arg_89[1] != arg_203[0] && arg_89[1] != arg_153[0] && arg_89[1] != arg_95[0] && arg_89[1] != arg_83[0] && arg_89[1] == arg_175[1] && arg_89[1] != arg_159[0] && arg_89[1] != arg_141[0] && arg_89[1] != arg_201[0] && arg_89[1] == arg_177[1] && arg_89[1] != arg_111[0] && arg_89[1] == arg_189[1] && arg_89[1] == arg_27[1] && arg_89[1] == arg_233[1] && arg_89[1] == arg_231[1] && arg_89[1] != arg_175[0] && arg_89[1] != arg_125[0] && arg_89[1] != arg_223[0] && arg_89[1] == arg_207[1] && arg_89[1] == arg_139[1] && arg_89[1] == arg_77[1] && arg_89[1] != arg_183[0] && arg_89[1] != arg_27[0] && arg_89[1] == arg_65[1] && arg_89[1] != arg_49[0] && arg_89[1] != arg_189[0] && arg_89[1] == arg_59[1] && arg_89[1] != arg_105[0] && arg_89[1] != arg_221[0] && arg_89[1] != arg_247[0] && arg_89[1] == arg_19[1] && arg_89[1] != arg_253[0] && arg_89[1] != arg_77[0] && arg_89[1] == arg_15[1] && arg_89[1] == arg_81[1] && arg_89[1] != arg_91[0] && arg_89[1] == arg_91[1] && arg_89[1] != arg_155[0] && arg_89[1] == arg_159[1] && arg_89[1] == arg_191[1] && arg_89[1] == arg_95[1] && arg_89[1] == arg_221[1] && arg_89[1] != arg_251[0] && arg_89[1] != arg_45[0] && arg_89[1] == arg_21[1] && arg_89[1] != arg_139[0] && arg_89[1] == arg_171[1] && arg_89[1] != arg_89[0] && arg_89[1] == arg_183[1] && arg_89[1] == arg_141[1] && arg_89[1] != arg_207[0] && arg_89[1] == arg_51[1] && arg_89[1] != arg_233[0] && arg_89[1] != arg_13[0] && arg_89[1] != arg_237[0] && arg_89[1] == arg_147[1] && arg_89[1] != arg_57[0] && arg_89[1] != arg_119[0] && arg_89[1] == arg_63[1] && arg_89[1] != arg_169[0] && arg_127[1] == arg_223[1] && arg_127[1] == arg_45[1] && arg_127[1] == arg_119[1] && arg_127[1] != arg_59[0] && arg_127[1] == arg_161[1] && arg_127[1] == arg_169[1] && arg_127[1] != arg_35[0] && arg_127[1] == arg_83[1] && arg_127[1] == arg_125[1] && arg_127[1] != arg_217[0] && arg_127[1] != arg_245[0] && arg_127[1] != arg_21[0] && arg_127[1] != arg_97[0] && arg_127[1] != arg_75[0] && arg_127[1] != arg_161[0] && arg_127[1] == arg_209[1] && arg_127[1] == arg_97[1] && arg_127[1] == arg_121[1] && arg_127[1] == arg_247[1] && arg_127[1] != arg_19[0] && arg_127[1] == arg_145[1] && arg_127[1] == arg_251[1] && arg_127[1] != arg_29[0] && arg_127[1] == arg_107[1] && arg_127[1] != arg_231[0] && arg_127[1] != arg_81[0] && arg_127[1] != arg_63[0] && arg_127[1] == arg_215[1] && arg_127[1] == arg_35[1] && arg_127[1] == arg_153[1] && arg_127[1] != arg_121[0] && arg_127[1] != arg_33[0] && arg_127[1] == arg_111[1] && arg_127[1] != arg_177[0] && arg_127[1] != arg_203[0] && arg_127[1] != arg_153[0] && arg_127[1] != arg_95[0] && arg_127[1] != arg_83[0] && arg_127[1] == arg_175[1] && arg_127[1] != arg_159[0] && arg_127[1] != arg_141[0] && arg_127[1] != arg_201[0] && arg_127[1] == arg_177[1] && arg_127[1] != arg_111[0] && arg_127[1] == arg_189[1] && arg_127[1] == arg_27[1] && arg_127[1] == arg_233[1] && arg_127[1] == arg_231[1] && arg_127[1] != arg_175[0] && arg_127[1] != arg_125[0] && arg_127[1] != arg_223[0] && arg_127[1] == arg_207[1] && arg_127[1] == arg_139[1] && arg_127[1] == arg_77[1] && arg_127[1] != arg_183[0] && arg_127[1] != arg_27[0] && arg_127[1] == arg_65[1] && arg_127[1] != arg_49[0] && arg_127[1] != arg_189[0] && arg_127[1] == arg_59[1] && arg_127[1] != arg_105[0] && arg_127[1] != arg_221[0] && arg_127[1] != arg_247[0] && arg_127[1] == arg_19[1] && arg_127[1] != arg_253[0] && arg_127[1] != arg_77[0] && arg_127[1] == arg_15[1] && arg_127[1] == arg_81[1] && arg_127[1] != arg_91[0] && arg_127[1] == arg_91[1] && arg_127[1] != arg_155[0] && arg_127[1] == arg_159[1] && arg_127[1] == arg_191[1] && arg_127[1] == arg_95[1] && arg_127[1] == arg_221[1] && arg_127[1] != arg_251[0] && arg_127[1] != arg_45[0] && arg_127[1] == arg_21[1] && arg_127[1] != arg_139[0] && arg_127[1] == arg_171[1] && arg_127[1] != arg_89[0] && arg_127[1] == arg_183[1] && arg_127[1] == arg_141[1] && arg_127[1] != arg_207[0] && arg_127[1] == arg_51[1] && arg_127[1] != arg_233[0] && arg_127[1] != arg_13[0] && arg_127[1] != arg_237[0] && arg_127[1] == arg_147[1] && arg_127[1] != arg_57[0] && arg_127[1] != arg_119[0] && arg_127[1] == arg_63[1] && arg_127[1] != arg_169[0] && arg_223[1] == arg_45[1] && arg_223[1] == arg_119[1] && arg_223[1] != arg_59[0] && arg_223[1] == arg_161[1] && arg_223[1] == arg_169[1] && arg_223[1] != arg_35[0] && arg_223[1] == arg_83[1] && arg_223[1] == arg_125[1] && arg_223[1] != arg_217[0] && arg_223[1] != arg_245[0] && arg_223[1] != arg_21[0] && arg_223[1] != arg_97[0] && arg_223[1] != arg_75[0] && arg_223[1] != arg_161[0] && arg_223[1] == arg_209[1] && arg_223[1] == arg_97[1] && arg_223[1] == arg_121[1] && arg_223[1] == arg_247[1] && arg_223[1] != arg_19[0] && arg_223[1] == arg_145[1] && arg_223[1] == arg_251[1] && arg_223[1] != arg_29[0] && arg_223[1] == arg_107[1] && arg_223[1] != arg_231[0] && arg_223[1] != arg_81[0] && arg_223[1] != arg_63[0] && arg_223[1] == arg_215[1] && arg_223[1] == arg_35[1] && arg_223[1] == arg_153[1] && arg_223[1] != arg_121[0] && arg_223[1] != arg_33[0] && arg_223[1] == arg_111[1] && arg_223[1] != arg_177[0] && arg_223[1] != arg_203[0] && arg_223[1] != arg_153[0] && arg_223[1] != arg_95[0] && arg_223[1] != arg_83[0] && arg_223[1] == arg_175[1] && arg_223[1] != arg_159[0] && arg_223[1] != arg_141[0] && arg_223[1] != arg_201[0] && arg_223[1] == arg_177[1] && arg_223[1] != arg_111[0] && arg_223[1] == arg_189[1] && arg_223[1] == arg_27[1] && arg_223[1] == arg_233[1] && arg_223[1] == arg_231[1] && arg_223[1] != arg_175[0] && arg_223[1] != arg_125[0] && arg_223[1] != arg_223[0] && arg_223[1] == arg_207[1] && arg_223[1] == arg_139[1] && arg_223[1] == arg_77[1] && arg_223[1] != arg_183[0] && arg_223[1] != arg_27[0] && arg_223[1] == arg_65[1] && arg_223[1] != arg_49[0] && arg_223[1] != arg_189[0] && arg_223[1] == arg_59[1] && arg_223[1] != arg_105[0] && arg_223[1] != arg_221[0] && arg_223[1] != arg_247[0] && arg_223[1] == arg_19[1] && arg_223[1] != arg_253[0] && arg_223[1] != arg_77[0] && arg_223[1] == arg_15[1] && arg_223[1] == arg_81[1] && arg_223[1] != arg_91[0] && arg_223[1] == arg_91[1] && arg_223[1] != arg_155[0] && arg_223[1] == arg_159[1] && arg_223[1] == arg_191[1] && arg_223[1] == arg_95[1] && arg_223[1] == arg_221[1] && arg_223[1] != arg_251[0] && arg_223[1] != arg_45[0] && arg_223[1] == arg_21[1] && arg_223[1] != arg_139[0] && arg_223[1] == arg_171[1] && arg_223[1] != arg_89[0] && arg_223[1] == arg_183[1] && arg_223[1] == arg_141[1] && arg_223[1] != arg_207[0] && arg_223[1] == arg_51[1] && arg_223[1] != arg_233[0] && arg_223[1] != arg_13[0] && arg_223[1] != arg_237[0] && arg_223[1] == arg_147[1] && arg_223[1] != arg_57[0] && arg_223[1] != arg_119[0] && arg_223[1] == arg_63[1] && arg_223[1] != arg_169[0] && arg_45[1] == arg_119[1] && arg_45[1] != arg_59[0] && arg_45[1] == arg_161[1] && arg_45[1] == arg_169[1] && arg_45[1] != arg_35[0] && arg_45[1] == arg_83[1] && arg_45[1] == arg_125[1] && arg_45[1] != arg_217[0] && arg_45[1] != arg_245[0] && arg_45[1] != arg_21[0] && arg_45[1] != arg_97[0] && arg_45[1] != arg_75[0] && arg_45[1] != arg_161[0] && arg_45[1] == arg_209[1] && arg_45[1] == arg_97[1] && arg_45[1] == arg_121[1] && arg_45[1] == arg_247[1] && arg_45[1] != arg_19[0] && arg_45[1] == arg_145[1] && arg_45[1] == arg_251[1] && arg_45[1] != arg_29[0] && arg_45[1] == arg_107[1] && arg_45[1] != arg_231[0] && arg_45[1] != arg_81[0] && arg_45[1] != arg_63[0] && arg_45[1] == arg_215[1] && arg_45[1] == arg_35[1] && arg_45[1] == arg_153[1] && arg_45[1] != arg_121[0] && arg_45[1] != arg_33[0] && arg_45[1] == arg_111[1] && arg_45[1] != arg_177[0] && arg_45[1] != arg_203[0] && arg_45[1] != arg_153[0] && arg_45[1] != arg_95[0] && arg_45[1] != arg_83[0] && arg_45[1] == arg_175[1] && arg_45[1] != arg_159[0] && arg_45[1] != arg_141[0] && arg_45[1] != arg_201[0] && arg_45[1] == arg_177[1] && arg_45[1] != arg_111[0] && arg_45[1] == arg_189[1] && arg_45[1] == arg_27[1] && arg_45[1] == arg_233[1] && arg_45[1] == arg_231[1] && arg_45[1] != arg_175[0] && arg_45[1] != arg_125[0] && arg_45[1] != arg_223[0] && arg_45[1] == arg_207[1] && arg_45[1] == arg_139[1] && arg_45[1] == arg_77[1] && arg_45[1] != arg_183[0] && arg_45[1] != arg_27[0] && arg_45[1] == arg_65[1] && arg_45[1] != arg_49[0] && arg_45[1] != arg_189[0] && arg_45[1] == arg_59[1] && arg_45[1] != arg_105[0] && arg_45[1] != arg_221[0] && arg_45[1] != arg_247[0] && arg_45[1] == arg_19[1] && arg_45[1] != arg_253[0] && arg_45[1] != arg_77[0] && arg_45[1] == arg_15[1] && arg_45[1] == arg_81[1] && arg_45[1] != arg_91[0] && arg_45[1] == arg_91[1] && arg_45[1] != arg_155[0] && arg_45[1] == arg_159[1] && arg_45[1] == arg_191[1] && arg_45[1] == arg_95[1] && arg_45[1] == arg_221[1] && arg_45[1] != arg_251[0] && arg_45[1] != arg_45[0] && arg_45[1] == arg_21[1] && arg_45[1] != arg_139[0] && arg_45[1] == arg_171[1] && arg_45[1] != arg_89[0] && arg_45[1] == arg_183[1] && arg_45[1] == arg_141[1] && arg_45[1] != arg_207[0] && arg_45[1] == arg_51[1] && arg_45[1] != arg_233[0] && arg_45[1] != arg_13[0] && arg_45[1] != arg_237[0] && arg_45[1] == arg_147[1] && arg_45[1] != arg_57[0] && arg_45[1] != arg_119[0] && arg_45[1] == arg_63[1] && arg_45[1] != arg_169[0] && arg_119[1] != arg_59[0] && arg_119[1] == arg_161[1] && arg_119[1] == arg_169[1] && arg_119[1] != arg_35[0] && arg_119[1] == arg_83[1] && arg_119[1] == arg_125[1] && arg_119[1] != arg_217[0] && arg_119[1] != arg_245[0] && arg_119[1] != arg_21[0] && arg_119[1] != arg_97[0] && arg_119[1] != arg_75[0] && arg_119[1] != arg_161[0] && arg_119[1] == arg_209[1] && arg_119[1] == arg_97[1] && arg_119[1] == arg_121[1] && arg_119[1] == arg_247[1] && arg_119[1] != arg_19[0] && arg_119[1] == arg_145[1] && arg_119[1] == arg_251[1] && arg_119[1] != arg_29[0] && arg_119[1] == arg_107[1] && arg_119[1] != arg_231[0] && arg_119[1] != arg_81[0] && arg_119[1] != arg_63[0] && arg_119[1] == arg_215[1] && arg_119[1] == arg_35[1] && arg_119[1] == arg_153[1] && arg_119[1] != arg_121[0] && arg_119[1] != arg_33[0] && arg_119[1] == arg_111[1] && arg_119[1] != arg_177[0] && arg_119[1] != arg_203[0] && arg_119[1] != arg_153[0] && arg_119[1] != arg_95[0] && arg_119[1] != arg_83[0] && arg_119[1] == arg_175[1] && arg_119[1] != arg_159[0] && arg_119[1] != arg_141[0] && arg_119[1] != arg_201[0] && arg_119[1] == arg_177[1] && arg_119[1] != arg_111[0] && arg_119[1] == arg_189[1] && arg_119[1] == arg_27[1] && arg_119[1] == arg_233[1] && arg_119[1] == arg_231[1] && arg_119[1] != arg_175[0] && arg_119[1] != arg_125[0] && arg_119[1] != arg_223[0] && arg_119[1] == arg_207[1] && arg_119[1] == arg_139[1] && arg_119[1] == arg_77[1] && arg_119[1] != arg_183[0] && arg_119[1] != arg_27[0] && arg_119[1] == arg_65[1] && arg_119[1] != arg_49[0] && arg_119[1] != arg_189[0] && arg_119[1] == arg_59[1] && arg_119[1] != arg_105[0] && arg_119[1] != arg_221[0] && arg_119[1] != arg_247[0] && arg_119[1] == arg_19[1] && arg_119[1] != arg_253[0] && arg_119[1] != arg_77[0] && arg_119[1] == arg_15[1] && arg_119[1] == arg_81[1] && arg_119[1] != arg_91[0] && arg_119[1] == arg_91[1] && arg_119[1] != arg_155[0] && arg_119[1] == arg_159[1] && arg_119[1] == arg_191[1] && arg_119[1] == arg_95[1] && arg_119[1] == arg_221[1] && arg_119[1] != arg_251[0] && arg_119[1] != arg_45[0] && arg_119[1] == arg_21[1] && arg_119[1] != arg_139[0] && arg_119[1] == arg_171[1] && arg_119[1] != arg_89[0] && arg_119[1] == arg_183[1] && arg_119[1] == arg_141[1] && arg_119[1] != arg_207[0] && arg_119[1] == arg_51[1] && arg_119[1] != arg_233[0] && arg_119[1] != arg_13[0] && arg_119[1] != arg_237[0] && arg_119[1] == arg_147[1] && arg_119[1] != arg_57[0] && arg_119[1] != arg_119[0] && arg_119[1] == arg_63[1] && arg_119[1] != arg_169[0] && arg_59[0] != arg_161[1] && arg_59[0] != arg_169[1] && arg_59[0] == arg_35[0] && arg_59[0] != arg_83[1] && arg_59[0] != arg_125[1] && arg_59[0] == arg_217[0] && arg_59[0] == arg_245[0] && arg_59[0] == arg_21[0] && arg_59[0] == arg_97[0] && arg_59[0] == arg_75[0] && arg_59[0] == arg_161[0] && arg_59[0] != arg_209[1] && arg_59[0] != arg_97[1] && arg_59[0] != arg_121[1] && arg_59[0] != arg_247[1] && arg_59[0] == arg_19[0] && arg_59[0] != arg_145[1] && arg_59[0] != arg_251[1] && arg_59[0] == arg_29[0] && arg_59[0] != arg_107[1] && arg_59[0] == arg_231[0] && arg_59[0] == arg_81[0] && arg_59[0] == arg_63[0] && arg_59[0] != arg_215[1] && arg_59[0] != arg_35[1] && arg_59[0] != arg_153[1] && arg_59[0] == arg_121[0] && arg_59[0] == arg_33[0] && arg_59[0] != arg_111[1] && arg_59[0] == arg_177[0] && arg_59[0] == arg_203[0] && arg_59[0] == arg_153[0] && arg_59[0] == arg_95[0] && arg_59[0] == arg_83[0] && arg_59[0] != arg_175[1] && arg_59[0] == arg_159[0] && arg_59[0] == arg_141[0] && arg_59[0] == arg_201[0] && arg_59[0] != arg_177[1] && arg_59[0] == arg_111[0] && arg_59[0] != arg_189[1] && arg_59[0] != arg_27[1] && arg_59[0] != arg_233[1] && arg_59[0] != arg_231[1] && arg_59[0] == arg_175[0] && arg_59[0] == arg_125[0] && arg_59[0] == arg_223[0] && arg_59[0] != arg_207[1] && arg_59[0] != arg_139[1] && arg_59[0] != arg_77[1] && arg_59[0] == arg_183[0] && arg_59[0] == arg_27[0] && arg_59[0] != arg_65[1] && arg_59[0] == arg_49[0] && arg_59[0] == arg_189[0] && arg_59[0] != arg_59[1] && arg_59[0] == arg_105[0] && arg_59[0] == arg_221[0] && arg_59[0] == arg_247[0] && arg_59[0] != arg_19[1] && arg_59[0] == arg_253[0] && arg_59[0] == arg_77[0] && arg_59[0] != arg_15[1] && arg_59[0] != arg_81[1] && arg_59[0] == arg_91[0] && arg_59[0] != arg_91[1] && arg_59[0] == arg_155[0] && arg_59[0] != arg_159[1] && arg_59[0] != arg_191[1] && arg_59[0] != arg_95[1] && arg_59[0] != arg_221[1] && arg_59[0] == arg_251[0] && arg_59[0] == arg_45[0] && arg_59[0] != arg_21[1] && arg_59[0] == arg_139[0] && arg_59[0] != arg_171[1] && arg_59[0] == arg_89[0] && arg_59[0] != arg_183[1] && arg_59[0] != arg_141[1] && arg_59[0] == arg_207[0] && arg_59[0] != arg_51[1] && arg_59[0] == arg_233[0] && arg_59[0] == arg_13[0] && arg_59[0] == arg_237[0] && arg_59[0] != arg_147[1] && arg_59[0] == arg_57[0] && arg_59[0] == arg_119[0] && arg_59[0] != arg_63[1] && arg_59[0] == arg_169[0] && arg_161[1] == arg_169[1] && arg_161[1] != arg_35[0] && arg_161[1] == arg_83[1] && arg_161[1] == arg_125[1] && arg_161[1] != arg_217[0] && arg_161[1] != arg_245[0] && arg_161[1] != arg_21[0] && arg_161[1] != arg_97[0] && arg_161[1] != arg_75[0] && arg_161[1] != arg_161[0] && arg_161[1] == arg_209[1] && arg_161[1] == arg_97[1] && arg_161[1] == arg_121[1] && arg_161[1] == arg_247[1] && arg_161[1] != arg_19[0] && arg_161[1] == arg_145[1] && arg_161[1] == arg_251[1] && arg_161[1] != arg_29[0] && arg_161[1] == arg_107[1] && arg_161[1] != arg_231[0] && arg_161[1] != arg_81[0] && arg_161[1] != arg_63[0] && arg_161[1] == arg_215[1] && arg_161[1] == arg_35[1] && arg_161[1] == arg_153[1] && arg_161[1] != arg_121[0] && arg_161[1] != arg_33[0] && arg_161[1] == arg_111[1] && arg_161[1] != arg_177[0] && arg_161[1] != arg_203[0] && arg_161[1] != arg_153[0] && arg_161[1] != arg_95[0] && arg_161[1] != arg_83[0] && arg_161[1] == arg_175[1] && arg_161[1] != arg_159[0] && arg_161[1] != arg_141[0] && arg_161[1] != arg_201[0] && arg_161[1] == arg_177[1] && arg_161[1] != arg_111[0] && arg_161[1] == arg_189[1] && arg_161[1] == arg_27[1] && arg_161[1] == arg_233[1] && arg_161[1] == arg_231[1] && arg_161[1] != arg_175[0] && arg_161[1] != arg_125[0] && arg_161[1] != arg_223[0] && arg_161[1] == arg_207[1] && arg_161[1] == arg_139[1] && arg_161[1] == arg_77[1] && arg_161[1] != arg_183[0] && arg_161[1] != arg_27[0] && arg_161[1] == arg_65[1] && arg_161[1] != arg_49[0] && arg_161[1] != arg_189[0] && arg_161[1] == arg_59[1] && arg_161[1] != arg_105[0] && arg_161[1] != arg_221[0] && arg_161[1] != arg_247[0] && arg_161[1] == arg_19[1] && arg_161[1] != arg_253[0] && arg_161[1] != arg_77[0] && arg_161[1] == arg_15[1] && arg_161[1] == arg_81[1] && arg_161[1] != arg_91[0] && arg_161[1] == arg_91[1] && arg_161[1] != arg_155[0] && arg_161[1] == arg_159[1] && arg_161[1] == arg_191[1] && arg_161[1] == arg_95[1] && arg_161[1] == arg_221[1] && arg_161[1] != arg_251[0] && arg_161[1] != arg_45[0] && arg_161[1] == arg_21[1] && arg_161[1] != arg_139[0] && arg_161[1] == arg_171[1] && arg_161[1] != arg_89[0] && arg_161[1] == arg_183[1] && arg_161[1] == arg_141[1] && arg_161[1] != arg_207[0] && arg_161[1] == arg_51[1] && arg_161[1] != arg_233[0] && arg_161[1] != arg_13[0] && arg_161[1] != arg_237[0] && arg_161[1] == arg_147[1] && arg_161[1] != arg_57[0] && arg_161[1] != arg_119[0] && arg_161[1] == arg_63[1] && arg_161[1] != arg_169[0] && arg_169[1] != arg_35[0] && arg_169[1] == arg_83[1] && arg_169[1] == arg_125[1] && arg_169[1] != arg_217[0] && arg_169[1] != arg_245[0] && arg_169[1] != arg_21[0] && arg_169[1] != arg_97[0] && arg_169[1] != arg_75[0] && arg_169[1] != arg_161[0] && arg_169[1] == arg_209[1] && arg_169[1] == arg_97[1] && arg_169[1] == arg_121[1] && arg_169[1] == arg_247[1] && arg_169[1] != arg_19[0] && arg_169[1] == arg_145[1] && arg_169[1] == arg_251[1] && arg_169[1] != arg_29[0] && arg_169[1] == arg_107[1] && arg_169[1] != arg_231[0] && arg_169[1] != arg_81[0] && arg_169[1] != arg_63[0] && arg_169[1] == arg_215[1] && arg_169[1] == arg_35[1] && arg_169[1] == arg_153[1] && arg_169[1] != arg_121[0] && arg_169[1] != arg_33[0] && arg_169[1] == arg_111[1] && arg_169[1] != arg_177[0] && arg_169[1] != arg_203[0] && arg_169[1] != arg_153[0] && arg_169[1] != arg_95[0] && arg_169[1] != arg_83[0] && arg_169[1] == arg_175[1] && arg_169[1] != arg_159[0] && arg_169[1] != arg_141[0] && arg_169[1] != arg_201[0] && arg_169[1] == arg_177[1] && arg_169[1] != arg_111[0] && arg_169[1] == arg_189[1] && arg_169[1] == arg_27[1] && arg_169[1] == arg_233[1] && arg_169[1] == arg_231[1] && arg_169[1] != arg_175[0] && arg_169[1] != arg_125[0] && arg_169[1] != arg_223[0] && arg_169[1] == arg_207[1] && arg_169[1] == arg_139[1] && arg_169[1] == arg_77[1] && arg_169[1] != arg_183[0] && arg_169[1] != arg_27[0] && arg_169[1] == arg_65[1] && arg_169[1] != arg_49[0] && arg_169[1] != arg_189[0] && arg_169[1] == arg_59[1] && arg_169[1] != arg_105[0] && arg_169[1] != arg_221[0] && arg_169[1] != arg_247[0] && arg_169[1] == arg_19[1] && arg_169[1] != arg_253[0] && arg_169[1] != arg_77[0] && arg_169[1] == arg_15[1] && arg_169[1] == arg_81[1] && arg_169[1] != arg_91[0] && arg_169[1] == arg_91[1] && arg_169[1] != arg_155[0] && arg_169[1] == arg_159[1] && arg_169[1] == arg_191[1] && arg_169[1] == arg_95[1] && arg_169[1] == arg_221[1] && arg_169[1] != arg_251[0] && arg_169[1] != arg_45[0] && arg_169[1] == arg_21[1] && arg_169[1] != arg_139[0] && arg_169[1] == arg_171[1] && arg_169[1] != arg_89[0] && arg_169[1] == arg_183[1] && arg_169[1] == arg_141[1] && arg_169[1] != arg_207[0] && arg_169[1] == arg_51[1] && arg_169[1] != arg_233[0] && arg_169[1] != arg_13[0] && arg_169[1] != arg_237[0] && arg_169[1] == arg_147[1] && arg_169[1] != arg_57[0] && arg_169[1] != arg_119[0] && arg_169[1] == arg_63[1] && arg_169[1] != arg_169[0] && arg_35[0] != arg_83[1] && arg_35[0] != arg_125[1] && arg_35[0] == arg_217[0] && arg_35[0] == arg_245[0] && arg_35[0] == arg_21[0] && arg_35[0] == arg_97[0] && arg_35[0] == arg_75[0] && arg_35[0] == arg_161[0] && arg_35[0] != arg_209[1] && arg_35[0] != arg_97[1] && arg_35[0] != arg_121[1] && arg_35[0] != arg_247[1] && arg_35[0] == arg_19[0] && arg_35[0] != arg_145[1] && arg_35[0] != arg_251[1] && arg_35[0] == arg_29[0] && arg_35[0] != arg_107[1] && arg_35[0] == arg_231[0] && arg_35[0] == arg_81[0] && arg_35[0] == arg_63[0] && arg_35[0] != arg_215[1] && arg_35[0] != arg_35[1] && arg_35[0] != arg_153[1] && arg_35[0] == arg_121[0] && arg_35[0] == arg_33[0] && arg_35[0] != arg_111[1] && arg_35[0] == arg_177[0] && arg_35[0] == arg_203[0] && arg_35[0] == arg_153[0] && arg_35[0] == arg_95[0] && arg_35[0] == arg_83[0] && arg_35[0] != arg_175[1] && arg_35[0] == arg_159[0] && arg_35[0] == arg_141[0] && arg_35[0] == arg_201[0] && arg_35[0] != arg_177[1] && arg_35[0] == arg_111[0] && arg_35[0] != arg_189[1] && arg_35[0] != arg_27[1] && arg_35[0] != arg_233[1] && arg_35[0] != arg_231[1] && arg_35[0] == arg_175[0] && arg_35[0] == arg_125[0] && arg_35[0] == arg_223[0] && arg_35[0] != arg_207[1] && arg_35[0] != arg_139[1] && arg_35[0] != arg_77[1] && arg_35[0] == arg_183[0] && arg_35[0] == arg_27[0] && arg_35[0] != arg_65[1] && arg_35[0] == arg_49[0] && arg_35[0] == arg_189[0] && arg_35[0] != arg_59[1] && arg_35[0] == arg_105[0] && arg_35[0] == arg_221[0] && arg_35[0] == arg_247[0] && arg_35[0] != arg_19[1] && arg_35[0] == arg_253[0] && arg_35[0] == arg_77[0] && arg_35[0] != arg_15[1] && arg_35[0] != arg_81[1] && arg_35[0] == arg_91[0] && arg_35[0] != arg_91[1] && arg_35[0] == arg_155[0] && arg_35[0] != arg_159[1] && arg_35[0] != arg_191[1] && arg_35[0] != arg_95[1] && arg_35[0] != arg_221[1] && arg_35[0] == arg_251[0] && arg_35[0] == arg_45[0] && arg_35[0] != arg_21[1] && arg_35[0] == arg_139[0] && arg_35[0] != arg_171[1] && arg_35[0] == arg_89[0] && arg_35[0] != arg_183[1] && arg_35[0] != arg_141[1] && arg_35[0] == arg_207[0] && arg_35[0] != arg_51[1] && arg_35[0] == arg_233[0] && arg_35[0] == arg_13[0] && arg_35[0] == arg_237[0] && arg_35[0] != arg_147[1] && arg_35[0] == arg_57[0] && arg_35[0] == arg_119[0] && arg_35[0] != arg_63[1] && arg_35[0] == arg_169[0] && arg_83[1] == arg_125[1] && arg_83[1] != arg_217[0] && arg_83[1] != arg_245[0] && arg_83[1] != arg_21[0] && arg_83[1] != arg_97[0] && arg_83[1] != arg_75[0] && arg_83[1] != arg_161[0] && arg_83[1] == arg_209[1] && arg_83[1] == arg_97[1] && arg_83[1] == arg_121[1] && arg_83[1] == arg_247[1] && arg_83[1] != arg_19[0] && arg_83[1] == arg_145[1] && arg_83[1] == arg_251[1] && arg_83[1] != arg_29[0] && arg_83[1] == arg_107[1] && arg_83[1] != arg_231[0] && arg_83[1] != arg_81[0] && arg_83[1] != arg_63[0] && arg_83[1] == arg_215[1] && arg_83[1] == arg_35[1] && arg_83[1] == arg_153[1] && arg_83[1] != arg_121[0] && arg_83[1] != arg_33[0] && arg_83[1] == arg_111[1] && arg_83[1] != arg_177[0] && arg_83[1] != arg_203[0] && arg_83[1] != arg_153[0] && arg_83[1] != arg_95[0] && arg_83[1] != arg_83[0] && arg_83[1] == arg_175[1] && arg_83[1] != arg_159[0] && arg_83[1] != arg_141[0] && arg_83[1] != arg_201[0] && arg_83[1] == arg_177[1] && arg_83[1] != arg_111[0] && arg_83[1] == arg_189[1] && arg_83[1] == arg_27[1] && arg_83[1] == arg_233[1] && arg_83[1] == arg_231[1] && arg_83[1] != arg_175[0] && arg_83[1] != arg_125[0] && arg_83[1] != arg_223[0] && arg_83[1] == arg_207[1] && arg_83[1] == arg_139[1] && arg_83[1] == arg_77[1] && arg_83[1] != arg_183[0] && arg_83[1] != arg_27[0] && arg_83[1] == arg_65[1] && arg_83[1] != arg_49[0] && arg_83[1] != arg_189[0] && arg_83[1] == arg_59[1] && arg_83[1] != arg_105[0] && arg_83[1] != arg_221[0] && arg_83[1] != arg_247[0] && arg_83[1] == arg_19[1] && arg_83[1] != arg_253[0] && arg_83[1] != arg_77[0] && arg_83[1] == arg_15[1] && arg_83[1] == arg_81[1] && arg_83[1] != arg_91[0] && arg_83[1] == arg_91[1] && arg_83[1] != arg_155[0] && arg_83[1] == arg_159[1] && arg_83[1] == arg_191[1] && arg_83[1] == arg_95[1] && arg_83[1] == arg_221[1] && arg_83[1] != arg_251[0] && arg_83[1] != arg_45[0] && arg_83[1] == arg_21[1] && arg_83[1] != arg_139[0] && arg_83[1] == arg_171[1] && arg_83[1] != arg_89[0] && arg_83[1] == arg_183[1] && arg_83[1] == arg_141[1] && arg_83[1] != arg_207[0] && arg_83[1] == arg_51[1] && arg_83[1] != arg_233[0] && arg_83[1] != arg_13[0] && arg_83[1] != arg_237[0] && arg_83[1] == arg_147[1] && arg_83[1] != arg_57[0] && arg_83[1] != arg_119[0] && arg_83[1] == arg_63[1] && arg_83[1] != arg_169[0] && arg_125[1] != arg_217[0] && arg_125[1] != arg_245[0] && arg_125[1] != arg_21[0] && arg_125[1] != arg_97[0] && arg_125[1] != arg_75[0] && arg_125[1] != arg_161[0] && arg_125[1] == arg_209[1] && arg_125[1] == arg_97[1] && arg_125[1] == arg_121[1] && arg_125[1] == arg_247[1] && arg_125[1] != arg_19[0] && arg_125[1] == arg_145[1] && arg_125[1] == arg_251[1] && arg_125[1] != arg_29[0] && arg_125[1] == arg_107[1] && arg_125[1] != arg_231[0] && arg_125[1] != arg_81[0] && arg_125[1] != arg_63[0] && arg_125[1] == arg_215[1] && arg_125[1] == arg_35[1] && arg_125[1] == arg_153[1] && arg_125[1] != arg_121[0] && arg_125[1] != arg_33[0] && arg_125[1] == arg_111[1] && arg_125[1] != arg_177[0] && arg_125[1] != arg_203[0] && arg_125[1] != arg_153[0] && arg_125[1] != arg_95[0] && arg_125[1] != arg_83[0] && arg_125[1] == arg_175[1] && arg_125[1] != arg_159[0] && arg_125[1] != arg_141[0] && arg_125[1] != arg_201[0] && arg_125[1] == arg_177[1] && arg_125[1] != arg_111[0] && arg_125[1] == arg_189[1] && arg_125[1] == arg_27[1] && arg_125[1] == arg_233[1] && arg_125[1] == arg_231[1] && arg_125[1] != arg_175[0] && arg_125[1] != arg_125[0] && arg_125[1] != arg_223[0] && arg_125[1] == arg_207[1] && arg_125[1] == arg_139[1] && arg_125[1] == arg_77[1] && arg_125[1] != arg_183[0] && arg_125[1] != arg_27[0] && arg_125[1] == arg_65[1] && arg_125[1] != arg_49[0] && arg_125[1] != arg_189[0] && arg_125[1] == arg_59[1] && arg_125[1] != arg_105[0] && arg_125[1] != arg_221[0] && arg_125[1] != arg_247[0] && arg_125[1] == arg_19[1] && arg_125[1] != arg_253[0] && arg_125[1] != arg_77[0] && arg_125[1] == arg_15[1] && arg_125[1] == arg_81[1] && arg_125[1] != arg_91[0] && arg_125[1] == arg_91[1] && arg_125[1] != arg_155[0] && arg_125[1] == arg_159[1] && arg_125[1] == arg_191[1] && arg_125[1] == arg_95[1] && arg_125[1] == arg_221[1] && arg_125[1] != arg_251[0] && arg_125[1] != arg_45[0] && arg_125[1] == arg_21[1] && arg_125[1] != arg_139[0] && arg_125[1] == arg_171[1] && arg_125[1] != arg_89[0] && arg_125[1] == arg_183[1] && arg_125[1] == arg_141[1] && arg_125[1] != arg_207[0] && arg_125[1] == arg_51[1] && arg_125[1] != arg_233[0] && arg_125[1] != arg_13[0] && arg_125[1] != arg_237[0] && arg_125[1] == arg_147[1] && arg_125[1] != arg_57[0] && arg_125[1] != arg_119[0] && arg_125[1] == arg_63[1] && arg_125[1] != arg_169[0] && arg_217[0] == arg_245[0] && arg_217[0] == arg_21[0] && arg_217[0] == arg_97[0] && arg_217[0] == arg_75[0] && arg_217[0] == arg_161[0] && arg_217[0] != arg_209[1] && arg_217[0] != arg_97[1] && arg_217[0] != arg_121[1] && arg_217[0] != arg_247[1] && arg_217[0] == arg_19[0] && arg_217[0] != arg_145[1] && arg_217[0] != arg_251[1] && arg_217[0] == arg_29[0] && arg_217[0] != arg_107[1] && arg_217[0] == arg_231[0] && arg_217[0] == arg_81[0] && arg_217[0] == arg_63[0] && arg_217[0] != arg_215[1] && arg_217[0] != arg_35[1] && arg_217[0] != arg_153[1] && arg_217[0] == arg_121[0] && arg_217[0] == arg_33[0] && arg_217[0] != arg_111[1] && arg_217[0] == arg_177[0] && arg_217[0] == arg_203[0] && arg_217[0] == arg_153[0] && arg_217[0] == arg_95[0] && arg_217[0] == arg_83[0] && arg_217[0] != arg_175[1] && arg_217[0] == arg_159[0] && arg_217[0] == arg_141[0] && arg_217[0] == arg_201[0] && arg_217[0] != arg_177[1] && arg_217[0] == arg_111[0] && arg_217[0] != arg_189[1] && arg_217[0] != arg_27[1] && arg_217[0] != arg_233[1] && arg_217[0] != arg_231[1] && arg_217[0] == arg_175[0] && arg_217[0] == arg_125[0] && arg_217[0] == arg_223[0] && arg_217[0] != arg_207[1] && arg_217[0] != arg_139[1] && arg_217[0] != arg_77[1] && arg_217[0] == arg_183[0] && arg_217[0] == arg_27[0] && arg_217[0] != arg_65[1] && arg_217[0] == arg_49[0] && arg_217[0] == arg_189[0] && arg_217[0] != arg_59[1] && arg_217[0] == arg_105[0] && arg_217[0] == arg_221[0] && arg_217[0] == arg_247[0] && arg_217[0] != arg_19[1] && arg_217[0] == arg_253[0] && arg_217[0] == arg_77[0] && arg_217[0] != arg_15[1] && arg_217[0] != arg_81[1] && arg_217[0] == arg_91[0] && arg_217[0] != arg_91[1] && arg_217[0] == arg_155[0] && arg_217[0] != arg_159[1] && arg_217[0] != arg_191[1] && arg_217[0] != arg_95[1] && arg_217[0] != arg_221[1] && arg_217[0] == arg_251[0] && arg_217[0] == arg_45[0] && arg_217[0] != arg_21[1] && arg_217[0] == arg_139[0] && arg_217[0] != arg_171[1] && arg_217[0] == arg_89[0] && arg_217[0] != arg_183[1] && arg_217[0] != arg_141[1] && arg_217[0] == arg_207[0] && arg_217[0] != arg_51[1] && arg_217[0] == arg_233[0] && arg_217[0] == arg_13[0] && arg_217[0] == arg_237[0] && arg_217[0] != arg_147[1] && arg_217[0] == arg_57[0] && arg_217[0] == arg_119[0] && arg_217[0] != arg_63[1] && arg_217[0] == arg_169[0] && arg_245[0] == arg_21[0] && arg_245[0] == arg_97[0] && arg_245[0] == arg_75[0] && arg_245[0] == arg_161[0] && arg_245[0] != arg_209[1] && arg_245[0] != arg_97[1] && arg_245[0] != arg_121[1] && arg_245[0] != arg_247[1] && arg_245[0] == arg_19[0] && arg_245[0] != arg_145[1] && arg_245[0] != arg_251[1] && arg_245[0] == arg_29[0] && arg_245[0] != arg_107[1] && arg_245[0] == arg_231[0] && arg_245[0] == arg_81[0] && arg_245[0] == arg_63[0] && arg_245[0] != arg_215[1] && arg_245[0] != arg_35[1] && arg_245[0] != arg_153[1] && arg_245[0] == arg_121[0] && arg_245[0] == arg_33[0] && arg_245[0] != arg_111[1] && arg_245[0] == arg_177[0] && arg_245[0] == arg_203[0] && arg_245[0] == arg_153[0] && arg_245[0] == arg_95[0] && arg_245[0] == arg_83[0] && arg_245[0] != arg_175[1] && arg_245[0] == arg_159[0] && arg_245[0] == arg_141[0] && arg_245[0] == arg_201[0] && arg_245[0] != arg_177[1] && arg_245[0] == arg_111[0] && arg_245[0] != arg_189[1] && arg_245[0] != arg_27[1] && arg_245[0] != arg_233[1] && arg_245[0] != arg_231[1] && arg_245[0] == arg_175[0] && arg_245[0] == arg_125[0] && arg_245[0] == arg_223[0] && arg_245[0] != arg_207[1] && arg_245[0] != arg_139[1] && arg_245[0] != arg_77[1] && arg_245[0] == arg_183[0] && arg_245[0] == arg_27[0] && arg_245[0] != arg_65[1] && arg_245[0] == arg_49[0] && arg_245[0] == arg_189[0] && arg_245[0] != arg_59[1] && arg_245[0] == arg_105[0] && arg_245[0] == arg_221[0] && arg_245[0] == arg_247[0] && arg_245[0] != arg_19[1] && arg_245[0] == arg_253[0] && arg_245[0] == arg_77[0] && arg_245[0] != arg_15[1] && arg_245[0] != arg_81[1] && arg_245[0] == arg_91[0] && arg_245[0] != arg_91[1] && arg_245[0] == arg_155[0] && arg_245[0] != arg_159[1] && arg_245[0] != arg_191[1] && arg_245[0] != arg_95[1] && arg_245[0] != arg_221[1] && arg_245[0] == arg_251[0] && arg_245[0] == arg_45[0] && arg_245[0] != arg_21[1] && arg_245[0] == arg_139[0] && arg_245[0] != arg_171[1] && arg_245[0] == arg_89[0] && arg_245[0] != arg_183[1] && arg_245[0] != arg_141[1] && arg_245[0] == arg_207[0] && arg_245[0] != arg_51[1] && arg_245[0] == arg_233[0] && arg_245[0] == arg_13[0] && arg_245[0] == arg_237[0] && arg_245[0] != arg_147[1] && arg_245[0] == arg_57[0] && arg_245[0] == arg_119[0] && arg_245[0] != arg_63[1] && arg_245[0] == arg_169[0] && arg_21[0] == arg_97[0] && arg_21[0] == arg_75[0] && arg_21[0] == arg_161[0] && arg_21[0] != arg_209[1] && arg_21[0] != arg_97[1] && arg_21[0] != arg_121[1] && arg_21[0] != arg_247[1] && arg_21[0] == arg_19[0] && arg_21[0] != arg_145[1] && arg_21[0] != arg_251[1] && arg_21[0] == arg_29[0] && arg_21[0] != arg_107[1] && arg_21[0] == arg_231[0] && arg_21[0] == arg_81[0] && arg_21[0] == arg_63[0] && arg_21[0] != arg_215[1] && arg_21[0] != arg_35[1] && arg_21[0] != arg_153[1] && arg_21[0] == arg_121[0] && arg_21[0] == arg_33[0] && arg_21[0] != arg_111[1] && arg_21[0] == arg_177[0] && arg_21[0] == arg_203[0] && arg_21[0] == arg_153[0] && arg_21[0] == arg_95[0] && arg_21[0] == arg_83[0] && arg_21[0] != arg_175[1] && arg_21[0] == arg_159[0] && arg_21[0] == arg_141[0] && arg_21[0] == arg_201[0] && arg_21[0] != arg_177[1] && arg_21[0] == arg_111[0] && arg_21[0] != arg_189[1] && arg_21[0] != arg_27[1] && arg_21[0] != arg_233[1] && arg_21[0] != arg_231[1] && arg_21[0] == arg_175[0] && arg_21[0] == arg_125[0] && arg_21[0] == arg_223[0] && arg_21[0] != arg_207[1] && arg_21[0] != arg_139[1] && arg_21[0] != arg_77[1] && arg_21[0] == arg_183[0] && arg_21[0] == arg_27[0] && arg_21[0] != arg_65[1] && arg_21[0] == arg_49[0] && arg_21[0] == arg_189[0] && arg_21[0] != arg_59[1] && arg_21[0] == arg_105[0] && arg_21[0] == arg_221[0] && arg_21[0] == arg_247[0] && arg_21[0] != arg_19[1] && arg_21[0] == arg_253[0] && arg_21[0] == arg_77[0] && arg_21[0] != arg_15[1] && arg_21[0] != arg_81[1] && arg_21[0] == arg_91[0] && arg_21[0] != arg_91[1] && arg_21[0] == arg_155[0] && arg_21[0] != arg_159[1] && arg_21[0] != arg_191[1] && arg_21[0] != arg_95[1] && arg_21[0] != arg_221[1] && arg_21[0] == arg_251[0] && arg_21[0] == arg_45[0] && arg_21[0] != arg_21[1] && arg_21[0] == arg_139[0] && arg_21[0] != arg_171[1] && arg_21[0] == arg_89[0] && arg_21[0] != arg_183[1] && arg_21[0] != arg_141[1] && arg_21[0] == arg_207[0] && arg_21[0] != arg_51[1] && arg_21[0] == arg_233[0] && arg_21[0] == arg_13[0] && arg_21[0] == arg_237[0] && arg_21[0] != arg_147[1] && arg_21[0] == arg_57[0] && arg_21[0] == arg_119[0] && arg_21[0] != arg_63[1] && arg_21[0] == arg_169[0] && arg_97[0] == arg_75[0] && arg_97[0] == arg_161[0] && arg_97[0] != arg_209[1] && arg_97[0] != arg_97[1] && arg_97[0] != arg_121[1] && arg_97[0] != arg_247[1] && arg_97[0] == arg_19[0] && arg_97[0] != arg_145[1] && arg_97[0] != arg_251[1] && arg_97[0] == arg_29[0] && arg_97[0] != arg_107[1] && arg_97[0] == arg_231[0] && arg_97[0] == arg_81[0] && arg_97[0] == arg_63[0] && arg_97[0] != arg_215[1] && arg_97[0] != arg_35[1] && arg_97[0] != arg_153[1] && arg_97[0] == arg_121[0] && arg_97[0] == arg_33[0] && arg_97[0] != arg_111[1] && arg_97[0] == arg_177[0] && arg_97[0] == arg_203[0] && arg_97[0] == arg_153[0] && arg_97[0] == arg_95[0] && arg_97[0] == arg_83[0] && arg_97[0] != arg_175[1] && arg_97[0] == arg_159[0] && arg_97[0] == arg_141[0] && arg_97[0] == arg_201[0] && arg_97[0] != arg_177[1] && arg_97[0] == arg_111[0] && arg_97[0] != arg_189[1] && arg_97[0] != arg_27[1] && arg_97[0] != arg_233[1] && arg_97[0] != arg_231[1] && arg_97[0] == arg_175[0] && arg_97[0] == arg_125[0] && arg_97[0] == arg_223[0] && arg_97[0] != arg_207[1] && arg_97[0] != arg_139[1] && arg_97[0] != arg_77[1] && arg_97[0] == arg_183[0] && arg_97[0] == arg_27[0] && arg_97[0] != arg_65[1] && arg_97[0] == arg_49[0] && arg_97[0] == arg_189[0] && arg_97[0] != arg_59[1] && arg_97[0] == arg_105[0] && arg_97[0] == arg_221[0] && arg_97[0] == arg_247[0] && arg_97[0] != arg_19[1] && arg_97[0] == arg_253[0] && arg_97[0] == arg_77[0] && arg_97[0] != arg_15[1] && arg_97[0] != arg_81[1] && arg_97[0] == arg_91[0] && arg_97[0] != arg_91[1] && arg_97[0] == arg_155[0] && arg_97[0] != arg_159[1] && arg_97[0] != arg_191[1] && arg_97[0] != arg_95[1] && arg_97[0] != arg_221[1] && arg_97[0] == arg_251[0] && arg_97[0] == arg_45[0] && arg_97[0] != arg_21[1] && arg_97[0] == arg_139[0] && arg_97[0] != arg_171[1] && arg_97[0] == arg_89[0] && arg_97[0] != arg_183[1] && arg_97[0] != arg_141[1] && arg_97[0] == arg_207[0] && arg_97[0] != arg_51[1] && arg_97[0] == arg_233[0] && arg_97[0] == arg_13[0] && arg_97[0] == arg_237[0] && arg_97[0] != arg_147[1] && arg_97[0] == arg_57[0] && arg_97[0] == arg_119[0] && arg_97[0] != arg_63[1] && arg_97[0] == arg_169[0] && arg_75[0] == arg_161[0] && arg_75[0] != arg_209[1] && arg_75[0] != arg_97[1] && arg_75[0] != arg_121[1] && arg_75[0] != arg_247[1] && arg_75[0] == arg_19[0] && arg_75[0] != arg_145[1] && arg_75[0] != arg_251[1] && arg_75[0] == arg_29[0] && arg_75[0] != arg_107[1] && arg_75[0] == arg_231[0] && arg_75[0] == arg_81[0] && arg_75[0] == arg_63[0] && arg_75[0] != arg_215[1] && arg_75[0] != arg_35[1] && arg_75[0] != arg_153[1] && arg_75[0] == arg_121[0] && arg_75[0] == arg_33[0] && arg_75[0] != arg_111[1] && arg_75[0] == arg_177[0] && arg_75[0] == arg_203[0] && arg_75[0] == arg_153[0] && arg_75[0] == arg_95[0] && arg_75[0] == arg_83[0] && arg_75[0] != arg_175[1] && arg_75[0] == arg_159[0] && arg_75[0] == arg_141[0] && arg_75[0] == arg_201[0] && arg_75[0] != arg_177[1] && arg_75[0] == arg_111[0] && arg_75[0] != arg_189[1] && arg_75[0] != arg_27[1] && arg_75[0] != arg_233[1] && arg_75[0] != arg_231[1] && arg_75[0] == arg_175[0] && arg_75[0] == arg_125[0] && arg_75[0] == arg_223[0] && arg_75[0] != arg_207[1] && arg_75[0] != arg_139[1] && arg_75[0] != arg_77[1] && arg_75[0] == arg_183[0] && arg_75[0] == arg_27[0] && arg_75[0] != arg_65[1] && arg_75[0] == arg_49[0] && arg_75[0] == arg_189[0] && arg_75[0] != arg_59[1] && arg_75[0] == arg_105[0] && arg_75[0] == arg_221[0] && arg_75[0] == arg_247[0] && arg_75[0] != arg_19[1] && arg_75[0] == arg_253[0] && arg_75[0] == arg_77[0] && arg_75[0] != arg_15[1] && arg_75[0] != arg_81[1] && arg_75[0] == arg_91[0] && arg_75[0] != arg_91[1] && arg_75[0] == arg_155[0] && arg_75[0] != arg_159[1] && arg_75[0] != arg_191[1] && arg_75[0] != arg_95[1] && arg_75[0] != arg_221[1] && arg_75[0] == arg_251[0] && arg_75[0] == arg_45[0] && arg_75[0] != arg_21[1] && arg_75[0] == arg_139[0] && arg_75[0] != arg_171[1] && arg_75[0] == arg_89[0] && arg_75[0] != arg_183[1] && arg_75[0] != arg_141[1] && arg_75[0] == arg_207[0] && arg_75[0] != arg_51[1] && arg_75[0] == arg_233[0] && arg_75[0] == arg_13[0] && arg_75[0] == arg_237[0] && arg_75[0] != arg_147[1] && arg_75[0] == arg_57[0] && arg_75[0] == arg_119[0] && arg_75[0] != arg_63[1] && arg_75[0] == arg_169[0] && arg_161[0] != arg_209[1] && arg_161[0] != arg_97[1] && arg_161[0] != arg_121[1] && arg_161[0] != arg_247[1] && arg_161[0] == arg_19[0] && arg_161[0] != arg_145[1] && arg_161[0] != arg_251[1] && arg_161[0] == arg_29[0] && arg_161[0] != arg_107[1] && arg_161[0] == arg_231[0] && arg_161[0] == arg_81[0] && arg_161[0] == arg_63[0] && arg_161[0] != arg_215[1] && arg_161[0] != arg_35[1] && arg_161[0] != arg_153[1] && arg_161[0] == arg_121[0] && arg_161[0] == arg_33[0] && arg_161[0] != arg_111[1] && arg_161[0] == arg_177[0] && arg_161[0] == arg_203[0] && arg_161[0] == arg_153[0] && arg_161[0] == arg_95[0] && arg_161[0] == arg_83[0] && arg_161[0] != arg_175[1] && arg_161[0] == arg_159[0] && arg_161[0] == arg_141[0] && arg_161[0] == arg_201[0] && arg_161[0] != arg_177[1] && arg_161[0] == arg_111[0] && arg_161[0] != arg_189[1] && arg_161[0] != arg_27[1] && arg_161[0] != arg_233[1] && arg_161[0] != arg_231[1] && arg_161[0] == arg_175[0] && arg_161[0] == arg_125[0] && arg_161[0] == arg_223[0] && arg_161[0] != arg_207[1] && arg_161[0] != arg_139[1] && arg_161[0] != arg_77[1] && arg_161[0] == arg_183[0] && arg_161[0] == arg_27[0] && arg_161[0] != arg_65[1] && arg_161[0] == arg_49[0] && arg_161[0] == arg_189[0] && arg_161[0] != arg_59[1] && arg_161[0] == arg_105[0] && arg_161[0] == arg_221[0] && arg_161[0] == arg_247[0] && arg_161[0] != arg_19[1] && arg_161[0] == arg_253[0] && arg_161[0] == arg_77[0] && arg_161[0] != arg_15[1] && arg_161[0] != arg_81[1] && arg_161[0] == arg_91[0] && arg_161[0] != arg_91[1] && arg_161[0] == arg_155[0] && arg_161[0] != arg_159[1] && arg_161[0] != arg_191[1] && arg_161[0] != arg_95[1] && arg_161[0] != arg_221[1] && arg_161[0] == arg_251[0] && arg_161[0] == arg_45[0] && arg_161[0] != arg_21[1] && arg_161[0] == arg_139[0] && arg_161[0] != arg_171[1] && arg_161[0] == arg_89[0] && arg_161[0] != arg_183[1] && arg_161[0] != arg_141[1] && arg_161[0] == arg_207[0] && arg_161[0] != arg_51[1] && arg_161[0] == arg_233[0] && arg_161[0] == arg_13[0] && arg_161[0] == arg_237[0] && arg_161[0] != arg_147[1] && arg_161[0] == arg_57[0] && arg_161[0] == arg_119[0] && arg_161[0] != arg_63[1] && arg_161[0] == arg_169[0] && arg_209[1] == arg_97[1] && arg_209[1] == arg_121[1] && arg_209[1] == arg_247[1] && arg_209[1] != arg_19[0] && arg_209[1] == arg_145[1] && arg_209[1] == arg_251[1] && arg_209[1] != arg_29[0] && arg_209[1] == arg_107[1] && arg_209[1] != arg_231[0] && arg_209[1] != arg_81[0] && arg_209[1] != arg_63[0] && arg_209[1] == arg_215[1] && arg_209[1] == arg_35[1] && arg_209[1] == arg_153[1] && arg_209[1] != arg_121[0] && arg_209[1] != arg_33[0] && arg_209[1] == arg_111[1] && arg_209[1] != arg_177[0] && arg_209[1] != arg_203[0] && arg_209[1] != arg_153[0] && arg_209[1] != arg_95[0] && arg_209[1] != arg_83[0] && arg_209[1] == arg_175[1] && arg_209[1] != arg_159[0] && arg_209[1] != arg_141[0] && arg_209[1] != arg_201[0] && arg_209[1] == arg_177[1] && arg_209[1] != arg_111[0] && arg_209[1] == arg_189[1] && arg_209[1] == arg_27[1] && arg_209[1] == arg_233[1] && arg_209[1] == arg_231[1] && arg_209[1] != arg_175[0] && arg_209[1] != arg_125[0] && arg_209[1] != arg_223[0] && arg_209[1] == arg_207[1] && arg_209[1] == arg_139[1] && arg_209[1] == arg_77[1] && arg_209[1] != arg_183[0] && arg_209[1] != arg_27[0] && arg_209[1] == arg_65[1] && arg_209[1] != arg_49[0] && arg_209[1] != arg_189[0] && arg_209[1] == arg_59[1] && arg_209[1] != arg_105[0] && arg_209[1] != arg_221[0] && arg_209[1] != arg_247[0] && arg_209[1] == arg_19[1] && arg_209[1] != arg_253[0] && arg_209[1] != arg_77[0] && arg_209[1] == arg_15[1] && arg_209[1] == arg_81[1] && arg_209[1] != arg_91[0] && arg_209[1] == arg_91[1] && arg_209[1] != arg_155[0] && arg_209[1] == arg_159[1] && arg_209[1] == arg_191[1] && arg_209[1] == arg_95[1] && arg_209[1] == arg_221[1] && arg_209[1] != arg_251[0] && arg_209[1] != arg_45[0] && arg_209[1] == arg_21[1] && arg_209[1] != arg_139[0] && arg_209[1] == arg_171[1] && arg_209[1] != arg_89[0] && arg_209[1] == arg_183[1] && arg_209[1] == arg_141[1] && arg_209[1] != arg_207[0] && arg_209[1] == arg_51[1] && arg_209[1] != arg_233[0] && arg_209[1] != arg_13[0] && arg_209[1] != arg_237[0] && arg_209[1] == arg_147[1] && arg_209[1] != arg_57[0] && arg_209[1] != arg_119[0] && arg_209[1] == arg_63[1] && arg_209[1] != arg_169[0] && arg_97[1] == arg_121[1] && arg_97[1] == arg_247[1] && arg_97[1] != arg_19[0] && arg_97[1] == arg_145[1] && arg_97[1] == arg_251[1] && arg_97[1] != arg_29[0] && arg_97[1] == arg_107[1] && arg_97[1] != arg_231[0] && arg_97[1] != arg_81[0] && arg_97[1] != arg_63[0] && arg_97[1] == arg_215[1] && arg_97[1] == arg_35[1] && arg_97[1] == arg_153[1] && arg_97[1] != arg_121[0] && arg_97[1] != arg_33[0] && arg_97[1] == arg_111[1] && arg_97[1] != arg_177[0] && arg_97[1] != arg_203[0] && arg_97[1] != arg_153[0] && arg_97[1] != arg_95[0] && arg_97[1] != arg_83[0] && arg_97[1] == arg_175[1] && arg_97[1] != arg_159[0] && arg_97[1] != arg_141[0] && arg_97[1] != arg_201[0] && arg_97[1] == arg_177[1] && arg_97[1] != arg_111[0] && arg_97[1] == arg_189[1] && arg_97[1] == arg_27[1] && arg_97[1] == arg_233[1] && arg_97[1] == arg_231[1] && arg_97[1] != arg_175[0] && arg_97[1] != arg_125[0] && arg_97[1] != arg_223[0] && arg_97[1] == arg_207[1] && arg_97[1] == arg_139[1] && arg_97[1] == arg_77[1] && arg_97[1] != arg_183[0] && arg_97[1] != arg_27[0] && arg_97[1] == arg_65[1] && arg_97[1] != arg_49[0] && arg_97[1] != arg_189[0] && arg_97[1] == arg_59[1] && arg_97[1] != arg_105[0] && arg_97[1] != arg_221[0] && arg_97[1] != arg_247[0] && arg_97[1] == arg_19[1] && arg_97[1] != arg_253[0] && arg_97[1] != arg_77[0] && arg_97[1] == arg_15[1] && arg_97[1] == arg_81[1] && arg_97[1] != arg_91[0] && arg_97[1] == arg_91[1] && arg_97[1] != arg_155[0] && arg_97[1] == arg_159[1] && arg_97[1] == arg_191[1] && arg_97[1] == arg_95[1] && arg_97[1] == arg_221[1] && arg_97[1] != arg_251[0] && arg_97[1] != arg_45[0] && arg_97[1] == arg_21[1] && arg_97[1] != arg_139[0] && arg_97[1] == arg_171[1] && arg_97[1] != arg_89[0] && arg_97[1] == arg_183[1] && arg_97[1] == arg_141[1] && arg_97[1] != arg_207[0] && arg_97[1] == arg_51[1] && arg_97[1] != arg_233[0] && arg_97[1] != arg_13[0] && arg_97[1] != arg_237[0] && arg_97[1] == arg_147[1] && arg_97[1] != arg_57[0] && arg_97[1] != arg_119[0] && arg_97[1] == arg_63[1] && arg_97[1] != arg_169[0] && arg_121[1] == arg_247[1] && arg_121[1] != arg_19[0] && arg_121[1] == arg_145[1] && arg_121[1] == arg_251[1] && arg_121[1] != arg_29[0] && arg_121[1] == arg_107[1] && arg_121[1] != arg_231[0] && arg_121[1] != arg_81[0] && arg_121[1] != arg_63[0] && arg_121[1] == arg_215[1] && arg_121[1] == arg_35[1] && arg_121[1] == arg_153[1] && arg_121[1] != arg_121[0] && arg_121[1] != arg_33[0] && arg_121[1] == arg_111[1] && arg_121[1] != arg_177[0] && arg_121[1] != arg_203[0] && arg_121[1] != arg_153[0] && arg_121[1] != arg_95[0] && arg_121[1] != arg_83[0] && arg_121[1] == arg_175[1] && arg_121[1] != arg_159[0] && arg_121[1] != arg_141[0] && arg_121[1] != arg_201[0] && arg_121[1] == arg_177[1] && arg_121[1] != arg_111[0] && arg_121[1] == arg_189[1] && arg_121[1] == arg_27[1] && arg_121[1] == arg_233[1] && arg_121[1] == arg_231[1] && arg_121[1] != arg_175[0] && arg_121[1] != arg_125[0] && arg_121[1] != arg_223[0] && arg_121[1] == arg_207[1] && arg_121[1] == arg_139[1] && arg_121[1] == arg_77[1] && arg_121[1] != arg_183[0] && arg_121[1] != arg_27[0] && arg_121[1] == arg_65[1] && arg_121[1] != arg_49[0] && arg_121[1] != arg_189[0] && arg_121[1] == arg_59[1] && arg_121[1] != arg_105[0] && arg_121[1] != arg_221[0] && arg_121[1] != arg_247[0] && arg_121[1] == arg_19[1] && arg_121[1] != arg_253[0] && arg_121[1] != arg_77[0] && arg_121[1] == arg_15[1] && arg_121[1] == arg_81[1] && arg_121[1] != arg_91[0] && arg_121[1] == arg_91[1] && arg_121[1] != arg_155[0] && arg_121[1] == arg_159[1] && arg_121[1] == arg_191[1] && arg_121[1] == arg_95[1] && arg_121[1] == arg_221[1] && arg_121[1] != arg_251[0] && arg_121[1] != arg_45[0] && arg_121[1] == arg_21[1] && arg_121[1] != arg_139[0] && arg_121[1] == arg_171[1] && arg_121[1] != arg_89[0] && arg_121[1] == arg_183[1] && arg_121[1] == arg_141[1] && arg_121[1] != arg_207[0] && arg_121[1] == arg_51[1] && arg_121[1] != arg_233[0] && arg_121[1] != arg_13[0] && arg_121[1] != arg_237[0] && arg_121[1] == arg_147[1] && arg_121[1] != arg_57[0] && arg_121[1] != arg_119[0] && arg_121[1] == arg_63[1] && arg_121[1] != arg_169[0] && arg_247[1] != arg_19[0] && arg_247[1] == arg_145[1] && arg_247[1] == arg_251[1] && arg_247[1] != arg_29[0] && arg_247[1] == arg_107[1] && arg_247[1] != arg_231[0] && arg_247[1] != arg_81[0] && arg_247[1] != arg_63[0] && arg_247[1] == arg_215[1] && arg_247[1] == arg_35[1] && arg_247[1] == arg_153[1] && arg_247[1] != arg_121[0] && arg_247[1] != arg_33[0] && arg_247[1] == arg_111[1] && arg_247[1] != arg_177[0] && arg_247[1] != arg_203[0] && arg_247[1] != arg_153[0] && arg_247[1] != arg_95[0] && arg_247[1] != arg_83[0] && arg_247[1] == arg_175[1] && arg_247[1] != arg_159[0] && arg_247[1] != arg_141[0] && arg_247[1] != arg_201[0] && arg_247[1] == arg_177[1] && arg_247[1] != arg_111[0] && arg_247[1] == arg_189[1] && arg_247[1] == arg_27[1] && arg_247[1] == arg_233[1] && arg_247[1] == arg_231[1] && arg_247[1] != arg_175[0] && arg_247[1] != arg_125[0] && arg_247[1] != arg_223[0] && arg_247[1] == arg_207[1] && arg_247[1] == arg_139[1] && arg_247[1] == arg_77[1] && arg_247[1] != arg_183[0] && arg_247[1] != arg_27[0] && arg_247[1] == arg_65[1] && arg_247[1] != arg_49[0] && arg_247[1] != arg_189[0] && arg_247[1] == arg_59[1] && arg_247[1] != arg_105[0] && arg_247[1] != arg_221[0] && arg_247[1] != arg_247[0] && arg_247[1] == arg_19[1] && arg_247[1] != arg_253[0] && arg_247[1] != arg_77[0] && arg_247[1] == arg_15[1] && arg_247[1] == arg_81[1] && arg_247[1] != arg_91[0] && arg_247[1] == arg_91[1] && arg_247[1] != arg_155[0] && arg_247[1] == arg_159[1] && arg_247[1] == arg_191[1] && arg_247[1] == arg_95[1] && arg_247[1] == arg_221[1] && arg_247[1] != arg_251[0] && arg_247[1] != arg_45[0] && arg_247[1] == arg_21[1] && arg_247[1] != arg_139[0] && arg_247[1] == arg_171[1] && arg_247[1] != arg_89[0] && arg_247[1] == arg_183[1] && arg_247[1] == arg_141[1] && arg_247[1] != arg_207[0] && arg_247[1] == arg_51[1] && arg_247[1] != arg_233[0] && arg_247[1] != arg_13[0] && arg_247[1] != arg_237[0] && arg_247[1] == arg_147[1] && arg_247[1] != arg_57[0] && arg_247[1] != arg_119[0] && arg_247[1] == arg_63[1] && arg_247[1] != arg_169[0] && arg_19[0] != arg_145[1] && arg_19[0] != arg_251[1] && arg_19[0] == arg_29[0] && arg_19[0] != arg_107[1] && arg_19[0] == arg_231[0] && arg_19[0] == arg_81[0] && arg_19[0] == arg_63[0] && arg_19[0] != arg_215[1] && arg_19[0] != arg_35[1] && arg_19[0] != arg_153[1] && arg_19[0] == arg_121[0] && arg_19[0] == arg_33[0] && arg_19[0] != arg_111[1] && arg_19[0] == arg_177[0] && arg_19[0] == arg_203[0] && arg_19[0] == arg_153[0] && arg_19[0] == arg_95[0] && arg_19[0] == arg_83[0] && arg_19[0] != arg_175[1] && arg_19[0] == arg_159[0] && arg_19[0] == arg_141[0] && arg_19[0] == arg_201[0] && arg_19[0] != arg_177[1] && arg_19[0] == arg_111[0] && arg_19[0] != arg_189[1] && arg_19[0] != arg_27[1] && arg_19[0] != arg_233[1] && arg_19[0] != arg_231[1] && arg_19[0] == arg_175[0] && arg_19[0] == arg_125[0] && arg_19[0] == arg_223[0] && arg_19[0] != arg_207[1] && arg_19[0] != arg_139[1] && arg_19[0] != arg_77[1] && arg_19[0] == arg_183[0] && arg_19[0] == arg_27[0] && arg_19[0] != arg_65[1] && arg_19[0] == arg_49[0] && arg_19[0] == arg_189[0] && arg_19[0] != arg_59[1] && arg_19[0] == arg_105[0] && arg_19[0] == arg_221[0] && arg_19[0] == arg_247[0] && arg_19[0] != arg_19[1] && arg_19[0] == arg_253[0] && arg_19[0] == arg_77[0] && arg_19[0] != arg_15[1] && arg_19[0] != arg_81[1] && arg_19[0] == arg_91[0] && arg_19[0] != arg_91[1] && arg_19[0] == arg_155[0] && arg_19[0] != arg_159[1] && arg_19[0] != arg_191[1] && arg_19[0] != arg_95[1] && arg_19[0] != arg_221[1] && arg_19[0] == arg_251[0] && arg_19[0] == arg_45[0] && arg_19[0] != arg_21[1] && arg_19[0] == arg_139[0] && arg_19[0] != arg_171[1] && arg_19[0] == arg_89[0] && arg_19[0] != arg_183[1] && arg_19[0] != arg_141[1] && arg_19[0] == arg_207[0] && arg_19[0] != arg_51[1] && arg_19[0] == arg_233[0] && arg_19[0] == arg_13[0] && arg_19[0] == arg_237[0] && arg_19[0] != arg_147[1] && arg_19[0] == arg_57[0] && arg_19[0] == arg_119[0] && arg_19[0] != arg_63[1] && arg_19[0] == arg_169[0] && arg_145[1] == arg_251[1] && arg_145[1] != arg_29[0] && arg_145[1] == arg_107[1] && arg_145[1] != arg_231[0] && arg_145[1] != arg_81[0] && arg_145[1] != arg_63[0] && arg_145[1] == arg_215[1] && arg_145[1] == arg_35[1] && arg_145[1] == arg_153[1] && arg_145[1] != arg_121[0] && arg_145[1] != arg_33[0] && arg_145[1] == arg_111[1] && arg_145[1] != arg_177[0] && arg_145[1] != arg_203[0] && arg_145[1] != arg_153[0] && arg_145[1] != arg_95[0] && arg_145[1] != arg_83[0] && arg_145[1] == arg_175[1] && arg_145[1] != arg_159[0] && arg_145[1] != arg_141[0] && arg_145[1] != arg_201[0] && arg_145[1] == arg_177[1] && arg_145[1] != arg_111[0] && arg_145[1] == arg_189[1] && arg_145[1] == arg_27[1] && arg_145[1] == arg_233[1] && arg_145[1] == arg_231[1] && arg_145[1] != arg_175[0] && arg_145[1] != arg_125[0] && arg_145[1] != arg_223[0] && arg_145[1] == arg_207[1] && arg_145[1] == arg_139[1] && arg_145[1] == arg_77[1] && arg_145[1] != arg_183[0] && arg_145[1] != arg_27[0] && arg_145[1] == arg_65[1] && arg_145[1] != arg_49[0] && arg_145[1] != arg_189[0] && arg_145[1] == arg_59[1] && arg_145[1] != arg_105[0] && arg_145[1] != arg_221[0] && arg_145[1] != arg_247[0] && arg_145[1] == arg_19[1] && arg_145[1] != arg_253[0] && arg_145[1] != arg_77[0] && arg_145[1] == arg_15[1] && arg_145[1] == arg_81[1] && arg_145[1] != arg_91[0] && arg_145[1] == arg_91[1] && arg_145[1] != arg_155[0] && arg_145[1] == arg_159[1] && arg_145[1] == arg_191[1] && arg_145[1] == arg_95[1] && arg_145[1] == arg_221[1] && arg_145[1] != arg_251[0] && arg_145[1] != arg_45[0] && arg_145[1] == arg_21[1] && arg_145[1] != arg_139[0] && arg_145[1] == arg_171[1] && arg_145[1] != arg_89[0] && arg_145[1] == arg_183[1] && arg_145[1] == arg_141[1] && arg_145[1] != arg_207[0] && arg_145[1] == arg_51[1] && arg_145[1] != arg_233[0] && arg_145[1] != arg_13[0] && arg_145[1] != arg_237[0] && arg_145[1] == arg_147[1] && arg_145[1] != arg_57[0] && arg_145[1] != arg_119[0] && arg_145[1] == arg_63[1] && arg_145[1] != arg_169[0] && arg_251[1] != arg_29[0] && arg_251[1] == arg_107[1] && arg_251[1] != arg_231[0] && arg_251[1] != arg_81[0] && arg_251[1] != arg_63[0] && arg_251[1] == arg_215[1] && arg_251[1] == arg_35[1] && arg_251[1] == arg_153[1] && arg_251[1] != arg_121[0] && arg_251[1] != arg_33[0] && arg_251[1] == arg_111[1] && arg_251[1] != arg_177[0] && arg_251[1] != arg_203[0] && arg_251[1] != arg_153[0] && arg_251[1] != arg_95[0] && arg_251[1] != arg_83[0] && arg_251[1] == arg_175[1] && arg_251[1] != arg_159[0] && arg_251[1] != arg_141[0] && arg_251[1] != arg_201[0] && arg_251[1] == arg_177[1] && arg_251[1] != arg_111[0] && arg_251[1] == arg_189[1] && arg_251[1] == arg_27[1] && arg_251[1] == arg_233[1] && arg_251[1] == arg_231[1] && arg_251[1] != arg_175[0] && arg_251[1] != arg_125[0] && arg_251[1] != arg_223[0] && arg_251[1] == arg_207[1] && arg_251[1] == arg_139[1] && arg_251[1] == arg_77[1] && arg_251[1] != arg_183[0] && arg_251[1] != arg_27[0] && arg_251[1] == arg_65[1] && arg_251[1] != arg_49[0] && arg_251[1] != arg_189[0] && arg_251[1] == arg_59[1] && arg_251[1] != arg_105[0] && arg_251[1] != arg_221[0] && arg_251[1] != arg_247[0] && arg_251[1] == arg_19[1] && arg_251[1] != arg_253[0] && arg_251[1] != arg_77[0] && arg_251[1] == arg_15[1] && arg_251[1] == arg_81[1] && arg_251[1] != arg_91[0] && arg_251[1] == arg_91[1] && arg_251[1] != arg_155[0] && arg_251[1] == arg_159[1] && arg_251[1] == arg_191[1] && arg_251[1] == arg_95[1] && arg_251[1] == arg_221[1] && arg_251[1] != arg_251[0] && arg_251[1] != arg_45[0] && arg_251[1] == arg_21[1] && arg_251[1] != arg_139[0] && arg_251[1] == arg_171[1] && arg_251[1] != arg_89[0] && arg_251[1] == arg_183[1] && arg_251[1] == arg_141[1] && arg_251[1] != arg_207[0] && arg_251[1] == arg_51[1] && arg_251[1] != arg_233[0] && arg_251[1] != arg_13[0] && arg_251[1] != arg_237[0] && arg_251[1] == arg_147[1] && arg_251[1] != arg_57[0] && arg_251[1] != arg_119[0] && arg_251[1] == arg_63[1] && arg_251[1] != arg_169[0] && arg_29[0] != arg_107[1] && arg_29[0] == arg_231[0] && arg_29[0] == arg_81[0] && arg_29[0] == arg_63[0] && arg_29[0] != arg_215[1] && arg_29[0] != arg_35[1] && arg_29[0] != arg_153[1] && arg_29[0] == arg_121[0] && arg_29[0] == arg_33[0] && arg_29[0] != arg_111[1] && arg_29[0] == arg_177[0] && arg_29[0] == arg_203[0] && arg_29[0] == arg_153[0] && arg_29[0] == arg_95[0] && arg_29[0] == arg_83[0] && arg_29[0] != arg_175[1] && arg_29[0] == arg_159[0] && arg_29[0] == arg_141[0] && arg_29[0] == arg_201[0] && arg_29[0] != arg_177[1] && arg_29[0] == arg_111[0] && arg_29[0] != arg_189[1] && arg_29[0] != arg_27[1] && arg_29[0] != arg_233[1] && arg_29[0] != arg_231[1] && arg_29[0] == arg_175[0] && arg_29[0] == arg_125[0] && arg_29[0] == arg_223[0] && arg_29[0] != arg_207[1] && arg_29[0] != arg_139[1] && arg_29[0] != arg_77[1] && arg_29[0] == arg_183[0] && arg_29[0] == arg_27[0] && arg_29[0] != arg_65[1] && arg_29[0] == arg_49[0] && arg_29[0] == arg_189[0] && arg_29[0] != arg_59[1] && arg_29[0] == arg_105[0] && arg_29[0] == arg_221[0] && arg_29[0] == arg_247[0] && arg_29[0] != arg_19[1] && arg_29[0] == arg_253[0] && arg_29[0] == arg_77[0] && arg_29[0] != arg_15[1] && arg_29[0] != arg_81[1] && arg_29[0] == arg_91[0] && arg_29[0] != arg_91[1] && arg_29[0] == arg_155[0] && arg_29[0] != arg_159[1] && arg_29[0] != arg_191[1] && arg_29[0] != arg_95[1] && arg_29[0] != arg_221[1] && arg_29[0] == arg_251[0] && arg_29[0] == arg_45[0] && arg_29[0] != arg_21[1] && arg_29[0] == arg_139[0] && arg_29[0] != arg_171[1] && arg_29[0] == arg_89[0] && arg_29[0] != arg_183[1] && arg_29[0] != arg_141[1] && arg_29[0] == arg_207[0] && arg_29[0] != arg_51[1] && arg_29[0] == arg_233[0] && arg_29[0] == arg_13[0] && arg_29[0] == arg_237[0] && arg_29[0] != arg_147[1] && arg_29[0] == arg_57[0] && arg_29[0] == arg_119[0] && arg_29[0] != arg_63[1] && arg_29[0] == arg_169[0] && arg_107[1] != arg_231[0] && arg_107[1] != arg_81[0] && arg_107[1] != arg_63[0] && arg_107[1] == arg_215[1] && arg_107[1] == arg_35[1] && arg_107[1] == arg_153[1] && arg_107[1] != arg_121[0] && arg_107[1] != arg_33[0] && arg_107[1] == arg_111[1] && arg_107[1] != arg_177[0] && arg_107[1] != arg_203[0] && arg_107[1] != arg_153[0] && arg_107[1] != arg_95[0] && arg_107[1] != arg_83[0] && arg_107[1] == arg_175[1] && arg_107[1] != arg_159[0] && arg_107[1] != arg_141[0] && arg_107[1] != arg_201[0] && arg_107[1] == arg_177[1] && arg_107[1] != arg_111[0] && arg_107[1] == arg_189[1] && arg_107[1] == arg_27[1] && arg_107[1] == arg_233[1] && arg_107[1] == arg_231[1] && arg_107[1] != arg_175[0] && arg_107[1] != arg_125[0] && arg_107[1] != arg_223[0] && arg_107[1] == arg_207[1] && arg_107[1] == arg_139[1] && arg_107[1] == arg_77[1] && arg_107[1] != arg_183[0] && arg_107[1] != arg_27[0] && arg_107[1] == arg_65[1] && arg_107[1] != arg_49[0] && arg_107[1] != arg_189[0] && arg_107[1] == arg_59[1] && arg_107[1] != arg_105[0] && arg_107[1] != arg_221[0] && arg_107[1] != arg_247[0] && arg_107[1] == arg_19[1] && arg_107[1] != arg_253[0] && arg_107[1] != arg_77[0] && arg_107[1] == arg_15[1] && arg_107[1] == arg_81[1] && arg_107[1] != arg_91[0] && arg_107[1] == arg_91[1] && arg_107[1] != arg_155[0] && arg_107[1] == arg_159[1] && arg_107[1] == arg_191[1] && arg_107[1] == arg_95[1] && arg_107[1] == arg_221[1] && arg_107[1] != arg_251[0] && arg_107[1] != arg_45[0] && arg_107[1] == arg_21[1] && arg_107[1] != arg_139[0] && arg_107[1] == arg_171[1] && arg_107[1] != arg_89[0] && arg_107[1] == arg_183[1] && arg_107[1] == arg_141[1] && arg_107[1] != arg_207[0] && arg_107[1] == arg_51[1] && arg_107[1] != arg_233[0] && arg_107[1] != arg_13[0] && arg_107[1] != arg_237[0] && arg_107[1] == arg_147[1] && arg_107[1] != arg_57[0] && arg_107[1] != arg_119[0] && arg_107[1] == arg_63[1] && arg_107[1] != arg_169[0] && arg_231[0] == arg_81[0] && arg_231[0] == arg_63[0] && arg_231[0] != arg_215[1] && arg_231[0] != arg_35[1] && arg_231[0] != arg_153[1] && arg_231[0] == arg_121[0] && arg_231[0] == arg_33[0] && arg_231[0] != arg_111[1] && arg_231[0] == arg_177[0] && arg_231[0] == arg_203[0] && arg_231[0] == arg_153[0] && arg_231[0] == arg_95[0] && arg_231[0] == arg_83[0] && arg_231[0] != arg_175[1] && arg_231[0] == arg_159[0] && arg_231[0] == arg_141[0] && arg_231[0] == arg_201[0] && arg_231[0] != arg_177[1] && arg_231[0] == arg_111[0] && arg_231[0] != arg_189[1] && arg_231[0] != arg_27[1] && arg_231[0] != arg_233[1] && arg_231[0] != arg_231[1] && arg_231[0] == arg_175[0] && arg_231[0] == arg_125[0] && arg_231[0] == arg_223[0] && arg_231[0] != arg_207[1] && arg_231[0] != arg_139[1] && arg_231[0] != arg_77[1] && arg_231[0] == arg_183[0] && arg_231[0] == arg_27[0] && arg_231[0] != arg_65[1] && arg_231[0] == arg_49[0] && arg_231[0] == arg_189[0] && arg_231[0] != arg_59[1] && arg_231[0] == arg_105[0] && arg_231[0] == arg_221[0] && arg_231[0] == arg_247[0] && arg_231[0] != arg_19[1] && arg_231[0] == arg_253[0] && arg_231[0] == arg_77[0] && arg_231[0] != arg_15[1] && arg_231[0] != arg_81[1] && arg_231[0] == arg_91[0] && arg_231[0] != arg_91[1] && arg_231[0] == arg_155[0] && arg_231[0] != arg_159[1] && arg_231[0] != arg_191[1] && arg_231[0] != arg_95[1] && arg_231[0] != arg_221[1] && arg_231[0] == arg_251[0] && arg_231[0] == arg_45[0] && arg_231[0] != arg_21[1] && arg_231[0] == arg_139[0] && arg_231[0] != arg_171[1] && arg_231[0] == arg_89[0] && arg_231[0] != arg_183[1] && arg_231[0] != arg_141[1] && arg_231[0] == arg_207[0] && arg_231[0] != arg_51[1] && arg_231[0] == arg_233[0] && arg_231[0] == arg_13[0] && arg_231[0] == arg_237[0] && arg_231[0] != arg_147[1] && arg_231[0] == arg_57[0] && arg_231[0] == arg_119[0] && arg_231[0] != arg_63[1] && arg_231[0] == arg_169[0] && arg_81[0] == arg_63[0] && arg_81[0] != arg_215[1] && arg_81[0] != arg_35[1] && arg_81[0] != arg_153[1] && arg_81[0] == arg_121[0] && arg_81[0] == arg_33[0] && arg_81[0] != arg_111[1] && arg_81[0] == arg_177[0] && arg_81[0] == arg_203[0] && arg_81[0] == arg_153[0] && arg_81[0] == arg_95[0] && arg_81[0] == arg_83[0] && arg_81[0] != arg_175[1] && arg_81[0] == arg_159[0] && arg_81[0] == arg_141[0] && arg_81[0] == arg_201[0] && arg_81[0] != arg_177[1] && arg_81[0] == arg_111[0] && arg_81[0] != arg_189[1] && arg_81[0] != arg_27[1] && arg_81[0] != arg_233[1] && arg_81[0] != arg_231[1] && arg_81[0] == arg_175[0] && arg_81[0] == arg_125[0] && arg_81[0] == arg_223[0] && arg_81[0] != arg_207[1] && arg_81[0] != arg_139[1] && arg_81[0] != arg_77[1] && arg_81[0] == arg_183[0] && arg_81[0] == arg_27[0] && arg_81[0] != arg_65[1] && arg_81[0] == arg_49[0] && arg_81[0] == arg_189[0] && arg_81[0] != arg_59[1] && arg_81[0] == arg_105[0] && arg_81[0] == arg_221[0] && arg_81[0] == arg_247[0] && arg_81[0] != arg_19[1] && arg_81[0] == arg_253[0] && arg_81[0] == arg_77[0] && arg_81[0] != arg_15[1] && arg_81[0] != arg_81[1] && arg_81[0] == arg_91[0] && arg_81[0] != arg_91[1] && arg_81[0] == arg_155[0] && arg_81[0] != arg_159[1] && arg_81[0] != arg_191[1] && arg_81[0] != arg_95[1] && arg_81[0] != arg_221[1] && arg_81[0] == arg_251[0] && arg_81[0] == arg_45[0] && arg_81[0] != arg_21[1] && arg_81[0] == arg_139[0] && arg_81[0] != arg_171[1] && arg_81[0] == arg_89[0] && arg_81[0] != arg_183[1] && arg_81[0] != arg_141[1] && arg_81[0] == arg_207[0] && arg_81[0] != arg_51[1] && arg_81[0] == arg_233[0] && arg_81[0] == arg_13[0] && arg_81[0] == arg_237[0] && arg_81[0] != arg_147[1] && arg_81[0] == arg_57[0] && arg_81[0] == arg_119[0] && arg_81[0] != arg_63[1] && arg_81[0] == arg_169[0] && arg_63[0] != arg_215[1] && arg_63[0] != arg_35[1] && arg_63[0] != arg_153[1] && arg_63[0] == arg_121[0] && arg_63[0] == arg_33[0] && arg_63[0] != arg_111[1] && arg_63[0] == arg_177[0] && arg_63[0] == arg_203[0] && arg_63[0] == arg_153[0] && arg_63[0] == arg_95[0] && arg_63[0] == arg_83[0] && arg_63[0] != arg_175[1] && arg_63[0] == arg_159[0] && arg_63[0] == arg_141[0] && arg_63[0] == arg_201[0] && arg_63[0] != arg_177[1] && arg_63[0] == arg_111[0] && arg_63[0] != arg_189[1] && arg_63[0] != arg_27[1] && arg_63[0] != arg_233[1] && arg_63[0] != arg_231[1] && arg_63[0] == arg_175[0] && arg_63[0] == arg_125[0] && arg_63[0] == arg_223[0] && arg_63[0] != arg_207[1] && arg_63[0] != arg_139[1] && arg_63[0] != arg_77[1] && arg_63[0] == arg_183[0] && arg_63[0] == arg_27[0] && arg_63[0] != arg_65[1] && arg_63[0] == arg_49[0] && arg_63[0] == arg_189[0] && arg_63[0] != arg_59[1] && arg_63[0] == arg_105[0] && arg_63[0] == arg_221[0] && arg_63[0] == arg_247[0] && arg_63[0] != arg_19[1] && arg_63[0] == arg_253[0] && arg_63[0] == arg_77[0] && arg_63[0] != arg_15[1] && arg_63[0] != arg_81[1] && arg_63[0] == arg_91[0] && arg_63[0] != arg_91[1] && arg_63[0] == arg_155[0] && arg_63[0] != arg_159[1] && arg_63[0] != arg_191[1] && arg_63[0] != arg_95[1] && arg_63[0] != arg_221[1] && arg_63[0] == arg_251[0] && arg_63[0] == arg_45[0] && arg_63[0] != arg_21[1] && arg_63[0] == arg_139[0] && arg_63[0] != arg_171[1] && arg_63[0] == arg_89[0] && arg_63[0] != arg_183[1] && arg_63[0] != arg_141[1] && arg_63[0] == arg_207[0] && arg_63[0] != arg_51[1] && arg_63[0] == arg_233[0] && arg_63[0] == arg_13[0] && arg_63[0] == arg_237[0] && arg_63[0] != arg_147[1] && arg_63[0] == arg_57[0] && arg_63[0] == arg_119[0] && arg_63[0] != arg_63[1] && arg_63[0] == arg_169[0] && arg_215[1] == arg_35[1] && arg_215[1] == arg_153[1] && arg_215[1] != arg_121[0] && arg_215[1] != arg_33[0] && arg_215[1] == arg_111[1] && arg_215[1] != arg_177[0] && arg_215[1] != arg_203[0] && arg_215[1] != arg_153[0] && arg_215[1] != arg_95[0] && arg_215[1] != arg_83[0] && arg_215[1] == arg_175[1] && arg_215[1] != arg_159[0] && arg_215[1] != arg_141[0] && arg_215[1] != arg_201[0] && arg_215[1] == arg_177[1] && arg_215[1] != arg_111[0] && arg_215[1] == arg_189[1] && arg_215[1] == arg_27[1] && arg_215[1] == arg_233[1] && arg_215[1] == arg_231[1] && arg_215[1] != arg_175[0] && arg_215[1] != arg_125[0] && arg_215[1] != arg_223[0] && arg_215[1] == arg_207[1] && arg_215[1] == arg_139[1] && arg_215[1] == arg_77[1] && arg_215[1] != arg_183[0] && arg_215[1] != arg_27[0] && arg_215[1] == arg_65[1] && arg_215[1] != arg_49[0] && arg_215[1] != arg_189[0] && arg_215[1] == arg_59[1] && arg_215[1] != arg_105[0] && arg_215[1] != arg_221[0] && arg_215[1] != arg_247[0] && arg_215[1] == arg_19[1] && arg_215[1] != arg_253[0] && arg_215[1] != arg_77[0] && arg_215[1] == arg_15[1] && arg_215[1] == arg_81[1] && arg_215[1] != arg_91[0] && arg_215[1] == arg_91[1] && arg_215[1] != arg_155[0] && arg_215[1] == arg_159[1] && arg_215[1] == arg_191[1] && arg_215[1] == arg_95[1] && arg_215[1] == arg_221[1] && arg_215[1] != arg_251[0] && arg_215[1] != arg_45[0] && arg_215[1] == arg_21[1] && arg_215[1] != arg_139[0] && arg_215[1] == arg_171[1] && arg_215[1] != arg_89[0] && arg_215[1] == arg_183[1] && arg_215[1] == arg_141[1] && arg_215[1] != arg_207[0] && arg_215[1] == arg_51[1] && arg_215[1] != arg_233[0] && arg_215[1] != arg_13[0] && arg_215[1] != arg_237[0] && arg_215[1] == arg_147[1] && arg_215[1] != arg_57[0] && arg_215[1] != arg_119[0] && arg_215[1] == arg_63[1] && arg_215[1] != arg_169[0] && arg_35[1] == arg_153[1] && arg_35[1] != arg_121[0] && arg_35[1] != arg_33[0] && arg_35[1] == arg_111[1] && arg_35[1] != arg_177[0] && arg_35[1] != arg_203[0] && arg_35[1] != arg_153[0] && arg_35[1] != arg_95[0] && arg_35[1] != arg_83[0] && arg_35[1] == arg_175[1] && arg_35[1] != arg_159[0] && arg_35[1] != arg_141[0] && arg_35[1] != arg_201[0] && arg_35[1] == arg_177[1] && arg_35[1] != arg_111[0] && arg_35[1] == arg_189[1] && arg_35[1] == arg_27[1] && arg_35[1] == arg_233[1] && arg_35[1] == arg_231[1] && arg_35[1] != arg_175[0] && arg_35[1] != arg_125[0] && arg_35[1] != arg_223[0] && arg_35[1] == arg_207[1] && arg_35[1] == arg_139[1] && arg_35[1] == arg_77[1] && arg_35[1] != arg_183[0] && arg_35[1] != arg_27[0] && arg_35[1] == arg_65[1] && arg_35[1] != arg_49[0] && arg_35[1] != arg_189[0] && arg_35[1] == arg_59[1] && arg_35[1] != arg_105[0] && arg_35[1] != arg_221[0] && arg_35[1] != arg_247[0] && arg_35[1] == arg_19[1] && arg_35[1] != arg_253[0] && arg_35[1] != arg_77[0] && arg_35[1] == arg_15[1] && arg_35[1] == arg_81[1] && arg_35[1] != arg_91[0] && arg_35[1] == arg_91[1] && arg_35[1] != arg_155[0] && arg_35[1] == arg_159[1] && arg_35[1] == arg_191[1] && arg_35[1] == arg_95[1] && arg_35[1] == arg_221[1] && arg_35[1] != arg_251[0] && arg_35[1] != arg_45[0] && arg_35[1] == arg_21[1] && arg_35[1] != arg_139[0] && arg_35[1] == arg_171[1] && arg_35[1] != arg_89[0] && arg_35[1] == arg_183[1] && arg_35[1] == arg_141[1] && arg_35[1] != arg_207[0] && arg_35[1] == arg_51[1] && arg_35[1] != arg_233[0] && arg_35[1] != arg_13[0] && arg_35[1] != arg_237[0] && arg_35[1] == arg_147[1] && arg_35[1] != arg_57[0] && arg_35[1] != arg_119[0] && arg_35[1] == arg_63[1] && arg_35[1] != arg_169[0] && arg_153[1] != arg_121[0] && arg_153[1] != arg_33[0] && arg_153[1] == arg_111[1] && arg_153[1] != arg_177[0] && arg_153[1] != arg_203[0] && arg_153[1] != arg_153[0] && arg_153[1] != arg_95[0] && arg_153[1] != arg_83[0] && arg_153[1] == arg_175[1] && arg_153[1] != arg_159[0] && arg_153[1] != arg_141[0] && arg_153[1] != arg_201[0] && arg_153[1] == arg_177[1] && arg_153[1] != arg_111[0] && arg_153[1] == arg_189[1] && arg_153[1] == arg_27[1] && arg_153[1] == arg_233[1] && arg_153[1] == arg_231[1] && arg_153[1] != arg_175[0] && arg_153[1] != arg_125[0] && arg_153[1] != arg_223[0] && arg_153[1] == arg_207[1] && arg_153[1] == arg_139[1] && arg_153[1] == arg_77[1] && arg_153[1] != arg_183[0] && arg_153[1] != arg_27[0] && arg_153[1] == arg_65[1] && arg_153[1] != arg_49[0] && arg_153[1] != arg_189[0] && arg_153[1] == arg_59[1] && arg_153[1] != arg_105[0] && arg_153[1] != arg_221[0] && arg_153[1] != arg_247[0] && arg_153[1] == arg_19[1] && arg_153[1] != arg_253[0] && arg_153[1] != arg_77[0] && arg_153[1] == arg_15[1] && arg_153[1] == arg_81[1] && arg_153[1] != arg_91[0] && arg_153[1] == arg_91[1] && arg_153[1] != arg_155[0] && arg_153[1] == arg_159[1] && arg_153[1] == arg_191[1] && arg_153[1] == arg_95[1] && arg_153[1] == arg_221[1] && arg_153[1] != arg_251[0] && arg_153[1] != arg_45[0] && arg_153[1] == arg_21[1] && arg_153[1] != arg_139[0] && arg_153[1] == arg_171[1] && arg_153[1] != arg_89[0] && arg_153[1] == arg_183[1] && arg_153[1] == arg_141[1] && arg_153[1] != arg_207[0] && arg_153[1] == arg_51[1] && arg_153[1] != arg_233[0] && arg_153[1] != arg_13[0] && arg_153[1] != arg_237[0] && arg_153[1] == arg_147[1] && arg_153[1] != arg_57[0] && arg_153[1] != arg_119[0] && arg_153[1] == arg_63[1] && arg_153[1] != arg_169[0] && arg_121[0] == arg_33[0] && arg_121[0] != arg_111[1] && arg_121[0] == arg_177[0] && arg_121[0] == arg_203[0] && arg_121[0] == arg_153[0] && arg_121[0] == arg_95[0] && arg_121[0] == arg_83[0] && arg_121[0] != arg_175[1] && arg_121[0] == arg_159[0] && arg_121[0] == arg_141[0] && arg_121[0] == arg_201[0] && arg_121[0] != arg_177[1] && arg_121[0] == arg_111[0] && arg_121[0] != arg_189[1] && arg_121[0] != arg_27[1] && arg_121[0] != arg_233[1] && arg_121[0] != arg_231[1] && arg_121[0] == arg_175[0] && arg_121[0] == arg_125[0] && arg_121[0] == arg_223[0] && arg_121[0] != arg_207[1] && arg_121[0] != arg_139[1] && arg_121[0] != arg_77[1] && arg_121[0] == arg_183[0] && arg_121[0] == arg_27[0] && arg_121[0] != arg_65[1] && arg_121[0] == arg_49[0] && arg_121[0] == arg_189[0] && arg_121[0] != arg_59[1] && arg_121[0] == arg_105[0] && arg_121[0] == arg_221[0] && arg_121[0] == arg_247[0] && arg_121[0] != arg_19[1] && arg_121[0] == arg_253[0] && arg_121[0] == arg_77[0] && arg_121[0] != arg_15[1] && arg_121[0] != arg_81[1] && arg_121[0] == arg_91[0] && arg_121[0] != arg_91[1] && arg_121[0] == arg_155[0] && arg_121[0] != arg_159[1] && arg_121[0] != arg_191[1] && arg_121[0] != arg_95[1] && arg_121[0] != arg_221[1] && arg_121[0] == arg_251[0] && arg_121[0] == arg_45[0] && arg_121[0] != arg_21[1] && arg_121[0] == arg_139[0] && arg_121[0] != arg_171[1] && arg_121[0] == arg_89[0] && arg_121[0] != arg_183[1] && arg_121[0] != arg_141[1] && arg_121[0] == arg_207[0] && arg_121[0] != arg_51[1] && arg_121[0] == arg_233[0] && arg_121[0] == arg_13[0] && arg_121[0] == arg_237[0] && arg_121[0] != arg_147[1] && arg_121[0] == arg_57[0] && arg_121[0] == arg_119[0] && arg_121[0] != arg_63[1] && arg_121[0] == arg_169[0] && arg_33[0] != arg_111[1] && arg_33[0] == arg_177[0] && arg_33[0] == arg_203[0] && arg_33[0] == arg_153[0] && arg_33[0] == arg_95[0] && arg_33[0] == arg_83[0] && arg_33[0] != arg_175[1] && arg_33[0] == arg_159[0] && arg_33[0] == arg_141[0] && arg_33[0] == arg_201[0] && arg_33[0] != arg_177[1] && arg_33[0] == arg_111[0] && arg_33[0] != arg_189[1] && arg_33[0] != arg_27[1] && arg_33[0] != arg_233[1] && arg_33[0] != arg_231[1] && arg_33[0] == arg_175[0] && arg_33[0] == arg_125[0] && arg_33[0] == arg_223[0] && arg_33[0] != arg_207[1] && arg_33[0] != arg_139[1] && arg_33[0] != arg_77[1] && arg_33[0] == arg_183[0] && arg_33[0] == arg_27[0] && arg_33[0] != arg_65[1] && arg_33[0] == arg_49[0] && arg_33[0] == arg_189[0] && arg_33[0] != arg_59[1] && arg_33[0] == arg_105[0] && arg_33[0] == arg_221[0] && arg_33[0] == arg_247[0] && arg_33[0] != arg_19[1] && arg_33[0] == arg_253[0] && arg_33[0] == arg_77[0] && arg_33[0] != arg_15[1] && arg_33[0] != arg_81[1] && arg_33[0] == arg_91[0] && arg_33[0] != arg_91[1] && arg_33[0] == arg_155[0] && arg_33[0] != arg_159[1] && arg_33[0] != arg_191[1] && arg_33[0] != arg_95[1] && arg_33[0] != arg_221[1] && arg_33[0] == arg_251[0] && arg_33[0] == arg_45[0] && arg_33[0] != arg_21[1] && arg_33[0] == arg_139[0] && arg_33[0] != arg_171[1] && arg_33[0] == arg_89[0] && arg_33[0] != arg_183[1] && arg_33[0] != arg_141[1] && arg_33[0] == arg_207[0] && arg_33[0] != arg_51[1] && arg_33[0] == arg_233[0] && arg_33[0] == arg_13[0] && arg_33[0] == arg_237[0] && arg_33[0] != arg_147[1] && arg_33[0] == arg_57[0] && arg_33[0] == arg_119[0] && arg_33[0] != arg_63[1] && arg_33[0] == arg_169[0] && arg_111[1] != arg_177[0] && arg_111[1] != arg_203[0] && arg_111[1] != arg_153[0] && arg_111[1] != arg_95[0] && arg_111[1] != arg_83[0] && arg_111[1] == arg_175[1] && arg_111[1] != arg_159[0] && arg_111[1] != arg_141[0] && arg_111[1] != arg_201[0] && arg_111[1] == arg_177[1] && arg_111[1] != arg_111[0] && arg_111[1] == arg_189[1] && arg_111[1] == arg_27[1] && arg_111[1] == arg_233[1] && arg_111[1] == arg_231[1] && arg_111[1] != arg_175[0] && arg_111[1] != arg_125[0] && arg_111[1] != arg_223[0] && arg_111[1] == arg_207[1] && arg_111[1] == arg_139[1] && arg_111[1] == arg_77[1] && arg_111[1] != arg_183[0] && arg_111[1] != arg_27[0] && arg_111[1] == arg_65[1] && arg_111[1] != arg_49[0] && arg_111[1] != arg_189[0] && arg_111[1] == arg_59[1] && arg_111[1] != arg_105[0] && arg_111[1] != arg_221[0] && arg_111[1] != arg_247[0] && arg_111[1] == arg_19[1] && arg_111[1] != arg_253[0] && arg_111[1] != arg_77[0] && arg_111[1] == arg_15[1] && arg_111[1] == arg_81[1] && arg_111[1] != arg_91[0] && arg_111[1] == arg_91[1] && arg_111[1] != arg_155[0] && arg_111[1] == arg_159[1] && arg_111[1] == arg_191[1] && arg_111[1] == arg_95[1] && arg_111[1] == arg_221[1] && arg_111[1] != arg_251[0] && arg_111[1] != arg_45[0] && arg_111[1] == arg_21[1] && arg_111[1] != arg_139[0] && arg_111[1] == arg_171[1] && arg_111[1] != arg_89[0] && arg_111[1] == arg_183[1] && arg_111[1] == arg_141[1] && arg_111[1] != arg_207[0] && arg_111[1] == arg_51[1] && arg_111[1] != arg_233[0] && arg_111[1] != arg_13[0] && arg_111[1] != arg_237[0] && arg_111[1] == arg_147[1] && arg_111[1] != arg_57[0] && arg_111[1] != arg_119[0] && arg_111[1] == arg_63[1] && arg_111[1] != arg_169[0] && arg_177[0] == arg_203[0] && arg_177[0] == arg_153[0] && arg_177[0] == arg_95[0] && arg_177[0] == arg_83[0] && arg_177[0] != arg_175[1] && arg_177[0] == arg_159[0] && arg_177[0] == arg_141[0] && arg_177[0] == arg_201[0] && arg_177[0] != arg_177[1] && arg_177[0] == arg_111[0] && arg_177[0] != arg_189[1] && arg_177[0] != arg_27[1] && arg_177[0] != arg_233[1] && arg_177[0] != arg_231[1] && arg_177[0] == arg_175[0] && arg_177[0] == arg_125[0] && arg_177[0] == arg_223[0] && arg_177[0] != arg_207[1] && arg_177[0] != arg_139[1] && arg_177[0] != arg_77[1] && arg_177[0] == arg_183[0] && arg_177[0] == arg_27[0] && arg_177[0] != arg_65[1] && arg_177[0] == arg_49[0] && arg_177[0] == arg_189[0] && arg_177[0] != arg_59[1] && arg_177[0] == arg_105[0] && arg_177[0] == arg_221[0] && arg_177[0] == arg_247[0] && arg_177[0] != arg_19[1] && arg_177[0] == arg_253[0] && arg_177[0] == arg_77[0] && arg_177[0] != arg_15[1] && arg_177[0] != arg_81[1] && arg_177[0] == arg_91[0] && arg_177[0] != arg_91[1] && arg_177[0] == arg_155[0] && arg_177[0] != arg_159[1] && arg_177[0] != arg_191[1] && arg_177[0] != arg_95[1] && arg_177[0] != arg_221[1] && arg_177[0] == arg_251[0] && arg_177[0] == arg_45[0] && arg_177[0] != arg_21[1] && arg_177[0] == arg_139[0] && arg_177[0] != arg_171[1] && arg_177[0] == arg_89[0] && arg_177[0] != arg_183[1] && arg_177[0] != arg_141[1] && arg_177[0] == arg_207[0] && arg_177[0] != arg_51[1] && arg_177[0] == arg_233[0] && arg_177[0] == arg_13[0] && arg_177[0] == arg_237[0] && arg_177[0] != arg_147[1] && arg_177[0] == arg_57[0] && arg_177[0] == arg_119[0] && arg_177[0] != arg_63[1] && arg_177[0] == arg_169[0] && arg_203[0] == arg_153[0] && arg_203[0] == arg_95[0] && arg_203[0] == arg_83[0] && arg_203[0] != arg_175[1] && arg_203[0] == arg_159[0] && arg_203[0] == arg_141[0] && arg_203[0] == arg_201[0] && arg_203[0] != arg_177[1] && arg_203[0] == arg_111[0] && arg_203[0] != arg_189[1] && arg_203[0] != arg_27[1] && arg_203[0] != arg_233[1] && arg_203[0] != arg_231[1] && arg_203[0] == arg_175[0] && arg_203[0] == arg_125[0] && arg_203[0] == arg_223[0] && arg_203[0] != arg_207[1] && arg_203[0] != arg_139[1] && arg_203[0] != arg_77[1] && arg_203[0] == arg_183[0] && arg_203[0] == arg_27[0] && arg_203[0] != arg_65[1] && arg_203[0] == arg_49[0] && arg_203[0] == arg_189[0] && arg_203[0] != arg_59[1] && arg_203[0] == arg_105[0] && arg_203[0] == arg_221[0] && arg_203[0] == arg_247[0] && arg_203[0] != arg_19[1] && arg_203[0] == arg_253[0] && arg_203[0] == arg_77[0] && arg_203[0] != arg_15[1] && arg_203[0] != arg_81[1] && arg_203[0] == arg_91[0] && arg_203[0] != arg_91[1] && arg_203[0] == arg_155[0] && arg_203[0] != arg_159[1] && arg_203[0] != arg_191[1] && arg_203[0] != arg_95[1] && arg_203[0] != arg_221[1] && arg_203[0] == arg_251[0] && arg_203[0] == arg_45[0] && arg_203[0] != arg_21[1] && arg_203[0] == arg_139[0] && arg_203[0] != arg_171[1] && arg_203[0] == arg_89[0] && arg_203[0] != arg_183[1] && arg_203[0] != arg_141[1] && arg_203[0] == arg_207[0] && arg_203[0] != arg_51[1] && arg_203[0] == arg_233[0] && arg_203[0] == arg_13[0] && arg_203[0] == arg_237[0] && arg_203[0] != arg_147[1] && arg_203[0] == arg_57[0] && arg_203[0] == arg_119[0] && arg_203[0] != arg_63[1] && arg_203[0] == arg_169[0] && arg_153[0] == arg_95[0] && arg_153[0] == arg_83[0] && arg_153[0] != arg_175[1] && arg_153[0] == arg_159[0] && arg_153[0] == arg_141[0] && arg_153[0] == arg_201[0] && arg_153[0] != arg_177[1] && arg_153[0] == arg_111[0] && arg_153[0] != arg_189[1] && arg_153[0] != arg_27[1] && arg_153[0] != arg_233[1] && arg_153[0] != arg_231[1] && arg_153[0] == arg_175[0] && arg_153[0] == arg_125[0] && arg_153[0] == arg_223[0] && arg_153[0] != arg_207[1] && arg_153[0] != arg_139[1] && arg_153[0] != arg_77[1] && arg_153[0] == arg_183[0] && arg_153[0] == arg_27[0] && arg_153[0] != arg_65[1] && arg_153[0] == arg_49[0] && arg_153[0] == arg_189[0] && arg_153[0] != arg_59[1] && arg_153[0] == arg_105[0] && arg_153[0] == arg_221[0] && arg_153[0] == arg_247[0] && arg_153[0] != arg_19[1] && arg_153[0] == arg_253[0] && arg_153[0] == arg_77[0] && arg_153[0] != arg_15[1] && arg_153[0] != arg_81[1] && arg_153[0] == arg_91[0] && arg_153[0] != arg_91[1] && arg_153[0] == arg_155[0] && arg_153[0] != arg_159[1] && arg_153[0] != arg_191[1] && arg_153[0] != arg_95[1] && arg_153[0] != arg_221[1] && arg_153[0] == arg_251[0] && arg_153[0] == arg_45[0] && arg_153[0] != arg_21[1] && arg_153[0] == arg_139[0] && arg_153[0] != arg_171[1] && arg_153[0] == arg_89[0] && arg_153[0] != arg_183[1] && arg_153[0] != arg_141[1] && arg_153[0] == arg_207[0] && arg_153[0] != arg_51[1] && arg_153[0] == arg_233[0] && arg_153[0] == arg_13[0] && arg_153[0] == arg_237[0] && arg_153[0] != arg_147[1] && arg_153[0] == arg_57[0] && arg_153[0] == arg_119[0] && arg_153[0] != arg_63[1] && arg_153[0] == arg_169[0] && arg_95[0] == arg_83[0] && arg_95[0] != arg_175[1] && arg_95[0] == arg_159[0] && arg_95[0] == arg_141[0] && arg_95[0] == arg_201[0] && arg_95[0] != arg_177[1] && arg_95[0] == arg_111[0] && arg_95[0] != arg_189[1] && arg_95[0] != arg_27[1] && arg_95[0] != arg_233[1] && arg_95[0] != arg_231[1] && arg_95[0] == arg_175[0] && arg_95[0] == arg_125[0] && arg_95[0] == arg_223[0] && arg_95[0] != arg_207[1] && arg_95[0] != arg_139[1] && arg_95[0] != arg_77[1] && arg_95[0] == arg_183[0] && arg_95[0] == arg_27[0] && arg_95[0] != arg_65[1] && arg_95[0] == arg_49[0] && arg_95[0] == arg_189[0] && arg_95[0] != arg_59[1] && arg_95[0] == arg_105[0] && arg_95[0] == arg_221[0] && arg_95[0] == arg_247[0] && arg_95[0] != arg_19[1] && arg_95[0] == arg_253[0] && arg_95[0] == arg_77[0] && arg_95[0] != arg_15[1] && arg_95[0] != arg_81[1] && arg_95[0] == arg_91[0] && arg_95[0] != arg_91[1] && arg_95[0] == arg_155[0] && arg_95[0] != arg_159[1] && arg_95[0] != arg_191[1] && arg_95[0] != arg_95[1] && arg_95[0] != arg_221[1] && arg_95[0] == arg_251[0] && arg_95[0] == arg_45[0] && arg_95[0] != arg_21[1] && arg_95[0] == arg_139[0] && arg_95[0] != arg_171[1] && arg_95[0] == arg_89[0] && arg_95[0] != arg_183[1] && arg_95[0] != arg_141[1] && arg_95[0] == arg_207[0] && arg_95[0] != arg_51[1] && arg_95[0] == arg_233[0] && arg_95[0] == arg_13[0] && arg_95[0] == arg_237[0] && arg_95[0] != arg_147[1] && arg_95[0] == arg_57[0] && arg_95[0] == arg_119[0] && arg_95[0] != arg_63[1] && arg_95[0] == arg_169[0] && arg_83[0] != arg_175[1] && arg_83[0] == arg_159[0] && arg_83[0] == arg_141[0] && arg_83[0] == arg_201[0] && arg_83[0] != arg_177[1] && arg_83[0] == arg_111[0] && arg_83[0] != arg_189[1] && arg_83[0] != arg_27[1] && arg_83[0] != arg_233[1] && arg_83[0] != arg_231[1] && arg_83[0] == arg_175[0] && arg_83[0] == arg_125[0] && arg_83[0] == arg_223[0] && arg_83[0] != arg_207[1] && arg_83[0] != arg_139[1] && arg_83[0] != arg_77[1] && arg_83[0] == arg_183[0] && arg_83[0] == arg_27[0] && arg_83[0] != arg_65[1] && arg_83[0] == arg_49[0] && arg_83[0] == arg_189[0] && arg_83[0] != arg_59[1] && arg_83[0] == arg_105[0] && arg_83[0] == arg_221[0] && arg_83[0] == arg_247[0] && arg_83[0] != arg_19[1] && arg_83[0] == arg_253[0] && arg_83[0] == arg_77[0] && arg_83[0] != arg_15[1] && arg_83[0] != arg_81[1] && arg_83[0] == arg_91[0] && arg_83[0] != arg_91[1] && arg_83[0] == arg_155[0] && arg_83[0] != arg_159[1] && arg_83[0] != arg_191[1] && arg_83[0] != arg_95[1] && arg_83[0] != arg_221[1] && arg_83[0] == arg_251[0] && arg_83[0] == arg_45[0] && arg_83[0] != arg_21[1] && arg_83[0] == arg_139[0] && arg_83[0] != arg_171[1] && arg_83[0] == arg_89[0] && arg_83[0] != arg_183[1] && arg_83[0] != arg_141[1] && arg_83[0] == arg_207[0] && arg_83[0] != arg_51[1] && arg_83[0] == arg_233[0] && arg_83[0] == arg_13[0] && arg_83[0] == arg_237[0] && arg_83[0] != arg_147[1] && arg_83[0] == arg_57[0] && arg_83[0] == arg_119[0] && arg_83[0] != arg_63[1] && arg_83[0] == arg_169[0] && arg_175[1] != arg_159[0] && arg_175[1] != arg_141[0] && arg_175[1] != arg_201[0] && arg_175[1] == arg_177[1] && arg_175[1] != arg_111[0] && arg_175[1] == arg_189[1] && arg_175[1] == arg_27[1] && arg_175[1] == arg_233[1] && arg_175[1] == arg_231[1] && arg_175[1] != arg_175[0] && arg_175[1] != arg_125[0] && arg_175[1] != arg_223[0] && arg_175[1] == arg_207[1] && arg_175[1] == arg_139[1] && arg_175[1] == arg_77[1] && arg_175[1] != arg_183[0] && arg_175[1] != arg_27[0] && arg_175[1] == arg_65[1] && arg_175[1] != arg_49[0] && arg_175[1] != arg_189[0] && arg_175[1] == arg_59[1] && arg_175[1] != arg_105[0] && arg_175[1] != arg_221[0] && arg_175[1] != arg_247[0] && arg_175[1] == arg_19[1] && arg_175[1] != arg_253[0] && arg_175[1] != arg_77[0] && arg_175[1] == arg_15[1] && arg_175[1] == arg_81[1] && arg_175[1] != arg_91[0] && arg_175[1] == arg_91[1] && arg_175[1] != arg_155[0] && arg_175[1] == arg_159[1] && arg_175[1] == arg_191[1] && arg_175[1] == arg_95[1] && arg_175[1] == arg_221[1] && arg_175[1] != arg_251[0] && arg_175[1] != arg_45[0] && arg_175[1] == arg_21[1] && arg_175[1] != arg_139[0] && arg_175[1] == arg_171[1] && arg_175[1] != arg_89[0] && arg_175[1] == arg_183[1] && arg_175[1] == arg_141[1] && arg_175[1] != arg_207[0] && arg_175[1] == arg_51[1] && arg_175[1] != arg_233[0] && arg_175[1] != arg_13[0] && arg_175[1] != arg_237[0] && arg_175[1] == arg_147[1] && arg_175[1] != arg_57[0] && arg_175[1] != arg_119[0] && arg_175[1] == arg_63[1] && arg_175[1] != arg_169[0] && arg_159[0] == arg_141[0] && arg_159[0] == arg_201[0] && arg_159[0] != arg_177[1] && arg_159[0] == arg_111[0] && arg_159[0] != arg_189[1] && arg_159[0] != arg_27[1] && arg_159[0] != arg_233[1] && arg_159[0] != arg_231[1] && arg_159[0] == arg_175[0] && arg_159[0] == arg_125[0] && arg_159[0] == arg_223[0] && arg_159[0] != arg_207[1] && arg_159[0] != arg_139[1] && arg_159[0] != arg_77[1] && arg_159[0] == arg_183[0] && arg_159[0] == arg_27[0] && arg_159[0] != arg_65[1] && arg_159[0] == arg_49[0] && arg_159[0] == arg_189[0] && arg_159[0] != arg_59[1] && arg_159[0] == arg_105[0] && arg_159[0] == arg_221[0] && arg_159[0] == arg_247[0] && arg_159[0] != arg_19[1] && arg_159[0] == arg_253[0] && arg_159[0] == arg_77[0] && arg_159[0] != arg_15[1] && arg_159[0] != arg_81[1] && arg_159[0] == arg_91[0] && arg_159[0] != arg_91[1] && arg_159[0] == arg_155[0] && arg_159[0] != arg_159[1] && arg_159[0] != arg_191[1] && arg_159[0] != arg_95[1] && arg_159[0] != arg_221[1] && arg_159[0] == arg_251[0] && arg_159[0] == arg_45[0] && arg_159[0] != arg_21[1] && arg_159[0] == arg_139[0] && arg_159[0] != arg_171[1] && arg_159[0] == arg_89[0] && arg_159[0] != arg_183[1] && arg_159[0] != arg_141[1] && arg_159[0] == arg_207[0] && arg_159[0] != arg_51[1] && arg_159[0] == arg_233[0] && arg_159[0] == arg_13[0] && arg_159[0] == arg_237[0] && arg_159[0] != arg_147[1] && arg_159[0] == arg_57[0] && arg_159[0] == arg_119[0] && arg_159[0] != arg_63[1] && arg_159[0] == arg_169[0] && arg_141[0] == arg_201[0] && arg_141[0] != arg_177[1] && arg_141[0] == arg_111[0] && arg_141[0] != arg_189[1] && arg_141[0] != arg_27[1] && arg_141[0] != arg_233[1] && arg_141[0] != arg_231[1] && arg_141[0] == arg_175[0] && arg_141[0] == arg_125[0] && arg_141[0] == arg_223[0] && arg_141[0] != arg_207[1] && arg_141[0] != arg_139[1] && arg_141[0] != arg_77[1] && arg_141[0] == arg_183[0] && arg_141[0] == arg_27[0] && arg_141[0] != arg_65[1] && arg_141[0] == arg_49[0] && arg_141[0] == arg_189[0] && arg_141[0] != arg_59[1] && arg_141[0] == arg_105[0] && arg_141[0] == arg_221[0] && arg_141[0] == arg_247[0] && arg_141[0] != arg_19[1] && arg_141[0] == arg_253[0] && arg_141[0] == arg_77[0] && arg_141[0] != arg_15[1] && arg_141[0] != arg_81[1] && arg_141[0] == arg_91[0] && arg_141[0] != arg_91[1] && arg_141[0] == arg_155[0] && arg_141[0] != arg_159[1] && arg_141[0] != arg_191[1] && arg_141[0] != arg_95[1] && arg_141[0] != arg_221[1] && arg_141[0] == arg_251[0] && arg_141[0] == arg_45[0] && arg_141[0] != arg_21[1] && arg_141[0] == arg_139[0] && arg_141[0] != arg_171[1] && arg_141[0] == arg_89[0] && arg_141[0] != arg_183[1] && arg_141[0] != arg_141[1] && arg_141[0] == arg_207[0] && arg_141[0] != arg_51[1] && arg_141[0] == arg_233[0] && arg_141[0] == arg_13[0] && arg_141[0] == arg_237[0] && arg_141[0] != arg_147[1] && arg_141[0] == arg_57[0] && arg_141[0] == arg_119[0] && arg_141[0] != arg_63[1] && arg_141[0] == arg_169[0] && arg_201[0] != arg_177[1] && arg_201[0] == arg_111[0] && arg_201[0] != arg_189[1] && arg_201[0] != arg_27[1] && arg_201[0] != arg_233[1] && arg_201[0] != arg_231[1] && arg_201[0] == arg_175[0] && arg_201[0] == arg_125[0] && arg_201[0] == arg_223[0] && arg_201[0] != arg_207[1] && arg_201[0] != arg_139[1] && arg_201[0] != arg_77[1] && arg_201[0] == arg_183[0] && arg_201[0] == arg_27[0] && arg_201[0] != arg_65[1] && arg_201[0] == arg_49[0] && arg_201[0] == arg_189[0] && arg_201[0] != arg_59[1] && arg_201[0] == arg_105[0] && arg_201[0] == arg_221[0] && arg_201[0] == arg_247[0] && arg_201[0] != arg_19[1] && arg_201[0] == arg_253[0] && arg_201[0] == arg_77[0] && arg_201[0] != arg_15[1] && arg_201[0] != arg_81[1] && arg_201[0] == arg_91[0] && arg_201[0] != arg_91[1] && arg_201[0] == arg_155[0] && arg_201[0] != arg_159[1] && arg_201[0] != arg_191[1] && arg_201[0] != arg_95[1] && arg_201[0] != arg_221[1] && arg_201[0] == arg_251[0] && arg_201[0] == arg_45[0] && arg_201[0] != arg_21[1] && arg_201[0] == arg_139[0] && arg_201[0] != arg_171[1] && arg_201[0] == arg_89[0] && arg_201[0] != arg_183[1] && arg_201[0] != arg_141[1] && arg_201[0] == arg_207[0] && arg_201[0] != arg_51[1] && arg_201[0] == arg_233[0] && arg_201[0] == arg_13[0] && arg_201[0] == arg_237[0] && arg_201[0] != arg_147[1] && arg_201[0] == arg_57[0] && arg_201[0] == arg_119[0] && arg_201[0] != arg_63[1] && arg_201[0] == arg_169[0] && arg_177[1] != arg_111[0] && arg_177[1] == arg_189[1] && arg_177[1] == arg_27[1] && arg_177[1] == arg_233[1] && arg_177[1] == arg_231[1] && arg_177[1] != arg_175[0] && arg_177[1] != arg_125[0] && arg_177[1] != arg_223[0] && arg_177[1] == arg_207[1] && arg_177[1] == arg_139[1] && arg_177[1] == arg_77[1] && arg_177[1] != arg_183[0] && arg_177[1] != arg_27[0] && arg_177[1] == arg_65[1] && arg_177[1] != arg_49[0] && arg_177[1] != arg_189[0] && arg_177[1] == arg_59[1] && arg_177[1] != arg_105[0] && arg_177[1] != arg_221[0] && arg_177[1] != arg_247[0] && arg_177[1] == arg_19[1] && arg_177[1] != arg_253[0] && arg_177[1] != arg_77[0] && arg_177[1] == arg_15[1] && arg_177[1] == arg_81[1] && arg_177[1] != arg_91[0] && arg_177[1] == arg_91[1] && arg_177[1] != arg_155[0] && arg_177[1] == arg_159[1] && arg_177[1] == arg_191[1] && arg_177[1] == arg_95[1] && arg_177[1] == arg_221[1] && arg_177[1] != arg_251[0] && arg_177[1] != arg_45[0] && arg_177[1] == arg_21[1] && arg_177[1] != arg_139[0] && arg_177[1] == arg_171[1] && arg_177[1] != arg_89[0] && arg_177[1] == arg_183[1] && arg_177[1] == arg_141[1] && arg_177[1] != arg_207[0] && arg_177[1] == arg_51[1] && arg_177[1] != arg_233[0] && arg_177[1] != arg_13[0] && arg_177[1] != arg_237[0] && arg_177[1] == arg_147[1] && arg_177[1] != arg_57[0] && arg_177[1] != arg_119[0] && arg_177[1] == arg_63[1] && arg_177[1] != arg_169[0] && arg_111[0] != arg_189[1] && arg_111[0] != arg_27[1] && arg_111[0] != arg_233[1] && arg_111[0] != arg_231[1] && arg_111[0] == arg_175[0] && arg_111[0] == arg_125[0] && arg_111[0] == arg_223[0] && arg_111[0] != arg_207[1] && arg_111[0] != arg_139[1] && arg_111[0] != arg_77[1] && arg_111[0] == arg_183[0] && arg_111[0] == arg_27[0] && arg_111[0] != arg_65[1] && arg_111[0] == arg_49[0] && arg_111[0] == arg_189[0] && arg_111[0] != arg_59[1] && arg_111[0] == arg_105[0] && arg_111[0] == arg_221[0] && arg_111[0] == arg_247[0] && arg_111[0] != arg_19[1] && arg_111[0] == arg_253[0] && arg_111[0] == arg_77[0] && arg_111[0] != arg_15[1] && arg_111[0] != arg_81[1] && arg_111[0] == arg_91[0] && arg_111[0] != arg_91[1] && arg_111[0] == arg_155[0] && arg_111[0] != arg_159[1] && arg_111[0] != arg_191[1] && arg_111[0] != arg_95[1] && arg_111[0] != arg_221[1] && arg_111[0] == arg_251[0] && arg_111[0] == arg_45[0] && arg_111[0] != arg_21[1] && arg_111[0] == arg_139[0] && arg_111[0] != arg_171[1] && arg_111[0] == arg_89[0] && arg_111[0] != arg_183[1] && arg_111[0] != arg_141[1] && arg_111[0] == arg_207[0] && arg_111[0] != arg_51[1] && arg_111[0] == arg_233[0] && arg_111[0] == arg_13[0] && arg_111[0] == arg_237[0] && arg_111[0] != arg_147[1] && arg_111[0] == arg_57[0] && arg_111[0] == arg_119[0] && arg_111[0] != arg_63[1] && arg_111[0] == arg_169[0] && arg_189[1] == arg_27[1] && arg_189[1] == arg_233[1] && arg_189[1] == arg_231[1] && arg_189[1] != arg_175[0] && arg_189[1] != arg_125[0] && arg_189[1] != arg_223[0] && arg_189[1] == arg_207[1] && arg_189[1] == arg_139[1] && arg_189[1] == arg_77[1] && arg_189[1] != arg_183[0] && arg_189[1] != arg_27[0] && arg_189[1] == arg_65[1] && arg_189[1] != arg_49[0] && arg_189[1] != arg_189[0] && arg_189[1] == arg_59[1] && arg_189[1] != arg_105[0] && arg_189[1] != arg_221[0] && arg_189[1] != arg_247[0] && arg_189[1] == arg_19[1] && arg_189[1] != arg_253[0] && arg_189[1] != arg_77[0] && arg_189[1] == arg_15[1] && arg_189[1] == arg_81[1] && arg_189[1] != arg_91[0] && arg_189[1] == arg_91[1] && arg_189[1] != arg_155[0] && arg_189[1] == arg_159[1] && arg_189[1] == arg_191[1] && arg_189[1] == arg_95[1] && arg_189[1] == arg_221[1] && arg_189[1] != arg_251[0] && arg_189[1] != arg_45[0] && arg_189[1] == arg_21[1] && arg_189[1] != arg_139[0] && arg_189[1] == arg_171[1] && arg_189[1] != arg_89[0] && arg_189[1] == arg_183[1] && arg_189[1] == arg_141[1] && arg_189[1] != arg_207[0] && arg_189[1] == arg_51[1] && arg_189[1] != arg_233[0] && arg_189[1] != arg_13[0] && arg_189[1] != arg_237[0] && arg_189[1] == arg_147[1] && arg_189[1] != arg_57[0] && arg_189[1] != arg_119[0] && arg_189[1] == arg_63[1] && arg_189[1] != arg_169[0] && arg_27[1] == arg_233[1] && arg_27[1] == arg_231[1] && arg_27[1] != arg_175[0] && arg_27[1] != arg_125[0] && arg_27[1] != arg_223[0] && arg_27[1] == arg_207[1] && arg_27[1] == arg_139[1] && arg_27[1] == arg_77[1] && arg_27[1] != arg_183[0] && arg_27[1] != arg_27[0] && arg_27[1] == arg_65[1] && arg_27[1] != arg_49[0] && arg_27[1] != arg_189[0] && arg_27[1] == arg_59[1] && arg_27[1] != arg_105[0] && arg_27[1] != arg_221[0] && arg_27[1] != arg_247[0] && arg_27[1] == arg_19[1] && arg_27[1] != arg_253[0] && arg_27[1] != arg_77[0] && arg_27[1] == arg_15[1] && arg_27[1] == arg_81[1] && arg_27[1] != arg_91[0] && arg_27[1] == arg_91[1] && arg_27[1] != arg_155[0] && arg_27[1] == arg_159[1] && arg_27[1] == arg_191[1] && arg_27[1] == arg_95[1] && arg_27[1] == arg_221[1] && arg_27[1] != arg_251[0] && arg_27[1] != arg_45[0] && arg_27[1] == arg_21[1] && arg_27[1] != arg_139[0] && arg_27[1] == arg_171[1] && arg_27[1] != arg_89[0] && arg_27[1] == arg_183[1] && arg_27[1] == arg_141[1] && arg_27[1] != arg_207[0] && arg_27[1] == arg_51[1] && arg_27[1] != arg_233[0] && arg_27[1] != arg_13[0] && arg_27[1] != arg_237[0] && arg_27[1] == arg_147[1] && arg_27[1] != arg_57[0] && arg_27[1] != arg_119[0] && arg_27[1] == arg_63[1] && arg_27[1] != arg_169[0] && arg_233[1] == arg_231[1] && arg_233[1] != arg_175[0] && arg_233[1] != arg_125[0] && arg_233[1] != arg_223[0] && arg_233[1] == arg_207[1] && arg_233[1] == arg_139[1] && arg_233[1] == arg_77[1] && arg_233[1] != arg_183[0] && arg_233[1] != arg_27[0] && arg_233[1] == arg_65[1] && arg_233[1] != arg_49[0] && arg_233[1] != arg_189[0] && arg_233[1] == arg_59[1] && arg_233[1] != arg_105[0] && arg_233[1] != arg_221[0] && arg_233[1] != arg_247[0] && arg_233[1] == arg_19[1] && arg_233[1] != arg_253[0] && arg_233[1] != arg_77[0] && arg_233[1] == arg_15[1] && arg_233[1] == arg_81[1] && arg_233[1] != arg_91[0] && arg_233[1] == arg_91[1] && arg_233[1] != arg_155[0] && arg_233[1] == arg_159[1] && arg_233[1] == arg_191[1] && arg_233[1] == arg_95[1] && arg_233[1] == arg_221[1] && arg_233[1] != arg_251[0] && arg_233[1] != arg_45[0] && arg_233[1] == arg_21[1] && arg_233[1] != arg_139[0] && arg_233[1] == arg_171[1] && arg_233[1] != arg_89[0] && arg_233[1] == arg_183[1] && arg_233[1] == arg_141[1] && arg_233[1] != arg_207[0] && arg_233[1] == arg_51[1] && arg_233[1] != arg_233[0] && arg_233[1] != arg_13[0] && arg_233[1] != arg_237[0] && arg_233[1] == arg_147[1] && arg_233[1] != arg_57[0] && arg_233[1] != arg_119[0] && arg_233[1] == arg_63[1] && arg_233[1] != arg_169[0] && arg_231[1] != arg_175[0] && arg_231[1] != arg_125[0] && arg_231[1] != arg_223[0] && arg_231[1] == arg_207[1] && arg_231[1] == arg_139[1] && arg_231[1] == arg_77[1] && arg_231[1] != arg_183[0] && arg_231[1] != arg_27[0] && arg_231[1] == arg_65[1] && arg_231[1] != arg_49[0] && arg_231[1] != arg_189[0] && arg_231[1] == arg_59[1] && arg_231[1] != arg_105[0] && arg_231[1] != arg_221[0] && arg_231[1] != arg_247[0] && arg_231[1] == arg_19[1] && arg_231[1] != arg_253[0] && arg_231[1] != arg_77[0] && arg_231[1] == arg_15[1] && arg_231[1] == arg_81[1] && arg_231[1] != arg_91[0] && arg_231[1] == arg_91[1] && arg_231[1] != arg_155[0] && arg_231[1] == arg_159[1] && arg_231[1] == arg_191[1] && arg_231[1] == arg_95[1] && arg_231[1] == arg_221[1] && arg_231[1] != arg_251[0] && arg_231[1] != arg_45[0] && arg_231[1] == arg_21[1] && arg_231[1] != arg_139[0] && arg_231[1] == arg_171[1] && arg_231[1] != arg_89[0] && arg_231[1] == arg_183[1] && arg_231[1] == arg_141[1] && arg_231[1] != arg_207[0] && arg_231[1] == arg_51[1] && arg_231[1] != arg_233[0] && arg_231[1] != arg_13[0] && arg_231[1] != arg_237[0] && arg_231[1] == arg_147[1] && arg_231[1] != arg_57[0] && arg_231[1] != arg_119[0] && arg_231[1] == arg_63[1] && arg_231[1] != arg_169[0] && arg_175[0] == arg_125[0] && arg_175[0] == arg_223[0] && arg_175[0] != arg_207[1] && arg_175[0] != arg_139[1] && arg_175[0] != arg_77[1] && arg_175[0] == arg_183[0] && arg_175[0] == arg_27[0] && arg_175[0] != arg_65[1] && arg_175[0] == arg_49[0] && arg_175[0] == arg_189[0] && arg_175[0] != arg_59[1] && arg_175[0] == arg_105[0] && arg_175[0] == arg_221[0] && arg_175[0] == arg_247[0] && arg_175[0] != arg_19[1] && arg_175[0] == arg_253[0] && arg_175[0] == arg_77[0] && arg_175[0] != arg_15[1] && arg_175[0] != arg_81[1] && arg_175[0] == arg_91[0] && arg_175[0] != arg_91[1] && arg_175[0] == arg_155[0] && arg_175[0] != arg_159[1] && arg_175[0] != arg_191[1] && arg_175[0] != arg_95[1] && arg_175[0] != arg_221[1] && arg_175[0] == arg_251[0] && arg_175[0] == arg_45[0] && arg_175[0] != arg_21[1] && arg_175[0] == arg_139[0] && arg_175[0] != arg_171[1] && arg_175[0] == arg_89[0] && arg_175[0] != arg_183[1] && arg_175[0] != arg_141[1] && arg_175[0] == arg_207[0] && arg_175[0] != arg_51[1] && arg_175[0] == arg_233[0] && arg_175[0] == arg_13[0] && arg_175[0] == arg_237[0] && arg_175[0] != arg_147[1] && arg_175[0] == arg_57[0] && arg_175[0] == arg_119[0] && arg_175[0] != arg_63[1] && arg_175[0] == arg_169[0] && arg_125[0] == arg_223[0] && arg_125[0] != arg_207[1] && arg_125[0] != arg_139[1] && arg_125[0] != arg_77[1] && arg_125[0] == arg_183[0] && arg_125[0] == arg_27[0] && arg_125[0] != arg_65[1] && arg_125[0] == arg_49[0] && arg_125[0] == arg_189[0] && arg_125[0] != arg_59[1] && arg_125[0] == arg_105[0] && arg_125[0] == arg_221[0] && arg_125[0] == arg_247[0] && arg_125[0] != arg_19[1] && arg_125[0] == arg_253[0] && arg_125[0] == arg_77[0] && arg_125[0] != arg_15[1] && arg_125[0] != arg_81[1] && arg_125[0] == arg_91[0] && arg_125[0] != arg_91[1] && arg_125[0] == arg_155[0] && arg_125[0] != arg_159[1] && arg_125[0] != arg_191[1] && arg_125[0] != arg_95[1] && arg_125[0] != arg_221[1] && arg_125[0] == arg_251[0] && arg_125[0] == arg_45[0] && arg_125[0] != arg_21[1] && arg_125[0] == arg_139[0] && arg_125[0] != arg_171[1] && arg_125[0] == arg_89[0] && arg_125[0] != arg_183[1] && arg_125[0] != arg_141[1] && arg_125[0] == arg_207[0] && arg_125[0] != arg_51[1] && arg_125[0] == arg_233[0] && arg_125[0] == arg_13[0] && arg_125[0] == arg_237[0] && arg_125[0] != arg_147[1] && arg_125[0] == arg_57[0] && arg_125[0] == arg_119[0] && arg_125[0] != arg_63[1] && arg_125[0] == arg_169[0] && arg_223[0] != arg_207[1] && arg_223[0] != arg_139[1] && arg_223[0] != arg_77[1] && arg_223[0] == arg_183[0] && arg_223[0] == arg_27[0] && arg_223[0] != arg_65[1] && arg_223[0] == arg_49[0] && arg_223[0] == arg_189[0] && arg_223[0] != arg_59[1] && arg_223[0] == arg_105[0] && arg_223[0] == arg_221[0] && arg_223[0] == arg_247[0] && arg_223[0] != arg_19[1] && arg_223[0] == arg_253[0] && arg_223[0] == arg_77[0] && arg_223[0] != arg_15[1] && arg_223[0] != arg_81[1] && arg_223[0] == arg_91[0] && arg_223[0] != arg_91[1] && arg_223[0] == arg_155[0] && arg_223[0] != arg_159[1] && arg_223[0] != arg_191[1] && arg_223[0] != arg_95[1] && arg_223[0] != arg_221[1] && arg_223[0] == arg_251[0] && arg_223[0] == arg_45[0] && arg_223[0] != arg_21[1] && arg_223[0] == arg_139[0] && arg_223[0] != arg_171[1] && arg_223[0] == arg_89[0] && arg_223[0] != arg_183[1] && arg_223[0] != arg_141[1] && arg_223[0] == arg_207[0] && arg_223[0] != arg_51[1] && arg_223[0] == arg_233[0] && arg_223[0] == arg_13[0] && arg_223[0] == arg_237[0] && arg_223[0] != arg_147[1] && arg_223[0] == arg_57[0] && arg_223[0] == arg_119[0] && arg_223[0] != arg_63[1] && arg_223[0] == arg_169[0] && arg_207[1] == arg_139[1] && arg_207[1] == arg_77[1] && arg_207[1] != arg_183[0] && arg_207[1] != arg_27[0] && arg_207[1] == arg_65[1] && arg_207[1] != arg_49[0] && arg_207[1] != arg_189[0] && arg_207[1] == arg_59[1] && arg_207[1] != arg_105[0] && arg_207[1] != arg_221[0] && arg_207[1] != arg_247[0] && arg_207[1] == arg_19[1] && arg_207[1] != arg_253[0] && arg_207[1] != arg_77[0] && arg_207[1] == arg_15[1] && arg_207[1] == arg_81[1] && arg_207[1] != arg_91[0] && arg_207[1] == arg_91[1] && arg_207[1] != arg_155[0] && arg_207[1] == arg_159[1] && arg_207[1] == arg_191[1] && arg_207[1] == arg_95[1] && arg_207[1] == arg_221[1] && arg_207[1] != arg_251[0] && arg_207[1] != arg_45[0] && arg_207[1] == arg_21[1] && arg_207[1] != arg_139[0] && arg_207[1] == arg_171[1] && arg_207[1] != arg_89[0] && arg_207[1] == arg_183[1] && arg_207[1] == arg_141[1] && arg_207[1] != arg_207[0] && arg_207[1] == arg_51[1] && arg_207[1] != arg_233[0] && arg_207[1] != arg_13[0] && arg_207[1] != arg_237[0] && arg_207[1] == arg_147[1] && arg_207[1] != arg_57[0] && arg_207[1] != arg_119[0] && arg_207[1] == arg_63[1] && arg_207[1] != arg_169[0] && arg_139[1] == arg_77[1] && arg_139[1] != arg_183[0] && arg_139[1] != arg_27[0] && arg_139[1] == arg_65[1] && arg_139[1] != arg_49[0] && arg_139[1] != arg_189[0] && arg_139[1] == arg_59[1] && arg_139[1] != arg_105[0] && arg_139[1] != arg_221[0] && arg_139[1] != arg_247[0] && arg_139[1] == arg_19[1] && arg_139[1] != arg_253[0] && arg_139[1] != arg_77[0] && arg_139[1] == arg_15[1] && arg_139[1] == arg_81[1] && arg_139[1] != arg_91[0] && arg_139[1] == arg_91[1] && arg_139[1] != arg_155[0] && arg_139[1] == arg_159[1] && arg_139[1] == arg_191[1] && arg_139[1] == arg_95[1] && arg_139[1] == arg_221[1] && arg_139[1] != arg_251[0] && arg_139[1] != arg_45[0] && arg_139[1] == arg_21[1] && arg_139[1] != arg_139[0] && arg_139[1] == arg_171[1] && arg_139[1] != arg_89[0] && arg_139[1] == arg_183[1] && arg_139[1] == arg_141[1] && arg_139[1] != arg_207[0] && arg_139[1] == arg_51[1] && arg_139[1] != arg_233[0] && arg_139[1] != arg_13[0] && arg_139[1] != arg_237[0] && arg_139[1] == arg_147[1] && arg_139[1] != arg_57[0] && arg_139[1] != arg_119[0] && arg_139[1] == arg_63[1] && arg_139[1] != arg_169[0] && arg_77[1] != arg_183[0] && arg_77[1] != arg_27[0] && arg_77[1] == arg_65[1] && arg_77[1] != arg_49[0] && arg_77[1] != arg_189[0] && arg_77[1] == arg_59[1] && arg_77[1] != arg_105[0] && arg_77[1] != arg_221[0] && arg_77[1] != arg_247[0] && arg_77[1] == arg_19[1] && arg_77[1] != arg_253[0] && arg_77[1] != arg_77[0] && arg_77[1] == arg_15[1] && arg_77[1] == arg_81[1] && arg_77[1] != arg_91[0] && arg_77[1] == arg_91[1] && arg_77[1] != arg_155[0] && arg_77[1] == arg_159[1] && arg_77[1] == arg_191[1] && arg_77[1] == arg_95[1] && arg_77[1] == arg_221[1] && arg_77[1] != arg_251[0] && arg_77[1] != arg_45[0] && arg_77[1] == arg_21[1] && arg_77[1] != arg_139[0] && arg_77[1] == arg_171[1] && arg_77[1] != arg_89[0] && arg_77[1] == arg_183[1] && arg_77[1] == arg_141[1] && arg_77[1] != arg_207[0] && arg_77[1] == arg_51[1] && arg_77[1] != arg_233[0] && arg_77[1] != arg_13[0] && arg_77[1] != arg_237[0] && arg_77[1] == arg_147[1] && arg_77[1] != arg_57[0] && arg_77[1] != arg_119[0] && arg_77[1] == arg_63[1] && arg_77[1] != arg_169[0] && arg_183[0] == arg_27[0] && arg_183[0] != arg_65[1] && arg_183[0] == arg_49[0] && arg_183[0] == arg_189[0] && arg_183[0] != arg_59[1] && arg_183[0] == arg_105[0] && arg_183[0] == arg_221[0] && arg_183[0] == arg_247[0] && arg_183[0] != arg_19[1] && arg_183[0] == arg_253[0] && arg_183[0] == arg_77[0] && arg_183[0] != arg_15[1] && arg_183[0] != arg_81[1] && arg_183[0] == arg_91[0] && arg_183[0] != arg_91[1] && arg_183[0] == arg_155[0] && arg_183[0] != arg_159[1] && arg_183[0] != arg_191[1] && arg_183[0] != arg_95[1] && arg_183[0] != arg_221[1] && arg_183[0] == arg_251[0] && arg_183[0] == arg_45[0] && arg_183[0] != arg_21[1] && arg_183[0] == arg_139[0] && arg_183[0] != arg_171[1] && arg_183[0] == arg_89[0] && arg_183[0] != arg_183[1] && arg_183[0] != arg_141[1] && arg_183[0] == arg_207[0] && arg_183[0] != arg_51[1] && arg_183[0] == arg_233[0] && arg_183[0] == arg_13[0] && arg_183[0] == arg_237[0] && arg_183[0] != arg_147[1] && arg_183[0] == arg_57[0] && arg_183[0] == arg_119[0] && arg_183[0] != arg_63[1] && arg_183[0] == arg_169[0] && arg_27[0] != arg_65[1] && arg_27[0] == arg_49[0] && arg_27[0] == arg_189[0] && arg_27[0] != arg_59[1] && arg_27[0] == arg_105[0] && arg_27[0] == arg_221[0] && arg_27[0] == arg_247[0] && arg_27[0] != arg_19[1] && arg_27[0] == arg_253[0] && arg_27[0] == arg_77[0] && arg_27[0] != arg_15[1] && arg_27[0] != arg_81[1] && arg_27[0] == arg_91[0] && arg_27[0] != arg_91[1] && arg_27[0] == arg_155[0] && arg_27[0] != arg_159[1] && arg_27[0] != arg_191[1] && arg_27[0] != arg_95[1] && arg_27[0] != arg_221[1] && arg_27[0] == arg_251[0] && arg_27[0] == arg_45[0] && arg_27[0] != arg_21[1] && arg_27[0] == arg_139[0] && arg_27[0] != arg_171[1] && arg_27[0] == arg_89[0] && arg_27[0] != arg_183[1] && arg_27[0] != arg_141[1] && arg_27[0] == arg_207[0] && arg_27[0] != arg_51[1] && arg_27[0] == arg_233[0] && arg_27[0] == arg_13[0] && arg_27[0] == arg_237[0] && arg_27[0] != arg_147[1] && arg_27[0] == arg_57[0] && arg_27[0] == arg_119[0] && arg_27[0] != arg_63[1] && arg_27[0] == arg_169[0] && arg_65[1] != arg_49[0] && arg_65[1] != arg_189[0] && arg_65[1] == arg_59[1] && arg_65[1] != arg_105[0] && arg_65[1] != arg_221[0] && arg_65[1] != arg_247[0] && arg_65[1] == arg_19[1] && arg_65[1] != arg_253[0] && arg_65[1] != arg_77[0] && arg_65[1] == arg_15[1] && arg_65[1] == arg_81[1] && arg_65[1] != arg_91[0] && arg_65[1] == arg_91[1] && arg_65[1] != arg_155[0] && arg_65[1] == arg_159[1] && arg_65[1] == arg_191[1] && arg_65[1] == arg_95[1] && arg_65[1] == arg_221[1] && arg_65[1] != arg_251[0] && arg_65[1] != arg_45[0] && arg_65[1] == arg_21[1] && arg_65[1] != arg_139[0] && arg_65[1] == arg_171[1] && arg_65[1] != arg_89[0] && arg_65[1] == arg_183[1] && arg_65[1] == arg_141[1] && arg_65[1] != arg_207[0] && arg_65[1] == arg_51[1] && arg_65[1] != arg_233[0] && arg_65[1] != arg_13[0] && arg_65[1] != arg_237[0] && arg_65[1] == arg_147[1] && arg_65[1] != arg_57[0] && arg_65[1] != arg_119[0] && arg_65[1] == arg_63[1] && arg_65[1] != arg_169[0] && arg_49[0] == arg_189[0] && arg_49[0] != arg_59[1] && arg_49[0] == arg_105[0] && arg_49[0] == arg_221[0] && arg_49[0] == arg_247[0] && arg_49[0] != arg_19[1] && arg_49[0] == arg_253[0] && arg_49[0] == arg_77[0] && arg_49[0] != arg_15[1] && arg_49[0] != arg_81[1] && arg_49[0] == arg_91[0] && arg_49[0] != arg_91[1] && arg_49[0] == arg_155[0] && arg_49[0] != arg_159[1] && arg_49[0] != arg_191[1] && arg_49[0] != arg_95[1] && arg_49[0] != arg_221[1] && arg_49[0] == arg_251[0] && arg_49[0] == arg_45[0] && arg_49[0] != arg_21[1] && arg_49[0] == arg_139[0] && arg_49[0] != arg_171[1] && arg_49[0] == arg_89[0] && arg_49[0] != arg_183[1] && arg_49[0] != arg_141[1] && arg_49[0] == arg_207[0] && arg_49[0] != arg_51[1] && arg_49[0] == arg_233[0] && arg_49[0] == arg_13[0] && arg_49[0] == arg_237[0] && arg_49[0] != arg_147[1] && arg_49[0] == arg_57[0] && arg_49[0] == arg_119[0] && arg_49[0] != arg_63[1] && arg_49[0] == arg_169[0] && arg_189[0] != arg_59[1] && arg_189[0] == arg_105[0] && arg_189[0] == arg_221[0] && arg_189[0] == arg_247[0] && arg_189[0] != arg_19[1] && arg_189[0] == arg_253[0] && arg_189[0] == arg_77[0] && arg_189[0] != arg_15[1] && arg_189[0] != arg_81[1] && arg_189[0] == arg_91[0] && arg_189[0] != arg_91[1] && arg_189[0] == arg_155[0] && arg_189[0] != arg_159[1] && arg_189[0] != arg_191[1] && arg_189[0] != arg_95[1] && arg_189[0] != arg_221[1] && arg_189[0] == arg_251[0] && arg_189[0] == arg_45[0] && arg_189[0] != arg_21[1] && arg_189[0] == arg_139[0] && arg_189[0] != arg_171[1] && arg_189[0] == arg_89[0] && arg_189[0] != arg_183[1] && arg_189[0] != arg_141[1] && arg_189[0] == arg_207[0] && arg_189[0] != arg_51[1] && arg_189[0] == arg_233[0] && arg_189[0] == arg_13[0] && arg_189[0] == arg_237[0] && arg_189[0] != arg_147[1] && arg_189[0] == arg_57[0] && arg_189[0] == arg_119[0] && arg_189[0] != arg_63[1] && arg_189[0] == arg_169[0] && arg_59[1] != arg_105[0] && arg_59[1] != arg_221[0] && arg_59[1] != arg_247[0] && arg_59[1] == arg_19[1] && arg_59[1] != arg_253[0] && arg_59[1] != arg_77[0] && arg_59[1] == arg_15[1] && arg_59[1] == arg_81[1] && arg_59[1] != arg_91[0] && arg_59[1] == arg_91[1] && arg_59[1] != arg_155[0] && arg_59[1] == arg_159[1] && arg_59[1] == arg_191[1] && arg_59[1] == arg_95[1] && arg_59[1] == arg_221[1] && arg_59[1] != arg_251[0] && arg_59[1] != arg_45[0] && arg_59[1] == arg_21[1] && arg_59[1] != arg_139[0] && arg_59[1] == arg_171[1] && arg_59[1] != arg_89[0] && arg_59[1] == arg_183[1] && arg_59[1] == arg_141[1] && arg_59[1] != arg_207[0] && arg_59[1] == arg_51[1] && arg_59[1] != arg_233[0] && arg_59[1] != arg_13[0] && arg_59[1] != arg_237[0] && arg_59[1] == arg_147[1] && arg_59[1] != arg_57[0] && arg_59[1] != arg_119[0] && arg_59[1] == arg_63[1] && arg_59[1] != arg_169[0] && arg_105[0] == arg_221[0] && arg_105[0] == arg_247[0] && arg_105[0] != arg_19[1] && arg_105[0] == arg_253[0] && arg_105[0] == arg_77[0] && arg_105[0] != arg_15[1] && arg_105[0] != arg_81[1] && arg_105[0] == arg_91[0] && arg_105[0] != arg_91[1] && arg_105[0] == arg_155[0] && arg_105[0] != arg_159[1] && arg_105[0] != arg_191[1] && arg_105[0] != arg_95[1] && arg_105[0] != arg_221[1] && arg_105[0] == arg_251[0] && arg_105[0] == arg_45[0] && arg_105[0] != arg_21[1] && arg_105[0] == arg_139[0] && arg_105[0] != arg_171[1] && arg_105[0] == arg_89[0] && arg_105[0] != arg_183[1] && arg_105[0] != arg_141[1] && arg_105[0] == arg_207[0] && arg_105[0] != arg_51[1] && arg_105[0] == arg_233[0] && arg_105[0] == arg_13[0] && arg_105[0] == arg_237[0] && arg_105[0] != arg_147[1] && arg_105[0] == arg_57[0] && arg_105[0] == arg_119[0] && arg_105[0] != arg_63[1] && arg_105[0] == arg_169[0] && arg_221[0] == arg_247[0] && arg_221[0] != arg_19[1] && arg_221[0] == arg_253[0] && arg_221[0] == arg_77[0] && arg_221[0] != arg_15[1] && arg_221[0] != arg_81[1] && arg_221[0] == arg_91[0] && arg_221[0] != arg_91[1] && arg_221[0] == arg_155[0] && arg_221[0] != arg_159[1] && arg_221[0] != arg_191[1] && arg_221[0] != arg_95[1] && arg_221[0] != arg_221[1] && arg_221[0] == arg_251[0] && arg_221[0] == arg_45[0] && arg_221[0] != arg_21[1] && arg_221[0] == arg_139[0] && arg_221[0] != arg_171[1] && arg_221[0] == arg_89[0] && arg_221[0] != arg_183[1] && arg_221[0] != arg_141[1] && arg_221[0] == arg_207[0] && arg_221[0] != arg_51[1] && arg_221[0] == arg_233[0] && arg_221[0] == arg_13[0] && arg_221[0] == arg_237[0] && arg_221[0] != arg_147[1] && arg_221[0] == arg_57[0] && arg_221[0] == arg_119[0] && arg_221[0] != arg_63[1] && arg_221[0] == arg_169[0] && arg_247[0] != arg_19[1] && arg_247[0] == arg_253[0] && arg_247[0] == arg_77[0] && arg_247[0] != arg_15[1] && arg_247[0] != arg_81[1] && arg_247[0] == arg_91[0] && arg_247[0] != arg_91[1] && arg_247[0] == arg_155[0] && arg_247[0] != arg_159[1] && arg_247[0] != arg_191[1] && arg_247[0] != arg_95[1] && arg_247[0] != arg_221[1] && arg_247[0] == arg_251[0] && arg_247[0] == arg_45[0] && arg_247[0] != arg_21[1] && arg_247[0] == arg_139[0] && arg_247[0] != arg_171[1] && arg_247[0] == arg_89[0] && arg_247[0] != arg_183[1] && arg_247[0] != arg_141[1] && arg_247[0] == arg_207[0] && arg_247[0] != arg_51[1] && arg_247[0] == arg_233[0] && arg_247[0] == arg_13[0] && arg_247[0] == arg_237[0] && arg_247[0] != arg_147[1] && arg_247[0] == arg_57[0] && arg_247[0] == arg_119[0] && arg_247[0] != arg_63[1] && arg_247[0] == arg_169[0] && arg_19[1] != arg_253[0] && arg_19[1] != arg_77[0] && arg_19[1] == arg_15[1] && arg_19[1] == arg_81[1] && arg_19[1] != arg_91[0] && arg_19[1] == arg_91[1] && arg_19[1] != arg_155[0] && arg_19[1] == arg_159[1] && arg_19[1] == arg_191[1] && arg_19[1] == arg_95[1] && arg_19[1] == arg_221[1] && arg_19[1] != arg_251[0] && arg_19[1] != arg_45[0] && arg_19[1] == arg_21[1] && arg_19[1] != arg_139[0] && arg_19[1] == arg_171[1] && arg_19[1] != arg_89[0] && arg_19[1] == arg_183[1] && arg_19[1] == arg_141[1] && arg_19[1] != arg_207[0] && arg_19[1] == arg_51[1] && arg_19[1] != arg_233[0] && arg_19[1] != arg_13[0] && arg_19[1] != arg_237[0] && arg_19[1] == arg_147[1] && arg_19[1] != arg_57[0] && arg_19[1] != arg_119[0] && arg_19[1] == arg_63[1] && arg_19[1] != arg_169[0] && arg_253[0] == arg_77[0] && arg_253[0] != arg_15[1] && arg_253[0] != arg_81[1] && arg_253[0] == arg_91[0] && arg_253[0] != arg_91[1] && arg_253[0] == arg_155[0] && arg_253[0] != arg_159[1] && arg_253[0] != arg_191[1] && arg_253[0] != arg_95[1] && arg_253[0] != arg_221[1] && arg_253[0] == arg_251[0] && arg_253[0] == arg_45[0] && arg_253[0] != arg_21[1] && arg_253[0] == arg_139[0] && arg_253[0] != arg_171[1] && arg_253[0] == arg_89[0] && arg_253[0] != arg_183[1] && arg_253[0] != arg_141[1] && arg_253[0] == arg_207[0] && arg_253[0] != arg_51[1] && arg_253[0] == arg_233[0] && arg_253[0] == arg_13[0] && arg_253[0] == arg_237[0] && arg_253[0] != arg_147[1] && arg_253[0] == arg_57[0] && arg_253[0] == arg_119[0] && arg_253[0] != arg_63[1] && arg_253[0] == arg_169[0] && arg_77[0] != arg_15[1] && arg_77[0] != arg_81[1] && arg_77[0] == arg_91[0] && arg_77[0] != arg_91[1] && arg_77[0] == arg_155[0] && arg_77[0] != arg_159[1] && arg_77[0] != arg_191[1] && arg_77[0] != arg_95[1] && arg_77[0] != arg_221[1] && arg_77[0] == arg_251[0] && arg_77[0] == arg_45[0] && arg_77[0] != arg_21[1] && arg_77[0] == arg_139[0] && arg_77[0] != arg_171[1] && arg_77[0] == arg_89[0] && arg_77[0] != arg_183[1] && arg_77[0] != arg_141[1] && arg_77[0] == arg_207[0] && arg_77[0] != arg_51[1] && arg_77[0] == arg_233[0] && arg_77[0] == arg_13[0] && arg_77[0] == arg_237[0] && arg_77[0] != arg_147[1] && arg_77[0] == arg_57[0] && arg_77[0] == arg_119[0] && arg_77[0] != arg_63[1] && arg_77[0] == arg_169[0] && arg_15[1] == arg_81[1] && arg_15[1] != arg_91[0] && arg_15[1] == arg_91[1] && arg_15[1] != arg_155[0] && arg_15[1] == arg_159[1] && arg_15[1] == arg_191[1] && arg_15[1] == arg_95[1] && arg_15[1] == arg_221[1] && arg_15[1] != arg_251[0] && arg_15[1] != arg_45[0] && arg_15[1] == arg_21[1] && arg_15[1] != arg_139[0] && arg_15[1] == arg_171[1] && arg_15[1] != arg_89[0] && arg_15[1] == arg_183[1] && arg_15[1] == arg_141[1] && arg_15[1] != arg_207[0] && arg_15[1] == arg_51[1] && arg_15[1] != arg_233[0] && arg_15[1] != arg_13[0] && arg_15[1] != arg_237[0] && arg_15[1] == arg_147[1] && arg_15[1] != arg_57[0] && arg_15[1] != arg_119[0] && arg_15[1] == arg_63[1] && arg_15[1] != arg_169[0] && arg_81[1] != arg_91[0] && arg_81[1] == arg_91[1] && arg_81[1] != arg_155[0] && arg_81[1] == arg_159[1] && arg_81[1] == arg_191[1] && arg_81[1] == arg_95[1] && arg_81[1] == arg_221[1] && arg_81[1] != arg_251[0] && arg_81[1] != arg_45[0] && arg_81[1] == arg_21[1] && arg_81[1] != arg_139[0] && arg_81[1] == arg_171[1] && arg_81[1] != arg_89[0] && arg_81[1] == arg_183[1] && arg_81[1] == arg_141[1] && arg_81[1] != arg_207[0] && arg_81[1] == arg_51[1] && arg_81[1] != arg_233[0] && arg_81[1] != arg_13[0] && arg_81[1] != arg_237[0] && arg_81[1] == arg_147[1] && arg_81[1] != arg_57[0] && arg_81[1] != arg_119[0] && arg_81[1] == arg_63[1] && arg_81[1] != arg_169[0] && arg_91[0] != arg_91[1] && arg_91[0] == arg_155[0] && arg_91[0] != arg_159[1] && arg_91[0] != arg_191[1] && arg_91[0] != arg_95[1] && arg_91[0] != arg_221[1] && arg_91[0] == arg_251[0] && arg_91[0] == arg_45[0] && arg_91[0] != arg_21[1] && arg_91[0] == arg_139[0] && arg_91[0] != arg_171[1] && arg_91[0] == arg_89[0] && arg_91[0] != arg_183[1] && arg_91[0] != arg_141[1] && arg_91[0] == arg_207[0] && arg_91[0] != arg_51[1] && arg_91[0] == arg_233[0] && arg_91[0] == arg_13[0] && arg_91[0] == arg_237[0] && arg_91[0] != arg_147[1] && arg_91[0] == arg_57[0] && arg_91[0] == arg_119[0] && arg_91[0] != arg_63[1] && arg_91[0] == arg_169[0] && arg_91[1] != arg_155[0] && arg_91[1] == arg_159[1] && arg_91[1] == arg_191[1] && arg_91[1] == arg_95[1] && arg_91[1] == arg_221[1] && arg_91[1] != arg_251[0] && arg_91[1] != arg_45[0] && arg_91[1] == arg_21[1] && arg_91[1] != arg_139[0] && arg_91[1] == arg_171[1] && arg_91[1] != arg_89[0] && arg_91[1] == arg_183[1] && arg_91[1] == arg_141[1] && arg_91[1] != arg_207[0] && arg_91[1] == arg_51[1] && arg_91[1] != arg_233[0] && arg_91[1] != arg_13[0] && arg_91[1] != arg_237[0] && arg_91[1] == arg_147[1] && arg_91[1] != arg_57[0] && arg_91[1] != arg_119[0] && arg_91[1] == arg_63[1] && arg_91[1] != arg_169[0] && arg_155[0] != arg_159[1] && arg_155[0] != arg_191[1] && arg_155[0] != arg_95[1] && arg_155[0] != arg_221[1] && arg_155[0] == arg_251[0] && arg_155[0] == arg_45[0] && arg_155[0] != arg_21[1] && arg_155[0] == arg_139[0] && arg_155[0] != arg_171[1] && arg_155[0] == arg_89[0] && arg_155[0] != arg_183[1] && arg_155[0] != arg_141[1] && arg_155[0] == arg_207[0] && arg_155[0] != arg_51[1] && arg_155[0] == arg_233[0] && arg_155[0] == arg_13[0] && arg_155[0] == arg_237[0] && arg_155[0] != arg_147[1] && arg_155[0] == arg_57[0] && arg_155[0] == arg_119[0] && arg_155[0] != arg_63[1] && arg_155[0] == arg_169[0] && arg_159[1] == arg_191[1] && arg_159[1] == arg_95[1] && arg_159[1] == arg_221[1] && arg_159[1] != arg_251[0] && arg_159[1] != arg_45[0] && arg_159[1] == arg_21[1] && arg_159[1] != arg_139[0] && arg_159[1] == arg_171[1] && arg_159[1] != arg_89[0] && arg_159[1] == arg_183[1] && arg_159[1] == arg_141[1] && arg_159[1] != arg_207[0] && arg_159[1] == arg_51[1] && arg_159[1] != arg_233[0] && arg_159[1] != arg_13[0] && arg_159[1] != arg_237[0] && arg_159[1] == arg_147[1] && arg_159[1] != arg_57[0] && arg_159[1] != arg_119[0] && arg_159[1] == arg_63[1] && arg_159[1] != arg_169[0] && arg_191[1] == arg_95[1] && arg_191[1] == arg_221[1] && arg_191[1] != arg_251[0] && arg_191[1] != arg_45[0] && arg_191[1] == arg_21[1] && arg_191[1] != arg_139[0] && arg_191[1] == arg_171[1] && arg_191[1] != arg_89[0] && arg_191[1] == arg_183[1] && arg_191[1] == arg_141[1] && arg_191[1] != arg_207[0] && arg_191[1] == arg_51[1] && arg_191[1] != arg_233[0] && arg_191[1] != arg_13[0] && arg_191[1] != arg_237[0] && arg_191[1] == arg_147[1] && arg_191[1] != arg_57[0] && arg_191[1] != arg_119[0] && arg_191[1] == arg_63[1] && arg_191[1] != arg_169[0] && arg_95[1] == arg_221[1] && arg_95[1] != arg_251[0] && arg_95[1] != arg_45[0] && arg_95[1] == arg_21[1] && arg_95[1] != arg_139[0] && arg_95[1] == arg_171[1] && arg_95[1] != arg_89[0] && arg_95[1] == arg_183[1] && arg_95[1] == arg_141[1] && arg_95[1] != arg_207[0] && arg_95[1] == arg_51[1] && arg_95[1] != arg_233[0] && arg_95[1] != arg_13[0] && arg_95[1] != arg_237[0] && arg_95[1] == arg_147[1] && arg_95[1] != arg_57[0] && arg_95[1] != arg_119[0] && arg_95[1] == arg_63[1] && arg_95[1] != arg_169[0] && arg_221[1] != arg_251[0] && arg_221[1] != arg_45[0] && arg_221[1] == arg_21[1] && arg_221[1] != arg_139[0] && arg_221[1] == arg_171[1] && arg_221[1] != arg_89[0] && arg_221[1] == arg_183[1] && arg_221[1] == arg_141[1] && arg_221[1] != arg_207[0] && arg_221[1] == arg_51[1] && arg_221[1] != arg_233[0] && arg_221[1] != arg_13[0] && arg_221[1] != arg_237[0] && arg_221[1] == arg_147[1] && arg_221[1] != arg_57[0] && arg_221[1] != arg_119[0] && arg_221[1] == arg_63[1] && arg_221[1] != arg_169[0] && arg_251[0] == arg_45[0] && arg_251[0] != arg_21[1] && arg_251[0] == arg_139[0] && arg_251[0] != arg_171[1] && arg_251[0] == arg_89[0] && arg_251[0] != arg_183[1] && arg_251[0] != arg_141[1] && arg_251[0] == arg_207[0] && arg_251[0] != arg_51[1] && arg_251[0] == arg_233[0] && arg_251[0] == arg_13[0] && arg_251[0] == arg_237[0] && arg_251[0] != arg_147[1] && arg_251[0] == arg_57[0] && arg_251[0] == arg_119[0] && arg_251[0] != arg_63[1] && arg_251[0] == arg_169[0] && arg_45[0] != arg_21[1] && arg_45[0] == arg_139[0] && arg_45[0] != arg_171[1] && arg_45[0] == arg_89[0] && arg_45[0] != arg_183[1] && arg_45[0] != arg_141[1] && arg_45[0] == arg_207[0] && arg_45[0] != arg_51[1] && arg_45[0] == arg_233[0] && arg_45[0] == arg_13[0] && arg_45[0] == arg_237[0] && arg_45[0] != arg_147[1] && arg_45[0] == arg_57[0] && arg_45[0] == arg_119[0] && arg_45[0] != arg_63[1] && arg_45[0] == arg_169[0] && arg_21[1] != arg_139[0] && arg_21[1] == arg_171[1] && arg_21[1] != arg_89[0] && arg_21[1] == arg_183[1] && arg_21[1] == arg_141[1] && arg_21[1] != arg_207[0] && arg_21[1] == arg_51[1] && arg_21[1] != arg_233[0] && arg_21[1] != arg_13[0] && arg_21[1] != arg_237[0] && arg_21[1] == arg_147[1] && arg_21[1] != arg_57[0] && arg_21[1] != arg_119[0] && arg_21[1] == arg_63[1] && arg_21[1] != arg_169[0] && arg_139[0] != arg_171[1] && arg_139[0] == arg_89[0] && arg_139[0] != arg_183[1] && arg_139[0] != arg_141[1] && arg_139[0] == arg_207[0] && arg_139[0] != arg_51[1] && arg_139[0] == arg_233[0] && arg_139[0] == arg_13[0] && arg_139[0] == arg_237[0] && arg_139[0] != arg_147[1] && arg_139[0] == arg_57[0] && arg_139[0] == arg_119[0] && arg_139[0] != arg_63[1] && arg_139[0] == arg_169[0] && arg_171[1] != arg_89[0] && arg_171[1] == arg_183[1] && arg_171[1] == arg_141[1] && arg_171[1] != arg_207[0] && arg_171[1] == arg_51[1] && arg_171[1] != arg_233[0] && arg_171[1] != arg_13[0] && arg_171[1] != arg_237[0] && arg_171[1] == arg_147[1] && arg_171[1] != arg_57[0] && arg_171[1] != arg_119[0] && arg_171[1] == arg_63[1] && arg_171[1] != arg_169[0] && arg_89[0] != arg_183[1] && arg_89[0] != arg_141[1] && arg_89[0] == arg_207[0] && arg_89[0] != arg_51[1] && arg_89[0] == arg_233[0] && arg_89[0] == arg_13[0] && arg_89[0] == arg_237[0] && arg_89[0] != arg_147[1] && arg_89[0] == arg_57[0] && arg_89[0] == arg_119[0] && arg_89[0] != arg_63[1] && arg_89[0] == arg_169[0] && arg_183[1] == arg_141[1] && arg_183[1] != arg_207[0] && arg_183[1] == arg_51[1] && arg_183[1] != arg_233[0] && arg_183[1] != arg_13[0] && arg_183[1] != arg_237[0] && arg_183[1] == arg_147[1] && arg_183[1] != arg_57[0] && arg_183[1] != arg_119[0] && arg_183[1] == arg_63[1] && arg_183[1] != arg_169[0] && arg_141[1] != arg_207[0] && arg_141[1] == arg_51[1] && arg_141[1] != arg_233[0] && arg_141[1] != arg_13[0] && arg_141[1] != arg_237[0] && arg_141[1] == arg_147[1] && arg_141[1] != arg_57[0] && arg_141[1] != arg_119[0] && arg_141[1] == arg_63[1] && arg_141[1] != arg_169[0] && arg_207[0] != arg_51[1] && arg_207[0] == arg_233[0] && arg_207[0] == arg_13[0] && arg_207[0] == arg_237[0] && arg_207[0] != arg_147[1] && arg_207[0] == arg_57[0] && arg_207[0] == arg_119[0] && arg_207[0] != arg_63[1] && arg_207[0] == arg_169[0] && arg_51[1] != arg_233[0] && arg_51[1] != arg_13[0] && arg_51[1] != arg_237[0] && arg_51[1] == arg_147[1] && arg_51[1] != arg_57[0] && arg_51[1] != arg_119[0] && arg_51[1] == arg_63[1] && arg_51[1] != arg_169[0] && arg_233[0] == arg_13[0] && arg_233[0] == arg_237[0] && arg_233[0] != arg_147[1] && arg_233[0] == arg_57[0] && arg_233[0] == arg_119[0] && arg_233[0] != arg_63[1] && arg_233[0] == arg_169[0] && arg_13[0] == arg_237[0] && arg_13[0] != arg_147[1] && arg_13[0] == arg_57[0] && arg_13[0] == arg_119[0] && arg_13[0] != arg_63[1] && arg_13[0] == arg_169[0] && arg_237[0] != arg_147[1] && arg_237[0] == arg_57[0] && arg_237[0] == arg_119[0] && arg_237[0] != arg_63[1] && arg_237[0] == arg_169[0] && arg_147[1] != arg_57[0] && arg_147[1] != arg_119[0] && arg_147[1] == arg_63[1] && arg_147[1] != arg_169[0] && arg_57[0] == arg_119[0] && arg_57[0] != arg_63[1] && arg_57[0] == arg_169[0] && arg_119[0] != arg_63[1] && arg_119[0] == arg_169[0] && arg_63[1] != arg_169[0] {
let rep_insts = pos.func.dfg.inst_results(inst);
let rep_insts_0 = rep_insts[0];
pos.func.dfg.change_to_alias(arg_1, rep_insts_0);
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1392(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_1 == 7 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_4 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_4[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_5 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_5[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_6 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_6[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_7 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_7[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_8 = args;
match opcode {
Opcode::Bor => {
if rhs_3 == 7 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_9 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_5 == -8 {
if arg_2 != arg_6[1] && arg_2 != arg_8[1] && arg_2 != arg_7[1] && arg_2 != arg_5[1] && arg_2 != arg_8[0] && arg_2 == arg_9 && arg_2 != arg_4[1] && arg_6[1] != arg_8[1] && arg_6[1] != arg_7[1] && arg_6[1] != arg_5[1] && arg_6[1] != arg_8[0] && arg_6[1] != arg_9 && arg_6[1] != arg_4[1] && arg_8[1] != arg_7[1] && arg_8[1] != arg_5[1] && arg_8[1] != arg_8[0] && arg_8[1] != arg_9 && arg_8[1] != arg_4[1] && arg_7[1] != arg_5[1] && arg_7[1] != arg_8[0] && arg_7[1] != arg_9 && arg_7[1] != arg_4[1] && arg_5[1] != arg_8[0] && arg_5[1] != arg_9 && arg_5[1] != arg_4[1] && arg_8[0] != arg_9 && arg_8[0] != arg_4[1] && arg_9 != arg_4[1] {
let rhs_inst_18 = pos.ins().bor(arg_9, arg_1[1]);
let rhs_inst_19 = pos.ins().bnot(rhs_inst_18);
pos.func.dfg.replace(inst).bnot(rhs_inst_19);

}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1393(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_3 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_3[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_4) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_5 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_5[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_6) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_7 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_3 == 254 {
if rhs_2 == 1 {
match pos.func.dfg.value_def(arg_5[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_6 == 6 {
if rhs_1 == -126 {
match pos.func.dfg.value_def(arg_3[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_9 = arg;
let rhs_9 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_9) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_10 = arg;
let rhs_10 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_10) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_11 = arg;
let rhs_11 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_11 == 254 {
if rhs_10 == 1 {
if rhs_9 == 4 {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_12 = arg;
let rhs_15 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_12) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_13 = arg;
let rhs_16 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_13) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_14 = arg;
let rhs_17 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_17 == 254 {
if rhs_16 == 1 {
if rhs_15 == 8 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_15 = arg;
let rhs_21 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_15) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_16 = arg;
let rhs_22 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_16) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_17 = arg;
let rhs_23 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_23 == 254 {
if rhs_22 == 1 {
if rhs_21 == 16 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_18 = arg;
let rhs_27 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_18) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_19 = arg;
let rhs_28 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_19) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_20 = arg;
let rhs_29 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_29 == 254 {
if rhs_28 == 1 {
if rhs_27 == 32 {
if arg_17 == arg_11 && arg_17 == arg_8 && arg_17 == arg_14 && arg_17 == arg_7 && arg_17 == arg_20 && arg_11 == arg_8 && arg_11 == arg_14 && arg_11 == arg_7 && arg_11 == arg_20 && arg_8 == arg_14 && arg_8 == arg_7 && arg_8 == arg_20 && arg_14 == arg_7 && arg_14 == arg_20 && arg_7 == arg_20 {
let rhs_inst_15 = pos.ins().bor(arg_2[0], arg_18);
let rhs_inst_16 = pos.ins().iconst(I32, 65_u64 as i64);
let rhs_inst_17 = pos.ins().bor_not(rhs_inst_16, rhs_inst_15);
pos.func.dfg.replace(inst).bnot(rhs_inst_17);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1394(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_3 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_3[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_4 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_4[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_2 == 64 {
match pos.func.dfg.value_def(arg_4[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_6) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_7 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_7) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_6 == 2 {
if rhs_5 == 5 {
if rhs_4 == 64 {
match pos.func.dfg.value_def(arg_3[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_9 = arg;
let rhs_10 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_10 == 65471 {
if rhs_1 == 128 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_10 = arg;
let rhs_13 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_13 == 7 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_11 = arg;
let rhs_15 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_11) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_12 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_12[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_13 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_13[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_14 = arg;
let rhs_16 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_16 == 64 {
match pos.func.dfg.value_def(arg_13[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_15 = arg;
let rhs_18 : i64 = imm.into();
match opcode {
Opcode::BxorImm => {
match pos.func.dfg.value_def(arg_15) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_16 = arg;
let rhs_19 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_16) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_17 = arg;
let rhs_20 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_20 == 2 {
if rhs_19 == 5 {
if rhs_18 == 64 {
match pos.func.dfg.value_def(arg_12[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_18 = arg;
let rhs_24 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_24 == 65471 {
if rhs_15 == 65407 {
if arg_10 != arg_8 && arg_10 != arg_9 && arg_10 != arg_18 && arg_10 != arg_17 && arg_10 != arg_14 && arg_10 != arg_5 && arg_8 != arg_9 && arg_8 != arg_18 && arg_8 == arg_17 && arg_8 != arg_14 && arg_8 != arg_5 && arg_9 == arg_18 && arg_9 != arg_17 && arg_9 == arg_14 && arg_9 == arg_5 && arg_18 != arg_17 && arg_18 == arg_14 && arg_18 == arg_5 && arg_17 != arg_14 && arg_17 != arg_5 && arg_14 == arg_5 {
let rhs_inst_16 = pos.ins().bor(arg_11, arg_1[1]);
let rhs_inst_17 = pos.ins().bnot(rhs_inst_16);
pos.func.dfg.replace(inst).bnot(rhs_inst_17);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1395(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_4 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_4[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_5) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_6 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_6[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_7 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_7) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_8 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_8[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_9 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_9) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_10 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_10[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_11 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_11) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_12 = arg;
let rhs_7 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_12) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_13 = arg;
let rhs_8 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_13) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_14 = args;
match opcode {
Opcode::Imul => {
if rhs_8 == 4294967295 {
if rhs_7 == -1 {
if rhs_6 == 1 {
match pos.func.dfg.value_def(arg_10[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_15 = arg;
let rhs_12 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_15) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_16 = arg;
let rhs_13 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_16) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_17 = args;
match opcode {
Opcode::Imul => {
if rhs_13 == 4294967295 {
if rhs_12 == -1 {
if rhs_5 == 2 {
match pos.func.dfg.value_def(arg_8[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_18 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_18[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_19 = arg;
let rhs_17 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_19) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_20 = arg;
let rhs_18 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_20) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_21 = arg;
let rhs_19 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_21) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_22 = args;
match opcode {
Opcode::Imul => {
if rhs_19 == 4294967295 {
if rhs_18 == -1 {
if rhs_17 == 1 {
match pos.func.dfg.value_def(arg_18[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_23 = arg;
let rhs_23 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_23) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_24 = arg;
let rhs_24 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_24) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_25 = args;
match opcode {
Opcode::Imul => {
if rhs_24 == 4294967295 {
if rhs_23 == -1 {
if rhs_4 == 4 {
match pos.func.dfg.value_def(arg_6[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_26 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_26[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_27 = arg;
let rhs_28 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_27) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_28 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_28[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_29 = arg;
let rhs_29 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_29) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_30 = arg;
let rhs_30 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_30) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_31 = arg;
let rhs_31 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_31) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_32 = args;
match opcode {
Opcode::Imul => {
if rhs_31 == 4294967295 {
if rhs_30 == -1 {
if rhs_29 == 1 {
match pos.func.dfg.value_def(arg_28[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_33 = arg;
let rhs_35 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_33) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_34 = arg;
let rhs_36 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_34) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_35 = args;
match opcode {
Opcode::Imul => {
if rhs_36 == 4294967295 {
if rhs_35 == -1 {
if rhs_28 == 2 {
match pos.func.dfg.value_def(arg_26[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_36 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_36[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_37 = arg;
let rhs_40 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_37) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_38 = arg;
let rhs_41 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_38) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_39 = arg;
let rhs_42 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_39) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_40 = args;
match opcode {
Opcode::Imul => {
if rhs_42 == 4294967295 {
if rhs_41 == -1 {
if rhs_40 == 1 {
match pos.func.dfg.value_def(arg_36[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_41 = arg;
let rhs_46 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_41) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_42 = arg;
let rhs_47 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_42) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_43 = args;
match opcode {
Opcode::Imul => {
if rhs_47 == 4294967295 {
if rhs_46 == -1 {
if rhs_3 == 8 {
match pos.func.dfg.value_def(arg_4[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_44 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_44[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_45 = arg;
let rhs_51 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_45) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_46 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_46[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_47 = arg;
let rhs_52 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_47) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_48 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_48[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_49 = arg;
let rhs_53 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_49) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_50 = arg;
let rhs_54 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_50) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_51 = arg;
let rhs_55 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_51) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_52 = args;
match opcode {
Opcode::Imul => {
if rhs_55 == 4294967295 {
if rhs_54 == -1 {
if rhs_53 == 1 {
match pos.func.dfg.value_def(arg_48[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_53 = arg;
let rhs_59 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_53) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_54 = arg;
let rhs_60 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_54) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_55 = args;
match opcode {
Opcode::Imul => {
if rhs_60 == 4294967295 {
if rhs_59 == -1 {
if rhs_52 == 2 {
match pos.func.dfg.value_def(arg_46[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_56 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_56[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_57 = arg;
let rhs_64 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_57) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_58 = arg;
let rhs_65 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_58) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_59 = arg;
let rhs_66 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_59) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_60 = args;
match opcode {
Opcode::Imul => {
if rhs_66 == 4294967295 {
if rhs_65 == -1 {
if rhs_64 == 1 {
match pos.func.dfg.value_def(arg_56[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_61 = arg;
let rhs_70 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_61) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_62 = arg;
let rhs_71 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_62) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_63 = args;
match opcode {
Opcode::Imul => {
if rhs_71 == 4294967295 {
if rhs_70 == -1 {
if rhs_51 == 4 {
match pos.func.dfg.value_def(arg_44[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_64 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_64[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_65 = arg;
let rhs_75 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_65) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_66 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_66[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_67 = arg;
let rhs_76 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_67) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_68 = arg;
let rhs_77 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_68) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_69 = arg;
let rhs_78 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_69) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_70 = args;
match opcode {
Opcode::Imul => {
if rhs_78 == 4294967295 {
if rhs_77 == -1 {
if rhs_76 == 1 {
match pos.func.dfg.value_def(arg_66[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_71 = arg;
let rhs_82 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_71) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_72 = arg;
let rhs_83 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_72) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_73 = args;
match opcode {
Opcode::Imul => {
if rhs_83 == 4294967295 {
if rhs_82 == -1 {
if rhs_75 == 2 {
match pos.func.dfg.value_def(arg_64[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_74 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_74[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_75 = arg;
let rhs_87 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_75) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_76 = arg;
let rhs_88 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_76) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_77 = arg;
let rhs_89 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_77) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_78 = args;
match opcode {
Opcode::Imul => {
if rhs_89 == 4294967295 {
if rhs_88 == -1 {
if rhs_87 == 1 {
match pos.func.dfg.value_def(arg_74[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_79 = arg;
let rhs_93 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_79) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_80 = arg;
let rhs_94 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_80) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_81 = args;
match opcode {
Opcode::Imul => {
if rhs_94 == 4294967295 {
if rhs_93 == -1 {
if rhs_2 == 16 {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_82 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_82[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_83 = arg;
let rhs_98 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_83) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_84 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_84[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_85 = arg;
let rhs_99 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_85) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_86 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_86[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_87 = arg;
let rhs_100 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_87) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_88 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_88[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_89 = arg;
let rhs_101 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_89) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_90 = arg;
let rhs_102 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_90) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_91 = arg;
let rhs_103 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_91) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_92 = args;
match opcode {
Opcode::Imul => {
if rhs_103 == 4294967295 {
if rhs_102 == -1 {
if rhs_101 == 1 {
match pos.func.dfg.value_def(arg_88[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_93 = arg;
let rhs_107 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_93) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_94 = arg;
let rhs_108 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_94) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_95 = args;
match opcode {
Opcode::Imul => {
if rhs_108 == 4294967295 {
if rhs_107 == -1 {
if rhs_100 == 2 {
match pos.func.dfg.value_def(arg_86[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_96 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_96[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_97 = arg;
let rhs_112 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_97) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_98 = arg;
let rhs_113 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_98) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_99 = arg;
let rhs_114 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_99) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_100 = args;
match opcode {
Opcode::Imul => {
if rhs_114 == 4294967295 {
if rhs_113 == -1 {
if rhs_112 == 1 {
match pos.func.dfg.value_def(arg_96[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_101 = arg;
let rhs_118 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_101) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_102 = arg;
let rhs_119 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_102) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_103 = args;
match opcode {
Opcode::Imul => {
if rhs_119 == 4294967295 {
if rhs_118 == -1 {
if rhs_99 == 4 {
match pos.func.dfg.value_def(arg_84[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_104 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_104[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_105 = arg;
let rhs_123 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_105) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_106 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_106[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_107 = arg;
let rhs_124 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_107) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_108 = arg;
let rhs_125 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_108) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_109 = arg;
let rhs_126 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_109) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_110 = args;
match opcode {
Opcode::Imul => {
if rhs_126 == 4294967295 {
if rhs_125 == -1 {
if rhs_124 == 1 {
match pos.func.dfg.value_def(arg_106[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_111 = arg;
let rhs_130 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_111) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_112 = arg;
let rhs_131 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_112) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_113 = args;
match opcode {
Opcode::Imul => {
if rhs_131 == 4294967295 {
if rhs_130 == -1 {
if rhs_123 == 2 {
match pos.func.dfg.value_def(arg_104[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_114 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_114[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_115 = arg;
let rhs_135 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_115) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_116 = arg;
let rhs_136 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_116) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_117 = arg;
let rhs_137 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_117) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_118 = args;
match opcode {
Opcode::Imul => {
if rhs_137 == 4294967295 {
if rhs_136 == -1 {
if rhs_135 == 1 {
match pos.func.dfg.value_def(arg_114[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_119 = arg;
let rhs_141 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_119) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_120 = arg;
let rhs_142 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_120) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_121 = args;
match opcode {
Opcode::Imul => {
if rhs_142 == 4294967295 {
if rhs_141 == -1 {
if rhs_98 == 8 {
match pos.func.dfg.value_def(arg_82[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_122 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_122[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_123 = arg;
let rhs_146 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_123) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_124 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_124[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_125 = arg;
let rhs_147 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_125) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_126 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_126[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_127 = arg;
let rhs_148 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_127) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_128 = arg;
let rhs_149 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_128) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_129 = arg;
let rhs_150 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_129) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_130 = args;
match opcode {
Opcode::Imul => {
if rhs_150 == 4294967295 {
if rhs_149 == -1 {
if rhs_148 == 1 {
match pos.func.dfg.value_def(arg_126[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_131 = arg;
let rhs_154 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_131) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_132 = arg;
let rhs_155 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_132) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_133 = args;
match opcode {
Opcode::Imul => {
if rhs_155 == 4294967295 {
if rhs_154 == -1 {
if rhs_147 == 2 {
match pos.func.dfg.value_def(arg_124[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_134 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_134[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_135 = arg;
let rhs_159 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_135) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_136 = arg;
let rhs_160 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_136) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_137 = arg;
let rhs_161 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_137) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_138 = args;
match opcode {
Opcode::Imul => {
if rhs_161 == 4294967295 {
if rhs_160 == -1 {
if rhs_159 == 1 {
match pos.func.dfg.value_def(arg_134[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_139 = arg;
let rhs_165 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_139) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_140 = arg;
let rhs_166 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_140) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_141 = args;
match opcode {
Opcode::Imul => {
if rhs_166 == 4294967295 {
if rhs_165 == -1 {
if rhs_146 == 4 {
match pos.func.dfg.value_def(arg_122[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_142 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_142[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_143 = arg;
let rhs_170 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_143) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_144 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_144[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_145 = arg;
let rhs_171 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_145) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_146 = arg;
let rhs_172 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_146) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_147 = arg;
let rhs_173 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_147) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_148 = args;
match opcode {
Opcode::Imul => {
if rhs_173 == 4294967295 {
if rhs_172 == -1 {
if rhs_171 == 1 {
match pos.func.dfg.value_def(arg_144[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_149 = arg;
let rhs_177 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_149) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_150 = arg;
let rhs_178 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_150) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_151 = args;
match opcode {
Opcode::Imul => {
if rhs_178 == 4294967295 {
if rhs_177 == -1 {
if rhs_170 == 2 {
match pos.func.dfg.value_def(arg_142[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_152 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_152[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_153 = arg;
let rhs_182 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_153) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_154 = arg;
let rhs_183 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_154) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_155 = arg;
let rhs_184 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_155) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_156 = args;
match opcode {
Opcode::Imul => {
if rhs_184 == 4294967295 {
if rhs_183 == -1 {
if rhs_182 == 1 {
match pos.func.dfg.value_def(arg_152[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_157 = arg;
let rhs_188 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_157) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_158 = arg;
let rhs_189 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_158) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_159 = args;
match opcode {
Opcode::Imul => {
if rhs_189 == 4294967295 {
if rhs_188 == -1 {
if rhs_1 == 32 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_160 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_160[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_161 = arg;
let rhs_193 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_161) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_162 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_162[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_163 = arg;
let rhs_194 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_163) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_164 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_164[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_165 = arg;
let rhs_195 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_165) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_166 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_166[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_167 = arg;
let rhs_196 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_167) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_168 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_168[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_169 = arg;
let rhs_197 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_169) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_170 = arg;
let rhs_198 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_170) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_171 = arg;
let rhs_199 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_171) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_172 = args;
match opcode {
Opcode::Imul => {
if rhs_199 == 4294967295 {
if rhs_198 == -1 {
if rhs_197 == 1 {
match pos.func.dfg.value_def(arg_168[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_173 = arg;
let rhs_203 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_173) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_174 = arg;
let rhs_204 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_174) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_175 = args;
match opcode {
Opcode::Imul => {
if rhs_204 == 4294967295 {
if rhs_203 == -1 {
if rhs_196 == 2 {
match pos.func.dfg.value_def(arg_166[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_176 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_176[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_177 = arg;
let rhs_208 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_177) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_178 = arg;
let rhs_209 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_178) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_179 = arg;
let rhs_210 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_179) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_180 = args;
match opcode {
Opcode::Imul => {
if rhs_210 == 4294967295 {
if rhs_209 == -1 {
if rhs_208 == 1 {
match pos.func.dfg.value_def(arg_176[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_181 = arg;
let rhs_214 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_181) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_182 = arg;
let rhs_215 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_182) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_183 = args;
match opcode {
Opcode::Imul => {
if rhs_215 == 4294967295 {
if rhs_214 == -1 {
if rhs_195 == 4 {
match pos.func.dfg.value_def(arg_164[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_184 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_184[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_185 = arg;
let rhs_219 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_185) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_186 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_186[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_187 = arg;
let rhs_220 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_187) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_188 = arg;
let rhs_221 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_188) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_189 = arg;
let rhs_222 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_189) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_190 = args;
match opcode {
Opcode::Imul => {
if rhs_222 == 4294967295 {
if rhs_221 == -1 {
if rhs_220 == 1 {
match pos.func.dfg.value_def(arg_186[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_191 = arg;
let rhs_226 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_191) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_192 = arg;
let rhs_227 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_192) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_193 = args;
match opcode {
Opcode::Imul => {
if rhs_227 == 4294967295 {
if rhs_226 == -1 {
if rhs_219 == 2 {
match pos.func.dfg.value_def(arg_184[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_194 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_194[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_195 = arg;
let rhs_231 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_195) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_196 = arg;
let rhs_232 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_196) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_197 = arg;
let rhs_233 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_197) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_198 = args;
match opcode {
Opcode::Imul => {
if rhs_233 == 4294967295 {
if rhs_232 == -1 {
if rhs_231 == 1 {
match pos.func.dfg.value_def(arg_194[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_199 = arg;
let rhs_237 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_199) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_200 = arg;
let rhs_238 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_200) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_201 = args;
match opcode {
Opcode::Imul => {
if rhs_238 == 4294967295 {
if rhs_237 == -1 {
if rhs_194 == 8 {
match pos.func.dfg.value_def(arg_162[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_202 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_202[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_203 = arg;
let rhs_242 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_203) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_204 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_204[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_205 = arg;
let rhs_243 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_205) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_206 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_206[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_207 = arg;
let rhs_244 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_207) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_208 = arg;
let rhs_245 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_208) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_209 = arg;
let rhs_246 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_209) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_210 = args;
match opcode {
Opcode::Imul => {
if rhs_246 == 4294967295 {
if rhs_245 == -1 {
if rhs_244 == 1 {
match pos.func.dfg.value_def(arg_206[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_211 = arg;
let rhs_250 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_211) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_212 = arg;
let rhs_251 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_212) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_213 = args;
match opcode {
Opcode::Imul => {
if rhs_251 == 4294967295 {
if rhs_250 == -1 {
if rhs_243 == 2 {
match pos.func.dfg.value_def(arg_204[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_214 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_214[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_215 = arg;
let rhs_255 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_215) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_216 = arg;
let rhs_256 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_216) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_217 = arg;
let rhs_257 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_217) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_218 = args;
match opcode {
Opcode::Imul => {
if rhs_257 == 4294967295 {
if rhs_256 == -1 {
if rhs_255 == 1 {
match pos.func.dfg.value_def(arg_214[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_219 = arg;
let rhs_261 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_219) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_220 = arg;
let rhs_262 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_220) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_221 = args;
match opcode {
Opcode::Imul => {
if rhs_262 == 4294967295 {
if rhs_261 == -1 {
if rhs_242 == 4 {
match pos.func.dfg.value_def(arg_202[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_222 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_222[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_223 = arg;
let rhs_266 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_223) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_224 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_224[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_225 = arg;
let rhs_267 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_225) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_226 = arg;
let rhs_268 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_226) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_227 = arg;
let rhs_269 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_227) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_228 = args;
match opcode {
Opcode::Imul => {
if rhs_269 == 4294967295 {
if rhs_268 == -1 {
if rhs_267 == 1 {
match pos.func.dfg.value_def(arg_224[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_229 = arg;
let rhs_273 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_229) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_230 = arg;
let rhs_274 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_230) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_231 = args;
match opcode {
Opcode::Imul => {
if rhs_274 == 4294967295 {
if rhs_273 == -1 {
if rhs_266 == 2 {
match pos.func.dfg.value_def(arg_222[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_232 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_232[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_233 = arg;
let rhs_278 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_233) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_234 = arg;
let rhs_279 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_234) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_235 = arg;
let rhs_280 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_235) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_236 = args;
match opcode {
Opcode::Imul => {
if rhs_280 == 4294967295 {
if rhs_279 == -1 {
if rhs_278 == 1 {
match pos.func.dfg.value_def(arg_232[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_237 = arg;
let rhs_284 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_237) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_238 = arg;
let rhs_285 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_238) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_239 = args;
match opcode {
Opcode::Imul => {
if rhs_285 == 4294967295 {
if rhs_284 == -1 {
if rhs_193 == 16 {
match pos.func.dfg.value_def(arg_160[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_240 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_240[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_241 = arg;
let rhs_289 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_241) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_242 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_242[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_243 = arg;
let rhs_290 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_243) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_244 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_244[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_245 = arg;
let rhs_291 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_245) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_246 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_246[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_247 = arg;
let rhs_292 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_247) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_248 = arg;
let rhs_293 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_248) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_249 = arg;
let rhs_294 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_249) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_250 = args;
match opcode {
Opcode::Imul => {
if rhs_294 == 4294967295 {
if rhs_293 == -1 {
if rhs_292 == 1 {
match pos.func.dfg.value_def(arg_246[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_251 = arg;
let rhs_298 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_251) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_252 = arg;
let rhs_299 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_252) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_253 = args;
match opcode {
Opcode::Imul => {
if rhs_299 == 4294967295 {
if rhs_298 == -1 {
if rhs_291 == 2 {
match pos.func.dfg.value_def(arg_244[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_254 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_254[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_255 = arg;
let rhs_303 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_255) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_256 = arg;
let rhs_304 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_256) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_257 = arg;
let rhs_305 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_257) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_258 = args;
match opcode {
Opcode::Imul => {
if rhs_305 == 4294967295 {
if rhs_304 == -1 {
if rhs_303 == 1 {
match pos.func.dfg.value_def(arg_254[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_259 = arg;
let rhs_309 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_259) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_260 = arg;
let rhs_310 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_260) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_261 = args;
match opcode {
Opcode::Imul => {
if rhs_310 == 4294967295 {
if rhs_309 == -1 {
if rhs_290 == 4 {
match pos.func.dfg.value_def(arg_242[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_262 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_262[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_263 = arg;
let rhs_314 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_263) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_264 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_264[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_265 = arg;
let rhs_315 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_265) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_266 = arg;
let rhs_316 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_266) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_267 = arg;
let rhs_317 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_267) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_268 = args;
match opcode {
Opcode::Imul => {
if rhs_317 == 4294967295 {
if rhs_316 == -1 {
if rhs_315 == 1 {
match pos.func.dfg.value_def(arg_264[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_269 = arg;
let rhs_321 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_269) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_270 = arg;
let rhs_322 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_270) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_271 = args;
match opcode {
Opcode::Imul => {
if rhs_322 == 4294967295 {
if rhs_321 == -1 {
if rhs_314 == 2 {
match pos.func.dfg.value_def(arg_262[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_272 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_272[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_273 = arg;
let rhs_326 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_273) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_274 = arg;
let rhs_327 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_274) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_275 = arg;
let rhs_328 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_275) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_276 = args;
match opcode {
Opcode::Imul => {
if rhs_328 == 4294967295 {
if rhs_327 == -1 {
if rhs_326 == 1 {
match pos.func.dfg.value_def(arg_272[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_277 = arg;
let rhs_332 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_277) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_278 = arg;
let rhs_333 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_278) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_279 = args;
match opcode {
Opcode::Imul => {
if rhs_333 == 4294967295 {
if rhs_332 == -1 {
if rhs_289 == 8 {
match pos.func.dfg.value_def(arg_240[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_280 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_280[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_281 = arg;
let rhs_337 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_281) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_282 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_282[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_283 = arg;
let rhs_338 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_283) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_284 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_284[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_285 = arg;
let rhs_339 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_285) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_286 = arg;
let rhs_340 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_286) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_287 = arg;
let rhs_341 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_287) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_288 = args;
match opcode {
Opcode::Imul => {
if rhs_341 == 4294967295 {
if rhs_340 == -1 {
if rhs_339 == 1 {
match pos.func.dfg.value_def(arg_284[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_289 = arg;
let rhs_345 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_289) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_290 = arg;
let rhs_346 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_290) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_291 = args;
match opcode {
Opcode::Imul => {
if rhs_346 == 4294967295 {
if rhs_345 == -1 {
if rhs_338 == 2 {
match pos.func.dfg.value_def(arg_282[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_292 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_292[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_293 = arg;
let rhs_350 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_293) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_294 = arg;
let rhs_351 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_294) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_295 = arg;
let rhs_352 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_295) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_296 = args;
match opcode {
Opcode::Imul => {
if rhs_352 == 4294967295 {
if rhs_351 == -1 {
if rhs_350 == 1 {
match pos.func.dfg.value_def(arg_292[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_297 = arg;
let rhs_356 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_297) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_298 = arg;
let rhs_357 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_298) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_299 = args;
match opcode {
Opcode::Imul => {
if rhs_357 == 4294967295 {
if rhs_356 == -1 {
if rhs_337 == 4 {
match pos.func.dfg.value_def(arg_280[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_300 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_300[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_301 = arg;
let rhs_361 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_301) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_302 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_302[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_303 = arg;
let rhs_362 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_303) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_304 = arg;
let rhs_363 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_304) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_305 = arg;
let rhs_364 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_305) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_306 = args;
match opcode {
Opcode::Imul => {
if rhs_364 == 4294967295 {
if rhs_363 == -1 {
if rhs_362 == 1 {
match pos.func.dfg.value_def(arg_302[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_307 = arg;
let rhs_368 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_307) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_308 = arg;
let rhs_369 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_308) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_309 = args;
match opcode {
Opcode::Imul => {
if rhs_369 == 4294967295 {
if rhs_368 == -1 {
if rhs_361 == 2 {
match pos.func.dfg.value_def(arg_300[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_310 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_310[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_311 = arg;
let rhs_373 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_311) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_312 = arg;
let rhs_374 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_312) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_313 = arg;
let rhs_375 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_313) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_314 = args;
match opcode {
Opcode::Imul => {
if rhs_375 == 4294967295 {
if rhs_374 == -1 {
if rhs_373 == 1 {
match pos.func.dfg.value_def(arg_310[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_315 = arg;
let rhs_379 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_315) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_316 = arg;
let rhs_380 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_316) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_317 = args;
match opcode {
Opcode::Imul => {
if rhs_380 == 4294967295 {
if rhs_379 == -1 {
if arg_291[1] != arg_253[0] && arg_291[1] != arg_261[0] && arg_291[1] == arg_40[1] && arg_291[1] != arg_159[0] && arg_291[1] != arg_193[0] && arg_291[1] != arg_258[0] && arg_291[1] != arg_141[0] && arg_291[1] != arg_110[0] && arg_291[1] != arg_288[0] && arg_291[1] == arg_100[1] && arg_291[1] != arg_118[0] && arg_291[1] == arg_103[1] && arg_291[1] == arg_81[1] && arg_291[1] != arg_201[0] && arg_291[1] == arg_218[1] && arg_291[1] == arg_180[1] && arg_291[1] != arg_183[0] && arg_291[1] != arg_213[0] && arg_291[1] != arg_151[0] && arg_291[1] == arg_253[1] && arg_291[1] == arg_201[1] && arg_291[1] == arg_138[1] && arg_291[1] != arg_156[0] && arg_291[1] == arg_250[1] && arg_291[1] == arg_268[1] && arg_291[1] != arg_130[0] && arg_291[1] == arg_130[1] && arg_291[1] != arg_309[0] && arg_291[1] == arg_236[1] && arg_291[1] == arg_317[1] && arg_291[1] == arg_92[1] && arg_291[1] != arg_60[0] && arg_291[1] == arg_110[1] && arg_291[1] == arg_288[1] && arg_291[1] != arg_228[0] && arg_291[1] != arg_210[0] && arg_291[1] != arg_81[0] && arg_291[1] != arg_190[0] && arg_291[1] != arg_231[0] && arg_291[1] != arg_218[0] && arg_291[1] == arg_314[1] && arg_291[1] == arg_55[1] && arg_291[1] == arg_276[1] && arg_291[1] == arg_14[1] && arg_291[1] == arg_175[1] && arg_291[1] == arg_306[1] && arg_291[1] == arg_22[1] && arg_291[1] == arg_198[1] && arg_291[1] == arg_221[1] && arg_291[1] == arg_141[1] && arg_291[1] == arg_159[1] && arg_291[1] != arg_40[0] && arg_291[1] == arg_261[1] && arg_291[1] != arg_299[0] && arg_291[1] != arg_35[0] && arg_291[1] != arg_317[0] && arg_291[1] != arg_180[0] && arg_291[1] == arg_118[1] && arg_291[1] != arg_221[0] && arg_291[1] == arg_279[1] && arg_291[1] != arg_92[0] && arg_291[1] != arg_63[0] && arg_291[1] != arg_43[0] && arg_291[1] != arg_306[0] && arg_291[1] != arg_52[0] && arg_291[1] != arg_133[0] && arg_291[1] != arg_239[0] && arg_291[1] == arg_35[1] && arg_291[1] == arg_228[1] && arg_291[1] == arg_95[1] && arg_291[1] != arg_172[0] && arg_291[1] == arg_113[1] && arg_291[1] == arg_193[1] && arg_291[1] == arg_52[1] && arg_291[1] != arg_55[0] && arg_291[1] == arg_183[1] && arg_291[1] != arg_236[0] && arg_291[1] != arg_148[0] && arg_291[1] == arg_296[1] && arg_291[1] == arg_73[1] && arg_291[1] == arg_25[1] && arg_291[1] == arg_63[1] && arg_291[1] != arg_17[0] && arg_291[1] != arg_279[0] && arg_291[1] != arg_103[0] && arg_291[1] != arg_113[0] && arg_291[1] == arg_151[1] && arg_291[1] != arg_271[0] && arg_291[1] != arg_100[0] && arg_291[1] == arg_172[1] && arg_291[1] == arg_239[1] && arg_291[1] != arg_32[0] && arg_291[1] == arg_43[1] && arg_291[1] == arg_309[1] && arg_291[1] != arg_78[0] && arg_291[1] == arg_190[1] && arg_291[1] != arg_198[0] && arg_291[1] == arg_258[1] && arg_291[1] != arg_296[0] && arg_291[1] == arg_60[1] && arg_291[1] == arg_78[1] && arg_291[1] == arg_121[1] && arg_291[1] != arg_250[0] && arg_291[1] != arg_314[0] && arg_291[1] == arg_148[1] && arg_291[1] == arg_156[1] && arg_291[1] == arg_70[1] && arg_291[1] == arg_231[1] && arg_291[1] == arg_32[1] && arg_291[1] == arg_210[1] && arg_291[1] != arg_22[0] && arg_291[1] != arg_276[0] && arg_291[1] != arg_95[0] && arg_291[1] != arg_73[0] && arg_291[1] != arg_70[0] && arg_291[1] != arg_121[0] && arg_291[1] != arg_268[0] && arg_291[1] == arg_299[1] && arg_291[1] != arg_138[0] && arg_291[1] != arg_175[0] && arg_291[1] == arg_17[1] && arg_291[1] == arg_213[1] && arg_291[1] != arg_14[0] && arg_291[1] != arg_25[0] && arg_291[1] == arg_133[1] && arg_291[1] != arg_291[0] && arg_291[1] == arg_271[1] && arg_253[0] == arg_261[0] && arg_253[0] != arg_40[1] && arg_253[0] == arg_159[0] && arg_253[0] == arg_193[0] && arg_253[0] == arg_258[0] && arg_253[0] == arg_141[0] && arg_253[0] == arg_110[0] && arg_253[0] == arg_288[0] && arg_253[0] != arg_100[1] && arg_253[0] == arg_118[0] && arg_253[0] != arg_103[1] && arg_253[0] != arg_81[1] && arg_253[0] == arg_201[0] && arg_253[0] != arg_218[1] && arg_253[0] != arg_180[1] && arg_253[0] == arg_183[0] && arg_253[0] == arg_213[0] && arg_253[0] == arg_151[0] && arg_253[0] != arg_253[1] && arg_253[0] != arg_201[1] && arg_253[0] != arg_138[1] && arg_253[0] == arg_156[0] && arg_253[0] != arg_250[1] && arg_253[0] != arg_268[1] && arg_253[0] == arg_130[0] && arg_253[0] != arg_130[1] && arg_253[0] == arg_309[0] && arg_253[0] != arg_236[1] && arg_253[0] != arg_317[1] && arg_253[0] != arg_92[1] && arg_253[0] == arg_60[0] && arg_253[0] != arg_110[1] && arg_253[0] != arg_288[1] && arg_253[0] == arg_228[0] && arg_253[0] == arg_210[0] && arg_253[0] == arg_81[0] && arg_253[0] == arg_190[0] && arg_253[0] == arg_231[0] && arg_253[0] == arg_218[0] && arg_253[0] != arg_314[1] && arg_253[0] != arg_55[1] && arg_253[0] != arg_276[1] && arg_253[0] != arg_14[1] && arg_253[0] != arg_175[1] && arg_253[0] != arg_306[1] && arg_253[0] != arg_22[1] && arg_253[0] != arg_198[1] && arg_253[0] != arg_221[1] && arg_253[0] != arg_141[1] && arg_253[0] != arg_159[1] && arg_253[0] == arg_40[0] && arg_253[0] != arg_261[1] && arg_253[0] == arg_299[0] && arg_253[0] == arg_35[0] && arg_253[0] == arg_317[0] && arg_253[0] == arg_180[0] && arg_253[0] != arg_118[1] && arg_253[0] == arg_221[0] && arg_253[0] != arg_279[1] && arg_253[0] == arg_92[0] && arg_253[0] == arg_63[0] && arg_253[0] == arg_43[0] && arg_253[0] == arg_306[0] && arg_253[0] == arg_52[0] && arg_253[0] == arg_133[0] && arg_253[0] == arg_239[0] && arg_253[0] != arg_35[1] && arg_253[0] != arg_228[1] && arg_253[0] != arg_95[1] && arg_253[0] == arg_172[0] && arg_253[0] != arg_113[1] && arg_253[0] != arg_193[1] && arg_253[0] != arg_52[1] && arg_253[0] == arg_55[0] && arg_253[0] != arg_183[1] && arg_253[0] == arg_236[0] && arg_253[0] == arg_148[0] && arg_253[0] != arg_296[1] && arg_253[0] != arg_73[1] && arg_253[0] != arg_25[1] && arg_253[0] != arg_63[1] && arg_253[0] == arg_17[0] && arg_253[0] == arg_279[0] && arg_253[0] == arg_103[0] && arg_253[0] == arg_113[0] && arg_253[0] != arg_151[1] && arg_253[0] == arg_271[0] && arg_253[0] == arg_100[0] && arg_253[0] != arg_172[1] && arg_253[0] != arg_239[1] && arg_253[0] == arg_32[0] && arg_253[0] != arg_43[1] && arg_253[0] != arg_309[1] && arg_253[0] == arg_78[0] && arg_253[0] != arg_190[1] && arg_253[0] == arg_198[0] && arg_253[0] != arg_258[1] && arg_253[0] == arg_296[0] && arg_253[0] != arg_60[1] && arg_253[0] != arg_78[1] && arg_253[0] != arg_121[1] && arg_253[0] == arg_250[0] && arg_253[0] == arg_314[0] && arg_253[0] != arg_148[1] && arg_253[0] != arg_156[1] && arg_253[0] != arg_70[1] && arg_253[0] != arg_231[1] && arg_253[0] != arg_32[1] && arg_253[0] != arg_210[1] && arg_253[0] == arg_22[0] && arg_253[0] == arg_276[0] && arg_253[0] == arg_95[0] && arg_253[0] == arg_73[0] && arg_253[0] == arg_70[0] && arg_253[0] == arg_121[0] && arg_253[0] == arg_268[0] && arg_253[0] != arg_299[1] && arg_253[0] == arg_138[0] && arg_253[0] == arg_175[0] && arg_253[0] != arg_17[1] && arg_253[0] != arg_213[1] && arg_253[0] == arg_14[0] && arg_253[0] == arg_25[0] && arg_253[0] != arg_133[1] && arg_253[0] == arg_291[0] && arg_253[0] != arg_271[1] && arg_261[0] != arg_40[1] && arg_261[0] == arg_159[0] && arg_261[0] == arg_193[0] && arg_261[0] == arg_258[0] && arg_261[0] == arg_141[0] && arg_261[0] == arg_110[0] && arg_261[0] == arg_288[0] && arg_261[0] != arg_100[1] && arg_261[0] == arg_118[0] && arg_261[0] != arg_103[1] && arg_261[0] != arg_81[1] && arg_261[0] == arg_201[0] && arg_261[0] != arg_218[1] && arg_261[0] != arg_180[1] && arg_261[0] == arg_183[0] && arg_261[0] == arg_213[0] && arg_261[0] == arg_151[0] && arg_261[0] != arg_253[1] && arg_261[0] != arg_201[1] && arg_261[0] != arg_138[1] && arg_261[0] == arg_156[0] && arg_261[0] != arg_250[1] && arg_261[0] != arg_268[1] && arg_261[0] == arg_130[0] && arg_261[0] != arg_130[1] && arg_261[0] == arg_309[0] && arg_261[0] != arg_236[1] && arg_261[0] != arg_317[1] && arg_261[0] != arg_92[1] && arg_261[0] == arg_60[0] && arg_261[0] != arg_110[1] && arg_261[0] != arg_288[1] && arg_261[0] == arg_228[0] && arg_261[0] == arg_210[0] && arg_261[0] == arg_81[0] && arg_261[0] == arg_190[0] && arg_261[0] == arg_231[0] && arg_261[0] == arg_218[0] && arg_261[0] != arg_314[1] && arg_261[0] != arg_55[1] && arg_261[0] != arg_276[1] && arg_261[0] != arg_14[1] && arg_261[0] != arg_175[1] && arg_261[0] != arg_306[1] && arg_261[0] != arg_22[1] && arg_261[0] != arg_198[1] && arg_261[0] != arg_221[1] && arg_261[0] != arg_141[1] && arg_261[0] != arg_159[1] && arg_261[0] == arg_40[0] && arg_261[0] != arg_261[1] && arg_261[0] == arg_299[0] && arg_261[0] == arg_35[0] && arg_261[0] == arg_317[0] && arg_261[0] == arg_180[0] && arg_261[0] != arg_118[1] && arg_261[0] == arg_221[0] && arg_261[0] != arg_279[1] && arg_261[0] == arg_92[0] && arg_261[0] == arg_63[0] && arg_261[0] == arg_43[0] && arg_261[0] == arg_306[0] && arg_261[0] == arg_52[0] && arg_261[0] == arg_133[0] && arg_261[0] == arg_239[0] && arg_261[0] != arg_35[1] && arg_261[0] != arg_228[1] && arg_261[0] != arg_95[1] && arg_261[0] == arg_172[0] && arg_261[0] != arg_113[1] && arg_261[0] != arg_193[1] && arg_261[0] != arg_52[1] && arg_261[0] == arg_55[0] && arg_261[0] != arg_183[1] && arg_261[0] == arg_236[0] && arg_261[0] == arg_148[0] && arg_261[0] != arg_296[1] && arg_261[0] != arg_73[1] && arg_261[0] != arg_25[1] && arg_261[0] != arg_63[1] && arg_261[0] == arg_17[0] && arg_261[0] == arg_279[0] && arg_261[0] == arg_103[0] && arg_261[0] == arg_113[0] && arg_261[0] != arg_151[1] && arg_261[0] == arg_271[0] && arg_261[0] == arg_100[0] && arg_261[0] != arg_172[1] && arg_261[0] != arg_239[1] && arg_261[0] == arg_32[0] && arg_261[0] != arg_43[1] && arg_261[0] != arg_309[1] && arg_261[0] == arg_78[0] && arg_261[0] != arg_190[1] && arg_261[0] == arg_198[0] && arg_261[0] != arg_258[1] && arg_261[0] == arg_296[0] && arg_261[0] != arg_60[1] && arg_261[0] != arg_78[1] && arg_261[0] != arg_121[1] && arg_261[0] == arg_250[0] && arg_261[0] == arg_314[0] && arg_261[0] != arg_148[1] && arg_261[0] != arg_156[1] && arg_261[0] != arg_70[1] && arg_261[0] != arg_231[1] && arg_261[0] != arg_32[1] && arg_261[0] != arg_210[1] && arg_261[0] == arg_22[0] && arg_261[0] == arg_276[0] && arg_261[0] == arg_95[0] && arg_261[0] == arg_73[0] && arg_261[0] == arg_70[0] && arg_261[0] == arg_121[0] && arg_261[0] == arg_268[0] && arg_261[0] != arg_299[1] && arg_261[0] == arg_138[0] && arg_261[0] == arg_175[0] && arg_261[0] != arg_17[1] && arg_261[0] != arg_213[1] && arg_261[0] == arg_14[0] && arg_261[0] == arg_25[0] && arg_261[0] != arg_133[1] && arg_261[0] == arg_291[0] && arg_261[0] != arg_271[1] && arg_40[1] != arg_159[0] && arg_40[1] != arg_193[0] && arg_40[1] != arg_258[0] && arg_40[1] != arg_141[0] && arg_40[1] != arg_110[0] && arg_40[1] != arg_288[0] && arg_40[1] == arg_100[1] && arg_40[1] != arg_118[0] && arg_40[1] == arg_103[1] && arg_40[1] == arg_81[1] && arg_40[1] != arg_201[0] && arg_40[1] == arg_218[1] && arg_40[1] == arg_180[1] && arg_40[1] != arg_183[0] && arg_40[1] != arg_213[0] && arg_40[1] != arg_151[0] && arg_40[1] == arg_253[1] && arg_40[1] == arg_201[1] && arg_40[1] == arg_138[1] && arg_40[1] != arg_156[0] && arg_40[1] == arg_250[1] && arg_40[1] == arg_268[1] && arg_40[1] != arg_130[0] && arg_40[1] == arg_130[1] && arg_40[1] != arg_309[0] && arg_40[1] == arg_236[1] && arg_40[1] == arg_317[1] && arg_40[1] == arg_92[1] && arg_40[1] != arg_60[0] && arg_40[1] == arg_110[1] && arg_40[1] == arg_288[1] && arg_40[1] != arg_228[0] && arg_40[1] != arg_210[0] && arg_40[1] != arg_81[0] && arg_40[1] != arg_190[0] && arg_40[1] != arg_231[0] && arg_40[1] != arg_218[0] && arg_40[1] == arg_314[1] && arg_40[1] == arg_55[1] && arg_40[1] == arg_276[1] && arg_40[1] == arg_14[1] && arg_40[1] == arg_175[1] && arg_40[1] == arg_306[1] && arg_40[1] == arg_22[1] && arg_40[1] == arg_198[1] && arg_40[1] == arg_221[1] && arg_40[1] == arg_141[1] && arg_40[1] == arg_159[1] && arg_40[1] != arg_40[0] && arg_40[1] == arg_261[1] && arg_40[1] != arg_299[0] && arg_40[1] != arg_35[0] && arg_40[1] != arg_317[0] && arg_40[1] != arg_180[0] && arg_40[1] == arg_118[1] && arg_40[1] != arg_221[0] && arg_40[1] == arg_279[1] && arg_40[1] != arg_92[0] && arg_40[1] != arg_63[0] && arg_40[1] != arg_43[0] && arg_40[1] != arg_306[0] && arg_40[1] != arg_52[0] && arg_40[1] != arg_133[0] && arg_40[1] != arg_239[0] && arg_40[1] == arg_35[1] && arg_40[1] == arg_228[1] && arg_40[1] == arg_95[1] && arg_40[1] != arg_172[0] && arg_40[1] == arg_113[1] && arg_40[1] == arg_193[1] && arg_40[1] == arg_52[1] && arg_40[1] != arg_55[0] && arg_40[1] == arg_183[1] && arg_40[1] != arg_236[0] && arg_40[1] != arg_148[0] && arg_40[1] == arg_296[1] && arg_40[1] == arg_73[1] && arg_40[1] == arg_25[1] && arg_40[1] == arg_63[1] && arg_40[1] != arg_17[0] && arg_40[1] != arg_279[0] && arg_40[1] != arg_103[0] && arg_40[1] != arg_113[0] && arg_40[1] == arg_151[1] && arg_40[1] != arg_271[0] && arg_40[1] != arg_100[0] && arg_40[1] == arg_172[1] && arg_40[1] == arg_239[1] && arg_40[1] != arg_32[0] && arg_40[1] == arg_43[1] && arg_40[1] == arg_309[1] && arg_40[1] != arg_78[0] && arg_40[1] == arg_190[1] && arg_40[1] != arg_198[0] && arg_40[1] == arg_258[1] && arg_40[1] != arg_296[0] && arg_40[1] == arg_60[1] && arg_40[1] == arg_78[1] && arg_40[1] == arg_121[1] && arg_40[1] != arg_250[0] && arg_40[1] != arg_314[0] && arg_40[1] == arg_148[1] && arg_40[1] == arg_156[1] && arg_40[1] == arg_70[1] && arg_40[1] == arg_231[1] && arg_40[1] == arg_32[1] && arg_40[1] == arg_210[1] && arg_40[1] != arg_22[0] && arg_40[1] != arg_276[0] && arg_40[1] != arg_95[0] && arg_40[1] != arg_73[0] && arg_40[1] != arg_70[0] && arg_40[1] != arg_121[0] && arg_40[1] != arg_268[0] && arg_40[1] == arg_299[1] && arg_40[1] != arg_138[0] && arg_40[1] != arg_175[0] && arg_40[1] == arg_17[1] && arg_40[1] == arg_213[1] && arg_40[1] != arg_14[0] && arg_40[1] != arg_25[0] && arg_40[1] == arg_133[1] && arg_40[1] != arg_291[0] && arg_40[1] == arg_271[1] && arg_159[0] == arg_193[0] && arg_159[0] == arg_258[0] && arg_159[0] == arg_141[0] && arg_159[0] == arg_110[0] && arg_159[0] == arg_288[0] && arg_159[0] != arg_100[1] && arg_159[0] == arg_118[0] && arg_159[0] != arg_103[1] && arg_159[0] != arg_81[1] && arg_159[0] == arg_201[0] && arg_159[0] != arg_218[1] && arg_159[0] != arg_180[1] && arg_159[0] == arg_183[0] && arg_159[0] == arg_213[0] && arg_159[0] == arg_151[0] && arg_159[0] != arg_253[1] && arg_159[0] != arg_201[1] && arg_159[0] != arg_138[1] && arg_159[0] == arg_156[0] && arg_159[0] != arg_250[1] && arg_159[0] != arg_268[1] && arg_159[0] == arg_130[0] && arg_159[0] != arg_130[1] && arg_159[0] == arg_309[0] && arg_159[0] != arg_236[1] && arg_159[0] != arg_317[1] && arg_159[0] != arg_92[1] && arg_159[0] == arg_60[0] && arg_159[0] != arg_110[1] && arg_159[0] != arg_288[1] && arg_159[0] == arg_228[0] && arg_159[0] == arg_210[0] && arg_159[0] == arg_81[0] && arg_159[0] == arg_190[0] && arg_159[0] == arg_231[0] && arg_159[0] == arg_218[0] && arg_159[0] != arg_314[1] && arg_159[0] != arg_55[1] && arg_159[0] != arg_276[1] && arg_159[0] != arg_14[1] && arg_159[0] != arg_175[1] && arg_159[0] != arg_306[1] && arg_159[0] != arg_22[1] && arg_159[0] != arg_198[1] && arg_159[0] != arg_221[1] && arg_159[0] != arg_141[1] && arg_159[0] != arg_159[1] && arg_159[0] == arg_40[0] && arg_159[0] != arg_261[1] && arg_159[0] == arg_299[0] && arg_159[0] == arg_35[0] && arg_159[0] == arg_317[0] && arg_159[0] == arg_180[0] && arg_159[0] != arg_118[1] && arg_159[0] == arg_221[0] && arg_159[0] != arg_279[1] && arg_159[0] == arg_92[0] && arg_159[0] == arg_63[0] && arg_159[0] == arg_43[0] && arg_159[0] == arg_306[0] && arg_159[0] == arg_52[0] && arg_159[0] == arg_133[0] && arg_159[0] == arg_239[0] && arg_159[0] != arg_35[1] && arg_159[0] != arg_228[1] && arg_159[0] != arg_95[1] && arg_159[0] == arg_172[0] && arg_159[0] != arg_113[1] && arg_159[0] != arg_193[1] && arg_159[0] != arg_52[1] && arg_159[0] == arg_55[0] && arg_159[0] != arg_183[1] && arg_159[0] == arg_236[0] && arg_159[0] == arg_148[0] && arg_159[0] != arg_296[1] && arg_159[0] != arg_73[1] && arg_159[0] != arg_25[1] && arg_159[0] != arg_63[1] && arg_159[0] == arg_17[0] && arg_159[0] == arg_279[0] && arg_159[0] == arg_103[0] && arg_159[0] == arg_113[0] && arg_159[0] != arg_151[1] && arg_159[0] == arg_271[0] && arg_159[0] == arg_100[0] && arg_159[0] != arg_172[1] && arg_159[0] != arg_239[1] && arg_159[0] == arg_32[0] && arg_159[0] != arg_43[1] && arg_159[0] != arg_309[1] && arg_159[0] == arg_78[0] && arg_159[0] != arg_190[1] && arg_159[0] == arg_198[0] && arg_159[0] != arg_258[1] && arg_159[0] == arg_296[0] && arg_159[0] != arg_60[1] && arg_159[0] != arg_78[1] && arg_159[0] != arg_121[1] && arg_159[0] == arg_250[0] && arg_159[0] == arg_314[0] && arg_159[0] != arg_148[1] && arg_159[0] != arg_156[1] && arg_159[0] != arg_70[1] && arg_159[0] != arg_231[1] && arg_159[0] != arg_32[1] && arg_159[0] != arg_210[1] && arg_159[0] == arg_22[0] && arg_159[0] == arg_276[0] && arg_159[0] == arg_95[0] && arg_159[0] == arg_73[0] && arg_159[0] == arg_70[0] && arg_159[0] == arg_121[0] && arg_159[0] == arg_268[0] && arg_159[0] != arg_299[1] && arg_159[0] == arg_138[0] && arg_159[0] == arg_175[0] && arg_159[0] != arg_17[1] && arg_159[0] != arg_213[1] && arg_159[0] == arg_14[0] && arg_159[0] == arg_25[0] && arg_159[0] != arg_133[1] && arg_159[0] == arg_291[0] && arg_159[0] != arg_271[1] && arg_193[0] == arg_258[0] && arg_193[0] == arg_141[0] && arg_193[0] == arg_110[0] && arg_193[0] == arg_288[0] && arg_193[0] != arg_100[1] && arg_193[0] == arg_118[0] && arg_193[0] != arg_103[1] && arg_193[0] != arg_81[1] && arg_193[0] == arg_201[0] && arg_193[0] != arg_218[1] && arg_193[0] != arg_180[1] && arg_193[0] == arg_183[0] && arg_193[0] == arg_213[0] && arg_193[0] == arg_151[0] && arg_193[0] != arg_253[1] && arg_193[0] != arg_201[1] && arg_193[0] != arg_138[1] && arg_193[0] == arg_156[0] && arg_193[0] != arg_250[1] && arg_193[0] != arg_268[1] && arg_193[0] == arg_130[0] && arg_193[0] != arg_130[1] && arg_193[0] == arg_309[0] && arg_193[0] != arg_236[1] && arg_193[0] != arg_317[1] && arg_193[0] != arg_92[1] && arg_193[0] == arg_60[0] && arg_193[0] != arg_110[1] && arg_193[0] != arg_288[1] && arg_193[0] == arg_228[0] && arg_193[0] == arg_210[0] && arg_193[0] == arg_81[0] && arg_193[0] == arg_190[0] && arg_193[0] == arg_231[0] && arg_193[0] == arg_218[0] && arg_193[0] != arg_314[1] && arg_193[0] != arg_55[1] && arg_193[0] != arg_276[1] && arg_193[0] != arg_14[1] && arg_193[0] != arg_175[1] && arg_193[0] != arg_306[1] && arg_193[0] != arg_22[1] && arg_193[0] != arg_198[1] && arg_193[0] != arg_221[1] && arg_193[0] != arg_141[1] && arg_193[0] != arg_159[1] && arg_193[0] == arg_40[0] && arg_193[0] != arg_261[1] && arg_193[0] == arg_299[0] && arg_193[0] == arg_35[0] && arg_193[0] == arg_317[0] && arg_193[0] == arg_180[0] && arg_193[0] != arg_118[1] && arg_193[0] == arg_221[0] && arg_193[0] != arg_279[1] && arg_193[0] == arg_92[0] && arg_193[0] == arg_63[0] && arg_193[0] == arg_43[0] && arg_193[0] == arg_306[0] && arg_193[0] == arg_52[0] && arg_193[0] == arg_133[0] && arg_193[0] == arg_239[0] && arg_193[0] != arg_35[1] && arg_193[0] != arg_228[1] && arg_193[0] != arg_95[1] && arg_193[0] == arg_172[0] && arg_193[0] != arg_113[1] && arg_193[0] != arg_193[1] && arg_193[0] != arg_52[1] && arg_193[0] == arg_55[0] && arg_193[0] != arg_183[1] && arg_193[0] == arg_236[0] && arg_193[0] == arg_148[0] && arg_193[0] != arg_296[1] && arg_193[0] != arg_73[1] && arg_193[0] != arg_25[1] && arg_193[0] != arg_63[1] && arg_193[0] == arg_17[0] && arg_193[0] == arg_279[0] && arg_193[0] == arg_103[0] && arg_193[0] == arg_113[0] && arg_193[0] != arg_151[1] && arg_193[0] == arg_271[0] && arg_193[0] == arg_100[0] && arg_193[0] != arg_172[1] && arg_193[0] != arg_239[1] && arg_193[0] == arg_32[0] && arg_193[0] != arg_43[1] && arg_193[0] != arg_309[1] && arg_193[0] == arg_78[0] && arg_193[0] != arg_190[1] && arg_193[0] == arg_198[0] && arg_193[0] != arg_258[1] && arg_193[0] == arg_296[0] && arg_193[0] != arg_60[1] && arg_193[0] != arg_78[1] && arg_193[0] != arg_121[1] && arg_193[0] == arg_250[0] && arg_193[0] == arg_314[0] && arg_193[0] != arg_148[1] && arg_193[0] != arg_156[1] && arg_193[0] != arg_70[1] && arg_193[0] != arg_231[1] && arg_193[0] != arg_32[1] && arg_193[0] != arg_210[1] && arg_193[0] == arg_22[0] && arg_193[0] == arg_276[0] && arg_193[0] == arg_95[0] && arg_193[0] == arg_73[0] && arg_193[0] == arg_70[0] && arg_193[0] == arg_121[0] && arg_193[0] == arg_268[0] && arg_193[0] != arg_299[1] && arg_193[0] == arg_138[0] && arg_193[0] == arg_175[0] && arg_193[0] != arg_17[1] && arg_193[0] != arg_213[1] && arg_193[0] == arg_14[0] && arg_193[0] == arg_25[0] && arg_193[0] != arg_133[1] && arg_193[0] == arg_291[0] && arg_193[0] != arg_271[1] && arg_258[0] == arg_141[0] && arg_258[0] == arg_110[0] && arg_258[0] == arg_288[0] && arg_258[0] != arg_100[1] && arg_258[0] == arg_118[0] && arg_258[0] != arg_103[1] && arg_258[0] != arg_81[1] && arg_258[0] == arg_201[0] && arg_258[0] != arg_218[1] && arg_258[0] != arg_180[1] && arg_258[0] == arg_183[0] && arg_258[0] == arg_213[0] && arg_258[0] == arg_151[0] && arg_258[0] != arg_253[1] && arg_258[0] != arg_201[1] && arg_258[0] != arg_138[1] && arg_258[0] == arg_156[0] && arg_258[0] != arg_250[1] && arg_258[0] != arg_268[1] && arg_258[0] == arg_130[0] && arg_258[0] != arg_130[1] && arg_258[0] == arg_309[0] && arg_258[0] != arg_236[1] && arg_258[0] != arg_317[1] && arg_258[0] != arg_92[1] && arg_258[0] == arg_60[0] && arg_258[0] != arg_110[1] && arg_258[0] != arg_288[1] && arg_258[0] == arg_228[0] && arg_258[0] == arg_210[0] && arg_258[0] == arg_81[0] && arg_258[0] == arg_190[0] && arg_258[0] == arg_231[0] && arg_258[0] == arg_218[0] && arg_258[0] != arg_314[1] && arg_258[0] != arg_55[1] && arg_258[0] != arg_276[1] && arg_258[0] != arg_14[1] && arg_258[0] != arg_175[1] && arg_258[0] != arg_306[1] && arg_258[0] != arg_22[1] && arg_258[0] != arg_198[1] && arg_258[0] != arg_221[1] && arg_258[0] != arg_141[1] && arg_258[0] != arg_159[1] && arg_258[0] == arg_40[0] && arg_258[0] != arg_261[1] && arg_258[0] == arg_299[0] && arg_258[0] == arg_35[0] && arg_258[0] == arg_317[0] && arg_258[0] == arg_180[0] && arg_258[0] != arg_118[1] && arg_258[0] == arg_221[0] && arg_258[0] != arg_279[1] && arg_258[0] == arg_92[0] && arg_258[0] == arg_63[0] && arg_258[0] == arg_43[0] && arg_258[0] == arg_306[0] && arg_258[0] == arg_52[0] && arg_258[0] == arg_133[0] && arg_258[0] == arg_239[0] && arg_258[0] != arg_35[1] && arg_258[0] != arg_228[1] && arg_258[0] != arg_95[1] && arg_258[0] == arg_172[0] && arg_258[0] != arg_113[1] && arg_258[0] != arg_193[1] && arg_258[0] != arg_52[1] && arg_258[0] == arg_55[0] && arg_258[0] != arg_183[1] && arg_258[0] == arg_236[0] && arg_258[0] == arg_148[0] && arg_258[0] != arg_296[1] && arg_258[0] != arg_73[1] && arg_258[0] != arg_25[1] && arg_258[0] != arg_63[1] && arg_258[0] == arg_17[0] && arg_258[0] == arg_279[0] && arg_258[0] == arg_103[0] && arg_258[0] == arg_113[0] && arg_258[0] != arg_151[1] && arg_258[0] == arg_271[0] && arg_258[0] == arg_100[0] && arg_258[0] != arg_172[1] && arg_258[0] != arg_239[1] && arg_258[0] == arg_32[0] && arg_258[0] != arg_43[1] && arg_258[0] != arg_309[1] && arg_258[0] == arg_78[0] && arg_258[0] != arg_190[1] && arg_258[0] == arg_198[0] && arg_258[0] != arg_258[1] && arg_258[0] == arg_296[0] && arg_258[0] != arg_60[1] && arg_258[0] != arg_78[1] && arg_258[0] != arg_121[1] && arg_258[0] == arg_250[0] && arg_258[0] == arg_314[0] && arg_258[0] != arg_148[1] && arg_258[0] != arg_156[1] && arg_258[0] != arg_70[1] && arg_258[0] != arg_231[1] && arg_258[0] != arg_32[1] && arg_258[0] != arg_210[1] && arg_258[0] == arg_22[0] && arg_258[0] == arg_276[0] && arg_258[0] == arg_95[0] && arg_258[0] == arg_73[0] && arg_258[0] == arg_70[0] && arg_258[0] == arg_121[0] && arg_258[0] == arg_268[0] && arg_258[0] != arg_299[1] && arg_258[0] == arg_138[0] && arg_258[0] == arg_175[0] && arg_258[0] != arg_17[1] && arg_258[0] != arg_213[1] && arg_258[0] == arg_14[0] && arg_258[0] == arg_25[0] && arg_258[0] != arg_133[1] && arg_258[0] == arg_291[0] && arg_258[0] != arg_271[1] && arg_141[0] == arg_110[0] && arg_141[0] == arg_288[0] && arg_141[0] != arg_100[1] && arg_141[0] == arg_118[0] && arg_141[0] != arg_103[1] && arg_141[0] != arg_81[1] && arg_141[0] == arg_201[0] && arg_141[0] != arg_218[1] && arg_141[0] != arg_180[1] && arg_141[0] == arg_183[0] && arg_141[0] == arg_213[0] && arg_141[0] == arg_151[0] && arg_141[0] != arg_253[1] && arg_141[0] != arg_201[1] && arg_141[0] != arg_138[1] && arg_141[0] == arg_156[0] && arg_141[0] != arg_250[1] && arg_141[0] != arg_268[1] && arg_141[0] == arg_130[0] && arg_141[0] != arg_130[1] && arg_141[0] == arg_309[0] && arg_141[0] != arg_236[1] && arg_141[0] != arg_317[1] && arg_141[0] != arg_92[1] && arg_141[0] == arg_60[0] && arg_141[0] != arg_110[1] && arg_141[0] != arg_288[1] && arg_141[0] == arg_228[0] && arg_141[0] == arg_210[0] && arg_141[0] == arg_81[0] && arg_141[0] == arg_190[0] && arg_141[0] == arg_231[0] && arg_141[0] == arg_218[0] && arg_141[0] != arg_314[1] && arg_141[0] != arg_55[1] && arg_141[0] != arg_276[1] && arg_141[0] != arg_14[1] && arg_141[0] != arg_175[1] && arg_141[0] != arg_306[1] && arg_141[0] != arg_22[1] && arg_141[0] != arg_198[1] && arg_141[0] != arg_221[1] && arg_141[0] != arg_141[1] && arg_141[0] != arg_159[1] && arg_141[0] == arg_40[0] && arg_141[0] != arg_261[1] && arg_141[0] == arg_299[0] && arg_141[0] == arg_35[0] && arg_141[0] == arg_317[0] && arg_141[0] == arg_180[0] && arg_141[0] != arg_118[1] && arg_141[0] == arg_221[0] && arg_141[0] != arg_279[1] && arg_141[0] == arg_92[0] && arg_141[0] == arg_63[0] && arg_141[0] == arg_43[0] && arg_141[0] == arg_306[0] && arg_141[0] == arg_52[0] && arg_141[0] == arg_133[0] && arg_141[0] == arg_239[0] && arg_141[0] != arg_35[1] && arg_141[0] != arg_228[1] && arg_141[0] != arg_95[1] && arg_141[0] == arg_172[0] && arg_141[0] != arg_113[1] && arg_141[0] != arg_193[1] && arg_141[0] != arg_52[1] && arg_141[0] == arg_55[0] && arg_141[0] != arg_183[1] && arg_141[0] == arg_236[0] && arg_141[0] == arg_148[0] && arg_141[0] != arg_296[1] && arg_141[0] != arg_73[1] && arg_141[0] != arg_25[1] && arg_141[0] != arg_63[1] && arg_141[0] == arg_17[0] && arg_141[0] == arg_279[0] && arg_141[0] == arg_103[0] && arg_141[0] == arg_113[0] && arg_141[0] != arg_151[1] && arg_141[0] == arg_271[0] && arg_141[0] == arg_100[0] && arg_141[0] != arg_172[1] && arg_141[0] != arg_239[1] && arg_141[0] == arg_32[0] && arg_141[0] != arg_43[1] && arg_141[0] != arg_309[1] && arg_141[0] == arg_78[0] && arg_141[0] != arg_190[1] && arg_141[0] == arg_198[0] && arg_141[0] != arg_258[1] && arg_141[0] == arg_296[0] && arg_141[0] != arg_60[1] && arg_141[0] != arg_78[1] && arg_141[0] != arg_121[1] && arg_141[0] == arg_250[0] && arg_141[0] == arg_314[0] && arg_141[0] != arg_148[1] && arg_141[0] != arg_156[1] && arg_141[0] != arg_70[1] && arg_141[0] != arg_231[1] && arg_141[0] != arg_32[1] && arg_141[0] != arg_210[1] && arg_141[0] == arg_22[0] && arg_141[0] == arg_276[0] && arg_141[0] == arg_95[0] && arg_141[0] == arg_73[0] && arg_141[0] == arg_70[0] && arg_141[0] == arg_121[0] && arg_141[0] == arg_268[0] && arg_141[0] != arg_299[1] && arg_141[0] == arg_138[0] && arg_141[0] == arg_175[0] && arg_141[0] != arg_17[1] && arg_141[0] != arg_213[1] && arg_141[0] == arg_14[0] && arg_141[0] == arg_25[0] && arg_141[0] != arg_133[1] && arg_141[0] == arg_291[0] && arg_141[0] != arg_271[1] && arg_110[0] == arg_288[0] && arg_110[0] != arg_100[1] && arg_110[0] == arg_118[0] && arg_110[0] != arg_103[1] && arg_110[0] != arg_81[1] && arg_110[0] == arg_201[0] && arg_110[0] != arg_218[1] && arg_110[0] != arg_180[1] && arg_110[0] == arg_183[0] && arg_110[0] == arg_213[0] && arg_110[0] == arg_151[0] && arg_110[0] != arg_253[1] && arg_110[0] != arg_201[1] && arg_110[0] != arg_138[1] && arg_110[0] == arg_156[0] && arg_110[0] != arg_250[1] && arg_110[0] != arg_268[1] && arg_110[0] == arg_130[0] && arg_110[0] != arg_130[1] && arg_110[0] == arg_309[0] && arg_110[0] != arg_236[1] && arg_110[0] != arg_317[1] && arg_110[0] != arg_92[1] && arg_110[0] == arg_60[0] && arg_110[0] != arg_110[1] && arg_110[0] != arg_288[1] && arg_110[0] == arg_228[0] && arg_110[0] == arg_210[0] && arg_110[0] == arg_81[0] && arg_110[0] == arg_190[0] && arg_110[0] == arg_231[0] && arg_110[0] == arg_218[0] && arg_110[0] != arg_314[1] && arg_110[0] != arg_55[1] && arg_110[0] != arg_276[1] && arg_110[0] != arg_14[1] && arg_110[0] != arg_175[1] && arg_110[0] != arg_306[1] && arg_110[0] != arg_22[1] && arg_110[0] != arg_198[1] && arg_110[0] != arg_221[1] && arg_110[0] != arg_141[1] && arg_110[0] != arg_159[1] && arg_110[0] == arg_40[0] && arg_110[0] != arg_261[1] && arg_110[0] == arg_299[0] && arg_110[0] == arg_35[0] && arg_110[0] == arg_317[0] && arg_110[0] == arg_180[0] && arg_110[0] != arg_118[1] && arg_110[0] == arg_221[0] && arg_110[0] != arg_279[1] && arg_110[0] == arg_92[0] && arg_110[0] == arg_63[0] && arg_110[0] == arg_43[0] && arg_110[0] == arg_306[0] && arg_110[0] == arg_52[0] && arg_110[0] == arg_133[0] && arg_110[0] == arg_239[0] && arg_110[0] != arg_35[1] && arg_110[0] != arg_228[1] && arg_110[0] != arg_95[1] && arg_110[0] == arg_172[0] && arg_110[0] != arg_113[1] && arg_110[0] != arg_193[1] && arg_110[0] != arg_52[1] && arg_110[0] == arg_55[0] && arg_110[0] != arg_183[1] && arg_110[0] == arg_236[0] && arg_110[0] == arg_148[0] && arg_110[0] != arg_296[1] && arg_110[0] != arg_73[1] && arg_110[0] != arg_25[1] && arg_110[0] != arg_63[1] && arg_110[0] == arg_17[0] && arg_110[0] == arg_279[0] && arg_110[0] == arg_103[0] && arg_110[0] == arg_113[0] && arg_110[0] != arg_151[1] && arg_110[0] == arg_271[0] && arg_110[0] == arg_100[0] && arg_110[0] != arg_172[1] && arg_110[0] != arg_239[1] && arg_110[0] == arg_32[0] && arg_110[0] != arg_43[1] && arg_110[0] != arg_309[1] && arg_110[0] == arg_78[0] && arg_110[0] != arg_190[1] && arg_110[0] == arg_198[0] && arg_110[0] != arg_258[1] && arg_110[0] == arg_296[0] && arg_110[0] != arg_60[1] && arg_110[0] != arg_78[1] && arg_110[0] != arg_121[1] && arg_110[0] == arg_250[0] && arg_110[0] == arg_314[0] && arg_110[0] != arg_148[1] && arg_110[0] != arg_156[1] && arg_110[0] != arg_70[1] && arg_110[0] != arg_231[1] && arg_110[0] != arg_32[1] && arg_110[0] != arg_210[1] && arg_110[0] == arg_22[0] && arg_110[0] == arg_276[0] && arg_110[0] == arg_95[0] && arg_110[0] == arg_73[0] && arg_110[0] == arg_70[0] && arg_110[0] == arg_121[0] && arg_110[0] == arg_268[0] && arg_110[0] != arg_299[1] && arg_110[0] == arg_138[0] && arg_110[0] == arg_175[0] && arg_110[0] != arg_17[1] && arg_110[0] != arg_213[1] && arg_110[0] == arg_14[0] && arg_110[0] == arg_25[0] && arg_110[0] != arg_133[1] && arg_110[0] == arg_291[0] && arg_110[0] != arg_271[1] && arg_288[0] != arg_100[1] && arg_288[0] == arg_118[0] && arg_288[0] != arg_103[1] && arg_288[0] != arg_81[1] && arg_288[0] == arg_201[0] && arg_288[0] != arg_218[1] && arg_288[0] != arg_180[1] && arg_288[0] == arg_183[0] && arg_288[0] == arg_213[0] && arg_288[0] == arg_151[0] && arg_288[0] != arg_253[1] && arg_288[0] != arg_201[1] && arg_288[0] != arg_138[1] && arg_288[0] == arg_156[0] && arg_288[0] != arg_250[1] && arg_288[0] != arg_268[1] && arg_288[0] == arg_130[0] && arg_288[0] != arg_130[1] && arg_288[0] == arg_309[0] && arg_288[0] != arg_236[1] && arg_288[0] != arg_317[1] && arg_288[0] != arg_92[1] && arg_288[0] == arg_60[0] && arg_288[0] != arg_110[1] && arg_288[0] != arg_288[1] && arg_288[0] == arg_228[0] && arg_288[0] == arg_210[0] && arg_288[0] == arg_81[0] && arg_288[0] == arg_190[0] && arg_288[0] == arg_231[0] && arg_288[0] == arg_218[0] && arg_288[0] != arg_314[1] && arg_288[0] != arg_55[1] && arg_288[0] != arg_276[1] && arg_288[0] != arg_14[1] && arg_288[0] != arg_175[1] && arg_288[0] != arg_306[1] && arg_288[0] != arg_22[1] && arg_288[0] != arg_198[1] && arg_288[0] != arg_221[1] && arg_288[0] != arg_141[1] && arg_288[0] != arg_159[1] && arg_288[0] == arg_40[0] && arg_288[0] != arg_261[1] && arg_288[0] == arg_299[0] && arg_288[0] == arg_35[0] && arg_288[0] == arg_317[0] && arg_288[0] == arg_180[0] && arg_288[0] != arg_118[1] && arg_288[0] == arg_221[0] && arg_288[0] != arg_279[1] && arg_288[0] == arg_92[0] && arg_288[0] == arg_63[0] && arg_288[0] == arg_43[0] && arg_288[0] == arg_306[0] && arg_288[0] == arg_52[0] && arg_288[0] == arg_133[0] && arg_288[0] == arg_239[0] && arg_288[0] != arg_35[1] && arg_288[0] != arg_228[1] && arg_288[0] != arg_95[1] && arg_288[0] == arg_172[0] && arg_288[0] != arg_113[1] && arg_288[0] != arg_193[1] && arg_288[0] != arg_52[1] && arg_288[0] == arg_55[0] && arg_288[0] != arg_183[1] && arg_288[0] == arg_236[0] && arg_288[0] == arg_148[0] && arg_288[0] != arg_296[1] && arg_288[0] != arg_73[1] && arg_288[0] != arg_25[1] && arg_288[0] != arg_63[1] && arg_288[0] == arg_17[0] && arg_288[0] == arg_279[0] && arg_288[0] == arg_103[0] && arg_288[0] == arg_113[0] && arg_288[0] != arg_151[1] && arg_288[0] == arg_271[0] && arg_288[0] == arg_100[0] && arg_288[0] != arg_172[1] && arg_288[0] != arg_239[1] && arg_288[0] == arg_32[0] && arg_288[0] != arg_43[1] && arg_288[0] != arg_309[1] && arg_288[0] == arg_78[0] && arg_288[0] != arg_190[1] && arg_288[0] == arg_198[0] && arg_288[0] != arg_258[1] && arg_288[0] == arg_296[0] && arg_288[0] != arg_60[1] && arg_288[0] != arg_78[1] && arg_288[0] != arg_121[1] && arg_288[0] == arg_250[0] && arg_288[0] == arg_314[0] && arg_288[0] != arg_148[1] && arg_288[0] != arg_156[1] && arg_288[0] != arg_70[1] && arg_288[0] != arg_231[1] && arg_288[0] != arg_32[1] && arg_288[0] != arg_210[1] && arg_288[0] == arg_22[0] && arg_288[0] == arg_276[0] && arg_288[0] == arg_95[0] && arg_288[0] == arg_73[0] && arg_288[0] == arg_70[0] && arg_288[0] == arg_121[0] && arg_288[0] == arg_268[0] && arg_288[0] != arg_299[1] && arg_288[0] == arg_138[0] && arg_288[0] == arg_175[0] && arg_288[0] != arg_17[1] && arg_288[0] != arg_213[1] && arg_288[0] == arg_14[0] && arg_288[0] == arg_25[0] && arg_288[0] != arg_133[1] && arg_288[0] == arg_291[0] && arg_288[0] != arg_271[1] && arg_100[1] != arg_118[0] && arg_100[1] == arg_103[1] && arg_100[1] == arg_81[1] && arg_100[1] != arg_201[0] && arg_100[1] == arg_218[1] && arg_100[1] == arg_180[1] && arg_100[1] != arg_183[0] && arg_100[1] != arg_213[0] && arg_100[1] != arg_151[0] && arg_100[1] == arg_253[1] && arg_100[1] == arg_201[1] && arg_100[1] == arg_138[1] && arg_100[1] != arg_156[0] && arg_100[1] == arg_250[1] && arg_100[1] == arg_268[1] && arg_100[1] != arg_130[0] && arg_100[1] == arg_130[1] && arg_100[1] != arg_309[0] && arg_100[1] == arg_236[1] && arg_100[1] == arg_317[1] && arg_100[1] == arg_92[1] && arg_100[1] != arg_60[0] && arg_100[1] == arg_110[1] && arg_100[1] == arg_288[1] && arg_100[1] != arg_228[0] && arg_100[1] != arg_210[0] && arg_100[1] != arg_81[0] && arg_100[1] != arg_190[0] && arg_100[1] != arg_231[0] && arg_100[1] != arg_218[0] && arg_100[1] == arg_314[1] && arg_100[1] == arg_55[1] && arg_100[1] == arg_276[1] && arg_100[1] == arg_14[1] && arg_100[1] == arg_175[1] && arg_100[1] == arg_306[1] && arg_100[1] == arg_22[1] && arg_100[1] == arg_198[1] && arg_100[1] == arg_221[1] && arg_100[1] == arg_141[1] && arg_100[1] == arg_159[1] && arg_100[1] != arg_40[0] && arg_100[1] == arg_261[1] && arg_100[1] != arg_299[0] && arg_100[1] != arg_35[0] && arg_100[1] != arg_317[0] && arg_100[1] != arg_180[0] && arg_100[1] == arg_118[1] && arg_100[1] != arg_221[0] && arg_100[1] == arg_279[1] && arg_100[1] != arg_92[0] && arg_100[1] != arg_63[0] && arg_100[1] != arg_43[0] && arg_100[1] != arg_306[0] && arg_100[1] != arg_52[0] && arg_100[1] != arg_133[0] && arg_100[1] != arg_239[0] && arg_100[1] == arg_35[1] && arg_100[1] == arg_228[1] && arg_100[1] == arg_95[1] && arg_100[1] != arg_172[0] && arg_100[1] == arg_113[1] && arg_100[1] == arg_193[1] && arg_100[1] == arg_52[1] && arg_100[1] != arg_55[0] && arg_100[1] == arg_183[1] && arg_100[1] != arg_236[0] && arg_100[1] != arg_148[0] && arg_100[1] == arg_296[1] && arg_100[1] == arg_73[1] && arg_100[1] == arg_25[1] && arg_100[1] == arg_63[1] && arg_100[1] != arg_17[0] && arg_100[1] != arg_279[0] && arg_100[1] != arg_103[0] && arg_100[1] != arg_113[0] && arg_100[1] == arg_151[1] && arg_100[1] != arg_271[0] && arg_100[1] != arg_100[0] && arg_100[1] == arg_172[1] && arg_100[1] == arg_239[1] && arg_100[1] != arg_32[0] && arg_100[1] == arg_43[1] && arg_100[1] == arg_309[1] && arg_100[1] != arg_78[0] && arg_100[1] == arg_190[1] && arg_100[1] != arg_198[0] && arg_100[1] == arg_258[1] && arg_100[1] != arg_296[0] && arg_100[1] == arg_60[1] && arg_100[1] == arg_78[1] && arg_100[1] == arg_121[1] && arg_100[1] != arg_250[0] && arg_100[1] != arg_314[0] && arg_100[1] == arg_148[1] && arg_100[1] == arg_156[1] && arg_100[1] == arg_70[1] && arg_100[1] == arg_231[1] && arg_100[1] == arg_32[1] && arg_100[1] == arg_210[1] && arg_100[1] != arg_22[0] && arg_100[1] != arg_276[0] && arg_100[1] != arg_95[0] && arg_100[1] != arg_73[0] && arg_100[1] != arg_70[0] && arg_100[1] != arg_121[0] && arg_100[1] != arg_268[0] && arg_100[1] == arg_299[1] && arg_100[1] != arg_138[0] && arg_100[1] != arg_175[0] && arg_100[1] == arg_17[1] && arg_100[1] == arg_213[1] && arg_100[1] != arg_14[0] && arg_100[1] != arg_25[0] && arg_100[1] == arg_133[1] && arg_100[1] != arg_291[0] && arg_100[1] == arg_271[1] && arg_118[0] != arg_103[1] && arg_118[0] != arg_81[1] && arg_118[0] == arg_201[0] && arg_118[0] != arg_218[1] && arg_118[0] != arg_180[1] && arg_118[0] == arg_183[0] && arg_118[0] == arg_213[0] && arg_118[0] == arg_151[0] && arg_118[0] != arg_253[1] && arg_118[0] != arg_201[1] && arg_118[0] != arg_138[1] && arg_118[0] == arg_156[0] && arg_118[0] != arg_250[1] && arg_118[0] != arg_268[1] && arg_118[0] == arg_130[0] && arg_118[0] != arg_130[1] && arg_118[0] == arg_309[0] && arg_118[0] != arg_236[1] && arg_118[0] != arg_317[1] && arg_118[0] != arg_92[1] && arg_118[0] == arg_60[0] && arg_118[0] != arg_110[1] && arg_118[0] != arg_288[1] && arg_118[0] == arg_228[0] && arg_118[0] == arg_210[0] && arg_118[0] == arg_81[0] && arg_118[0] == arg_190[0] && arg_118[0] == arg_231[0] && arg_118[0] == arg_218[0] && arg_118[0] != arg_314[1] && arg_118[0] != arg_55[1] && arg_118[0] != arg_276[1] && arg_118[0] != arg_14[1] && arg_118[0] != arg_175[1] && arg_118[0] != arg_306[1] && arg_118[0] != arg_22[1] && arg_118[0] != arg_198[1] && arg_118[0] != arg_221[1] && arg_118[0] != arg_141[1] && arg_118[0] != arg_159[1] && arg_118[0] == arg_40[0] && arg_118[0] != arg_261[1] && arg_118[0] == arg_299[0] && arg_118[0] == arg_35[0] && arg_118[0] == arg_317[0] && arg_118[0] == arg_180[0] && arg_118[0] != arg_118[1] && arg_118[0] == arg_221[0] && arg_118[0] != arg_279[1] && arg_118[0] == arg_92[0] && arg_118[0] == arg_63[0] && arg_118[0] == arg_43[0] && arg_118[0] == arg_306[0] && arg_118[0] == arg_52[0] && arg_118[0] == arg_133[0] && arg_118[0] == arg_239[0] && arg_118[0] != arg_35[1] && arg_118[0] != arg_228[1] && arg_118[0] != arg_95[1] && arg_118[0] == arg_172[0] && arg_118[0] != arg_113[1] && arg_118[0] != arg_193[1] && arg_118[0] != arg_52[1] && arg_118[0] == arg_55[0] && arg_118[0] != arg_183[1] && arg_118[0] == arg_236[0] && arg_118[0] == arg_148[0] && arg_118[0] != arg_296[1] && arg_118[0] != arg_73[1] && arg_118[0] != arg_25[1] && arg_118[0] != arg_63[1] && arg_118[0] == arg_17[0] && arg_118[0] == arg_279[0] && arg_118[0] == arg_103[0] && arg_118[0] == arg_113[0] && arg_118[0] != arg_151[1] && arg_118[0] == arg_271[0] && arg_118[0] == arg_100[0] && arg_118[0] != arg_172[1] && arg_118[0] != arg_239[1] && arg_118[0] == arg_32[0] && arg_118[0] != arg_43[1] && arg_118[0] != arg_309[1] && arg_118[0] == arg_78[0] && arg_118[0] != arg_190[1] && arg_118[0] == arg_198[0] && arg_118[0] != arg_258[1] && arg_118[0] == arg_296[0] && arg_118[0] != arg_60[1] && arg_118[0] != arg_78[1] && arg_118[0] != arg_121[1] && arg_118[0] == arg_250[0] && arg_118[0] == arg_314[0] && arg_118[0] != arg_148[1] && arg_118[0] != arg_156[1] && arg_118[0] != arg_70[1] && arg_118[0] != arg_231[1] && arg_118[0] != arg_32[1] && arg_118[0] != arg_210[1] && arg_118[0] == arg_22[0] && arg_118[0] == arg_276[0] && arg_118[0] == arg_95[0] && arg_118[0] == arg_73[0] && arg_118[0] == arg_70[0] && arg_118[0] == arg_121[0] && arg_118[0] == arg_268[0] && arg_118[0] != arg_299[1] && arg_118[0] == arg_138[0] && arg_118[0] == arg_175[0] && arg_118[0] != arg_17[1] && arg_118[0] != arg_213[1] && arg_118[0] == arg_14[0] && arg_118[0] == arg_25[0] && arg_118[0] != arg_133[1] && arg_118[0] == arg_291[0] && arg_118[0] != arg_271[1] && arg_103[1] == arg_81[1] && arg_103[1] != arg_201[0] && arg_103[1] == arg_218[1] && arg_103[1] == arg_180[1] && arg_103[1] != arg_183[0] && arg_103[1] != arg_213[0] && arg_103[1] != arg_151[0] && arg_103[1] == arg_253[1] && arg_103[1] == arg_201[1] && arg_103[1] == arg_138[1] && arg_103[1] != arg_156[0] && arg_103[1] == arg_250[1] && arg_103[1] == arg_268[1] && arg_103[1] != arg_130[0] && arg_103[1] == arg_130[1] && arg_103[1] != arg_309[0] && arg_103[1] == arg_236[1] && arg_103[1] == arg_317[1] && arg_103[1] == arg_92[1] && arg_103[1] != arg_60[0] && arg_103[1] == arg_110[1] && arg_103[1] == arg_288[1] && arg_103[1] != arg_228[0] && arg_103[1] != arg_210[0] && arg_103[1] != arg_81[0] && arg_103[1] != arg_190[0] && arg_103[1] != arg_231[0] && arg_103[1] != arg_218[0] && arg_103[1] == arg_314[1] && arg_103[1] == arg_55[1] && arg_103[1] == arg_276[1] && arg_103[1] == arg_14[1] && arg_103[1] == arg_175[1] && arg_103[1] == arg_306[1] && arg_103[1] == arg_22[1] && arg_103[1] == arg_198[1] && arg_103[1] == arg_221[1] && arg_103[1] == arg_141[1] && arg_103[1] == arg_159[1] && arg_103[1] != arg_40[0] && arg_103[1] == arg_261[1] && arg_103[1] != arg_299[0] && arg_103[1] != arg_35[0] && arg_103[1] != arg_317[0] && arg_103[1] != arg_180[0] && arg_103[1] == arg_118[1] && arg_103[1] != arg_221[0] && arg_103[1] == arg_279[1] && arg_103[1] != arg_92[0] && arg_103[1] != arg_63[0] && arg_103[1] != arg_43[0] && arg_103[1] != arg_306[0] && arg_103[1] != arg_52[0] && arg_103[1] != arg_133[0] && arg_103[1] != arg_239[0] && arg_103[1] == arg_35[1] && arg_103[1] == arg_228[1] && arg_103[1] == arg_95[1] && arg_103[1] != arg_172[0] && arg_103[1] == arg_113[1] && arg_103[1] == arg_193[1] && arg_103[1] == arg_52[1] && arg_103[1] != arg_55[0] && arg_103[1] == arg_183[1] && arg_103[1] != arg_236[0] && arg_103[1] != arg_148[0] && arg_103[1] == arg_296[1] && arg_103[1] == arg_73[1] && arg_103[1] == arg_25[1] && arg_103[1] == arg_63[1] && arg_103[1] != arg_17[0] && arg_103[1] != arg_279[0] && arg_103[1] != arg_103[0] && arg_103[1] != arg_113[0] && arg_103[1] == arg_151[1] && arg_103[1] != arg_271[0] && arg_103[1] != arg_100[0] && arg_103[1] == arg_172[1] && arg_103[1] == arg_239[1] && arg_103[1] != arg_32[0] && arg_103[1] == arg_43[1] && arg_103[1] == arg_309[1] && arg_103[1] != arg_78[0] && arg_103[1] == arg_190[1] && arg_103[1] != arg_198[0] && arg_103[1] == arg_258[1] && arg_103[1] != arg_296[0] && arg_103[1] == arg_60[1] && arg_103[1] == arg_78[1] && arg_103[1] == arg_121[1] && arg_103[1] != arg_250[0] && arg_103[1] != arg_314[0] && arg_103[1] == arg_148[1] && arg_103[1] == arg_156[1] && arg_103[1] == arg_70[1] && arg_103[1] == arg_231[1] && arg_103[1] == arg_32[1] && arg_103[1] == arg_210[1] && arg_103[1] != arg_22[0] && arg_103[1] != arg_276[0] && arg_103[1] != arg_95[0] && arg_103[1] != arg_73[0] && arg_103[1] != arg_70[0] && arg_103[1] != arg_121[0] && arg_103[1] != arg_268[0] && arg_103[1] == arg_299[1] && arg_103[1] != arg_138[0] && arg_103[1] != arg_175[0] && arg_103[1] == arg_17[1] && arg_103[1] == arg_213[1] && arg_103[1] != arg_14[0] && arg_103[1] != arg_25[0] && arg_103[1] == arg_133[1] && arg_103[1] != arg_291[0] && arg_103[1] == arg_271[1] && arg_81[1] != arg_201[0] && arg_81[1] == arg_218[1] && arg_81[1] == arg_180[1] && arg_81[1] != arg_183[0] && arg_81[1] != arg_213[0] && arg_81[1] != arg_151[0] && arg_81[1] == arg_253[1] && arg_81[1] == arg_201[1] && arg_81[1] == arg_138[1] && arg_81[1] != arg_156[0] && arg_81[1] == arg_250[1] && arg_81[1] == arg_268[1] && arg_81[1] != arg_130[0] && arg_81[1] == arg_130[1] && arg_81[1] != arg_309[0] && arg_81[1] == arg_236[1] && arg_81[1] == arg_317[1] && arg_81[1] == arg_92[1] && arg_81[1] != arg_60[0] && arg_81[1] == arg_110[1] && arg_81[1] == arg_288[1] && arg_81[1] != arg_228[0] && arg_81[1] != arg_210[0] && arg_81[1] != arg_81[0] && arg_81[1] != arg_190[0] && arg_81[1] != arg_231[0] && arg_81[1] != arg_218[0] && arg_81[1] == arg_314[1] && arg_81[1] == arg_55[1] && arg_81[1] == arg_276[1] && arg_81[1] == arg_14[1] && arg_81[1] == arg_175[1] && arg_81[1] == arg_306[1] && arg_81[1] == arg_22[1] && arg_81[1] == arg_198[1] && arg_81[1] == arg_221[1] && arg_81[1] == arg_141[1] && arg_81[1] == arg_159[1] && arg_81[1] != arg_40[0] && arg_81[1] == arg_261[1] && arg_81[1] != arg_299[0] && arg_81[1] != arg_35[0] && arg_81[1] != arg_317[0] && arg_81[1] != arg_180[0] && arg_81[1] == arg_118[1] && arg_81[1] != arg_221[0] && arg_81[1] == arg_279[1] && arg_81[1] != arg_92[0] && arg_81[1] != arg_63[0] && arg_81[1] != arg_43[0] && arg_81[1] != arg_306[0] && arg_81[1] != arg_52[0] && arg_81[1] != arg_133[0] && arg_81[1] != arg_239[0] && arg_81[1] == arg_35[1] && arg_81[1] == arg_228[1] && arg_81[1] == arg_95[1] && arg_81[1] != arg_172[0] && arg_81[1] == arg_113[1] && arg_81[1] == arg_193[1] && arg_81[1] == arg_52[1] && arg_81[1] != arg_55[0] && arg_81[1] == arg_183[1] && arg_81[1] != arg_236[0] && arg_81[1] != arg_148[0] && arg_81[1] == arg_296[1] && arg_81[1] == arg_73[1] && arg_81[1] == arg_25[1] && arg_81[1] == arg_63[1] && arg_81[1] != arg_17[0] && arg_81[1] != arg_279[0] && arg_81[1] != arg_103[0] && arg_81[1] != arg_113[0] && arg_81[1] == arg_151[1] && arg_81[1] != arg_271[0] && arg_81[1] != arg_100[0] && arg_81[1] == arg_172[1] && arg_81[1] == arg_239[1] && arg_81[1] != arg_32[0] && arg_81[1] == arg_43[1] && arg_81[1] == arg_309[1] && arg_81[1] != arg_78[0] && arg_81[1] == arg_190[1] && arg_81[1] != arg_198[0] && arg_81[1] == arg_258[1] && arg_81[1] != arg_296[0] && arg_81[1] == arg_60[1] && arg_81[1] == arg_78[1] && arg_81[1] == arg_121[1] && arg_81[1] != arg_250[0] && arg_81[1] != arg_314[0] && arg_81[1] == arg_148[1] && arg_81[1] == arg_156[1] && arg_81[1] == arg_70[1] && arg_81[1] == arg_231[1] && arg_81[1] == arg_32[1] && arg_81[1] == arg_210[1] && arg_81[1] != arg_22[0] && arg_81[1] != arg_276[0] && arg_81[1] != arg_95[0] && arg_81[1] != arg_73[0] && arg_81[1] != arg_70[0] && arg_81[1] != arg_121[0] && arg_81[1] != arg_268[0] && arg_81[1] == arg_299[1] && arg_81[1] != arg_138[0] && arg_81[1] != arg_175[0] && arg_81[1] == arg_17[1] && arg_81[1] == arg_213[1] && arg_81[1] != arg_14[0] && arg_81[1] != arg_25[0] && arg_81[1] == arg_133[1] && arg_81[1] != arg_291[0] && arg_81[1] == arg_271[1] && arg_201[0] != arg_218[1] && arg_201[0] != arg_180[1] && arg_201[0] == arg_183[0] && arg_201[0] == arg_213[0] && arg_201[0] == arg_151[0] && arg_201[0] != arg_253[1] && arg_201[0] != arg_201[1] && arg_201[0] != arg_138[1] && arg_201[0] == arg_156[0] && arg_201[0] != arg_250[1] && arg_201[0] != arg_268[1] && arg_201[0] == arg_130[0] && arg_201[0] != arg_130[1] && arg_201[0] == arg_309[0] && arg_201[0] != arg_236[1] && arg_201[0] != arg_317[1] && arg_201[0] != arg_92[1] && arg_201[0] == arg_60[0] && arg_201[0] != arg_110[1] && arg_201[0] != arg_288[1] && arg_201[0] == arg_228[0] && arg_201[0] == arg_210[0] && arg_201[0] == arg_81[0] && arg_201[0] == arg_190[0] && arg_201[0] == arg_231[0] && arg_201[0] == arg_218[0] && arg_201[0] != arg_314[1] && arg_201[0] != arg_55[1] && arg_201[0] != arg_276[1] && arg_201[0] != arg_14[1] && arg_201[0] != arg_175[1] && arg_201[0] != arg_306[1] && arg_201[0] != arg_22[1] && arg_201[0] != arg_198[1] && arg_201[0] != arg_221[1] && arg_201[0] != arg_141[1] && arg_201[0] != arg_159[1] && arg_201[0] == arg_40[0] && arg_201[0] != arg_261[1] && arg_201[0] == arg_299[0] && arg_201[0] == arg_35[0] && arg_201[0] == arg_317[0] && arg_201[0] == arg_180[0] && arg_201[0] != arg_118[1] && arg_201[0] == arg_221[0] && arg_201[0] != arg_279[1] && arg_201[0] == arg_92[0] && arg_201[0] == arg_63[0] && arg_201[0] == arg_43[0] && arg_201[0] == arg_306[0] && arg_201[0] == arg_52[0] && arg_201[0] == arg_133[0] && arg_201[0] == arg_239[0] && arg_201[0] != arg_35[1] && arg_201[0] != arg_228[1] && arg_201[0] != arg_95[1] && arg_201[0] == arg_172[0] && arg_201[0] != arg_113[1] && arg_201[0] != arg_193[1] && arg_201[0] != arg_52[1] && arg_201[0] == arg_55[0] && arg_201[0] != arg_183[1] && arg_201[0] == arg_236[0] && arg_201[0] == arg_148[0] && arg_201[0] != arg_296[1] && arg_201[0] != arg_73[1] && arg_201[0] != arg_25[1] && arg_201[0] != arg_63[1] && arg_201[0] == arg_17[0] && arg_201[0] == arg_279[0] && arg_201[0] == arg_103[0] && arg_201[0] == arg_113[0] && arg_201[0] != arg_151[1] && arg_201[0] == arg_271[0] && arg_201[0] == arg_100[0] && arg_201[0] != arg_172[1] && arg_201[0] != arg_239[1] && arg_201[0] == arg_32[0] && arg_201[0] != arg_43[1] && arg_201[0] != arg_309[1] && arg_201[0] == arg_78[0] && arg_201[0] != arg_190[1] && arg_201[0] == arg_198[0] && arg_201[0] != arg_258[1] && arg_201[0] == arg_296[0] && arg_201[0] != arg_60[1] && arg_201[0] != arg_78[1] && arg_201[0] != arg_121[1] && arg_201[0] == arg_250[0] && arg_201[0] == arg_314[0] && arg_201[0] != arg_148[1] && arg_201[0] != arg_156[1] && arg_201[0] != arg_70[1] && arg_201[0] != arg_231[1] && arg_201[0] != arg_32[1] && arg_201[0] != arg_210[1] && arg_201[0] == arg_22[0] && arg_201[0] == arg_276[0] && arg_201[0] == arg_95[0] && arg_201[0] == arg_73[0] && arg_201[0] == arg_70[0] && arg_201[0] == arg_121[0] && arg_201[0] == arg_268[0] && arg_201[0] != arg_299[1] && arg_201[0] == arg_138[0] && arg_201[0] == arg_175[0] && arg_201[0] != arg_17[1] && arg_201[0] != arg_213[1] && arg_201[0] == arg_14[0] && arg_201[0] == arg_25[0] && arg_201[0] != arg_133[1] && arg_201[0] == arg_291[0] && arg_201[0] != arg_271[1] && arg_218[1] == arg_180[1] && arg_218[1] != arg_183[0] && arg_218[1] != arg_213[0] && arg_218[1] != arg_151[0] && arg_218[1] == arg_253[1] && arg_218[1] == arg_201[1] && arg_218[1] == arg_138[1] && arg_218[1] != arg_156[0] && arg_218[1] == arg_250[1] && arg_218[1] == arg_268[1] && arg_218[1] != arg_130[0] && arg_218[1] == arg_130[1] && arg_218[1] != arg_309[0] && arg_218[1] == arg_236[1] && arg_218[1] == arg_317[1] && arg_218[1] == arg_92[1] && arg_218[1] != arg_60[0] && arg_218[1] == arg_110[1] && arg_218[1] == arg_288[1] && arg_218[1] != arg_228[0] && arg_218[1] != arg_210[0] && arg_218[1] != arg_81[0] && arg_218[1] != arg_190[0] && arg_218[1] != arg_231[0] && arg_218[1] != arg_218[0] && arg_218[1] == arg_314[1] && arg_218[1] == arg_55[1] && arg_218[1] == arg_276[1] && arg_218[1] == arg_14[1] && arg_218[1] == arg_175[1] && arg_218[1] == arg_306[1] && arg_218[1] == arg_22[1] && arg_218[1] == arg_198[1] && arg_218[1] == arg_221[1] && arg_218[1] == arg_141[1] && arg_218[1] == arg_159[1] && arg_218[1] != arg_40[0] && arg_218[1] == arg_261[1] && arg_218[1] != arg_299[0] && arg_218[1] != arg_35[0] && arg_218[1] != arg_317[0] && arg_218[1] != arg_180[0] && arg_218[1] == arg_118[1] && arg_218[1] != arg_221[0] && arg_218[1] == arg_279[1] && arg_218[1] != arg_92[0] && arg_218[1] != arg_63[0] && arg_218[1] != arg_43[0] && arg_218[1] != arg_306[0] && arg_218[1] != arg_52[0] && arg_218[1] != arg_133[0] && arg_218[1] != arg_239[0] && arg_218[1] == arg_35[1] && arg_218[1] == arg_228[1] && arg_218[1] == arg_95[1] && arg_218[1] != arg_172[0] && arg_218[1] == arg_113[1] && arg_218[1] == arg_193[1] && arg_218[1] == arg_52[1] && arg_218[1] != arg_55[0] && arg_218[1] == arg_183[1] && arg_218[1] != arg_236[0] && arg_218[1] != arg_148[0] && arg_218[1] == arg_296[1] && arg_218[1] == arg_73[1] && arg_218[1] == arg_25[1] && arg_218[1] == arg_63[1] && arg_218[1] != arg_17[0] && arg_218[1] != arg_279[0] && arg_218[1] != arg_103[0] && arg_218[1] != arg_113[0] && arg_218[1] == arg_151[1] && arg_218[1] != arg_271[0] && arg_218[1] != arg_100[0] && arg_218[1] == arg_172[1] && arg_218[1] == arg_239[1] && arg_218[1] != arg_32[0] && arg_218[1] == arg_43[1] && arg_218[1] == arg_309[1] && arg_218[1] != arg_78[0] && arg_218[1] == arg_190[1] && arg_218[1] != arg_198[0] && arg_218[1] == arg_258[1] && arg_218[1] != arg_296[0] && arg_218[1] == arg_60[1] && arg_218[1] == arg_78[1] && arg_218[1] == arg_121[1] && arg_218[1] != arg_250[0] && arg_218[1] != arg_314[0] && arg_218[1] == arg_148[1] && arg_218[1] == arg_156[1] && arg_218[1] == arg_70[1] && arg_218[1] == arg_231[1] && arg_218[1] == arg_32[1] && arg_218[1] == arg_210[1] && arg_218[1] != arg_22[0] && arg_218[1] != arg_276[0] && arg_218[1] != arg_95[0] && arg_218[1] != arg_73[0] && arg_218[1] != arg_70[0] && arg_218[1] != arg_121[0] && arg_218[1] != arg_268[0] && arg_218[1] == arg_299[1] && arg_218[1] != arg_138[0] && arg_218[1] != arg_175[0] && arg_218[1] == arg_17[1] && arg_218[1] == arg_213[1] && arg_218[1] != arg_14[0] && arg_218[1] != arg_25[0] && arg_218[1] == arg_133[1] && arg_218[1] != arg_291[0] && arg_218[1] == arg_271[1] && arg_180[1] != arg_183[0] && arg_180[1] != arg_213[0] && arg_180[1] != arg_151[0] && arg_180[1] == arg_253[1] && arg_180[1] == arg_201[1] && arg_180[1] == arg_138[1] && arg_180[1] != arg_156[0] && arg_180[1] == arg_250[1] && arg_180[1] == arg_268[1] && arg_180[1] != arg_130[0] && arg_180[1] == arg_130[1] && arg_180[1] != arg_309[0] && arg_180[1] == arg_236[1] && arg_180[1] == arg_317[1] && arg_180[1] == arg_92[1] && arg_180[1] != arg_60[0] && arg_180[1] == arg_110[1] && arg_180[1] == arg_288[1] && arg_180[1] != arg_228[0] && arg_180[1] != arg_210[0] && arg_180[1] != arg_81[0] && arg_180[1] != arg_190[0] && arg_180[1] != arg_231[0] && arg_180[1] != arg_218[0] && arg_180[1] == arg_314[1] && arg_180[1] == arg_55[1] && arg_180[1] == arg_276[1] && arg_180[1] == arg_14[1] && arg_180[1] == arg_175[1] && arg_180[1] == arg_306[1] && arg_180[1] == arg_22[1] && arg_180[1] == arg_198[1] && arg_180[1] == arg_221[1] && arg_180[1] == arg_141[1] && arg_180[1] == arg_159[1] && arg_180[1] != arg_40[0] && arg_180[1] == arg_261[1] && arg_180[1] != arg_299[0] && arg_180[1] != arg_35[0] && arg_180[1] != arg_317[0] && arg_180[1] != arg_180[0] && arg_180[1] == arg_118[1] && arg_180[1] != arg_221[0] && arg_180[1] == arg_279[1] && arg_180[1] != arg_92[0] && arg_180[1] != arg_63[0] && arg_180[1] != arg_43[0] && arg_180[1] != arg_306[0] && arg_180[1] != arg_52[0] && arg_180[1] != arg_133[0] && arg_180[1] != arg_239[0] && arg_180[1] == arg_35[1] && arg_180[1] == arg_228[1] && arg_180[1] == arg_95[1] && arg_180[1] != arg_172[0] && arg_180[1] == arg_113[1] && arg_180[1] == arg_193[1] && arg_180[1] == arg_52[1] && arg_180[1] != arg_55[0] && arg_180[1] == arg_183[1] && arg_180[1] != arg_236[0] && arg_180[1] != arg_148[0] && arg_180[1] == arg_296[1] && arg_180[1] == arg_73[1] && arg_180[1] == arg_25[1] && arg_180[1] == arg_63[1] && arg_180[1] != arg_17[0] && arg_180[1] != arg_279[0] && arg_180[1] != arg_103[0] && arg_180[1] != arg_113[0] && arg_180[1] == arg_151[1] && arg_180[1] != arg_271[0] && arg_180[1] != arg_100[0] && arg_180[1] == arg_172[1] && arg_180[1] == arg_239[1] && arg_180[1] != arg_32[0] && arg_180[1] == arg_43[1] && arg_180[1] == arg_309[1] && arg_180[1] != arg_78[0] && arg_180[1] == arg_190[1] && arg_180[1] != arg_198[0] && arg_180[1] == arg_258[1] && arg_180[1] != arg_296[0] && arg_180[1] == arg_60[1] && arg_180[1] == arg_78[1] && arg_180[1] == arg_121[1] && arg_180[1] != arg_250[0] && arg_180[1] != arg_314[0] && arg_180[1] == arg_148[1] && arg_180[1] == arg_156[1] && arg_180[1] == arg_70[1] && arg_180[1] == arg_231[1] && arg_180[1] == arg_32[1] && arg_180[1] == arg_210[1] && arg_180[1] != arg_22[0] && arg_180[1] != arg_276[0] && arg_180[1] != arg_95[0] && arg_180[1] != arg_73[0] && arg_180[1] != arg_70[0] && arg_180[1] != arg_121[0] && arg_180[1] != arg_268[0] && arg_180[1] == arg_299[1] && arg_180[1] != arg_138[0] && arg_180[1] != arg_175[0] && arg_180[1] == arg_17[1] && arg_180[1] == arg_213[1] && arg_180[1] != arg_14[0] && arg_180[1] != arg_25[0] && arg_180[1] == arg_133[1] && arg_180[1] != arg_291[0] && arg_180[1] == arg_271[1] && arg_183[0] == arg_213[0] && arg_183[0] == arg_151[0] && arg_183[0] != arg_253[1] && arg_183[0] != arg_201[1] && arg_183[0] != arg_138[1] && arg_183[0] == arg_156[0] && arg_183[0] != arg_250[1] && arg_183[0] != arg_268[1] && arg_183[0] == arg_130[0] && arg_183[0] != arg_130[1] && arg_183[0] == arg_309[0] && arg_183[0] != arg_236[1] && arg_183[0] != arg_317[1] && arg_183[0] != arg_92[1] && arg_183[0] == arg_60[0] && arg_183[0] != arg_110[1] && arg_183[0] != arg_288[1] && arg_183[0] == arg_228[0] && arg_183[0] == arg_210[0] && arg_183[0] == arg_81[0] && arg_183[0] == arg_190[0] && arg_183[0] == arg_231[0] && arg_183[0] == arg_218[0] && arg_183[0] != arg_314[1] && arg_183[0] != arg_55[1] && arg_183[0] != arg_276[1] && arg_183[0] != arg_14[1] && arg_183[0] != arg_175[1] && arg_183[0] != arg_306[1] && arg_183[0] != arg_22[1] && arg_183[0] != arg_198[1] && arg_183[0] != arg_221[1] && arg_183[0] != arg_141[1] && arg_183[0] != arg_159[1] && arg_183[0] == arg_40[0] && arg_183[0] != arg_261[1] && arg_183[0] == arg_299[0] && arg_183[0] == arg_35[0] && arg_183[0] == arg_317[0] && arg_183[0] == arg_180[0] && arg_183[0] != arg_118[1] && arg_183[0] == arg_221[0] && arg_183[0] != arg_279[1] && arg_183[0] == arg_92[0] && arg_183[0] == arg_63[0] && arg_183[0] == arg_43[0] && arg_183[0] == arg_306[0] && arg_183[0] == arg_52[0] && arg_183[0] == arg_133[0] && arg_183[0] == arg_239[0] && arg_183[0] != arg_35[1] && arg_183[0] != arg_228[1] && arg_183[0] != arg_95[1] && arg_183[0] == arg_172[0] && arg_183[0] != arg_113[1] && arg_183[0] != arg_193[1] && arg_183[0] != arg_52[1] && arg_183[0] == arg_55[0] && arg_183[0] != arg_183[1] && arg_183[0] == arg_236[0] && arg_183[0] == arg_148[0] && arg_183[0] != arg_296[1] && arg_183[0] != arg_73[1] && arg_183[0] != arg_25[1] && arg_183[0] != arg_63[1] && arg_183[0] == arg_17[0] && arg_183[0] == arg_279[0] && arg_183[0] == arg_103[0] && arg_183[0] == arg_113[0] && arg_183[0] != arg_151[1] && arg_183[0] == arg_271[0] && arg_183[0] == arg_100[0] && arg_183[0] != arg_172[1] && arg_183[0] != arg_239[1] && arg_183[0] == arg_32[0] && arg_183[0] != arg_43[1] && arg_183[0] != arg_309[1] && arg_183[0] == arg_78[0] && arg_183[0] != arg_190[1] && arg_183[0] == arg_198[0] && arg_183[0] != arg_258[1] && arg_183[0] == arg_296[0] && arg_183[0] != arg_60[1] && arg_183[0] != arg_78[1] && arg_183[0] != arg_121[1] && arg_183[0] == arg_250[0] && arg_183[0] == arg_314[0] && arg_183[0] != arg_148[1] && arg_183[0] != arg_156[1] && arg_183[0] != arg_70[1] && arg_183[0] != arg_231[1] && arg_183[0] != arg_32[1] && arg_183[0] != arg_210[1] && arg_183[0] == arg_22[0] && arg_183[0] == arg_276[0] && arg_183[0] == arg_95[0] && arg_183[0] == arg_73[0] && arg_183[0] == arg_70[0] && arg_183[0] == arg_121[0] && arg_183[0] == arg_268[0] && arg_183[0] != arg_299[1] && arg_183[0] == arg_138[0] && arg_183[0] == arg_175[0] && arg_183[0] != arg_17[1] && arg_183[0] != arg_213[1] && arg_183[0] == arg_14[0] && arg_183[0] == arg_25[0] && arg_183[0] != arg_133[1] && arg_183[0] == arg_291[0] && arg_183[0] != arg_271[1] && arg_213[0] == arg_151[0] && arg_213[0] != arg_253[1] && arg_213[0] != arg_201[1] && arg_213[0] != arg_138[1] && arg_213[0] == arg_156[0] && arg_213[0] != arg_250[1] && arg_213[0] != arg_268[1] && arg_213[0] == arg_130[0] && arg_213[0] != arg_130[1] && arg_213[0] == arg_309[0] && arg_213[0] != arg_236[1] && arg_213[0] != arg_317[1] && arg_213[0] != arg_92[1] && arg_213[0] == arg_60[0] && arg_213[0] != arg_110[1] && arg_213[0] != arg_288[1] && arg_213[0] == arg_228[0] && arg_213[0] == arg_210[0] && arg_213[0] == arg_81[0] && arg_213[0] == arg_190[0] && arg_213[0] == arg_231[0] && arg_213[0] == arg_218[0] && arg_213[0] != arg_314[1] && arg_213[0] != arg_55[1] && arg_213[0] != arg_276[1] && arg_213[0] != arg_14[1] && arg_213[0] != arg_175[1] && arg_213[0] != arg_306[1] && arg_213[0] != arg_22[1] && arg_213[0] != arg_198[1] && arg_213[0] != arg_221[1] && arg_213[0] != arg_141[1] && arg_213[0] != arg_159[1] && arg_213[0] == arg_40[0] && arg_213[0] != arg_261[1] && arg_213[0] == arg_299[0] && arg_213[0] == arg_35[0] && arg_213[0] == arg_317[0] && arg_213[0] == arg_180[0] && arg_213[0] != arg_118[1] && arg_213[0] == arg_221[0] && arg_213[0] != arg_279[1] && arg_213[0] == arg_92[0] && arg_213[0] == arg_63[0] && arg_213[0] == arg_43[0] && arg_213[0] == arg_306[0] && arg_213[0] == arg_52[0] && arg_213[0] == arg_133[0] && arg_213[0] == arg_239[0] && arg_213[0] != arg_35[1] && arg_213[0] != arg_228[1] && arg_213[0] != arg_95[1] && arg_213[0] == arg_172[0] && arg_213[0] != arg_113[1] && arg_213[0] != arg_193[1] && arg_213[0] != arg_52[1] && arg_213[0] == arg_55[0] && arg_213[0] != arg_183[1] && arg_213[0] == arg_236[0] && arg_213[0] == arg_148[0] && arg_213[0] != arg_296[1] && arg_213[0] != arg_73[1] && arg_213[0] != arg_25[1] && arg_213[0] != arg_63[1] && arg_213[0] == arg_17[0] && arg_213[0] == arg_279[0] && arg_213[0] == arg_103[0] && arg_213[0] == arg_113[0] && arg_213[0] != arg_151[1] && arg_213[0] == arg_271[0] && arg_213[0] == arg_100[0] && arg_213[0] != arg_172[1] && arg_213[0] != arg_239[1] && arg_213[0] == arg_32[0] && arg_213[0] != arg_43[1] && arg_213[0] != arg_309[1] && arg_213[0] == arg_78[0] && arg_213[0] != arg_190[1] && arg_213[0] == arg_198[0] && arg_213[0] != arg_258[1] && arg_213[0] == arg_296[0] && arg_213[0] != arg_60[1] && arg_213[0] != arg_78[1] && arg_213[0] != arg_121[1] && arg_213[0] == arg_250[0] && arg_213[0] == arg_314[0] && arg_213[0] != arg_148[1] && arg_213[0] != arg_156[1] && arg_213[0] != arg_70[1] && arg_213[0] != arg_231[1] && arg_213[0] != arg_32[1] && arg_213[0] != arg_210[1] && arg_213[0] == arg_22[0] && arg_213[0] == arg_276[0] && arg_213[0] == arg_95[0] && arg_213[0] == arg_73[0] && arg_213[0] == arg_70[0] && arg_213[0] == arg_121[0] && arg_213[0] == arg_268[0] && arg_213[0] != arg_299[1] && arg_213[0] == arg_138[0] && arg_213[0] == arg_175[0] && arg_213[0] != arg_17[1] && arg_213[0] != arg_213[1] && arg_213[0] == arg_14[0] && arg_213[0] == arg_25[0] && arg_213[0] != arg_133[1] && arg_213[0] == arg_291[0] && arg_213[0] != arg_271[1] && arg_151[0] != arg_253[1] && arg_151[0] != arg_201[1] && arg_151[0] != arg_138[1] && arg_151[0] == arg_156[0] && arg_151[0] != arg_250[1] && arg_151[0] != arg_268[1] && arg_151[0] == arg_130[0] && arg_151[0] != arg_130[1] && arg_151[0] == arg_309[0] && arg_151[0] != arg_236[1] && arg_151[0] != arg_317[1] && arg_151[0] != arg_92[1] && arg_151[0] == arg_60[0] && arg_151[0] != arg_110[1] && arg_151[0] != arg_288[1] && arg_151[0] == arg_228[0] && arg_151[0] == arg_210[0] && arg_151[0] == arg_81[0] && arg_151[0] == arg_190[0] && arg_151[0] == arg_231[0] && arg_151[0] == arg_218[0] && arg_151[0] != arg_314[1] && arg_151[0] != arg_55[1] && arg_151[0] != arg_276[1] && arg_151[0] != arg_14[1] && arg_151[0] != arg_175[1] && arg_151[0] != arg_306[1] && arg_151[0] != arg_22[1] && arg_151[0] != arg_198[1] && arg_151[0] != arg_221[1] && arg_151[0] != arg_141[1] && arg_151[0] != arg_159[1] && arg_151[0] == arg_40[0] && arg_151[0] != arg_261[1] && arg_151[0] == arg_299[0] && arg_151[0] == arg_35[0] && arg_151[0] == arg_317[0] && arg_151[0] == arg_180[0] && arg_151[0] != arg_118[1] && arg_151[0] == arg_221[0] && arg_151[0] != arg_279[1] && arg_151[0] == arg_92[0] && arg_151[0] == arg_63[0] && arg_151[0] == arg_43[0] && arg_151[0] == arg_306[0] && arg_151[0] == arg_52[0] && arg_151[0] == arg_133[0] && arg_151[0] == arg_239[0] && arg_151[0] != arg_35[1] && arg_151[0] != arg_228[1] && arg_151[0] != arg_95[1] && arg_151[0] == arg_172[0] && arg_151[0] != arg_113[1] && arg_151[0] != arg_193[1] && arg_151[0] != arg_52[1] && arg_151[0] == arg_55[0] && arg_151[0] != arg_183[1] && arg_151[0] == arg_236[0] && arg_151[0] == arg_148[0] && arg_151[0] != arg_296[1] && arg_151[0] != arg_73[1] && arg_151[0] != arg_25[1] && arg_151[0] != arg_63[1] && arg_151[0] == arg_17[0] && arg_151[0] == arg_279[0] && arg_151[0] == arg_103[0] && arg_151[0] == arg_113[0] && arg_151[0] != arg_151[1] && arg_151[0] == arg_271[0] && arg_151[0] == arg_100[0] && arg_151[0] != arg_172[1] && arg_151[0] != arg_239[1] && arg_151[0] == arg_32[0] && arg_151[0] != arg_43[1] && arg_151[0] != arg_309[1] && arg_151[0] == arg_78[0] && arg_151[0] != arg_190[1] && arg_151[0] == arg_198[0] && arg_151[0] != arg_258[1] && arg_151[0] == arg_296[0] && arg_151[0] != arg_60[1] && arg_151[0] != arg_78[1] && arg_151[0] != arg_121[1] && arg_151[0] == arg_250[0] && arg_151[0] == arg_314[0] && arg_151[0] != arg_148[1] && arg_151[0] != arg_156[1] && arg_151[0] != arg_70[1] && arg_151[0] != arg_231[1] && arg_151[0] != arg_32[1] && arg_151[0] != arg_210[1] && arg_151[0] == arg_22[0] && arg_151[0] == arg_276[0] && arg_151[0] == arg_95[0] && arg_151[0] == arg_73[0] && arg_151[0] == arg_70[0] && arg_151[0] == arg_121[0] && arg_151[0] == arg_268[0] && arg_151[0] != arg_299[1] && arg_151[0] == arg_138[0] && arg_151[0] == arg_175[0] && arg_151[0] != arg_17[1] && arg_151[0] != arg_213[1] && arg_151[0] == arg_14[0] && arg_151[0] == arg_25[0] && arg_151[0] != arg_133[1] && arg_151[0] == arg_291[0] && arg_151[0] != arg_271[1] && arg_253[1] == arg_201[1] && arg_253[1] == arg_138[1] && arg_253[1] != arg_156[0] && arg_253[1] == arg_250[1] && arg_253[1] == arg_268[1] && arg_253[1] != arg_130[0] && arg_253[1] == arg_130[1] && arg_253[1] != arg_309[0] && arg_253[1] == arg_236[1] && arg_253[1] == arg_317[1] && arg_253[1] == arg_92[1] && arg_253[1] != arg_60[0] && arg_253[1] == arg_110[1] && arg_253[1] == arg_288[1] && arg_253[1] != arg_228[0] && arg_253[1] != arg_210[0] && arg_253[1] != arg_81[0] && arg_253[1] != arg_190[0] && arg_253[1] != arg_231[0] && arg_253[1] != arg_218[0] && arg_253[1] == arg_314[1] && arg_253[1] == arg_55[1] && arg_253[1] == arg_276[1] && arg_253[1] == arg_14[1] && arg_253[1] == arg_175[1] && arg_253[1] == arg_306[1] && arg_253[1] == arg_22[1] && arg_253[1] == arg_198[1] && arg_253[1] == arg_221[1] && arg_253[1] == arg_141[1] && arg_253[1] == arg_159[1] && arg_253[1] != arg_40[0] && arg_253[1] == arg_261[1] && arg_253[1] != arg_299[0] && arg_253[1] != arg_35[0] && arg_253[1] != arg_317[0] && arg_253[1] != arg_180[0] && arg_253[1] == arg_118[1] && arg_253[1] != arg_221[0] && arg_253[1] == arg_279[1] && arg_253[1] != arg_92[0] && arg_253[1] != arg_63[0] && arg_253[1] != arg_43[0] && arg_253[1] != arg_306[0] && arg_253[1] != arg_52[0] && arg_253[1] != arg_133[0] && arg_253[1] != arg_239[0] && arg_253[1] == arg_35[1] && arg_253[1] == arg_228[1] && arg_253[1] == arg_95[1] && arg_253[1] != arg_172[0] && arg_253[1] == arg_113[1] && arg_253[1] == arg_193[1] && arg_253[1] == arg_52[1] && arg_253[1] != arg_55[0] && arg_253[1] == arg_183[1] && arg_253[1] != arg_236[0] && arg_253[1] != arg_148[0] && arg_253[1] == arg_296[1] && arg_253[1] == arg_73[1] && arg_253[1] == arg_25[1] && arg_253[1] == arg_63[1] && arg_253[1] != arg_17[0] && arg_253[1] != arg_279[0] && arg_253[1] != arg_103[0] && arg_253[1] != arg_113[0] && arg_253[1] == arg_151[1] && arg_253[1] != arg_271[0] && arg_253[1] != arg_100[0] && arg_253[1] == arg_172[1] && arg_253[1] == arg_239[1] && arg_253[1] != arg_32[0] && arg_253[1] == arg_43[1] && arg_253[1] == arg_309[1] && arg_253[1] != arg_78[0] && arg_253[1] == arg_190[1] && arg_253[1] != arg_198[0] && arg_253[1] == arg_258[1] && arg_253[1] != arg_296[0] && arg_253[1] == arg_60[1] && arg_253[1] == arg_78[1] && arg_253[1] == arg_121[1] && arg_253[1] != arg_250[0] && arg_253[1] != arg_314[0] && arg_253[1] == arg_148[1] && arg_253[1] == arg_156[1] && arg_253[1] == arg_70[1] && arg_253[1] == arg_231[1] && arg_253[1] == arg_32[1] && arg_253[1] == arg_210[1] && arg_253[1] != arg_22[0] && arg_253[1] != arg_276[0] && arg_253[1] != arg_95[0] && arg_253[1] != arg_73[0] && arg_253[1] != arg_70[0] && arg_253[1] != arg_121[0] && arg_253[1] != arg_268[0] && arg_253[1] == arg_299[1] && arg_253[1] != arg_138[0] && arg_253[1] != arg_175[0] && arg_253[1] == arg_17[1] && arg_253[1] == arg_213[1] && arg_253[1] != arg_14[0] && arg_253[1] != arg_25[0] && arg_253[1] == arg_133[1] && arg_253[1] != arg_291[0] && arg_253[1] == arg_271[1] && arg_201[1] == arg_138[1] && arg_201[1] != arg_156[0] && arg_201[1] == arg_250[1] && arg_201[1] == arg_268[1] && arg_201[1] != arg_130[0] && arg_201[1] == arg_130[1] && arg_201[1] != arg_309[0] && arg_201[1] == arg_236[1] && arg_201[1] == arg_317[1] && arg_201[1] == arg_92[1] && arg_201[1] != arg_60[0] && arg_201[1] == arg_110[1] && arg_201[1] == arg_288[1] && arg_201[1] != arg_228[0] && arg_201[1] != arg_210[0] && arg_201[1] != arg_81[0] && arg_201[1] != arg_190[0] && arg_201[1] != arg_231[0] && arg_201[1] != arg_218[0] && arg_201[1] == arg_314[1] && arg_201[1] == arg_55[1] && arg_201[1] == arg_276[1] && arg_201[1] == arg_14[1] && arg_201[1] == arg_175[1] && arg_201[1] == arg_306[1] && arg_201[1] == arg_22[1] && arg_201[1] == arg_198[1] && arg_201[1] == arg_221[1] && arg_201[1] == arg_141[1] && arg_201[1] == arg_159[1] && arg_201[1] != arg_40[0] && arg_201[1] == arg_261[1] && arg_201[1] != arg_299[0] && arg_201[1] != arg_35[0] && arg_201[1] != arg_317[0] && arg_201[1] != arg_180[0] && arg_201[1] == arg_118[1] && arg_201[1] != arg_221[0] && arg_201[1] == arg_279[1] && arg_201[1] != arg_92[0] && arg_201[1] != arg_63[0] && arg_201[1] != arg_43[0] && arg_201[1] != arg_306[0] && arg_201[1] != arg_52[0] && arg_201[1] != arg_133[0] && arg_201[1] != arg_239[0] && arg_201[1] == arg_35[1] && arg_201[1] == arg_228[1] && arg_201[1] == arg_95[1] && arg_201[1] != arg_172[0] && arg_201[1] == arg_113[1] && arg_201[1] == arg_193[1] && arg_201[1] == arg_52[1] && arg_201[1] != arg_55[0] && arg_201[1] == arg_183[1] && arg_201[1] != arg_236[0] && arg_201[1] != arg_148[0] && arg_201[1] == arg_296[1] && arg_201[1] == arg_73[1] && arg_201[1] == arg_25[1] && arg_201[1] == arg_63[1] && arg_201[1] != arg_17[0] && arg_201[1] != arg_279[0] && arg_201[1] != arg_103[0] && arg_201[1] != arg_113[0] && arg_201[1] == arg_151[1] && arg_201[1] != arg_271[0] && arg_201[1] != arg_100[0] && arg_201[1] == arg_172[1] && arg_201[1] == arg_239[1] && arg_201[1] != arg_32[0] && arg_201[1] == arg_43[1] && arg_201[1] == arg_309[1] && arg_201[1] != arg_78[0] && arg_201[1] == arg_190[1] && arg_201[1] != arg_198[0] && arg_201[1] == arg_258[1] && arg_201[1] != arg_296[0] && arg_201[1] == arg_60[1] && arg_201[1] == arg_78[1] && arg_201[1] == arg_121[1] && arg_201[1] != arg_250[0] && arg_201[1] != arg_314[0] && arg_201[1] == arg_148[1] && arg_201[1] == arg_156[1] && arg_201[1] == arg_70[1] && arg_201[1] == arg_231[1] && arg_201[1] == arg_32[1] && arg_201[1] == arg_210[1] && arg_201[1] != arg_22[0] && arg_201[1] != arg_276[0] && arg_201[1] != arg_95[0] && arg_201[1] != arg_73[0] && arg_201[1] != arg_70[0] && arg_201[1] != arg_121[0] && arg_201[1] != arg_268[0] && arg_201[1] == arg_299[1] && arg_201[1] != arg_138[0] && arg_201[1] != arg_175[0] && arg_201[1] == arg_17[1] && arg_201[1] == arg_213[1] && arg_201[1] != arg_14[0] && arg_201[1] != arg_25[0] && arg_201[1] == arg_133[1] && arg_201[1] != arg_291[0] && arg_201[1] == arg_271[1] && arg_138[1] != arg_156[0] && arg_138[1] == arg_250[1] && arg_138[1] == arg_268[1] && arg_138[1] != arg_130[0] && arg_138[1] == arg_130[1] && arg_138[1] != arg_309[0] && arg_138[1] == arg_236[1] && arg_138[1] == arg_317[1] && arg_138[1] == arg_92[1] && arg_138[1] != arg_60[0] && arg_138[1] == arg_110[1] && arg_138[1] == arg_288[1] && arg_138[1] != arg_228[0] && arg_138[1] != arg_210[0] && arg_138[1] != arg_81[0] && arg_138[1] != arg_190[0] && arg_138[1] != arg_231[0] && arg_138[1] != arg_218[0] && arg_138[1] == arg_314[1] && arg_138[1] == arg_55[1] && arg_138[1] == arg_276[1] && arg_138[1] == arg_14[1] && arg_138[1] == arg_175[1] && arg_138[1] == arg_306[1] && arg_138[1] == arg_22[1] && arg_138[1] == arg_198[1] && arg_138[1] == arg_221[1] && arg_138[1] == arg_141[1] && arg_138[1] == arg_159[1] && arg_138[1] != arg_40[0] && arg_138[1] == arg_261[1] && arg_138[1] != arg_299[0] && arg_138[1] != arg_35[0] && arg_138[1] != arg_317[0] && arg_138[1] != arg_180[0] && arg_138[1] == arg_118[1] && arg_138[1] != arg_221[0] && arg_138[1] == arg_279[1] && arg_138[1] != arg_92[0] && arg_138[1] != arg_63[0] && arg_138[1] != arg_43[0] && arg_138[1] != arg_306[0] && arg_138[1] != arg_52[0] && arg_138[1] != arg_133[0] && arg_138[1] != arg_239[0] && arg_138[1] == arg_35[1] && arg_138[1] == arg_228[1] && arg_138[1] == arg_95[1] && arg_138[1] != arg_172[0] && arg_138[1] == arg_113[1] && arg_138[1] == arg_193[1] && arg_138[1] == arg_52[1] && arg_138[1] != arg_55[0] && arg_138[1] == arg_183[1] && arg_138[1] != arg_236[0] && arg_138[1] != arg_148[0] && arg_138[1] == arg_296[1] && arg_138[1] == arg_73[1] && arg_138[1] == arg_25[1] && arg_138[1] == arg_63[1] && arg_138[1] != arg_17[0] && arg_138[1] != arg_279[0] && arg_138[1] != arg_103[0] && arg_138[1] != arg_113[0] && arg_138[1] == arg_151[1] && arg_138[1] != arg_271[0] && arg_138[1] != arg_100[0] && arg_138[1] == arg_172[1] && arg_138[1] == arg_239[1] && arg_138[1] != arg_32[0] && arg_138[1] == arg_43[1] && arg_138[1] == arg_309[1] && arg_138[1] != arg_78[0] && arg_138[1] == arg_190[1] && arg_138[1] != arg_198[0] && arg_138[1] == arg_258[1] && arg_138[1] != arg_296[0] && arg_138[1] == arg_60[1] && arg_138[1] == arg_78[1] && arg_138[1] == arg_121[1] && arg_138[1] != arg_250[0] && arg_138[1] != arg_314[0] && arg_138[1] == arg_148[1] && arg_138[1] == arg_156[1] && arg_138[1] == arg_70[1] && arg_138[1] == arg_231[1] && arg_138[1] == arg_32[1] && arg_138[1] == arg_210[1] && arg_138[1] != arg_22[0] && arg_138[1] != arg_276[0] && arg_138[1] != arg_95[0] && arg_138[1] != arg_73[0] && arg_138[1] != arg_70[0] && arg_138[1] != arg_121[0] && arg_138[1] != arg_268[0] && arg_138[1] == arg_299[1] && arg_138[1] != arg_138[0] && arg_138[1] != arg_175[0] && arg_138[1] == arg_17[1] && arg_138[1] == arg_213[1] && arg_138[1] != arg_14[0] && arg_138[1] != arg_25[0] && arg_138[1] == arg_133[1] && arg_138[1] != arg_291[0] && arg_138[1] == arg_271[1] && arg_156[0] != arg_250[1] && arg_156[0] != arg_268[1] && arg_156[0] == arg_130[0] && arg_156[0] != arg_130[1] && arg_156[0] == arg_309[0] && arg_156[0] != arg_236[1] && arg_156[0] != arg_317[1] && arg_156[0] != arg_92[1] && arg_156[0] == arg_60[0] && arg_156[0] != arg_110[1] && arg_156[0] != arg_288[1] && arg_156[0] == arg_228[0] && arg_156[0] == arg_210[0] && arg_156[0] == arg_81[0] && arg_156[0] == arg_190[0] && arg_156[0] == arg_231[0] && arg_156[0] == arg_218[0] && arg_156[0] != arg_314[1] && arg_156[0] != arg_55[1] && arg_156[0] != arg_276[1] && arg_156[0] != arg_14[1] && arg_156[0] != arg_175[1] && arg_156[0] != arg_306[1] && arg_156[0] != arg_22[1] && arg_156[0] != arg_198[1] && arg_156[0] != arg_221[1] && arg_156[0] != arg_141[1] && arg_156[0] != arg_159[1] && arg_156[0] == arg_40[0] && arg_156[0] != arg_261[1] && arg_156[0] == arg_299[0] && arg_156[0] == arg_35[0] && arg_156[0] == arg_317[0] && arg_156[0] == arg_180[0] && arg_156[0] != arg_118[1] && arg_156[0] == arg_221[0] && arg_156[0] != arg_279[1] && arg_156[0] == arg_92[0] && arg_156[0] == arg_63[0] && arg_156[0] == arg_43[0] && arg_156[0] == arg_306[0] && arg_156[0] == arg_52[0] && arg_156[0] == arg_133[0] && arg_156[0] == arg_239[0] && arg_156[0] != arg_35[1] && arg_156[0] != arg_228[1] && arg_156[0] != arg_95[1] && arg_156[0] == arg_172[0] && arg_156[0] != arg_113[1] && arg_156[0] != arg_193[1] && arg_156[0] != arg_52[1] && arg_156[0] == arg_55[0] && arg_156[0] != arg_183[1] && arg_156[0] == arg_236[0] && arg_156[0] == arg_148[0] && arg_156[0] != arg_296[1] && arg_156[0] != arg_73[1] && arg_156[0] != arg_25[1] && arg_156[0] != arg_63[1] && arg_156[0] == arg_17[0] && arg_156[0] == arg_279[0] && arg_156[0] == arg_103[0] && arg_156[0] == arg_113[0] && arg_156[0] != arg_151[1] && arg_156[0] == arg_271[0] && arg_156[0] == arg_100[0] && arg_156[0] != arg_172[1] && arg_156[0] != arg_239[1] && arg_156[0] == arg_32[0] && arg_156[0] != arg_43[1] && arg_156[0] != arg_309[1] && arg_156[0] == arg_78[0] && arg_156[0] != arg_190[1] && arg_156[0] == arg_198[0] && arg_156[0] != arg_258[1] && arg_156[0] == arg_296[0] && arg_156[0] != arg_60[1] && arg_156[0] != arg_78[1] && arg_156[0] != arg_121[1] && arg_156[0] == arg_250[0] && arg_156[0] == arg_314[0] && arg_156[0] != arg_148[1] && arg_156[0] != arg_156[1] && arg_156[0] != arg_70[1] && arg_156[0] != arg_231[1] && arg_156[0] != arg_32[1] && arg_156[0] != arg_210[1] && arg_156[0] == arg_22[0] && arg_156[0] == arg_276[0] && arg_156[0] == arg_95[0] && arg_156[0] == arg_73[0] && arg_156[0] == arg_70[0] && arg_156[0] == arg_121[0] && arg_156[0] == arg_268[0] && arg_156[0] != arg_299[1] && arg_156[0] == arg_138[0] && arg_156[0] == arg_175[0] && arg_156[0] != arg_17[1] && arg_156[0] != arg_213[1] && arg_156[0] == arg_14[0] && arg_156[0] == arg_25[0] && arg_156[0] != arg_133[1] && arg_156[0] == arg_291[0] && arg_156[0] != arg_271[1] && arg_250[1] == arg_268[1] && arg_250[1] != arg_130[0] && arg_250[1] == arg_130[1] && arg_250[1] != arg_309[0] && arg_250[1] == arg_236[1] && arg_250[1] == arg_317[1] && arg_250[1] == arg_92[1] && arg_250[1] != arg_60[0] && arg_250[1] == arg_110[1] && arg_250[1] == arg_288[1] && arg_250[1] != arg_228[0] && arg_250[1] != arg_210[0] && arg_250[1] != arg_81[0] && arg_250[1] != arg_190[0] && arg_250[1] != arg_231[0] && arg_250[1] != arg_218[0] && arg_250[1] == arg_314[1] && arg_250[1] == arg_55[1] && arg_250[1] == arg_276[1] && arg_250[1] == arg_14[1] && arg_250[1] == arg_175[1] && arg_250[1] == arg_306[1] && arg_250[1] == arg_22[1] && arg_250[1] == arg_198[1] && arg_250[1] == arg_221[1] && arg_250[1] == arg_141[1] && arg_250[1] == arg_159[1] && arg_250[1] != arg_40[0] && arg_250[1] == arg_261[1] && arg_250[1] != arg_299[0] && arg_250[1] != arg_35[0] && arg_250[1] != arg_317[0] && arg_250[1] != arg_180[0] && arg_250[1] == arg_118[1] && arg_250[1] != arg_221[0] && arg_250[1] == arg_279[1] && arg_250[1] != arg_92[0] && arg_250[1] != arg_63[0] && arg_250[1] != arg_43[0] && arg_250[1] != arg_306[0] && arg_250[1] != arg_52[0] && arg_250[1] != arg_133[0] && arg_250[1] != arg_239[0] && arg_250[1] == arg_35[1] && arg_250[1] == arg_228[1] && arg_250[1] == arg_95[1] && arg_250[1] != arg_172[0] && arg_250[1] == arg_113[1] && arg_250[1] == arg_193[1] && arg_250[1] == arg_52[1] && arg_250[1] != arg_55[0] && arg_250[1] == arg_183[1] && arg_250[1] != arg_236[0] && arg_250[1] != arg_148[0] && arg_250[1] == arg_296[1] && arg_250[1] == arg_73[1] && arg_250[1] == arg_25[1] && arg_250[1] == arg_63[1] && arg_250[1] != arg_17[0] && arg_250[1] != arg_279[0] && arg_250[1] != arg_103[0] && arg_250[1] != arg_113[0] && arg_250[1] == arg_151[1] && arg_250[1] != arg_271[0] && arg_250[1] != arg_100[0] && arg_250[1] == arg_172[1] && arg_250[1] == arg_239[1] && arg_250[1] != arg_32[0] && arg_250[1] == arg_43[1] && arg_250[1] == arg_309[1] && arg_250[1] != arg_78[0] && arg_250[1] == arg_190[1] && arg_250[1] != arg_198[0] && arg_250[1] == arg_258[1] && arg_250[1] != arg_296[0] && arg_250[1] == arg_60[1] && arg_250[1] == arg_78[1] && arg_250[1] == arg_121[1] && arg_250[1] != arg_250[0] && arg_250[1] != arg_314[0] && arg_250[1] == arg_148[1] && arg_250[1] == arg_156[1] && arg_250[1] == arg_70[1] && arg_250[1] == arg_231[1] && arg_250[1] == arg_32[1] && arg_250[1] == arg_210[1] && arg_250[1] != arg_22[0] && arg_250[1] != arg_276[0] && arg_250[1] != arg_95[0] && arg_250[1] != arg_73[0] && arg_250[1] != arg_70[0] && arg_250[1] != arg_121[0] && arg_250[1] != arg_268[0] && arg_250[1] == arg_299[1] && arg_250[1] != arg_138[0] && arg_250[1] != arg_175[0] && arg_250[1] == arg_17[1] && arg_250[1] == arg_213[1] && arg_250[1] != arg_14[0] && arg_250[1] != arg_25[0] && arg_250[1] == arg_133[1] && arg_250[1] != arg_291[0] && arg_250[1] == arg_271[1] && arg_268[1] != arg_130[0] && arg_268[1] == arg_130[1] && arg_268[1] != arg_309[0] && arg_268[1] == arg_236[1] && arg_268[1] == arg_317[1] && arg_268[1] == arg_92[1] && arg_268[1] != arg_60[0] && arg_268[1] == arg_110[1] && arg_268[1] == arg_288[1] && arg_268[1] != arg_228[0] && arg_268[1] != arg_210[0] && arg_268[1] != arg_81[0] && arg_268[1] != arg_190[0] && arg_268[1] != arg_231[0] && arg_268[1] != arg_218[0] && arg_268[1] == arg_314[1] && arg_268[1] == arg_55[1] && arg_268[1] == arg_276[1] && arg_268[1] == arg_14[1] && arg_268[1] == arg_175[1] && arg_268[1] == arg_306[1] && arg_268[1] == arg_22[1] && arg_268[1] == arg_198[1] && arg_268[1] == arg_221[1] && arg_268[1] == arg_141[1] && arg_268[1] == arg_159[1] && arg_268[1] != arg_40[0] && arg_268[1] == arg_261[1] && arg_268[1] != arg_299[0] && arg_268[1] != arg_35[0] && arg_268[1] != arg_317[0] && arg_268[1] != arg_180[0] && arg_268[1] == arg_118[1] && arg_268[1] != arg_221[0] && arg_268[1] == arg_279[1] && arg_268[1] != arg_92[0] && arg_268[1] != arg_63[0] && arg_268[1] != arg_43[0] && arg_268[1] != arg_306[0] && arg_268[1] != arg_52[0] && arg_268[1] != arg_133[0] && arg_268[1] != arg_239[0] && arg_268[1] == arg_35[1] && arg_268[1] == arg_228[1] && arg_268[1] == arg_95[1] && arg_268[1] != arg_172[0] && arg_268[1] == arg_113[1] && arg_268[1] == arg_193[1] && arg_268[1] == arg_52[1] && arg_268[1] != arg_55[0] && arg_268[1] == arg_183[1] && arg_268[1] != arg_236[0] && arg_268[1] != arg_148[0] && arg_268[1] == arg_296[1] && arg_268[1] == arg_73[1] && arg_268[1] == arg_25[1] && arg_268[1] == arg_63[1] && arg_268[1] != arg_17[0] && arg_268[1] != arg_279[0] && arg_268[1] != arg_103[0] && arg_268[1] != arg_113[0] && arg_268[1] == arg_151[1] && arg_268[1] != arg_271[0] && arg_268[1] != arg_100[0] && arg_268[1] == arg_172[1] && arg_268[1] == arg_239[1] && arg_268[1] != arg_32[0] && arg_268[1] == arg_43[1] && arg_268[1] == arg_309[1] && arg_268[1] != arg_78[0] && arg_268[1] == arg_190[1] && arg_268[1] != arg_198[0] && arg_268[1] == arg_258[1] && arg_268[1] != arg_296[0] && arg_268[1] == arg_60[1] && arg_268[1] == arg_78[1] && arg_268[1] == arg_121[1] && arg_268[1] != arg_250[0] && arg_268[1] != arg_314[0] && arg_268[1] == arg_148[1] && arg_268[1] == arg_156[1] && arg_268[1] == arg_70[1] && arg_268[1] == arg_231[1] && arg_268[1] == arg_32[1] && arg_268[1] == arg_210[1] && arg_268[1] != arg_22[0] && arg_268[1] != arg_276[0] && arg_268[1] != arg_95[0] && arg_268[1] != arg_73[0] && arg_268[1] != arg_70[0] && arg_268[1] != arg_121[0] && arg_268[1] != arg_268[0] && arg_268[1] == arg_299[1] && arg_268[1] != arg_138[0] && arg_268[1] != arg_175[0] && arg_268[1] == arg_17[1] && arg_268[1] == arg_213[1] && arg_268[1] != arg_14[0] && arg_268[1] != arg_25[0] && arg_268[1] == arg_133[1] && arg_268[1] != arg_291[0] && arg_268[1] == arg_271[1] && arg_130[0] != arg_130[1] && arg_130[0] == arg_309[0] && arg_130[0] != arg_236[1] && arg_130[0] != arg_317[1] && arg_130[0] != arg_92[1] && arg_130[0] == arg_60[0] && arg_130[0] != arg_110[1] && arg_130[0] != arg_288[1] && arg_130[0] == arg_228[0] && arg_130[0] == arg_210[0] && arg_130[0] == arg_81[0] && arg_130[0] == arg_190[0] && arg_130[0] == arg_231[0] && arg_130[0] == arg_218[0] && arg_130[0] != arg_314[1] && arg_130[0] != arg_55[1] && arg_130[0] != arg_276[1] && arg_130[0] != arg_14[1] && arg_130[0] != arg_175[1] && arg_130[0] != arg_306[1] && arg_130[0] != arg_22[1] && arg_130[0] != arg_198[1] && arg_130[0] != arg_221[1] && arg_130[0] != arg_141[1] && arg_130[0] != arg_159[1] && arg_130[0] == arg_40[0] && arg_130[0] != arg_261[1] && arg_130[0] == arg_299[0] && arg_130[0] == arg_35[0] && arg_130[0] == arg_317[0] && arg_130[0] == arg_180[0] && arg_130[0] != arg_118[1] && arg_130[0] == arg_221[0] && arg_130[0] != arg_279[1] && arg_130[0] == arg_92[0] && arg_130[0] == arg_63[0] && arg_130[0] == arg_43[0] && arg_130[0] == arg_306[0] && arg_130[0] == arg_52[0] && arg_130[0] == arg_133[0] && arg_130[0] == arg_239[0] && arg_130[0] != arg_35[1] && arg_130[0] != arg_228[1] && arg_130[0] != arg_95[1] && arg_130[0] == arg_172[0] && arg_130[0] != arg_113[1] && arg_130[0] != arg_193[1] && arg_130[0] != arg_52[1] && arg_130[0] == arg_55[0] && arg_130[0] != arg_183[1] && arg_130[0] == arg_236[0] && arg_130[0] == arg_148[0] && arg_130[0] != arg_296[1] && arg_130[0] != arg_73[1] && arg_130[0] != arg_25[1] && arg_130[0] != arg_63[1] && arg_130[0] == arg_17[0] && arg_130[0] == arg_279[0] && arg_130[0] == arg_103[0] && arg_130[0] == arg_113[0] && arg_130[0] != arg_151[1] && arg_130[0] == arg_271[0] && arg_130[0] == arg_100[0] && arg_130[0] != arg_172[1] && arg_130[0] != arg_239[1] && arg_130[0] == arg_32[0] && arg_130[0] != arg_43[1] && arg_130[0] != arg_309[1] && arg_130[0] == arg_78[0] && arg_130[0] != arg_190[1] && arg_130[0] == arg_198[0] && arg_130[0] != arg_258[1] && arg_130[0] == arg_296[0] && arg_130[0] != arg_60[1] && arg_130[0] != arg_78[1] && arg_130[0] != arg_121[1] && arg_130[0] == arg_250[0] && arg_130[0] == arg_314[0] && arg_130[0] != arg_148[1] && arg_130[0] != arg_156[1] && arg_130[0] != arg_70[1] && arg_130[0] != arg_231[1] && arg_130[0] != arg_32[1] && arg_130[0] != arg_210[1] && arg_130[0] == arg_22[0] && arg_130[0] == arg_276[0] && arg_130[0] == arg_95[0] && arg_130[0] == arg_73[0] && arg_130[0] == arg_70[0] && arg_130[0] == arg_121[0] && arg_130[0] == arg_268[0] && arg_130[0] != arg_299[1] && arg_130[0] == arg_138[0] && arg_130[0] == arg_175[0] && arg_130[0] != arg_17[1] && arg_130[0] != arg_213[1] && arg_130[0] == arg_14[0] && arg_130[0] == arg_25[0] && arg_130[0] != arg_133[1] && arg_130[0] == arg_291[0] && arg_130[0] != arg_271[1] && arg_130[1] != arg_309[0] && arg_130[1] == arg_236[1] && arg_130[1] == arg_317[1] && arg_130[1] == arg_92[1] && arg_130[1] != arg_60[0] && arg_130[1] == arg_110[1] && arg_130[1] == arg_288[1] && arg_130[1] != arg_228[0] && arg_130[1] != arg_210[0] && arg_130[1] != arg_81[0] && arg_130[1] != arg_190[0] && arg_130[1] != arg_231[0] && arg_130[1] != arg_218[0] && arg_130[1] == arg_314[1] && arg_130[1] == arg_55[1] && arg_130[1] == arg_276[1] && arg_130[1] == arg_14[1] && arg_130[1] == arg_175[1] && arg_130[1] == arg_306[1] && arg_130[1] == arg_22[1] && arg_130[1] == arg_198[1] && arg_130[1] == arg_221[1] && arg_130[1] == arg_141[1] && arg_130[1] == arg_159[1] && arg_130[1] != arg_40[0] && arg_130[1] == arg_261[1] && arg_130[1] != arg_299[0] && arg_130[1] != arg_35[0] && arg_130[1] != arg_317[0] && arg_130[1] != arg_180[0] && arg_130[1] == arg_118[1] && arg_130[1] != arg_221[0] && arg_130[1] == arg_279[1] && arg_130[1] != arg_92[0] && arg_130[1] != arg_63[0] && arg_130[1] != arg_43[0] && arg_130[1] != arg_306[0] && arg_130[1] != arg_52[0] && arg_130[1] != arg_133[0] && arg_130[1] != arg_239[0] && arg_130[1] == arg_35[1] && arg_130[1] == arg_228[1] && arg_130[1] == arg_95[1] && arg_130[1] != arg_172[0] && arg_130[1] == arg_113[1] && arg_130[1] == arg_193[1] && arg_130[1] == arg_52[1] && arg_130[1] != arg_55[0] && arg_130[1] == arg_183[1] && arg_130[1] != arg_236[0] && arg_130[1] != arg_148[0] && arg_130[1] == arg_296[1] && arg_130[1] == arg_73[1] && arg_130[1] == arg_25[1] && arg_130[1] == arg_63[1] && arg_130[1] != arg_17[0] && arg_130[1] != arg_279[0] && arg_130[1] != arg_103[0] && arg_130[1] != arg_113[0] && arg_130[1] == arg_151[1] && arg_130[1] != arg_271[0] && arg_130[1] != arg_100[0] && arg_130[1] == arg_172[1] && arg_130[1] == arg_239[1] && arg_130[1] != arg_32[0] && arg_130[1] == arg_43[1] && arg_130[1] == arg_309[1] && arg_130[1] != arg_78[0] && arg_130[1] == arg_190[1] && arg_130[1] != arg_198[0] && arg_130[1] == arg_258[1] && arg_130[1] != arg_296[0] && arg_130[1] == arg_60[1] && arg_130[1] == arg_78[1] && arg_130[1] == arg_121[1] && arg_130[1] != arg_250[0] && arg_130[1] != arg_314[0] && arg_130[1] == arg_148[1] && arg_130[1] == arg_156[1] && arg_130[1] == arg_70[1] && arg_130[1] == arg_231[1] && arg_130[1] == arg_32[1] && arg_130[1] == arg_210[1] && arg_130[1] != arg_22[0] && arg_130[1] != arg_276[0] && arg_130[1] != arg_95[0] && arg_130[1] != arg_73[0] && arg_130[1] != arg_70[0] && arg_130[1] != arg_121[0] && arg_130[1] != arg_268[0] && arg_130[1] == arg_299[1] && arg_130[1] != arg_138[0] && arg_130[1] != arg_175[0] && arg_130[1] == arg_17[1] && arg_130[1] == arg_213[1] && arg_130[1] != arg_14[0] && arg_130[1] != arg_25[0] && arg_130[1] == arg_133[1] && arg_130[1] != arg_291[0] && arg_130[1] == arg_271[1] && arg_309[0] != arg_236[1] && arg_309[0] != arg_317[1] && arg_309[0] != arg_92[1] && arg_309[0] == arg_60[0] && arg_309[0] != arg_110[1] && arg_309[0] != arg_288[1] && arg_309[0] == arg_228[0] && arg_309[0] == arg_210[0] && arg_309[0] == arg_81[0] && arg_309[0] == arg_190[0] && arg_309[0] == arg_231[0] && arg_309[0] == arg_218[0] && arg_309[0] != arg_314[1] && arg_309[0] != arg_55[1] && arg_309[0] != arg_276[1] && arg_309[0] != arg_14[1] && arg_309[0] != arg_175[1] && arg_309[0] != arg_306[1] && arg_309[0] != arg_22[1] && arg_309[0] != arg_198[1] && arg_309[0] != arg_221[1] && arg_309[0] != arg_141[1] && arg_309[0] != arg_159[1] && arg_309[0] == arg_40[0] && arg_309[0] != arg_261[1] && arg_309[0] == arg_299[0] && arg_309[0] == arg_35[0] && arg_309[0] == arg_317[0] && arg_309[0] == arg_180[0] && arg_309[0] != arg_118[1] && arg_309[0] == arg_221[0] && arg_309[0] != arg_279[1] && arg_309[0] == arg_92[0] && arg_309[0] == arg_63[0] && arg_309[0] == arg_43[0] && arg_309[0] == arg_306[0] && arg_309[0] == arg_52[0] && arg_309[0] == arg_133[0] && arg_309[0] == arg_239[0] && arg_309[0] != arg_35[1] && arg_309[0] != arg_228[1] && arg_309[0] != arg_95[1] && arg_309[0] == arg_172[0] && arg_309[0] != arg_113[1] && arg_309[0] != arg_193[1] && arg_309[0] != arg_52[1] && arg_309[0] == arg_55[0] && arg_309[0] != arg_183[1] && arg_309[0] == arg_236[0] && arg_309[0] == arg_148[0] && arg_309[0] != arg_296[1] && arg_309[0] != arg_73[1] && arg_309[0] != arg_25[1] && arg_309[0] != arg_63[1] && arg_309[0] == arg_17[0] && arg_309[0] == arg_279[0] && arg_309[0] == arg_103[0] && arg_309[0] == arg_113[0] && arg_309[0] != arg_151[1] && arg_309[0] == arg_271[0] && arg_309[0] == arg_100[0] && arg_309[0] != arg_172[1] && arg_309[0] != arg_239[1] && arg_309[0] == arg_32[0] && arg_309[0] != arg_43[1] && arg_309[0] != arg_309[1] && arg_309[0] == arg_78[0] && arg_309[0] != arg_190[1] && arg_309[0] == arg_198[0] && arg_309[0] != arg_258[1] && arg_309[0] == arg_296[0] && arg_309[0] != arg_60[1] && arg_309[0] != arg_78[1] && arg_309[0] != arg_121[1] && arg_309[0] == arg_250[0] && arg_309[0] == arg_314[0] && arg_309[0] != arg_148[1] && arg_309[0] != arg_156[1] && arg_309[0] != arg_70[1] && arg_309[0] != arg_231[1] && arg_309[0] != arg_32[1] && arg_309[0] != arg_210[1] && arg_309[0] == arg_22[0] && arg_309[0] == arg_276[0] && arg_309[0] == arg_95[0] && arg_309[0] == arg_73[0] && arg_309[0] == arg_70[0] && arg_309[0] == arg_121[0] && arg_309[0] == arg_268[0] && arg_309[0] != arg_299[1] && arg_309[0] == arg_138[0] && arg_309[0] == arg_175[0] && arg_309[0] != arg_17[1] && arg_309[0] != arg_213[1] && arg_309[0] == arg_14[0] && arg_309[0] == arg_25[0] && arg_309[0] != arg_133[1] && arg_309[0] == arg_291[0] && arg_309[0] != arg_271[1] && arg_236[1] == arg_317[1] && arg_236[1] == arg_92[1] && arg_236[1] != arg_60[0] && arg_236[1] == arg_110[1] && arg_236[1] == arg_288[1] && arg_236[1] != arg_228[0] && arg_236[1] != arg_210[0] && arg_236[1] != arg_81[0] && arg_236[1] != arg_190[0] && arg_236[1] != arg_231[0] && arg_236[1] != arg_218[0] && arg_236[1] == arg_314[1] && arg_236[1] == arg_55[1] && arg_236[1] == arg_276[1] && arg_236[1] == arg_14[1] && arg_236[1] == arg_175[1] && arg_236[1] == arg_306[1] && arg_236[1] == arg_22[1] && arg_236[1] == arg_198[1] && arg_236[1] == arg_221[1] && arg_236[1] == arg_141[1] && arg_236[1] == arg_159[1] && arg_236[1] != arg_40[0] && arg_236[1] == arg_261[1] && arg_236[1] != arg_299[0] && arg_236[1] != arg_35[0] && arg_236[1] != arg_317[0] && arg_236[1] != arg_180[0] && arg_236[1] == arg_118[1] && arg_236[1] != arg_221[0] && arg_236[1] == arg_279[1] && arg_236[1] != arg_92[0] && arg_236[1] != arg_63[0] && arg_236[1] != arg_43[0] && arg_236[1] != arg_306[0] && arg_236[1] != arg_52[0] && arg_236[1] != arg_133[0] && arg_236[1] != arg_239[0] && arg_236[1] == arg_35[1] && arg_236[1] == arg_228[1] && arg_236[1] == arg_95[1] && arg_236[1] != arg_172[0] && arg_236[1] == arg_113[1] && arg_236[1] == arg_193[1] && arg_236[1] == arg_52[1] && arg_236[1] != arg_55[0] && arg_236[1] == arg_183[1] && arg_236[1] != arg_236[0] && arg_236[1] != arg_148[0] && arg_236[1] == arg_296[1] && arg_236[1] == arg_73[1] && arg_236[1] == arg_25[1] && arg_236[1] == arg_63[1] && arg_236[1] != arg_17[0] && arg_236[1] != arg_279[0] && arg_236[1] != arg_103[0] && arg_236[1] != arg_113[0] && arg_236[1] == arg_151[1] && arg_236[1] != arg_271[0] && arg_236[1] != arg_100[0] && arg_236[1] == arg_172[1] && arg_236[1] == arg_239[1] && arg_236[1] != arg_32[0] && arg_236[1] == arg_43[1] && arg_236[1] == arg_309[1] && arg_236[1] != arg_78[0] && arg_236[1] == arg_190[1] && arg_236[1] != arg_198[0] && arg_236[1] == arg_258[1] && arg_236[1] != arg_296[0] && arg_236[1] == arg_60[1] && arg_236[1] == arg_78[1] && arg_236[1] == arg_121[1] && arg_236[1] != arg_250[0] && arg_236[1] != arg_314[0] && arg_236[1] == arg_148[1] && arg_236[1] == arg_156[1] && arg_236[1] == arg_70[1] && arg_236[1] == arg_231[1] && arg_236[1] == arg_32[1] && arg_236[1] == arg_210[1] && arg_236[1] != arg_22[0] && arg_236[1] != arg_276[0] && arg_236[1] != arg_95[0] && arg_236[1] != arg_73[0] && arg_236[1] != arg_70[0] && arg_236[1] != arg_121[0] && arg_236[1] != arg_268[0] && arg_236[1] == arg_299[1] && arg_236[1] != arg_138[0] && arg_236[1] != arg_175[0] && arg_236[1] == arg_17[1] && arg_236[1] == arg_213[1] && arg_236[1] != arg_14[0] && arg_236[1] != arg_25[0] && arg_236[1] == arg_133[1] && arg_236[1] != arg_291[0] && arg_236[1] == arg_271[1] && arg_317[1] == arg_92[1] && arg_317[1] != arg_60[0] && arg_317[1] == arg_110[1] && arg_317[1] == arg_288[1] && arg_317[1] != arg_228[0] && arg_317[1] != arg_210[0] && arg_317[1] != arg_81[0] && arg_317[1] != arg_190[0] && arg_317[1] != arg_231[0] && arg_317[1] != arg_218[0] && arg_317[1] == arg_314[1] && arg_317[1] == arg_55[1] && arg_317[1] == arg_276[1] && arg_317[1] == arg_14[1] && arg_317[1] == arg_175[1] && arg_317[1] == arg_306[1] && arg_317[1] == arg_22[1] && arg_317[1] == arg_198[1] && arg_317[1] == arg_221[1] && arg_317[1] == arg_141[1] && arg_317[1] == arg_159[1] && arg_317[1] != arg_40[0] && arg_317[1] == arg_261[1] && arg_317[1] != arg_299[0] && arg_317[1] != arg_35[0] && arg_317[1] != arg_317[0] && arg_317[1] != arg_180[0] && arg_317[1] == arg_118[1] && arg_317[1] != arg_221[0] && arg_317[1] == arg_279[1] && arg_317[1] != arg_92[0] && arg_317[1] != arg_63[0] && arg_317[1] != arg_43[0] && arg_317[1] != arg_306[0] && arg_317[1] != arg_52[0] && arg_317[1] != arg_133[0] && arg_317[1] != arg_239[0] && arg_317[1] == arg_35[1] && arg_317[1] == arg_228[1] && arg_317[1] == arg_95[1] && arg_317[1] != arg_172[0] && arg_317[1] == arg_113[1] && arg_317[1] == arg_193[1] && arg_317[1] == arg_52[1] && arg_317[1] != arg_55[0] && arg_317[1] == arg_183[1] && arg_317[1] != arg_236[0] && arg_317[1] != arg_148[0] && arg_317[1] == arg_296[1] && arg_317[1] == arg_73[1] && arg_317[1] == arg_25[1] && arg_317[1] == arg_63[1] && arg_317[1] != arg_17[0] && arg_317[1] != arg_279[0] && arg_317[1] != arg_103[0] && arg_317[1] != arg_113[0] && arg_317[1] == arg_151[1] && arg_317[1] != arg_271[0] && arg_317[1] != arg_100[0] && arg_317[1] == arg_172[1] && arg_317[1] == arg_239[1] && arg_317[1] != arg_32[0] && arg_317[1] == arg_43[1] && arg_317[1] == arg_309[1] && arg_317[1] != arg_78[0] && arg_317[1] == arg_190[1] && arg_317[1] != arg_198[0] && arg_317[1] == arg_258[1] && arg_317[1] != arg_296[0] && arg_317[1] == arg_60[1] && arg_317[1] == arg_78[1] && arg_317[1] == arg_121[1] && arg_317[1] != arg_250[0] && arg_317[1] != arg_314[0] && arg_317[1] == arg_148[1] && arg_317[1] == arg_156[1] && arg_317[1] == arg_70[1] && arg_317[1] == arg_231[1] && arg_317[1] == arg_32[1] && arg_317[1] == arg_210[1] && arg_317[1] != arg_22[0] && arg_317[1] != arg_276[0] && arg_317[1] != arg_95[0] && arg_317[1] != arg_73[0] && arg_317[1] != arg_70[0] && arg_317[1] != arg_121[0] && arg_317[1] != arg_268[0] && arg_317[1] == arg_299[1] && arg_317[1] != arg_138[0] && arg_317[1] != arg_175[0] && arg_317[1] == arg_17[1] && arg_317[1] == arg_213[1] && arg_317[1] != arg_14[0] && arg_317[1] != arg_25[0] && arg_317[1] == arg_133[1] && arg_317[1] != arg_291[0] && arg_317[1] == arg_271[1] && arg_92[1] != arg_60[0] && arg_92[1] == arg_110[1] && arg_92[1] == arg_288[1] && arg_92[1] != arg_228[0] && arg_92[1] != arg_210[0] && arg_92[1] != arg_81[0] && arg_92[1] != arg_190[0] && arg_92[1] != arg_231[0] && arg_92[1] != arg_218[0] && arg_92[1] == arg_314[1] && arg_92[1] == arg_55[1] && arg_92[1] == arg_276[1] && arg_92[1] == arg_14[1] && arg_92[1] == arg_175[1] && arg_92[1] == arg_306[1] && arg_92[1] == arg_22[1] && arg_92[1] == arg_198[1] && arg_92[1] == arg_221[1] && arg_92[1] == arg_141[1] && arg_92[1] == arg_159[1] && arg_92[1] != arg_40[0] && arg_92[1] == arg_261[1] && arg_92[1] != arg_299[0] && arg_92[1] != arg_35[0] && arg_92[1] != arg_317[0] && arg_92[1] != arg_180[0] && arg_92[1] == arg_118[1] && arg_92[1] != arg_221[0] && arg_92[1] == arg_279[1] && arg_92[1] != arg_92[0] && arg_92[1] != arg_63[0] && arg_92[1] != arg_43[0] && arg_92[1] != arg_306[0] && arg_92[1] != arg_52[0] && arg_92[1] != arg_133[0] && arg_92[1] != arg_239[0] && arg_92[1] == arg_35[1] && arg_92[1] == arg_228[1] && arg_92[1] == arg_95[1] && arg_92[1] != arg_172[0] && arg_92[1] == arg_113[1] && arg_92[1] == arg_193[1] && arg_92[1] == arg_52[1] && arg_92[1] != arg_55[0] && arg_92[1] == arg_183[1] && arg_92[1] != arg_236[0] && arg_92[1] != arg_148[0] && arg_92[1] == arg_296[1] && arg_92[1] == arg_73[1] && arg_92[1] == arg_25[1] && arg_92[1] == arg_63[1] && arg_92[1] != arg_17[0] && arg_92[1] != arg_279[0] && arg_92[1] != arg_103[0] && arg_92[1] != arg_113[0] && arg_92[1] == arg_151[1] && arg_92[1] != arg_271[0] && arg_92[1] != arg_100[0] && arg_92[1] == arg_172[1] && arg_92[1] == arg_239[1] && arg_92[1] != arg_32[0] && arg_92[1] == arg_43[1] && arg_92[1] == arg_309[1] && arg_92[1] != arg_78[0] && arg_92[1] == arg_190[1] && arg_92[1] != arg_198[0] && arg_92[1] == arg_258[1] && arg_92[1] != arg_296[0] && arg_92[1] == arg_60[1] && arg_92[1] == arg_78[1] && arg_92[1] == arg_121[1] && arg_92[1] != arg_250[0] && arg_92[1] != arg_314[0] && arg_92[1] == arg_148[1] && arg_92[1] == arg_156[1] && arg_92[1] == arg_70[1] && arg_92[1] == arg_231[1] && arg_92[1] == arg_32[1] && arg_92[1] == arg_210[1] && arg_92[1] != arg_22[0] && arg_92[1] != arg_276[0] && arg_92[1] != arg_95[0] && arg_92[1] != arg_73[0] && arg_92[1] != arg_70[0] && arg_92[1] != arg_121[0] && arg_92[1] != arg_268[0] && arg_92[1] == arg_299[1] && arg_92[1] != arg_138[0] && arg_92[1] != arg_175[0] && arg_92[1] == arg_17[1] && arg_92[1] == arg_213[1] && arg_92[1] != arg_14[0] && arg_92[1] != arg_25[0] && arg_92[1] == arg_133[1] && arg_92[1] != arg_291[0] && arg_92[1] == arg_271[1] && arg_60[0] != arg_110[1] && arg_60[0] != arg_288[1] && arg_60[0] == arg_228[0] && arg_60[0] == arg_210[0] && arg_60[0] == arg_81[0] && arg_60[0] == arg_190[0] && arg_60[0] == arg_231[0] && arg_60[0] == arg_218[0] && arg_60[0] != arg_314[1] && arg_60[0] != arg_55[1] && arg_60[0] != arg_276[1] && arg_60[0] != arg_14[1] && arg_60[0] != arg_175[1] && arg_60[0] != arg_306[1] && arg_60[0] != arg_22[1] && arg_60[0] != arg_198[1] && arg_60[0] != arg_221[1] && arg_60[0] != arg_141[1] && arg_60[0] != arg_159[1] && arg_60[0] == arg_40[0] && arg_60[0] != arg_261[1] && arg_60[0] == arg_299[0] && arg_60[0] == arg_35[0] && arg_60[0] == arg_317[0] && arg_60[0] == arg_180[0] && arg_60[0] != arg_118[1] && arg_60[0] == arg_221[0] && arg_60[0] != arg_279[1] && arg_60[0] == arg_92[0] && arg_60[0] == arg_63[0] && arg_60[0] == arg_43[0] && arg_60[0] == arg_306[0] && arg_60[0] == arg_52[0] && arg_60[0] == arg_133[0] && arg_60[0] == arg_239[0] && arg_60[0] != arg_35[1] && arg_60[0] != arg_228[1] && arg_60[0] != arg_95[1] && arg_60[0] == arg_172[0] && arg_60[0] != arg_113[1] && arg_60[0] != arg_193[1] && arg_60[0] != arg_52[1] && arg_60[0] == arg_55[0] && arg_60[0] != arg_183[1] && arg_60[0] == arg_236[0] && arg_60[0] == arg_148[0] && arg_60[0] != arg_296[1] && arg_60[0] != arg_73[1] && arg_60[0] != arg_25[1] && arg_60[0] != arg_63[1] && arg_60[0] == arg_17[0] && arg_60[0] == arg_279[0] && arg_60[0] == arg_103[0] && arg_60[0] == arg_113[0] && arg_60[0] != arg_151[1] && arg_60[0] == arg_271[0] && arg_60[0] == arg_100[0] && arg_60[0] != arg_172[1] && arg_60[0] != arg_239[1] && arg_60[0] == arg_32[0] && arg_60[0] != arg_43[1] && arg_60[0] != arg_309[1] && arg_60[0] == arg_78[0] && arg_60[0] != arg_190[1] && arg_60[0] == arg_198[0] && arg_60[0] != arg_258[1] && arg_60[0] == arg_296[0] && arg_60[0] != arg_60[1] && arg_60[0] != arg_78[1] && arg_60[0] != arg_121[1] && arg_60[0] == arg_250[0] && arg_60[0] == arg_314[0] && arg_60[0] != arg_148[1] && arg_60[0] != arg_156[1] && arg_60[0] != arg_70[1] && arg_60[0] != arg_231[1] && arg_60[0] != arg_32[1] && arg_60[0] != arg_210[1] && arg_60[0] == arg_22[0] && arg_60[0] == arg_276[0] && arg_60[0] == arg_95[0] && arg_60[0] == arg_73[0] && arg_60[0] == arg_70[0] && arg_60[0] == arg_121[0] && arg_60[0] == arg_268[0] && arg_60[0] != arg_299[1] && arg_60[0] == arg_138[0] && arg_60[0] == arg_175[0] && arg_60[0] != arg_17[1] && arg_60[0] != arg_213[1] && arg_60[0] == arg_14[0] && arg_60[0] == arg_25[0] && arg_60[0] != arg_133[1] && arg_60[0] == arg_291[0] && arg_60[0] != arg_271[1] && arg_110[1] == arg_288[1] && arg_110[1] != arg_228[0] && arg_110[1] != arg_210[0] && arg_110[1] != arg_81[0] && arg_110[1] != arg_190[0] && arg_110[1] != arg_231[0] && arg_110[1] != arg_218[0] && arg_110[1] == arg_314[1] && arg_110[1] == arg_55[1] && arg_110[1] == arg_276[1] && arg_110[1] == arg_14[1] && arg_110[1] == arg_175[1] && arg_110[1] == arg_306[1] && arg_110[1] == arg_22[1] && arg_110[1] == arg_198[1] && arg_110[1] == arg_221[1] && arg_110[1] == arg_141[1] && arg_110[1] == arg_159[1] && arg_110[1] != arg_40[0] && arg_110[1] == arg_261[1] && arg_110[1] != arg_299[0] && arg_110[1] != arg_35[0] && arg_110[1] != arg_317[0] && arg_110[1] != arg_180[0] && arg_110[1] == arg_118[1] && arg_110[1] != arg_221[0] && arg_110[1] == arg_279[1] && arg_110[1] != arg_92[0] && arg_110[1] != arg_63[0] && arg_110[1] != arg_43[0] && arg_110[1] != arg_306[0] && arg_110[1] != arg_52[0] && arg_110[1] != arg_133[0] && arg_110[1] != arg_239[0] && arg_110[1] == arg_35[1] && arg_110[1] == arg_228[1] && arg_110[1] == arg_95[1] && arg_110[1] != arg_172[0] && arg_110[1] == arg_113[1] && arg_110[1] == arg_193[1] && arg_110[1] == arg_52[1] && arg_110[1] != arg_55[0] && arg_110[1] == arg_183[1] && arg_110[1] != arg_236[0] && arg_110[1] != arg_148[0] && arg_110[1] == arg_296[1] && arg_110[1] == arg_73[1] && arg_110[1] == arg_25[1] && arg_110[1] == arg_63[1] && arg_110[1] != arg_17[0] && arg_110[1] != arg_279[0] && arg_110[1] != arg_103[0] && arg_110[1] != arg_113[0] && arg_110[1] == arg_151[1] && arg_110[1] != arg_271[0] && arg_110[1] != arg_100[0] && arg_110[1] == arg_172[1] && arg_110[1] == arg_239[1] && arg_110[1] != arg_32[0] && arg_110[1] == arg_43[1] && arg_110[1] == arg_309[1] && arg_110[1] != arg_78[0] && arg_110[1] == arg_190[1] && arg_110[1] != arg_198[0] && arg_110[1] == arg_258[1] && arg_110[1] != arg_296[0] && arg_110[1] == arg_60[1] && arg_110[1] == arg_78[1] && arg_110[1] == arg_121[1] && arg_110[1] != arg_250[0] && arg_110[1] != arg_314[0] && arg_110[1] == arg_148[1] && arg_110[1] == arg_156[1] && arg_110[1] == arg_70[1] && arg_110[1] == arg_231[1] && arg_110[1] == arg_32[1] && arg_110[1] == arg_210[1] && arg_110[1] != arg_22[0] && arg_110[1] != arg_276[0] && arg_110[1] != arg_95[0] && arg_110[1] != arg_73[0] && arg_110[1] != arg_70[0] && arg_110[1] != arg_121[0] && arg_110[1] != arg_268[0] && arg_110[1] == arg_299[1] && arg_110[1] != arg_138[0] && arg_110[1] != arg_175[0] && arg_110[1] == arg_17[1] && arg_110[1] == arg_213[1] && arg_110[1] != arg_14[0] && arg_110[1] != arg_25[0] && arg_110[1] == arg_133[1] && arg_110[1] != arg_291[0] && arg_110[1] == arg_271[1] && arg_288[1] != arg_228[0] && arg_288[1] != arg_210[0] && arg_288[1] != arg_81[0] && arg_288[1] != arg_190[0] && arg_288[1] != arg_231[0] && arg_288[1] != arg_218[0] && arg_288[1] == arg_314[1] && arg_288[1] == arg_55[1] && arg_288[1] == arg_276[1] && arg_288[1] == arg_14[1] && arg_288[1] == arg_175[1] && arg_288[1] == arg_306[1] && arg_288[1] == arg_22[1] && arg_288[1] == arg_198[1] && arg_288[1] == arg_221[1] && arg_288[1] == arg_141[1] && arg_288[1] == arg_159[1] && arg_288[1] != arg_40[0] && arg_288[1] == arg_261[1] && arg_288[1] != arg_299[0] && arg_288[1] != arg_35[0] && arg_288[1] != arg_317[0] && arg_288[1] != arg_180[0] && arg_288[1] == arg_118[1] && arg_288[1] != arg_221[0] && arg_288[1] == arg_279[1] && arg_288[1] != arg_92[0] && arg_288[1] != arg_63[0] && arg_288[1] != arg_43[0] && arg_288[1] != arg_306[0] && arg_288[1] != arg_52[0] && arg_288[1] != arg_133[0] && arg_288[1] != arg_239[0] && arg_288[1] == arg_35[1] && arg_288[1] == arg_228[1] && arg_288[1] == arg_95[1] && arg_288[1] != arg_172[0] && arg_288[1] == arg_113[1] && arg_288[1] == arg_193[1] && arg_288[1] == arg_52[1] && arg_288[1] != arg_55[0] && arg_288[1] == arg_183[1] && arg_288[1] != arg_236[0] && arg_288[1] != arg_148[0] && arg_288[1] == arg_296[1] && arg_288[1] == arg_73[1] && arg_288[1] == arg_25[1] && arg_288[1] == arg_63[1] && arg_288[1] != arg_17[0] && arg_288[1] != arg_279[0] && arg_288[1] != arg_103[0] && arg_288[1] != arg_113[0] && arg_288[1] == arg_151[1] && arg_288[1] != arg_271[0] && arg_288[1] != arg_100[0] && arg_288[1] == arg_172[1] && arg_288[1] == arg_239[1] && arg_288[1] != arg_32[0] && arg_288[1] == arg_43[1] && arg_288[1] == arg_309[1] && arg_288[1] != arg_78[0] && arg_288[1] == arg_190[1] && arg_288[1] != arg_198[0] && arg_288[1] == arg_258[1] && arg_288[1] != arg_296[0] && arg_288[1] == arg_60[1] && arg_288[1] == arg_78[1] && arg_288[1] == arg_121[1] && arg_288[1] != arg_250[0] && arg_288[1] != arg_314[0] && arg_288[1] == arg_148[1] && arg_288[1] == arg_156[1] && arg_288[1] == arg_70[1] && arg_288[1] == arg_231[1] && arg_288[1] == arg_32[1] && arg_288[1] == arg_210[1] && arg_288[1] != arg_22[0] && arg_288[1] != arg_276[0] && arg_288[1] != arg_95[0] && arg_288[1] != arg_73[0] && arg_288[1] != arg_70[0] && arg_288[1] != arg_121[0] && arg_288[1] != arg_268[0] && arg_288[1] == arg_299[1] && arg_288[1] != arg_138[0] && arg_288[1] != arg_175[0] && arg_288[1] == arg_17[1] && arg_288[1] == arg_213[1] && arg_288[1] != arg_14[0] && arg_288[1] != arg_25[0] && arg_288[1] == arg_133[1] && arg_288[1] != arg_291[0] && arg_288[1] == arg_271[1] && arg_228[0] == arg_210[0] && arg_228[0] == arg_81[0] && arg_228[0] == arg_190[0] && arg_228[0] == arg_231[0] && arg_228[0] == arg_218[0] && arg_228[0] != arg_314[1] && arg_228[0] != arg_55[1] && arg_228[0] != arg_276[1] && arg_228[0] != arg_14[1] && arg_228[0] != arg_175[1] && arg_228[0] != arg_306[1] && arg_228[0] != arg_22[1] && arg_228[0] != arg_198[1] && arg_228[0] != arg_221[1] && arg_228[0] != arg_141[1] && arg_228[0] != arg_159[1] && arg_228[0] == arg_40[0] && arg_228[0] != arg_261[1] && arg_228[0] == arg_299[0] && arg_228[0] == arg_35[0] && arg_228[0] == arg_317[0] && arg_228[0] == arg_180[0] && arg_228[0] != arg_118[1] && arg_228[0] == arg_221[0] && arg_228[0] != arg_279[1] && arg_228[0] == arg_92[0] && arg_228[0] == arg_63[0] && arg_228[0] == arg_43[0] && arg_228[0] == arg_306[0] && arg_228[0] == arg_52[0] && arg_228[0] == arg_133[0] && arg_228[0] == arg_239[0] && arg_228[0] != arg_35[1] && arg_228[0] != arg_228[1] && arg_228[0] != arg_95[1] && arg_228[0] == arg_172[0] && arg_228[0] != arg_113[1] && arg_228[0] != arg_193[1] && arg_228[0] != arg_52[1] && arg_228[0] == arg_55[0] && arg_228[0] != arg_183[1] && arg_228[0] == arg_236[0] && arg_228[0] == arg_148[0] && arg_228[0] != arg_296[1] && arg_228[0] != arg_73[1] && arg_228[0] != arg_25[1] && arg_228[0] != arg_63[1] && arg_228[0] == arg_17[0] && arg_228[0] == arg_279[0] && arg_228[0] == arg_103[0] && arg_228[0] == arg_113[0] && arg_228[0] != arg_151[1] && arg_228[0] == arg_271[0] && arg_228[0] == arg_100[0] && arg_228[0] != arg_172[1] && arg_228[0] != arg_239[1] && arg_228[0] == arg_32[0] && arg_228[0] != arg_43[1] && arg_228[0] != arg_309[1] && arg_228[0] == arg_78[0] && arg_228[0] != arg_190[1] && arg_228[0] == arg_198[0] && arg_228[0] != arg_258[1] && arg_228[0] == arg_296[0] && arg_228[0] != arg_60[1] && arg_228[0] != arg_78[1] && arg_228[0] != arg_121[1] && arg_228[0] == arg_250[0] && arg_228[0] == arg_314[0] && arg_228[0] != arg_148[1] && arg_228[0] != arg_156[1] && arg_228[0] != arg_70[1] && arg_228[0] != arg_231[1] && arg_228[0] != arg_32[1] && arg_228[0] != arg_210[1] && arg_228[0] == arg_22[0] && arg_228[0] == arg_276[0] && arg_228[0] == arg_95[0] && arg_228[0] == arg_73[0] && arg_228[0] == arg_70[0] && arg_228[0] == arg_121[0] && arg_228[0] == arg_268[0] && arg_228[0] != arg_299[1] && arg_228[0] == arg_138[0] && arg_228[0] == arg_175[0] && arg_228[0] != arg_17[1] && arg_228[0] != arg_213[1] && arg_228[0] == arg_14[0] && arg_228[0] == arg_25[0] && arg_228[0] != arg_133[1] && arg_228[0] == arg_291[0] && arg_228[0] != arg_271[1] && arg_210[0] == arg_81[0] && arg_210[0] == arg_190[0] && arg_210[0] == arg_231[0] && arg_210[0] == arg_218[0] && arg_210[0] != arg_314[1] && arg_210[0] != arg_55[1] && arg_210[0] != arg_276[1] && arg_210[0] != arg_14[1] && arg_210[0] != arg_175[1] && arg_210[0] != arg_306[1] && arg_210[0] != arg_22[1] && arg_210[0] != arg_198[1] && arg_210[0] != arg_221[1] && arg_210[0] != arg_141[1] && arg_210[0] != arg_159[1] && arg_210[0] == arg_40[0] && arg_210[0] != arg_261[1] && arg_210[0] == arg_299[0] && arg_210[0] == arg_35[0] && arg_210[0] == arg_317[0] && arg_210[0] == arg_180[0] && arg_210[0] != arg_118[1] && arg_210[0] == arg_221[0] && arg_210[0] != arg_279[1] && arg_210[0] == arg_92[0] && arg_210[0] == arg_63[0] && arg_210[0] == arg_43[0] && arg_210[0] == arg_306[0] && arg_210[0] == arg_52[0] && arg_210[0] == arg_133[0] && arg_210[0] == arg_239[0] && arg_210[0] != arg_35[1] && arg_210[0] != arg_228[1] && arg_210[0] != arg_95[1] && arg_210[0] == arg_172[0] && arg_210[0] != arg_113[1] && arg_210[0] != arg_193[1] && arg_210[0] != arg_52[1] && arg_210[0] == arg_55[0] && arg_210[0] != arg_183[1] && arg_210[0] == arg_236[0] && arg_210[0] == arg_148[0] && arg_210[0] != arg_296[1] && arg_210[0] != arg_73[1] && arg_210[0] != arg_25[1] && arg_210[0] != arg_63[1] && arg_210[0] == arg_17[0] && arg_210[0] == arg_279[0] && arg_210[0] == arg_103[0] && arg_210[0] == arg_113[0] && arg_210[0] != arg_151[1] && arg_210[0] == arg_271[0] && arg_210[0] == arg_100[0] && arg_210[0] != arg_172[1] && arg_210[0] != arg_239[1] && arg_210[0] == arg_32[0] && arg_210[0] != arg_43[1] && arg_210[0] != arg_309[1] && arg_210[0] == arg_78[0] && arg_210[0] != arg_190[1] && arg_210[0] == arg_198[0] && arg_210[0] != arg_258[1] && arg_210[0] == arg_296[0] && arg_210[0] != arg_60[1] && arg_210[0] != arg_78[1] && arg_210[0] != arg_121[1] && arg_210[0] == arg_250[0] && arg_210[0] == arg_314[0] && arg_210[0] != arg_148[1] && arg_210[0] != arg_156[1] && arg_210[0] != arg_70[1] && arg_210[0] != arg_231[1] && arg_210[0] != arg_32[1] && arg_210[0] != arg_210[1] && arg_210[0] == arg_22[0] && arg_210[0] == arg_276[0] && arg_210[0] == arg_95[0] && arg_210[0] == arg_73[0] && arg_210[0] == arg_70[0] && arg_210[0] == arg_121[0] && arg_210[0] == arg_268[0] && arg_210[0] != arg_299[1] && arg_210[0] == arg_138[0] && arg_210[0] == arg_175[0] && arg_210[0] != arg_17[1] && arg_210[0] != arg_213[1] && arg_210[0] == arg_14[0] && arg_210[0] == arg_25[0] && arg_210[0] != arg_133[1] && arg_210[0] == arg_291[0] && arg_210[0] != arg_271[1] && arg_81[0] == arg_190[0] && arg_81[0] == arg_231[0] && arg_81[0] == arg_218[0] && arg_81[0] != arg_314[1] && arg_81[0] != arg_55[1] && arg_81[0] != arg_276[1] && arg_81[0] != arg_14[1] && arg_81[0] != arg_175[1] && arg_81[0] != arg_306[1] && arg_81[0] != arg_22[1] && arg_81[0] != arg_198[1] && arg_81[0] != arg_221[1] && arg_81[0] != arg_141[1] && arg_81[0] != arg_159[1] && arg_81[0] == arg_40[0] && arg_81[0] != arg_261[1] && arg_81[0] == arg_299[0] && arg_81[0] == arg_35[0] && arg_81[0] == arg_317[0] && arg_81[0] == arg_180[0] && arg_81[0] != arg_118[1] && arg_81[0] == arg_221[0] && arg_81[0] != arg_279[1] && arg_81[0] == arg_92[0] && arg_81[0] == arg_63[0] && arg_81[0] == arg_43[0] && arg_81[0] == arg_306[0] && arg_81[0] == arg_52[0] && arg_81[0] == arg_133[0] && arg_81[0] == arg_239[0] && arg_81[0] != arg_35[1] && arg_81[0] != arg_228[1] && arg_81[0] != arg_95[1] && arg_81[0] == arg_172[0] && arg_81[0] != arg_113[1] && arg_81[0] != arg_193[1] && arg_81[0] != arg_52[1] && arg_81[0] == arg_55[0] && arg_81[0] != arg_183[1] && arg_81[0] == arg_236[0] && arg_81[0] == arg_148[0] && arg_81[0] != arg_296[1] && arg_81[0] != arg_73[1] && arg_81[0] != arg_25[1] && arg_81[0] != arg_63[1] && arg_81[0] == arg_17[0] && arg_81[0] == arg_279[0] && arg_81[0] == arg_103[0] && arg_81[0] == arg_113[0] && arg_81[0] != arg_151[1] && arg_81[0] == arg_271[0] && arg_81[0] == arg_100[0] && arg_81[0] != arg_172[1] && arg_81[0] != arg_239[1] && arg_81[0] == arg_32[0] && arg_81[0] != arg_43[1] && arg_81[0] != arg_309[1] && arg_81[0] == arg_78[0] && arg_81[0] != arg_190[1] && arg_81[0] == arg_198[0] && arg_81[0] != arg_258[1] && arg_81[0] == arg_296[0] && arg_81[0] != arg_60[1] && arg_81[0] != arg_78[1] && arg_81[0] != arg_121[1] && arg_81[0] == arg_250[0] && arg_81[0] == arg_314[0] && arg_81[0] != arg_148[1] && arg_81[0] != arg_156[1] && arg_81[0] != arg_70[1] && arg_81[0] != arg_231[1] && arg_81[0] != arg_32[1] && arg_81[0] != arg_210[1] && arg_81[0] == arg_22[0] && arg_81[0] == arg_276[0] && arg_81[0] == arg_95[0] && arg_81[0] == arg_73[0] && arg_81[0] == arg_70[0] && arg_81[0] == arg_121[0] && arg_81[0] == arg_268[0] && arg_81[0] != arg_299[1] && arg_81[0] == arg_138[0] && arg_81[0] == arg_175[0] && arg_81[0] != arg_17[1] && arg_81[0] != arg_213[1] && arg_81[0] == arg_14[0] && arg_81[0] == arg_25[0] && arg_81[0] != arg_133[1] && arg_81[0] == arg_291[0] && arg_81[0] != arg_271[1] && arg_190[0] == arg_231[0] && arg_190[0] == arg_218[0] && arg_190[0] != arg_314[1] && arg_190[0] != arg_55[1] && arg_190[0] != arg_276[1] && arg_190[0] != arg_14[1] && arg_190[0] != arg_175[1] && arg_190[0] != arg_306[1] && arg_190[0] != arg_22[1] && arg_190[0] != arg_198[1] && arg_190[0] != arg_221[1] && arg_190[0] != arg_141[1] && arg_190[0] != arg_159[1] && arg_190[0] == arg_40[0] && arg_190[0] != arg_261[1] && arg_190[0] == arg_299[0] && arg_190[0] == arg_35[0] && arg_190[0] == arg_317[0] && arg_190[0] == arg_180[0] && arg_190[0] != arg_118[1] && arg_190[0] == arg_221[0] && arg_190[0] != arg_279[1] && arg_190[0] == arg_92[0] && arg_190[0] == arg_63[0] && arg_190[0] == arg_43[0] && arg_190[0] == arg_306[0] && arg_190[0] == arg_52[0] && arg_190[0] == arg_133[0] && arg_190[0] == arg_239[0] && arg_190[0] != arg_35[1] && arg_190[0] != arg_228[1] && arg_190[0] != arg_95[1] && arg_190[0] == arg_172[0] && arg_190[0] != arg_113[1] && arg_190[0] != arg_193[1] && arg_190[0] != arg_52[1] && arg_190[0] == arg_55[0] && arg_190[0] != arg_183[1] && arg_190[0] == arg_236[0] && arg_190[0] == arg_148[0] && arg_190[0] != arg_296[1] && arg_190[0] != arg_73[1] && arg_190[0] != arg_25[1] && arg_190[0] != arg_63[1] && arg_190[0] == arg_17[0] && arg_190[0] == arg_279[0] && arg_190[0] == arg_103[0] && arg_190[0] == arg_113[0] && arg_190[0] != arg_151[1] && arg_190[0] == arg_271[0] && arg_190[0] == arg_100[0] && arg_190[0] != arg_172[1] && arg_190[0] != arg_239[1] && arg_190[0] == arg_32[0] && arg_190[0] != arg_43[1] && arg_190[0] != arg_309[1] && arg_190[0] == arg_78[0] && arg_190[0] != arg_190[1] && arg_190[0] == arg_198[0] && arg_190[0] != arg_258[1] && arg_190[0] == arg_296[0] && arg_190[0] != arg_60[1] && arg_190[0] != arg_78[1] && arg_190[0] != arg_121[1] && arg_190[0] == arg_250[0] && arg_190[0] == arg_314[0] && arg_190[0] != arg_148[1] && arg_190[0] != arg_156[1] && arg_190[0] != arg_70[1] && arg_190[0] != arg_231[1] && arg_190[0] != arg_32[1] && arg_190[0] != arg_210[1] && arg_190[0] == arg_22[0] && arg_190[0] == arg_276[0] && arg_190[0] == arg_95[0] && arg_190[0] == arg_73[0] && arg_190[0] == arg_70[0] && arg_190[0] == arg_121[0] && arg_190[0] == arg_268[0] && arg_190[0] != arg_299[1] && arg_190[0] == arg_138[0] && arg_190[0] == arg_175[0] && arg_190[0] != arg_17[1] && arg_190[0] != arg_213[1] && arg_190[0] == arg_14[0] && arg_190[0] == arg_25[0] && arg_190[0] != arg_133[1] && arg_190[0] == arg_291[0] && arg_190[0] != arg_271[1] && arg_231[0] == arg_218[0] && arg_231[0] != arg_314[1] && arg_231[0] != arg_55[1] && arg_231[0] != arg_276[1] && arg_231[0] != arg_14[1] && arg_231[0] != arg_175[1] && arg_231[0] != arg_306[1] && arg_231[0] != arg_22[1] && arg_231[0] != arg_198[1] && arg_231[0] != arg_221[1] && arg_231[0] != arg_141[1] && arg_231[0] != arg_159[1] && arg_231[0] == arg_40[0] && arg_231[0] != arg_261[1] && arg_231[0] == arg_299[0] && arg_231[0] == arg_35[0] && arg_231[0] == arg_317[0] && arg_231[0] == arg_180[0] && arg_231[0] != arg_118[1] && arg_231[0] == arg_221[0] && arg_231[0] != arg_279[1] && arg_231[0] == arg_92[0] && arg_231[0] == arg_63[0] && arg_231[0] == arg_43[0] && arg_231[0] == arg_306[0] && arg_231[0] == arg_52[0] && arg_231[0] == arg_133[0] && arg_231[0] == arg_239[0] && arg_231[0] != arg_35[1] && arg_231[0] != arg_228[1] && arg_231[0] != arg_95[1] && arg_231[0] == arg_172[0] && arg_231[0] != arg_113[1] && arg_231[0] != arg_193[1] && arg_231[0] != arg_52[1] && arg_231[0] == arg_55[0] && arg_231[0] != arg_183[1] && arg_231[0] == arg_236[0] && arg_231[0] == arg_148[0] && arg_231[0] != arg_296[1] && arg_231[0] != arg_73[1] && arg_231[0] != arg_25[1] && arg_231[0] != arg_63[1] && arg_231[0] == arg_17[0] && arg_231[0] == arg_279[0] && arg_231[0] == arg_103[0] && arg_231[0] == arg_113[0] && arg_231[0] != arg_151[1] && arg_231[0] == arg_271[0] && arg_231[0] == arg_100[0] && arg_231[0] != arg_172[1] && arg_231[0] != arg_239[1] && arg_231[0] == arg_32[0] && arg_231[0] != arg_43[1] && arg_231[0] != arg_309[1] && arg_231[0] == arg_78[0] && arg_231[0] != arg_190[1] && arg_231[0] == arg_198[0] && arg_231[0] != arg_258[1] && arg_231[0] == arg_296[0] && arg_231[0] != arg_60[1] && arg_231[0] != arg_78[1] && arg_231[0] != arg_121[1] && arg_231[0] == arg_250[0] && arg_231[0] == arg_314[0] && arg_231[0] != arg_148[1] && arg_231[0] != arg_156[1] && arg_231[0] != arg_70[1] && arg_231[0] != arg_231[1] && arg_231[0] != arg_32[1] && arg_231[0] != arg_210[1] && arg_231[0] == arg_22[0] && arg_231[0] == arg_276[0] && arg_231[0] == arg_95[0] && arg_231[0] == arg_73[0] && arg_231[0] == arg_70[0] && arg_231[0] == arg_121[0] && arg_231[0] == arg_268[0] && arg_231[0] != arg_299[1] && arg_231[0] == arg_138[0] && arg_231[0] == arg_175[0] && arg_231[0] != arg_17[1] && arg_231[0] != arg_213[1] && arg_231[0] == arg_14[0] && arg_231[0] == arg_25[0] && arg_231[0] != arg_133[1] && arg_231[0] == arg_291[0] && arg_231[0] != arg_271[1] && arg_218[0] != arg_314[1] && arg_218[0] != arg_55[1] && arg_218[0] != arg_276[1] && arg_218[0] != arg_14[1] && arg_218[0] != arg_175[1] && arg_218[0] != arg_306[1] && arg_218[0] != arg_22[1] && arg_218[0] != arg_198[1] && arg_218[0] != arg_221[1] && arg_218[0] != arg_141[1] && arg_218[0] != arg_159[1] && arg_218[0] == arg_40[0] && arg_218[0] != arg_261[1] && arg_218[0] == arg_299[0] && arg_218[0] == arg_35[0] && arg_218[0] == arg_317[0] && arg_218[0] == arg_180[0] && arg_218[0] != arg_118[1] && arg_218[0] == arg_221[0] && arg_218[0] != arg_279[1] && arg_218[0] == arg_92[0] && arg_218[0] == arg_63[0] && arg_218[0] == arg_43[0] && arg_218[0] == arg_306[0] && arg_218[0] == arg_52[0] && arg_218[0] == arg_133[0] && arg_218[0] == arg_239[0] && arg_218[0] != arg_35[1] && arg_218[0] != arg_228[1] && arg_218[0] != arg_95[1] && arg_218[0] == arg_172[0] && arg_218[0] != arg_113[1] && arg_218[0] != arg_193[1] && arg_218[0] != arg_52[1] && arg_218[0] == arg_55[0] && arg_218[0] != arg_183[1] && arg_218[0] == arg_236[0] && arg_218[0] == arg_148[0] && arg_218[0] != arg_296[1] && arg_218[0] != arg_73[1] && arg_218[0] != arg_25[1] && arg_218[0] != arg_63[1] && arg_218[0] == arg_17[0] && arg_218[0] == arg_279[0] && arg_218[0] == arg_103[0] && arg_218[0] == arg_113[0] && arg_218[0] != arg_151[1] && arg_218[0] == arg_271[0] && arg_218[0] == arg_100[0] && arg_218[0] != arg_172[1] && arg_218[0] != arg_239[1] && arg_218[0] == arg_32[0] && arg_218[0] != arg_43[1] && arg_218[0] != arg_309[1] && arg_218[0] == arg_78[0] && arg_218[0] != arg_190[1] && arg_218[0] == arg_198[0] && arg_218[0] != arg_258[1] && arg_218[0] == arg_296[0] && arg_218[0] != arg_60[1] && arg_218[0] != arg_78[1] && arg_218[0] != arg_121[1] && arg_218[0] == arg_250[0] && arg_218[0] == arg_314[0] && arg_218[0] != arg_148[1] && arg_218[0] != arg_156[1] && arg_218[0] != arg_70[1] && arg_218[0] != arg_231[1] && arg_218[0] != arg_32[1] && arg_218[0] != arg_210[1] && arg_218[0] == arg_22[0] && arg_218[0] == arg_276[0] && arg_218[0] == arg_95[0] && arg_218[0] == arg_73[0] && arg_218[0] == arg_70[0] && arg_218[0] == arg_121[0] && arg_218[0] == arg_268[0] && arg_218[0] != arg_299[1] && arg_218[0] == arg_138[0] && arg_218[0] == arg_175[0] && arg_218[0] != arg_17[1] && arg_218[0] != arg_213[1] && arg_218[0] == arg_14[0] && arg_218[0] == arg_25[0] && arg_218[0] != arg_133[1] && arg_218[0] == arg_291[0] && arg_218[0] != arg_271[1] && arg_314[1] == arg_55[1] && arg_314[1] == arg_276[1] && arg_314[1] == arg_14[1] && arg_314[1] == arg_175[1] && arg_314[1] == arg_306[1] && arg_314[1] == arg_22[1] && arg_314[1] == arg_198[1] && arg_314[1] == arg_221[1] && arg_314[1] == arg_141[1] && arg_314[1] == arg_159[1] && arg_314[1] != arg_40[0] && arg_314[1] == arg_261[1] && arg_314[1] != arg_299[0] && arg_314[1] != arg_35[0] && arg_314[1] != arg_317[0] && arg_314[1] != arg_180[0] && arg_314[1] == arg_118[1] && arg_314[1] != arg_221[0] && arg_314[1] == arg_279[1] && arg_314[1] != arg_92[0] && arg_314[1] != arg_63[0] && arg_314[1] != arg_43[0] && arg_314[1] != arg_306[0] && arg_314[1] != arg_52[0] && arg_314[1] != arg_133[0] && arg_314[1] != arg_239[0] && arg_314[1] == arg_35[1] && arg_314[1] == arg_228[1] && arg_314[1] == arg_95[1] && arg_314[1] != arg_172[0] && arg_314[1] == arg_113[1] && arg_314[1] == arg_193[1] && arg_314[1] == arg_52[1] && arg_314[1] != arg_55[0] && arg_314[1] == arg_183[1] && arg_314[1] != arg_236[0] && arg_314[1] != arg_148[0] && arg_314[1] == arg_296[1] && arg_314[1] == arg_73[1] && arg_314[1] == arg_25[1] && arg_314[1] == arg_63[1] && arg_314[1] != arg_17[0] && arg_314[1] != arg_279[0] && arg_314[1] != arg_103[0] && arg_314[1] != arg_113[0] && arg_314[1] == arg_151[1] && arg_314[1] != arg_271[0] && arg_314[1] != arg_100[0] && arg_314[1] == arg_172[1] && arg_314[1] == arg_239[1] && arg_314[1] != arg_32[0] && arg_314[1] == arg_43[1] && arg_314[1] == arg_309[1] && arg_314[1] != arg_78[0] && arg_314[1] == arg_190[1] && arg_314[1] != arg_198[0] && arg_314[1] == arg_258[1] && arg_314[1] != arg_296[0] && arg_314[1] == arg_60[1] && arg_314[1] == arg_78[1] && arg_314[1] == arg_121[1] && arg_314[1] != arg_250[0] && arg_314[1] != arg_314[0] && arg_314[1] == arg_148[1] && arg_314[1] == arg_156[1] && arg_314[1] == arg_70[1] && arg_314[1] == arg_231[1] && arg_314[1] == arg_32[1] && arg_314[1] == arg_210[1] && arg_314[1] != arg_22[0] && arg_314[1] != arg_276[0] && arg_314[1] != arg_95[0] && arg_314[1] != arg_73[0] && arg_314[1] != arg_70[0] && arg_314[1] != arg_121[0] && arg_314[1] != arg_268[0] && arg_314[1] == arg_299[1] && arg_314[1] != arg_138[0] && arg_314[1] != arg_175[0] && arg_314[1] == arg_17[1] && arg_314[1] == arg_213[1] && arg_314[1] != arg_14[0] && arg_314[1] != arg_25[0] && arg_314[1] == arg_133[1] && arg_314[1] != arg_291[0] && arg_314[1] == arg_271[1] && arg_55[1] == arg_276[1] && arg_55[1] == arg_14[1] && arg_55[1] == arg_175[1] && arg_55[1] == arg_306[1] && arg_55[1] == arg_22[1] && arg_55[1] == arg_198[1] && arg_55[1] == arg_221[1] && arg_55[1] == arg_141[1] && arg_55[1] == arg_159[1] && arg_55[1] != arg_40[0] && arg_55[1] == arg_261[1] && arg_55[1] != arg_299[0] && arg_55[1] != arg_35[0] && arg_55[1] != arg_317[0] && arg_55[1] != arg_180[0] && arg_55[1] == arg_118[1] && arg_55[1] != arg_221[0] && arg_55[1] == arg_279[1] && arg_55[1] != arg_92[0] && arg_55[1] != arg_63[0] && arg_55[1] != arg_43[0] && arg_55[1] != arg_306[0] && arg_55[1] != arg_52[0] && arg_55[1] != arg_133[0] && arg_55[1] != arg_239[0] && arg_55[1] == arg_35[1] && arg_55[1] == arg_228[1] && arg_55[1] == arg_95[1] && arg_55[1] != arg_172[0] && arg_55[1] == arg_113[1] && arg_55[1] == arg_193[1] && arg_55[1] == arg_52[1] && arg_55[1] != arg_55[0] && arg_55[1] == arg_183[1] && arg_55[1] != arg_236[0] && arg_55[1] != arg_148[0] && arg_55[1] == arg_296[1] && arg_55[1] == arg_73[1] && arg_55[1] == arg_25[1] && arg_55[1] == arg_63[1] && arg_55[1] != arg_17[0] && arg_55[1] != arg_279[0] && arg_55[1] != arg_103[0] && arg_55[1] != arg_113[0] && arg_55[1] == arg_151[1] && arg_55[1] != arg_271[0] && arg_55[1] != arg_100[0] && arg_55[1] == arg_172[1] && arg_55[1] == arg_239[1] && arg_55[1] != arg_32[0] && arg_55[1] == arg_43[1] && arg_55[1] == arg_309[1] && arg_55[1] != arg_78[0] && arg_55[1] == arg_190[1] && arg_55[1] != arg_198[0] && arg_55[1] == arg_258[1] && arg_55[1] != arg_296[0] && arg_55[1] == arg_60[1] && arg_55[1] == arg_78[1] && arg_55[1] == arg_121[1] && arg_55[1] != arg_250[0] && arg_55[1] != arg_314[0] && arg_55[1] == arg_148[1] && arg_55[1] == arg_156[1] && arg_55[1] == arg_70[1] && arg_55[1] == arg_231[1] && arg_55[1] == arg_32[1] && arg_55[1] == arg_210[1] && arg_55[1] != arg_22[0] && arg_55[1] != arg_276[0] && arg_55[1] != arg_95[0] && arg_55[1] != arg_73[0] && arg_55[1] != arg_70[0] && arg_55[1] != arg_121[0] && arg_55[1] != arg_268[0] && arg_55[1] == arg_299[1] && arg_55[1] != arg_138[0] && arg_55[1] != arg_175[0] && arg_55[1] == arg_17[1] && arg_55[1] == arg_213[1] && arg_55[1] != arg_14[0] && arg_55[1] != arg_25[0] && arg_55[1] == arg_133[1] && arg_55[1] != arg_291[0] && arg_55[1] == arg_271[1] && arg_276[1] == arg_14[1] && arg_276[1] == arg_175[1] && arg_276[1] == arg_306[1] && arg_276[1] == arg_22[1] && arg_276[1] == arg_198[1] && arg_276[1] == arg_221[1] && arg_276[1] == arg_141[1] && arg_276[1] == arg_159[1] && arg_276[1] != arg_40[0] && arg_276[1] == arg_261[1] && arg_276[1] != arg_299[0] && arg_276[1] != arg_35[0] && arg_276[1] != arg_317[0] && arg_276[1] != arg_180[0] && arg_276[1] == arg_118[1] && arg_276[1] != arg_221[0] && arg_276[1] == arg_279[1] && arg_276[1] != arg_92[0] && arg_276[1] != arg_63[0] && arg_276[1] != arg_43[0] && arg_276[1] != arg_306[0] && arg_276[1] != arg_52[0] && arg_276[1] != arg_133[0] && arg_276[1] != arg_239[0] && arg_276[1] == arg_35[1] && arg_276[1] == arg_228[1] && arg_276[1] == arg_95[1] && arg_276[1] != arg_172[0] && arg_276[1] == arg_113[1] && arg_276[1] == arg_193[1] && arg_276[1] == arg_52[1] && arg_276[1] != arg_55[0] && arg_276[1] == arg_183[1] && arg_276[1] != arg_236[0] && arg_276[1] != arg_148[0] && arg_276[1] == arg_296[1] && arg_276[1] == arg_73[1] && arg_276[1] == arg_25[1] && arg_276[1] == arg_63[1] && arg_276[1] != arg_17[0] && arg_276[1] != arg_279[0] && arg_276[1] != arg_103[0] && arg_276[1] != arg_113[0] && arg_276[1] == arg_151[1] && arg_276[1] != arg_271[0] && arg_276[1] != arg_100[0] && arg_276[1] == arg_172[1] && arg_276[1] == arg_239[1] && arg_276[1] != arg_32[0] && arg_276[1] == arg_43[1] && arg_276[1] == arg_309[1] && arg_276[1] != arg_78[0] && arg_276[1] == arg_190[1] && arg_276[1] != arg_198[0] && arg_276[1] == arg_258[1] && arg_276[1] != arg_296[0] && arg_276[1] == arg_60[1] && arg_276[1] == arg_78[1] && arg_276[1] == arg_121[1] && arg_276[1] != arg_250[0] && arg_276[1] != arg_314[0] && arg_276[1] == arg_148[1] && arg_276[1] == arg_156[1] && arg_276[1] == arg_70[1] && arg_276[1] == arg_231[1] && arg_276[1] == arg_32[1] && arg_276[1] == arg_210[1] && arg_276[1] != arg_22[0] && arg_276[1] != arg_276[0] && arg_276[1] != arg_95[0] && arg_276[1] != arg_73[0] && arg_276[1] != arg_70[0] && arg_276[1] != arg_121[0] && arg_276[1] != arg_268[0] && arg_276[1] == arg_299[1] && arg_276[1] != arg_138[0] && arg_276[1] != arg_175[0] && arg_276[1] == arg_17[1] && arg_276[1] == arg_213[1] && arg_276[1] != arg_14[0] && arg_276[1] != arg_25[0] && arg_276[1] == arg_133[1] && arg_276[1] != arg_291[0] && arg_276[1] == arg_271[1] && arg_14[1] == arg_175[1] && arg_14[1] == arg_306[1] && arg_14[1] == arg_22[1] && arg_14[1] == arg_198[1] && arg_14[1] == arg_221[1] && arg_14[1] == arg_141[1] && arg_14[1] == arg_159[1] && arg_14[1] != arg_40[0] && arg_14[1] == arg_261[1] && arg_14[1] != arg_299[0] && arg_14[1] != arg_35[0] && arg_14[1] != arg_317[0] && arg_14[1] != arg_180[0] && arg_14[1] == arg_118[1] && arg_14[1] != arg_221[0] && arg_14[1] == arg_279[1] && arg_14[1] != arg_92[0] && arg_14[1] != arg_63[0] && arg_14[1] != arg_43[0] && arg_14[1] != arg_306[0] && arg_14[1] != arg_52[0] && arg_14[1] != arg_133[0] && arg_14[1] != arg_239[0] && arg_14[1] == arg_35[1] && arg_14[1] == arg_228[1] && arg_14[1] == arg_95[1] && arg_14[1] != arg_172[0] && arg_14[1] == arg_113[1] && arg_14[1] == arg_193[1] && arg_14[1] == arg_52[1] && arg_14[1] != arg_55[0] && arg_14[1] == arg_183[1] && arg_14[1] != arg_236[0] && arg_14[1] != arg_148[0] && arg_14[1] == arg_296[1] && arg_14[1] == arg_73[1] && arg_14[1] == arg_25[1] && arg_14[1] == arg_63[1] && arg_14[1] != arg_17[0] && arg_14[1] != arg_279[0] && arg_14[1] != arg_103[0] && arg_14[1] != arg_113[0] && arg_14[1] == arg_151[1] && arg_14[1] != arg_271[0] && arg_14[1] != arg_100[0] && arg_14[1] == arg_172[1] && arg_14[1] == arg_239[1] && arg_14[1] != arg_32[0] && arg_14[1] == arg_43[1] && arg_14[1] == arg_309[1] && arg_14[1] != arg_78[0] && arg_14[1] == arg_190[1] && arg_14[1] != arg_198[0] && arg_14[1] == arg_258[1] && arg_14[1] != arg_296[0] && arg_14[1] == arg_60[1] && arg_14[1] == arg_78[1] && arg_14[1] == arg_121[1] && arg_14[1] != arg_250[0] && arg_14[1] != arg_314[0] && arg_14[1] == arg_148[1] && arg_14[1] == arg_156[1] && arg_14[1] == arg_70[1] && arg_14[1] == arg_231[1] && arg_14[1] == arg_32[1] && arg_14[1] == arg_210[1] && arg_14[1] != arg_22[0] && arg_14[1] != arg_276[0] && arg_14[1] != arg_95[0] && arg_14[1] != arg_73[0] && arg_14[1] != arg_70[0] && arg_14[1] != arg_121[0] && arg_14[1] != arg_268[0] && arg_14[1] == arg_299[1] && arg_14[1] != arg_138[0] && arg_14[1] != arg_175[0] && arg_14[1] == arg_17[1] && arg_14[1] == arg_213[1] && arg_14[1] != arg_14[0] && arg_14[1] != arg_25[0] && arg_14[1] == arg_133[1] && arg_14[1] != arg_291[0] && arg_14[1] == arg_271[1] && arg_175[1] == arg_306[1] && arg_175[1] == arg_22[1] && arg_175[1] == arg_198[1] && arg_175[1] == arg_221[1] && arg_175[1] == arg_141[1] && arg_175[1] == arg_159[1] && arg_175[1] != arg_40[0] && arg_175[1] == arg_261[1] && arg_175[1] != arg_299[0] && arg_175[1] != arg_35[0] && arg_175[1] != arg_317[0] && arg_175[1] != arg_180[0] && arg_175[1] == arg_118[1] && arg_175[1] != arg_221[0] && arg_175[1] == arg_279[1] && arg_175[1] != arg_92[0] && arg_175[1] != arg_63[0] && arg_175[1] != arg_43[0] && arg_175[1] != arg_306[0] && arg_175[1] != arg_52[0] && arg_175[1] != arg_133[0] && arg_175[1] != arg_239[0] && arg_175[1] == arg_35[1] && arg_175[1] == arg_228[1] && arg_175[1] == arg_95[1] && arg_175[1] != arg_172[0] && arg_175[1] == arg_113[1] && arg_175[1] == arg_193[1] && arg_175[1] == arg_52[1] && arg_175[1] != arg_55[0] && arg_175[1] == arg_183[1] && arg_175[1] != arg_236[0] && arg_175[1] != arg_148[0] && arg_175[1] == arg_296[1] && arg_175[1] == arg_73[1] && arg_175[1] == arg_25[1] && arg_175[1] == arg_63[1] && arg_175[1] != arg_17[0] && arg_175[1] != arg_279[0] && arg_175[1] != arg_103[0] && arg_175[1] != arg_113[0] && arg_175[1] == arg_151[1] && arg_175[1] != arg_271[0] && arg_175[1] != arg_100[0] && arg_175[1] == arg_172[1] && arg_175[1] == arg_239[1] && arg_175[1] != arg_32[0] && arg_175[1] == arg_43[1] && arg_175[1] == arg_309[1] && arg_175[1] != arg_78[0] && arg_175[1] == arg_190[1] && arg_175[1] != arg_198[0] && arg_175[1] == arg_258[1] && arg_175[1] != arg_296[0] && arg_175[1] == arg_60[1] && arg_175[1] == arg_78[1] && arg_175[1] == arg_121[1] && arg_175[1] != arg_250[0] && arg_175[1] != arg_314[0] && arg_175[1] == arg_148[1] && arg_175[1] == arg_156[1] && arg_175[1] == arg_70[1] && arg_175[1] == arg_231[1] && arg_175[1] == arg_32[1] && arg_175[1] == arg_210[1] && arg_175[1] != arg_22[0] && arg_175[1] != arg_276[0] && arg_175[1] != arg_95[0] && arg_175[1] != arg_73[0] && arg_175[1] != arg_70[0] && arg_175[1] != arg_121[0] && arg_175[1] != arg_268[0] && arg_175[1] == arg_299[1] && arg_175[1] != arg_138[0] && arg_175[1] != arg_175[0] && arg_175[1] == arg_17[1] && arg_175[1] == arg_213[1] && arg_175[1] != arg_14[0] && arg_175[1] != arg_25[0] && arg_175[1] == arg_133[1] && arg_175[1] != arg_291[0] && arg_175[1] == arg_271[1] && arg_306[1] == arg_22[1] && arg_306[1] == arg_198[1] && arg_306[1] == arg_221[1] && arg_306[1] == arg_141[1] && arg_306[1] == arg_159[1] && arg_306[1] != arg_40[0] && arg_306[1] == arg_261[1] && arg_306[1] != arg_299[0] && arg_306[1] != arg_35[0] && arg_306[1] != arg_317[0] && arg_306[1] != arg_180[0] && arg_306[1] == arg_118[1] && arg_306[1] != arg_221[0] && arg_306[1] == arg_279[1] && arg_306[1] != arg_92[0] && arg_306[1] != arg_63[0] && arg_306[1] != arg_43[0] && arg_306[1] != arg_306[0] && arg_306[1] != arg_52[0] && arg_306[1] != arg_133[0] && arg_306[1] != arg_239[0] && arg_306[1] == arg_35[1] && arg_306[1] == arg_228[1] && arg_306[1] == arg_95[1] && arg_306[1] != arg_172[0] && arg_306[1] == arg_113[1] && arg_306[1] == arg_193[1] && arg_306[1] == arg_52[1] && arg_306[1] != arg_55[0] && arg_306[1] == arg_183[1] && arg_306[1] != arg_236[0] && arg_306[1] != arg_148[0] && arg_306[1] == arg_296[1] && arg_306[1] == arg_73[1] && arg_306[1] == arg_25[1] && arg_306[1] == arg_63[1] && arg_306[1] != arg_17[0] && arg_306[1] != arg_279[0] && arg_306[1] != arg_103[0] && arg_306[1] != arg_113[0] && arg_306[1] == arg_151[1] && arg_306[1] != arg_271[0] && arg_306[1] != arg_100[0] && arg_306[1] == arg_172[1] && arg_306[1] == arg_239[1] && arg_306[1] != arg_32[0] && arg_306[1] == arg_43[1] && arg_306[1] == arg_309[1] && arg_306[1] != arg_78[0] && arg_306[1] == arg_190[1] && arg_306[1] != arg_198[0] && arg_306[1] == arg_258[1] && arg_306[1] != arg_296[0] && arg_306[1] == arg_60[1] && arg_306[1] == arg_78[1] && arg_306[1] == arg_121[1] && arg_306[1] != arg_250[0] && arg_306[1] != arg_314[0] && arg_306[1] == arg_148[1] && arg_306[1] == arg_156[1] && arg_306[1] == arg_70[1] && arg_306[1] == arg_231[1] && arg_306[1] == arg_32[1] && arg_306[1] == arg_210[1] && arg_306[1] != arg_22[0] && arg_306[1] != arg_276[0] && arg_306[1] != arg_95[0] && arg_306[1] != arg_73[0] && arg_306[1] != arg_70[0] && arg_306[1] != arg_121[0] && arg_306[1] != arg_268[0] && arg_306[1] == arg_299[1] && arg_306[1] != arg_138[0] && arg_306[1] != arg_175[0] && arg_306[1] == arg_17[1] && arg_306[1] == arg_213[1] && arg_306[1] != arg_14[0] && arg_306[1] != arg_25[0] && arg_306[1] == arg_133[1] && arg_306[1] != arg_291[0] && arg_306[1] == arg_271[1] && arg_22[1] == arg_198[1] && arg_22[1] == arg_221[1] && arg_22[1] == arg_141[1] && arg_22[1] == arg_159[1] && arg_22[1] != arg_40[0] && arg_22[1] == arg_261[1] && arg_22[1] != arg_299[0] && arg_22[1] != arg_35[0] && arg_22[1] != arg_317[0] && arg_22[1] != arg_180[0] && arg_22[1] == arg_118[1] && arg_22[1] != arg_221[0] && arg_22[1] == arg_279[1] && arg_22[1] != arg_92[0] && arg_22[1] != arg_63[0] && arg_22[1] != arg_43[0] && arg_22[1] != arg_306[0] && arg_22[1] != arg_52[0] && arg_22[1] != arg_133[0] && arg_22[1] != arg_239[0] && arg_22[1] == arg_35[1] && arg_22[1] == arg_228[1] && arg_22[1] == arg_95[1] && arg_22[1] != arg_172[0] && arg_22[1] == arg_113[1] && arg_22[1] == arg_193[1] && arg_22[1] == arg_52[1] && arg_22[1] != arg_55[0] && arg_22[1] == arg_183[1] && arg_22[1] != arg_236[0] && arg_22[1] != arg_148[0] && arg_22[1] == arg_296[1] && arg_22[1] == arg_73[1] && arg_22[1] == arg_25[1] && arg_22[1] == arg_63[1] && arg_22[1] != arg_17[0] && arg_22[1] != arg_279[0] && arg_22[1] != arg_103[0] && arg_22[1] != arg_113[0] && arg_22[1] == arg_151[1] && arg_22[1] != arg_271[0] && arg_22[1] != arg_100[0] && arg_22[1] == arg_172[1] && arg_22[1] == arg_239[1] && arg_22[1] != arg_32[0] && arg_22[1] == arg_43[1] && arg_22[1] == arg_309[1] && arg_22[1] != arg_78[0] && arg_22[1] == arg_190[1] && arg_22[1] != arg_198[0] && arg_22[1] == arg_258[1] && arg_22[1] != arg_296[0] && arg_22[1] == arg_60[1] && arg_22[1] == arg_78[1] && arg_22[1] == arg_121[1] && arg_22[1] != arg_250[0] && arg_22[1] != arg_314[0] && arg_22[1] == arg_148[1] && arg_22[1] == arg_156[1] && arg_22[1] == arg_70[1] && arg_22[1] == arg_231[1] && arg_22[1] == arg_32[1] && arg_22[1] == arg_210[1] && arg_22[1] != arg_22[0] && arg_22[1] != arg_276[0] && arg_22[1] != arg_95[0] && arg_22[1] != arg_73[0] && arg_22[1] != arg_70[0] && arg_22[1] != arg_121[0] && arg_22[1] != arg_268[0] && arg_22[1] == arg_299[1] && arg_22[1] != arg_138[0] && arg_22[1] != arg_175[0] && arg_22[1] == arg_17[1] && arg_22[1] == arg_213[1] && arg_22[1] != arg_14[0] && arg_22[1] != arg_25[0] && arg_22[1] == arg_133[1] && arg_22[1] != arg_291[0] && arg_22[1] == arg_271[1] && arg_198[1] == arg_221[1] && arg_198[1] == arg_141[1] && arg_198[1] == arg_159[1] && arg_198[1] != arg_40[0] && arg_198[1] == arg_261[1] && arg_198[1] != arg_299[0] && arg_198[1] != arg_35[0] && arg_198[1] != arg_317[0] && arg_198[1] != arg_180[0] && arg_198[1] == arg_118[1] && arg_198[1] != arg_221[0] && arg_198[1] == arg_279[1] && arg_198[1] != arg_92[0] && arg_198[1] != arg_63[0] && arg_198[1] != arg_43[0] && arg_198[1] != arg_306[0] && arg_198[1] != arg_52[0] && arg_198[1] != arg_133[0] && arg_198[1] != arg_239[0] && arg_198[1] == arg_35[1] && arg_198[1] == arg_228[1] && arg_198[1] == arg_95[1] && arg_198[1] != arg_172[0] && arg_198[1] == arg_113[1] && arg_198[1] == arg_193[1] && arg_198[1] == arg_52[1] && arg_198[1] != arg_55[0] && arg_198[1] == arg_183[1] && arg_198[1] != arg_236[0] && arg_198[1] != arg_148[0] && arg_198[1] == arg_296[1] && arg_198[1] == arg_73[1] && arg_198[1] == arg_25[1] && arg_198[1] == arg_63[1] && arg_198[1] != arg_17[0] && arg_198[1] != arg_279[0] && arg_198[1] != arg_103[0] && arg_198[1] != arg_113[0] && arg_198[1] == arg_151[1] && arg_198[1] != arg_271[0] && arg_198[1] != arg_100[0] && arg_198[1] == arg_172[1] && arg_198[1] == arg_239[1] && arg_198[1] != arg_32[0] && arg_198[1] == arg_43[1] && arg_198[1] == arg_309[1] && arg_198[1] != arg_78[0] && arg_198[1] == arg_190[1] && arg_198[1] != arg_198[0] && arg_198[1] == arg_258[1] && arg_198[1] != arg_296[0] && arg_198[1] == arg_60[1] && arg_198[1] == arg_78[1] && arg_198[1] == arg_121[1] && arg_198[1] != arg_250[0] && arg_198[1] != arg_314[0] && arg_198[1] == arg_148[1] && arg_198[1] == arg_156[1] && arg_198[1] == arg_70[1] && arg_198[1] == arg_231[1] && arg_198[1] == arg_32[1] && arg_198[1] == arg_210[1] && arg_198[1] != arg_22[0] && arg_198[1] != arg_276[0] && arg_198[1] != arg_95[0] && arg_198[1] != arg_73[0] && arg_198[1] != arg_70[0] && arg_198[1] != arg_121[0] && arg_198[1] != arg_268[0] && arg_198[1] == arg_299[1] && arg_198[1] != arg_138[0] && arg_198[1] != arg_175[0] && arg_198[1] == arg_17[1] && arg_198[1] == arg_213[1] && arg_198[1] != arg_14[0] && arg_198[1] != arg_25[0] && arg_198[1] == arg_133[1] && arg_198[1] != arg_291[0] && arg_198[1] == arg_271[1] && arg_221[1] == arg_141[1] && arg_221[1] == arg_159[1] && arg_221[1] != arg_40[0] && arg_221[1] == arg_261[1] && arg_221[1] != arg_299[0] && arg_221[1] != arg_35[0] && arg_221[1] != arg_317[0] && arg_221[1] != arg_180[0] && arg_221[1] == arg_118[1] && arg_221[1] != arg_221[0] && arg_221[1] == arg_279[1] && arg_221[1] != arg_92[0] && arg_221[1] != arg_63[0] && arg_221[1] != arg_43[0] && arg_221[1] != arg_306[0] && arg_221[1] != arg_52[0] && arg_221[1] != arg_133[0] && arg_221[1] != arg_239[0] && arg_221[1] == arg_35[1] && arg_221[1] == arg_228[1] && arg_221[1] == arg_95[1] && arg_221[1] != arg_172[0] && arg_221[1] == arg_113[1] && arg_221[1] == arg_193[1] && arg_221[1] == arg_52[1] && arg_221[1] != arg_55[0] && arg_221[1] == arg_183[1] && arg_221[1] != arg_236[0] && arg_221[1] != arg_148[0] && arg_221[1] == arg_296[1] && arg_221[1] == arg_73[1] && arg_221[1] == arg_25[1] && arg_221[1] == arg_63[1] && arg_221[1] != arg_17[0] && arg_221[1] != arg_279[0] && arg_221[1] != arg_103[0] && arg_221[1] != arg_113[0] && arg_221[1] == arg_151[1] && arg_221[1] != arg_271[0] && arg_221[1] != arg_100[0] && arg_221[1] == arg_172[1] && arg_221[1] == arg_239[1] && arg_221[1] != arg_32[0] && arg_221[1] == arg_43[1] && arg_221[1] == arg_309[1] && arg_221[1] != arg_78[0] && arg_221[1] == arg_190[1] && arg_221[1] != arg_198[0] && arg_221[1] == arg_258[1] && arg_221[1] != arg_296[0] && arg_221[1] == arg_60[1] && arg_221[1] == arg_78[1] && arg_221[1] == arg_121[1] && arg_221[1] != arg_250[0] && arg_221[1] != arg_314[0] && arg_221[1] == arg_148[1] && arg_221[1] == arg_156[1] && arg_221[1] == arg_70[1] && arg_221[1] == arg_231[1] && arg_221[1] == arg_32[1] && arg_221[1] == arg_210[1] && arg_221[1] != arg_22[0] && arg_221[1] != arg_276[0] && arg_221[1] != arg_95[0] && arg_221[1] != arg_73[0] && arg_221[1] != arg_70[0] && arg_221[1] != arg_121[0] && arg_221[1] != arg_268[0] && arg_221[1] == arg_299[1] && arg_221[1] != arg_138[0] && arg_221[1] != arg_175[0] && arg_221[1] == arg_17[1] && arg_221[1] == arg_213[1] && arg_221[1] != arg_14[0] && arg_221[1] != arg_25[0] && arg_221[1] == arg_133[1] && arg_221[1] != arg_291[0] && arg_221[1] == arg_271[1] && arg_141[1] == arg_159[1] && arg_141[1] != arg_40[0] && arg_141[1] == arg_261[1] && arg_141[1] != arg_299[0] && arg_141[1] != arg_35[0] && arg_141[1] != arg_317[0] && arg_141[1] != arg_180[0] && arg_141[1] == arg_118[1] && arg_141[1] != arg_221[0] && arg_141[1] == arg_279[1] && arg_141[1] != arg_92[0] && arg_141[1] != arg_63[0] && arg_141[1] != arg_43[0] && arg_141[1] != arg_306[0] && arg_141[1] != arg_52[0] && arg_141[1] != arg_133[0] && arg_141[1] != arg_239[0] && arg_141[1] == arg_35[1] && arg_141[1] == arg_228[1] && arg_141[1] == arg_95[1] && arg_141[1] != arg_172[0] && arg_141[1] == arg_113[1] && arg_141[1] == arg_193[1] && arg_141[1] == arg_52[1] && arg_141[1] != arg_55[0] && arg_141[1] == arg_183[1] && arg_141[1] != arg_236[0] && arg_141[1] != arg_148[0] && arg_141[1] == arg_296[1] && arg_141[1] == arg_73[1] && arg_141[1] == arg_25[1] && arg_141[1] == arg_63[1] && arg_141[1] != arg_17[0] && arg_141[1] != arg_279[0] && arg_141[1] != arg_103[0] && arg_141[1] != arg_113[0] && arg_141[1] == arg_151[1] && arg_141[1] != arg_271[0] && arg_141[1] != arg_100[0] && arg_141[1] == arg_172[1] && arg_141[1] == arg_239[1] && arg_141[1] != arg_32[0] && arg_141[1] == arg_43[1] && arg_141[1] == arg_309[1] && arg_141[1] != arg_78[0] && arg_141[1] == arg_190[1] && arg_141[1] != arg_198[0] && arg_141[1] == arg_258[1] && arg_141[1] != arg_296[0] && arg_141[1] == arg_60[1] && arg_141[1] == arg_78[1] && arg_141[1] == arg_121[1] && arg_141[1] != arg_250[0] && arg_141[1] != arg_314[0] && arg_141[1] == arg_148[1] && arg_141[1] == arg_156[1] && arg_141[1] == arg_70[1] && arg_141[1] == arg_231[1] && arg_141[1] == arg_32[1] && arg_141[1] == arg_210[1] && arg_141[1] != arg_22[0] && arg_141[1] != arg_276[0] && arg_141[1] != arg_95[0] && arg_141[1] != arg_73[0] && arg_141[1] != arg_70[0] && arg_141[1] != arg_121[0] && arg_141[1] != arg_268[0] && arg_141[1] == arg_299[1] && arg_141[1] != arg_138[0] && arg_141[1] != arg_175[0] && arg_141[1] == arg_17[1] && arg_141[1] == arg_213[1] && arg_141[1] != arg_14[0] && arg_141[1] != arg_25[0] && arg_141[1] == arg_133[1] && arg_141[1] != arg_291[0] && arg_141[1] == arg_271[1] && arg_159[1] != arg_40[0] && arg_159[1] == arg_261[1] && arg_159[1] != arg_299[0] && arg_159[1] != arg_35[0] && arg_159[1] != arg_317[0] && arg_159[1] != arg_180[0] && arg_159[1] == arg_118[1] && arg_159[1] != arg_221[0] && arg_159[1] == arg_279[1] && arg_159[1] != arg_92[0] && arg_159[1] != arg_63[0] && arg_159[1] != arg_43[0] && arg_159[1] != arg_306[0] && arg_159[1] != arg_52[0] && arg_159[1] != arg_133[0] && arg_159[1] != arg_239[0] && arg_159[1] == arg_35[1] && arg_159[1] == arg_228[1] && arg_159[1] == arg_95[1] && arg_159[1] != arg_172[0] && arg_159[1] == arg_113[1] && arg_159[1] == arg_193[1] && arg_159[1] == arg_52[1] && arg_159[1] != arg_55[0] && arg_159[1] == arg_183[1] && arg_159[1] != arg_236[0] && arg_159[1] != arg_148[0] && arg_159[1] == arg_296[1] && arg_159[1] == arg_73[1] && arg_159[1] == arg_25[1] && arg_159[1] == arg_63[1] && arg_159[1] != arg_17[0] && arg_159[1] != arg_279[0] && arg_159[1] != arg_103[0] && arg_159[1] != arg_113[0] && arg_159[1] == arg_151[1] && arg_159[1] != arg_271[0] && arg_159[1] != arg_100[0] && arg_159[1] == arg_172[1] && arg_159[1] == arg_239[1] && arg_159[1] != arg_32[0] && arg_159[1] == arg_43[1] && arg_159[1] == arg_309[1] && arg_159[1] != arg_78[0] && arg_159[1] == arg_190[1] && arg_159[1] != arg_198[0] && arg_159[1] == arg_258[1] && arg_159[1] != arg_296[0] && arg_159[1] == arg_60[1] && arg_159[1] == arg_78[1] && arg_159[1] == arg_121[1] && arg_159[1] != arg_250[0] && arg_159[1] != arg_314[0] && arg_159[1] == arg_148[1] && arg_159[1] == arg_156[1] && arg_159[1] == arg_70[1] && arg_159[1] == arg_231[1] && arg_159[1] == arg_32[1] && arg_159[1] == arg_210[1] && arg_159[1] != arg_22[0] && arg_159[1] != arg_276[0] && arg_159[1] != arg_95[0] && arg_159[1] != arg_73[0] && arg_159[1] != arg_70[0] && arg_159[1] != arg_121[0] && arg_159[1] != arg_268[0] && arg_159[1] == arg_299[1] && arg_159[1] != arg_138[0] && arg_159[1] != arg_175[0] && arg_159[1] == arg_17[1] && arg_159[1] == arg_213[1] && arg_159[1] != arg_14[0] && arg_159[1] != arg_25[0] && arg_159[1] == arg_133[1] && arg_159[1] != arg_291[0] && arg_159[1] == arg_271[1] && arg_40[0] != arg_261[1] && arg_40[0] == arg_299[0] && arg_40[0] == arg_35[0] && arg_40[0] == arg_317[0] && arg_40[0] == arg_180[0] && arg_40[0] != arg_118[1] && arg_40[0] == arg_221[0] && arg_40[0] != arg_279[1] && arg_40[0] == arg_92[0] && arg_40[0] == arg_63[0] && arg_40[0] == arg_43[0] && arg_40[0] == arg_306[0] && arg_40[0] == arg_52[0] && arg_40[0] == arg_133[0] && arg_40[0] == arg_239[0] && arg_40[0] != arg_35[1] && arg_40[0] != arg_228[1] && arg_40[0] != arg_95[1] && arg_40[0] == arg_172[0] && arg_40[0] != arg_113[1] && arg_40[0] != arg_193[1] && arg_40[0] != arg_52[1] && arg_40[0] == arg_55[0] && arg_40[0] != arg_183[1] && arg_40[0] == arg_236[0] && arg_40[0] == arg_148[0] && arg_40[0] != arg_296[1] && arg_40[0] != arg_73[1] && arg_40[0] != arg_25[1] && arg_40[0] != arg_63[1] && arg_40[0] == arg_17[0] && arg_40[0] == arg_279[0] && arg_40[0] == arg_103[0] && arg_40[0] == arg_113[0] && arg_40[0] != arg_151[1] && arg_40[0] == arg_271[0] && arg_40[0] == arg_100[0] && arg_40[0] != arg_172[1] && arg_40[0] != arg_239[1] && arg_40[0] == arg_32[0] && arg_40[0] != arg_43[1] && arg_40[0] != arg_309[1] && arg_40[0] == arg_78[0] && arg_40[0] != arg_190[1] && arg_40[0] == arg_198[0] && arg_40[0] != arg_258[1] && arg_40[0] == arg_296[0] && arg_40[0] != arg_60[1] && arg_40[0] != arg_78[1] && arg_40[0] != arg_121[1] && arg_40[0] == arg_250[0] && arg_40[0] == arg_314[0] && arg_40[0] != arg_148[1] && arg_40[0] != arg_156[1] && arg_40[0] != arg_70[1] && arg_40[0] != arg_231[1] && arg_40[0] != arg_32[1] && arg_40[0] != arg_210[1] && arg_40[0] == arg_22[0] && arg_40[0] == arg_276[0] && arg_40[0] == arg_95[0] && arg_40[0] == arg_73[0] && arg_40[0] == arg_70[0] && arg_40[0] == arg_121[0] && arg_40[0] == arg_268[0] && arg_40[0] != arg_299[1] && arg_40[0] == arg_138[0] && arg_40[0] == arg_175[0] && arg_40[0] != arg_17[1] && arg_40[0] != arg_213[1] && arg_40[0] == arg_14[0] && arg_40[0] == arg_25[0] && arg_40[0] != arg_133[1] && arg_40[0] == arg_291[0] && arg_40[0] != arg_271[1] && arg_261[1] != arg_299[0] && arg_261[1] != arg_35[0] && arg_261[1] != arg_317[0] && arg_261[1] != arg_180[0] && arg_261[1] == arg_118[1] && arg_261[1] != arg_221[0] && arg_261[1] == arg_279[1] && arg_261[1] != arg_92[0] && arg_261[1] != arg_63[0] && arg_261[1] != arg_43[0] && arg_261[1] != arg_306[0] && arg_261[1] != arg_52[0] && arg_261[1] != arg_133[0] && arg_261[1] != arg_239[0] && arg_261[1] == arg_35[1] && arg_261[1] == arg_228[1] && arg_261[1] == arg_95[1] && arg_261[1] != arg_172[0] && arg_261[1] == arg_113[1] && arg_261[1] == arg_193[1] && arg_261[1] == arg_52[1] && arg_261[1] != arg_55[0] && arg_261[1] == arg_183[1] && arg_261[1] != arg_236[0] && arg_261[1] != arg_148[0] && arg_261[1] == arg_296[1] && arg_261[1] == arg_73[1] && arg_261[1] == arg_25[1] && arg_261[1] == arg_63[1] && arg_261[1] != arg_17[0] && arg_261[1] != arg_279[0] && arg_261[1] != arg_103[0] && arg_261[1] != arg_113[0] && arg_261[1] == arg_151[1] && arg_261[1] != arg_271[0] && arg_261[1] != arg_100[0] && arg_261[1] == arg_172[1] && arg_261[1] == arg_239[1] && arg_261[1] != arg_32[0] && arg_261[1] == arg_43[1] && arg_261[1] == arg_309[1] && arg_261[1] != arg_78[0] && arg_261[1] == arg_190[1] && arg_261[1] != arg_198[0] && arg_261[1] == arg_258[1] && arg_261[1] != arg_296[0] && arg_261[1] == arg_60[1] && arg_261[1] == arg_78[1] && arg_261[1] == arg_121[1] && arg_261[1] != arg_250[0] && arg_261[1] != arg_314[0] && arg_261[1] == arg_148[1] && arg_261[1] == arg_156[1] && arg_261[1] == arg_70[1] && arg_261[1] == arg_231[1] && arg_261[1] == arg_32[1] && arg_261[1] == arg_210[1] && arg_261[1] != arg_22[0] && arg_261[1] != arg_276[0] && arg_261[1] != arg_95[0] && arg_261[1] != arg_73[0] && arg_261[1] != arg_70[0] && arg_261[1] != arg_121[0] && arg_261[1] != arg_268[0] && arg_261[1] == arg_299[1] && arg_261[1] != arg_138[0] && arg_261[1] != arg_175[0] && arg_261[1] == arg_17[1] && arg_261[1] == arg_213[1] && arg_261[1] != arg_14[0] && arg_261[1] != arg_25[0] && arg_261[1] == arg_133[1] && arg_261[1] != arg_291[0] && arg_261[1] == arg_271[1] && arg_299[0] == arg_35[0] && arg_299[0] == arg_317[0] && arg_299[0] == arg_180[0] && arg_299[0] != arg_118[1] && arg_299[0] == arg_221[0] && arg_299[0] != arg_279[1] && arg_299[0] == arg_92[0] && arg_299[0] == arg_63[0] && arg_299[0] == arg_43[0] && arg_299[0] == arg_306[0] && arg_299[0] == arg_52[0] && arg_299[0] == arg_133[0] && arg_299[0] == arg_239[0] && arg_299[0] != arg_35[1] && arg_299[0] != arg_228[1] && arg_299[0] != arg_95[1] && arg_299[0] == arg_172[0] && arg_299[0] != arg_113[1] && arg_299[0] != arg_193[1] && arg_299[0] != arg_52[1] && arg_299[0] == arg_55[0] && arg_299[0] != arg_183[1] && arg_299[0] == arg_236[0] && arg_299[0] == arg_148[0] && arg_299[0] != arg_296[1] && arg_299[0] != arg_73[1] && arg_299[0] != arg_25[1] && arg_299[0] != arg_63[1] && arg_299[0] == arg_17[0] && arg_299[0] == arg_279[0] && arg_299[0] == arg_103[0] && arg_299[0] == arg_113[0] && arg_299[0] != arg_151[1] && arg_299[0] == arg_271[0] && arg_299[0] == arg_100[0] && arg_299[0] != arg_172[1] && arg_299[0] != arg_239[1] && arg_299[0] == arg_32[0] && arg_299[0] != arg_43[1] && arg_299[0] != arg_309[1] && arg_299[0] == arg_78[0] && arg_299[0] != arg_190[1] && arg_299[0] == arg_198[0] && arg_299[0] != arg_258[1] && arg_299[0] == arg_296[0] && arg_299[0] != arg_60[1] && arg_299[0] != arg_78[1] && arg_299[0] != arg_121[1] && arg_299[0] == arg_250[0] && arg_299[0] == arg_314[0] && arg_299[0] != arg_148[1] && arg_299[0] != arg_156[1] && arg_299[0] != arg_70[1] && arg_299[0] != arg_231[1] && arg_299[0] != arg_32[1] && arg_299[0] != arg_210[1] && arg_299[0] == arg_22[0] && arg_299[0] == arg_276[0] && arg_299[0] == arg_95[0] && arg_299[0] == arg_73[0] && arg_299[0] == arg_70[0] && arg_299[0] == arg_121[0] && arg_299[0] == arg_268[0] && arg_299[0] != arg_299[1] && arg_299[0] == arg_138[0] && arg_299[0] == arg_175[0] && arg_299[0] != arg_17[1] && arg_299[0] != arg_213[1] && arg_299[0] == arg_14[0] && arg_299[0] == arg_25[0] && arg_299[0] != arg_133[1] && arg_299[0] == arg_291[0] && arg_299[0] != arg_271[1] && arg_35[0] == arg_317[0] && arg_35[0] == arg_180[0] && arg_35[0] != arg_118[1] && arg_35[0] == arg_221[0] && arg_35[0] != arg_279[1] && arg_35[0] == arg_92[0] && arg_35[0] == arg_63[0] && arg_35[0] == arg_43[0] && arg_35[0] == arg_306[0] && arg_35[0] == arg_52[0] && arg_35[0] == arg_133[0] && arg_35[0] == arg_239[0] && arg_35[0] != arg_35[1] && arg_35[0] != arg_228[1] && arg_35[0] != arg_95[1] && arg_35[0] == arg_172[0] && arg_35[0] != arg_113[1] && arg_35[0] != arg_193[1] && arg_35[0] != arg_52[1] && arg_35[0] == arg_55[0] && arg_35[0] != arg_183[1] && arg_35[0] == arg_236[0] && arg_35[0] == arg_148[0] && arg_35[0] != arg_296[1] && arg_35[0] != arg_73[1] && arg_35[0] != arg_25[1] && arg_35[0] != arg_63[1] && arg_35[0] == arg_17[0] && arg_35[0] == arg_279[0] && arg_35[0] == arg_103[0] && arg_35[0] == arg_113[0] && arg_35[0] != arg_151[1] && arg_35[0] == arg_271[0] && arg_35[0] == arg_100[0] && arg_35[0] != arg_172[1] && arg_35[0] != arg_239[1] && arg_35[0] == arg_32[0] && arg_35[0] != arg_43[1] && arg_35[0] != arg_309[1] && arg_35[0] == arg_78[0] && arg_35[0] != arg_190[1] && arg_35[0] == arg_198[0] && arg_35[0] != arg_258[1] && arg_35[0] == arg_296[0] && arg_35[0] != arg_60[1] && arg_35[0] != arg_78[1] && arg_35[0] != arg_121[1] && arg_35[0] == arg_250[0] && arg_35[0] == arg_314[0] && arg_35[0] != arg_148[1] && arg_35[0] != arg_156[1] && arg_35[0] != arg_70[1] && arg_35[0] != arg_231[1] && arg_35[0] != arg_32[1] && arg_35[0] != arg_210[1] && arg_35[0] == arg_22[0] && arg_35[0] == arg_276[0] && arg_35[0] == arg_95[0] && arg_35[0] == arg_73[0] && arg_35[0] == arg_70[0] && arg_35[0] == arg_121[0] && arg_35[0] == arg_268[0] && arg_35[0] != arg_299[1] && arg_35[0] == arg_138[0] && arg_35[0] == arg_175[0] && arg_35[0] != arg_17[1] && arg_35[0] != arg_213[1] && arg_35[0] == arg_14[0] && arg_35[0] == arg_25[0] && arg_35[0] != arg_133[1] && arg_35[0] == arg_291[0] && arg_35[0] != arg_271[1] && arg_317[0] == arg_180[0] && arg_317[0] != arg_118[1] && arg_317[0] == arg_221[0] && arg_317[0] != arg_279[1] && arg_317[0] == arg_92[0] && arg_317[0] == arg_63[0] && arg_317[0] == arg_43[0] && arg_317[0] == arg_306[0] && arg_317[0] == arg_52[0] && arg_317[0] == arg_133[0] && arg_317[0] == arg_239[0] && arg_317[0] != arg_35[1] && arg_317[0] != arg_228[1] && arg_317[0] != arg_95[1] && arg_317[0] == arg_172[0] && arg_317[0] != arg_113[1] && arg_317[0] != arg_193[1] && arg_317[0] != arg_52[1] && arg_317[0] == arg_55[0] && arg_317[0] != arg_183[1] && arg_317[0] == arg_236[0] && arg_317[0] == arg_148[0] && arg_317[0] != arg_296[1] && arg_317[0] != arg_73[1] && arg_317[0] != arg_25[1] && arg_317[0] != arg_63[1] && arg_317[0] == arg_17[0] && arg_317[0] == arg_279[0] && arg_317[0] == arg_103[0] && arg_317[0] == arg_113[0] && arg_317[0] != arg_151[1] && arg_317[0] == arg_271[0] && arg_317[0] == arg_100[0] && arg_317[0] != arg_172[1] && arg_317[0] != arg_239[1] && arg_317[0] == arg_32[0] && arg_317[0] != arg_43[1] && arg_317[0] != arg_309[1] && arg_317[0] == arg_78[0] && arg_317[0] != arg_190[1] && arg_317[0] == arg_198[0] && arg_317[0] != arg_258[1] && arg_317[0] == arg_296[0] && arg_317[0] != arg_60[1] && arg_317[0] != arg_78[1] && arg_317[0] != arg_121[1] && arg_317[0] == arg_250[0] && arg_317[0] == arg_314[0] && arg_317[0] != arg_148[1] && arg_317[0] != arg_156[1] && arg_317[0] != arg_70[1] && arg_317[0] != arg_231[1] && arg_317[0] != arg_32[1] && arg_317[0] != arg_210[1] && arg_317[0] == arg_22[0] && arg_317[0] == arg_276[0] && arg_317[0] == arg_95[0] && arg_317[0] == arg_73[0] && arg_317[0] == arg_70[0] && arg_317[0] == arg_121[0] && arg_317[0] == arg_268[0] && arg_317[0] != arg_299[1] && arg_317[0] == arg_138[0] && arg_317[0] == arg_175[0] && arg_317[0] != arg_17[1] && arg_317[0] != arg_213[1] && arg_317[0] == arg_14[0] && arg_317[0] == arg_25[0] && arg_317[0] != arg_133[1] && arg_317[0] == arg_291[0] && arg_317[0] != arg_271[1] && arg_180[0] != arg_118[1] && arg_180[0] == arg_221[0] && arg_180[0] != arg_279[1] && arg_180[0] == arg_92[0] && arg_180[0] == arg_63[0] && arg_180[0] == arg_43[0] && arg_180[0] == arg_306[0] && arg_180[0] == arg_52[0] && arg_180[0] == arg_133[0] && arg_180[0] == arg_239[0] && arg_180[0] != arg_35[1] && arg_180[0] != arg_228[1] && arg_180[0] != arg_95[1] && arg_180[0] == arg_172[0] && arg_180[0] != arg_113[1] && arg_180[0] != arg_193[1] && arg_180[0] != arg_52[1] && arg_180[0] == arg_55[0] && arg_180[0] != arg_183[1] && arg_180[0] == arg_236[0] && arg_180[0] == arg_148[0] && arg_180[0] != arg_296[1] && arg_180[0] != arg_73[1] && arg_180[0] != arg_25[1] && arg_180[0] != arg_63[1] && arg_180[0] == arg_17[0] && arg_180[0] == arg_279[0] && arg_180[0] == arg_103[0] && arg_180[0] == arg_113[0] && arg_180[0] != arg_151[1] && arg_180[0] == arg_271[0] && arg_180[0] == arg_100[0] && arg_180[0] != arg_172[1] && arg_180[0] != arg_239[1] && arg_180[0] == arg_32[0] && arg_180[0] != arg_43[1] && arg_180[0] != arg_309[1] && arg_180[0] == arg_78[0] && arg_180[0] != arg_190[1] && arg_180[0] == arg_198[0] && arg_180[0] != arg_258[1] && arg_180[0] == arg_296[0] && arg_180[0] != arg_60[1] && arg_180[0] != arg_78[1] && arg_180[0] != arg_121[1] && arg_180[0] == arg_250[0] && arg_180[0] == arg_314[0] && arg_180[0] != arg_148[1] && arg_180[0] != arg_156[1] && arg_180[0] != arg_70[1] && arg_180[0] != arg_231[1] && arg_180[0] != arg_32[1] && arg_180[0] != arg_210[1] && arg_180[0] == arg_22[0] && arg_180[0] == arg_276[0] && arg_180[0] == arg_95[0] && arg_180[0] == arg_73[0] && arg_180[0] == arg_70[0] && arg_180[0] == arg_121[0] && arg_180[0] == arg_268[0] && arg_180[0] != arg_299[1] && arg_180[0] == arg_138[0] && arg_180[0] == arg_175[0] && arg_180[0] != arg_17[1] && arg_180[0] != arg_213[1] && arg_180[0] == arg_14[0] && arg_180[0] == arg_25[0] && arg_180[0] != arg_133[1] && arg_180[0] == arg_291[0] && arg_180[0] != arg_271[1] && arg_118[1] != arg_221[0] && arg_118[1] == arg_279[1] && arg_118[1] != arg_92[0] && arg_118[1] != arg_63[0] && arg_118[1] != arg_43[0] && arg_118[1] != arg_306[0] && arg_118[1] != arg_52[0] && arg_118[1] != arg_133[0] && arg_118[1] != arg_239[0] && arg_118[1] == arg_35[1] && arg_118[1] == arg_228[1] && arg_118[1] == arg_95[1] && arg_118[1] != arg_172[0] && arg_118[1] == arg_113[1] && arg_118[1] == arg_193[1] && arg_118[1] == arg_52[1] && arg_118[1] != arg_55[0] && arg_118[1] == arg_183[1] && arg_118[1] != arg_236[0] && arg_118[1] != arg_148[0] && arg_118[1] == arg_296[1] && arg_118[1] == arg_73[1] && arg_118[1] == arg_25[1] && arg_118[1] == arg_63[1] && arg_118[1] != arg_17[0] && arg_118[1] != arg_279[0] && arg_118[1] != arg_103[0] && arg_118[1] != arg_113[0] && arg_118[1] == arg_151[1] && arg_118[1] != arg_271[0] && arg_118[1] != arg_100[0] && arg_118[1] == arg_172[1] && arg_118[1] == arg_239[1] && arg_118[1] != arg_32[0] && arg_118[1] == arg_43[1] && arg_118[1] == arg_309[1] && arg_118[1] != arg_78[0] && arg_118[1] == arg_190[1] && arg_118[1] != arg_198[0] && arg_118[1] == arg_258[1] && arg_118[1] != arg_296[0] && arg_118[1] == arg_60[1] && arg_118[1] == arg_78[1] && arg_118[1] == arg_121[1] && arg_118[1] != arg_250[0] && arg_118[1] != arg_314[0] && arg_118[1] == arg_148[1] && arg_118[1] == arg_156[1] && arg_118[1] == arg_70[1] && arg_118[1] == arg_231[1] && arg_118[1] == arg_32[1] && arg_118[1] == arg_210[1] && arg_118[1] != arg_22[0] && arg_118[1] != arg_276[0] && arg_118[1] != arg_95[0] && arg_118[1] != arg_73[0] && arg_118[1] != arg_70[0] && arg_118[1] != arg_121[0] && arg_118[1] != arg_268[0] && arg_118[1] == arg_299[1] && arg_118[1] != arg_138[0] && arg_118[1] != arg_175[0] && arg_118[1] == arg_17[1] && arg_118[1] == arg_213[1] && arg_118[1] != arg_14[0] && arg_118[1] != arg_25[0] && arg_118[1] == arg_133[1] && arg_118[1] != arg_291[0] && arg_118[1] == arg_271[1] && arg_221[0] != arg_279[1] && arg_221[0] == arg_92[0] && arg_221[0] == arg_63[0] && arg_221[0] == arg_43[0] && arg_221[0] == arg_306[0] && arg_221[0] == arg_52[0] && arg_221[0] == arg_133[0] && arg_221[0] == arg_239[0] && arg_221[0] != arg_35[1] && arg_221[0] != arg_228[1] && arg_221[0] != arg_95[1] && arg_221[0] == arg_172[0] && arg_221[0] != arg_113[1] && arg_221[0] != arg_193[1] && arg_221[0] != arg_52[1] && arg_221[0] == arg_55[0] && arg_221[0] != arg_183[1] && arg_221[0] == arg_236[0] && arg_221[0] == arg_148[0] && arg_221[0] != arg_296[1] && arg_221[0] != arg_73[1] && arg_221[0] != arg_25[1] && arg_221[0] != arg_63[1] && arg_221[0] == arg_17[0] && arg_221[0] == arg_279[0] && arg_221[0] == arg_103[0] && arg_221[0] == arg_113[0] && arg_221[0] != arg_151[1] && arg_221[0] == arg_271[0] && arg_221[0] == arg_100[0] && arg_221[0] != arg_172[1] && arg_221[0] != arg_239[1] && arg_221[0] == arg_32[0] && arg_221[0] != arg_43[1] && arg_221[0] != arg_309[1] && arg_221[0] == arg_78[0] && arg_221[0] != arg_190[1] && arg_221[0] == arg_198[0] && arg_221[0] != arg_258[1] && arg_221[0] == arg_296[0] && arg_221[0] != arg_60[1] && arg_221[0] != arg_78[1] && arg_221[0] != arg_121[1] && arg_221[0] == arg_250[0] && arg_221[0] == arg_314[0] && arg_221[0] != arg_148[1] && arg_221[0] != arg_156[1] && arg_221[0] != arg_70[1] && arg_221[0] != arg_231[1] && arg_221[0] != arg_32[1] && arg_221[0] != arg_210[1] && arg_221[0] == arg_22[0] && arg_221[0] == arg_276[0] && arg_221[0] == arg_95[0] && arg_221[0] == arg_73[0] && arg_221[0] == arg_70[0] && arg_221[0] == arg_121[0] && arg_221[0] == arg_268[0] && arg_221[0] != arg_299[1] && arg_221[0] == arg_138[0] && arg_221[0] == arg_175[0] && arg_221[0] != arg_17[1] && arg_221[0] != arg_213[1] && arg_221[0] == arg_14[0] && arg_221[0] == arg_25[0] && arg_221[0] != arg_133[1] && arg_221[0] == arg_291[0] && arg_221[0] != arg_271[1] && arg_279[1] != arg_92[0] && arg_279[1] != arg_63[0] && arg_279[1] != arg_43[0] && arg_279[1] != arg_306[0] && arg_279[1] != arg_52[0] && arg_279[1] != arg_133[0] && arg_279[1] != arg_239[0] && arg_279[1] == arg_35[1] && arg_279[1] == arg_228[1] && arg_279[1] == arg_95[1] && arg_279[1] != arg_172[0] && arg_279[1] == arg_113[1] && arg_279[1] == arg_193[1] && arg_279[1] == arg_52[1] && arg_279[1] != arg_55[0] && arg_279[1] == arg_183[1] && arg_279[1] != arg_236[0] && arg_279[1] != arg_148[0] && arg_279[1] == arg_296[1] && arg_279[1] == arg_73[1] && arg_279[1] == arg_25[1] && arg_279[1] == arg_63[1] && arg_279[1] != arg_17[0] && arg_279[1] != arg_279[0] && arg_279[1] != arg_103[0] && arg_279[1] != arg_113[0] && arg_279[1] == arg_151[1] && arg_279[1] != arg_271[0] && arg_279[1] != arg_100[0] && arg_279[1] == arg_172[1] && arg_279[1] == arg_239[1] && arg_279[1] != arg_32[0] && arg_279[1] == arg_43[1] && arg_279[1] == arg_309[1] && arg_279[1] != arg_78[0] && arg_279[1] == arg_190[1] && arg_279[1] != arg_198[0] && arg_279[1] == arg_258[1] && arg_279[1] != arg_296[0] && arg_279[1] == arg_60[1] && arg_279[1] == arg_78[1] && arg_279[1] == arg_121[1] && arg_279[1] != arg_250[0] && arg_279[1] != arg_314[0] && arg_279[1] == arg_148[1] && arg_279[1] == arg_156[1] && arg_279[1] == arg_70[1] && arg_279[1] == arg_231[1] && arg_279[1] == arg_32[1] && arg_279[1] == arg_210[1] && arg_279[1] != arg_22[0] && arg_279[1] != arg_276[0] && arg_279[1] != arg_95[0] && arg_279[1] != arg_73[0] && arg_279[1] != arg_70[0] && arg_279[1] != arg_121[0] && arg_279[1] != arg_268[0] && arg_279[1] == arg_299[1] && arg_279[1] != arg_138[0] && arg_279[1] != arg_175[0] && arg_279[1] == arg_17[1] && arg_279[1] == arg_213[1] && arg_279[1] != arg_14[0] && arg_279[1] != arg_25[0] && arg_279[1] == arg_133[1] && arg_279[1] != arg_291[0] && arg_279[1] == arg_271[1] && arg_92[0] == arg_63[0] && arg_92[0] == arg_43[0] && arg_92[0] == arg_306[0] && arg_92[0] == arg_52[0] && arg_92[0] == arg_133[0] && arg_92[0] == arg_239[0] && arg_92[0] != arg_35[1] && arg_92[0] != arg_228[1] && arg_92[0] != arg_95[1] && arg_92[0] == arg_172[0] && arg_92[0] != arg_113[1] && arg_92[0] != arg_193[1] && arg_92[0] != arg_52[1] && arg_92[0] == arg_55[0] && arg_92[0] != arg_183[1] && arg_92[0] == arg_236[0] && arg_92[0] == arg_148[0] && arg_92[0] != arg_296[1] && arg_92[0] != arg_73[1] && arg_92[0] != arg_25[1] && arg_92[0] != arg_63[1] && arg_92[0] == arg_17[0] && arg_92[0] == arg_279[0] && arg_92[0] == arg_103[0] && arg_92[0] == arg_113[0] && arg_92[0] != arg_151[1] && arg_92[0] == arg_271[0] && arg_92[0] == arg_100[0] && arg_92[0] != arg_172[1] && arg_92[0] != arg_239[1] && arg_92[0] == arg_32[0] && arg_92[0] != arg_43[1] && arg_92[0] != arg_309[1] && arg_92[0] == arg_78[0] && arg_92[0] != arg_190[1] && arg_92[0] == arg_198[0] && arg_92[0] != arg_258[1] && arg_92[0] == arg_296[0] && arg_92[0] != arg_60[1] && arg_92[0] != arg_78[1] && arg_92[0] != arg_121[1] && arg_92[0] == arg_250[0] && arg_92[0] == arg_314[0] && arg_92[0] != arg_148[1] && arg_92[0] != arg_156[1] && arg_92[0] != arg_70[1] && arg_92[0] != arg_231[1] && arg_92[0] != arg_32[1] && arg_92[0] != arg_210[1] && arg_92[0] == arg_22[0] && arg_92[0] == arg_276[0] && arg_92[0] == arg_95[0] && arg_92[0] == arg_73[0] && arg_92[0] == arg_70[0] && arg_92[0] == arg_121[0] && arg_92[0] == arg_268[0] && arg_92[0] != arg_299[1] && arg_92[0] == arg_138[0] && arg_92[0] == arg_175[0] && arg_92[0] != arg_17[1] && arg_92[0] != arg_213[1] && arg_92[0] == arg_14[0] && arg_92[0] == arg_25[0] && arg_92[0] != arg_133[1] && arg_92[0] == arg_291[0] && arg_92[0] != arg_271[1] && arg_63[0] == arg_43[0] && arg_63[0] == arg_306[0] && arg_63[0] == arg_52[0] && arg_63[0] == arg_133[0] && arg_63[0] == arg_239[0] && arg_63[0] != arg_35[1] && arg_63[0] != arg_228[1] && arg_63[0] != arg_95[1] && arg_63[0] == arg_172[0] && arg_63[0] != arg_113[1] && arg_63[0] != arg_193[1] && arg_63[0] != arg_52[1] && arg_63[0] == arg_55[0] && arg_63[0] != arg_183[1] && arg_63[0] == arg_236[0] && arg_63[0] == arg_148[0] && arg_63[0] != arg_296[1] && arg_63[0] != arg_73[1] && arg_63[0] != arg_25[1] && arg_63[0] != arg_63[1] && arg_63[0] == arg_17[0] && arg_63[0] == arg_279[0] && arg_63[0] == arg_103[0] && arg_63[0] == arg_113[0] && arg_63[0] != arg_151[1] && arg_63[0] == arg_271[0] && arg_63[0] == arg_100[0] && arg_63[0] != arg_172[1] && arg_63[0] != arg_239[1] && arg_63[0] == arg_32[0] && arg_63[0] != arg_43[1] && arg_63[0] != arg_309[1] && arg_63[0] == arg_78[0] && arg_63[0] != arg_190[1] && arg_63[0] == arg_198[0] && arg_63[0] != arg_258[1] && arg_63[0] == arg_296[0] && arg_63[0] != arg_60[1] && arg_63[0] != arg_78[1] && arg_63[0] != arg_121[1] && arg_63[0] == arg_250[0] && arg_63[0] == arg_314[0] && arg_63[0] != arg_148[1] && arg_63[0] != arg_156[1] && arg_63[0] != arg_70[1] && arg_63[0] != arg_231[1] && arg_63[0] != arg_32[1] && arg_63[0] != arg_210[1] && arg_63[0] == arg_22[0] && arg_63[0] == arg_276[0] && arg_63[0] == arg_95[0] && arg_63[0] == arg_73[0] && arg_63[0] == arg_70[0] && arg_63[0] == arg_121[0] && arg_63[0] == arg_268[0] && arg_63[0] != arg_299[1] && arg_63[0] == arg_138[0] && arg_63[0] == arg_175[0] && arg_63[0] != arg_17[1] && arg_63[0] != arg_213[1] && arg_63[0] == arg_14[0] && arg_63[0] == arg_25[0] && arg_63[0] != arg_133[1] && arg_63[0] == arg_291[0] && arg_63[0] != arg_271[1] && arg_43[0] == arg_306[0] && arg_43[0] == arg_52[0] && arg_43[0] == arg_133[0] && arg_43[0] == arg_239[0] && arg_43[0] != arg_35[1] && arg_43[0] != arg_228[1] && arg_43[0] != arg_95[1] && arg_43[0] == arg_172[0] && arg_43[0] != arg_113[1] && arg_43[0] != arg_193[1] && arg_43[0] != arg_52[1] && arg_43[0] == arg_55[0] && arg_43[0] != arg_183[1] && arg_43[0] == arg_236[0] && arg_43[0] == arg_148[0] && arg_43[0] != arg_296[1] && arg_43[0] != arg_73[1] && arg_43[0] != arg_25[1] && arg_43[0] != arg_63[1] && arg_43[0] == arg_17[0] && arg_43[0] == arg_279[0] && arg_43[0] == arg_103[0] && arg_43[0] == arg_113[0] && arg_43[0] != arg_151[1] && arg_43[0] == arg_271[0] && arg_43[0] == arg_100[0] && arg_43[0] != arg_172[1] && arg_43[0] != arg_239[1] && arg_43[0] == arg_32[0] && arg_43[0] != arg_43[1] && arg_43[0] != arg_309[1] && arg_43[0] == arg_78[0] && arg_43[0] != arg_190[1] && arg_43[0] == arg_198[0] && arg_43[0] != arg_258[1] && arg_43[0] == arg_296[0] && arg_43[0] != arg_60[1] && arg_43[0] != arg_78[1] && arg_43[0] != arg_121[1] && arg_43[0] == arg_250[0] && arg_43[0] == arg_314[0] && arg_43[0] != arg_148[1] && arg_43[0] != arg_156[1] && arg_43[0] != arg_70[1] && arg_43[0] != arg_231[1] && arg_43[0] != arg_32[1] && arg_43[0] != arg_210[1] && arg_43[0] == arg_22[0] && arg_43[0] == arg_276[0] && arg_43[0] == arg_95[0] && arg_43[0] == arg_73[0] && arg_43[0] == arg_70[0] && arg_43[0] == arg_121[0] && arg_43[0] == arg_268[0] && arg_43[0] != arg_299[1] && arg_43[0] == arg_138[0] && arg_43[0] == arg_175[0] && arg_43[0] != arg_17[1] && arg_43[0] != arg_213[1] && arg_43[0] == arg_14[0] && arg_43[0] == arg_25[0] && arg_43[0] != arg_133[1] && arg_43[0] == arg_291[0] && arg_43[0] != arg_271[1] && arg_306[0] == arg_52[0] && arg_306[0] == arg_133[0] && arg_306[0] == arg_239[0] && arg_306[0] != arg_35[1] && arg_306[0] != arg_228[1] && arg_306[0] != arg_95[1] && arg_306[0] == arg_172[0] && arg_306[0] != arg_113[1] && arg_306[0] != arg_193[1] && arg_306[0] != arg_52[1] && arg_306[0] == arg_55[0] && arg_306[0] != arg_183[1] && arg_306[0] == arg_236[0] && arg_306[0] == arg_148[0] && arg_306[0] != arg_296[1] && arg_306[0] != arg_73[1] && arg_306[0] != arg_25[1] && arg_306[0] != arg_63[1] && arg_306[0] == arg_17[0] && arg_306[0] == arg_279[0] && arg_306[0] == arg_103[0] && arg_306[0] == arg_113[0] && arg_306[0] != arg_151[1] && arg_306[0] == arg_271[0] && arg_306[0] == arg_100[0] && arg_306[0] != arg_172[1] && arg_306[0] != arg_239[1] && arg_306[0] == arg_32[0] && arg_306[0] != arg_43[1] && arg_306[0] != arg_309[1] && arg_306[0] == arg_78[0] && arg_306[0] != arg_190[1] && arg_306[0] == arg_198[0] && arg_306[0] != arg_258[1] && arg_306[0] == arg_296[0] && arg_306[0] != arg_60[1] && arg_306[0] != arg_78[1] && arg_306[0] != arg_121[1] && arg_306[0] == arg_250[0] && arg_306[0] == arg_314[0] && arg_306[0] != arg_148[1] && arg_306[0] != arg_156[1] && arg_306[0] != arg_70[1] && arg_306[0] != arg_231[1] && arg_306[0] != arg_32[1] && arg_306[0] != arg_210[1] && arg_306[0] == arg_22[0] && arg_306[0] == arg_276[0] && arg_306[0] == arg_95[0] && arg_306[0] == arg_73[0] && arg_306[0] == arg_70[0] && arg_306[0] == arg_121[0] && arg_306[0] == arg_268[0] && arg_306[0] != arg_299[1] && arg_306[0] == arg_138[0] && arg_306[0] == arg_175[0] && arg_306[0] != arg_17[1] && arg_306[0] != arg_213[1] && arg_306[0] == arg_14[0] && arg_306[0] == arg_25[0] && arg_306[0] != arg_133[1] && arg_306[0] == arg_291[0] && arg_306[0] != arg_271[1] && arg_52[0] == arg_133[0] && arg_52[0] == arg_239[0] && arg_52[0] != arg_35[1] && arg_52[0] != arg_228[1] && arg_52[0] != arg_95[1] && arg_52[0] == arg_172[0] && arg_52[0] != arg_113[1] && arg_52[0] != arg_193[1] && arg_52[0] != arg_52[1] && arg_52[0] == arg_55[0] && arg_52[0] != arg_183[1] && arg_52[0] == arg_236[0] && arg_52[0] == arg_148[0] && arg_52[0] != arg_296[1] && arg_52[0] != arg_73[1] && arg_52[0] != arg_25[1] && arg_52[0] != arg_63[1] && arg_52[0] == arg_17[0] && arg_52[0] == arg_279[0] && arg_52[0] == arg_103[0] && arg_52[0] == arg_113[0] && arg_52[0] != arg_151[1] && arg_52[0] == arg_271[0] && arg_52[0] == arg_100[0] && arg_52[0] != arg_172[1] && arg_52[0] != arg_239[1] && arg_52[0] == arg_32[0] && arg_52[0] != arg_43[1] && arg_52[0] != arg_309[1] && arg_52[0] == arg_78[0] && arg_52[0] != arg_190[1] && arg_52[0] == arg_198[0] && arg_52[0] != arg_258[1] && arg_52[0] == arg_296[0] && arg_52[0] != arg_60[1] && arg_52[0] != arg_78[1] && arg_52[0] != arg_121[1] && arg_52[0] == arg_250[0] && arg_52[0] == arg_314[0] && arg_52[0] != arg_148[1] && arg_52[0] != arg_156[1] && arg_52[0] != arg_70[1] && arg_52[0] != arg_231[1] && arg_52[0] != arg_32[1] && arg_52[0] != arg_210[1] && arg_52[0] == arg_22[0] && arg_52[0] == arg_276[0] && arg_52[0] == arg_95[0] && arg_52[0] == arg_73[0] && arg_52[0] == arg_70[0] && arg_52[0] == arg_121[0] && arg_52[0] == arg_268[0] && arg_52[0] != arg_299[1] && arg_52[0] == arg_138[0] && arg_52[0] == arg_175[0] && arg_52[0] != arg_17[1] && arg_52[0] != arg_213[1] && arg_52[0] == arg_14[0] && arg_52[0] == arg_25[0] && arg_52[0] != arg_133[1] && arg_52[0] == arg_291[0] && arg_52[0] != arg_271[1] && arg_133[0] == arg_239[0] && arg_133[0] != arg_35[1] && arg_133[0] != arg_228[1] && arg_133[0] != arg_95[1] && arg_133[0] == arg_172[0] && arg_133[0] != arg_113[1] && arg_133[0] != arg_193[1] && arg_133[0] != arg_52[1] && arg_133[0] == arg_55[0] && arg_133[0] != arg_183[1] && arg_133[0] == arg_236[0] && arg_133[0] == arg_148[0] && arg_133[0] != arg_296[1] && arg_133[0] != arg_73[1] && arg_133[0] != arg_25[1] && arg_133[0] != arg_63[1] && arg_133[0] == arg_17[0] && arg_133[0] == arg_279[0] && arg_133[0] == arg_103[0] && arg_133[0] == arg_113[0] && arg_133[0] != arg_151[1] && arg_133[0] == arg_271[0] && arg_133[0] == arg_100[0] && arg_133[0] != arg_172[1] && arg_133[0] != arg_239[1] && arg_133[0] == arg_32[0] && arg_133[0] != arg_43[1] && arg_133[0] != arg_309[1] && arg_133[0] == arg_78[0] && arg_133[0] != arg_190[1] && arg_133[0] == arg_198[0] && arg_133[0] != arg_258[1] && arg_133[0] == arg_296[0] && arg_133[0] != arg_60[1] && arg_133[0] != arg_78[1] && arg_133[0] != arg_121[1] && arg_133[0] == arg_250[0] && arg_133[0] == arg_314[0] && arg_133[0] != arg_148[1] && arg_133[0] != arg_156[1] && arg_133[0] != arg_70[1] && arg_133[0] != arg_231[1] && arg_133[0] != arg_32[1] && arg_133[0] != arg_210[1] && arg_133[0] == arg_22[0] && arg_133[0] == arg_276[0] && arg_133[0] == arg_95[0] && arg_133[0] == arg_73[0] && arg_133[0] == arg_70[0] && arg_133[0] == arg_121[0] && arg_133[0] == arg_268[0] && arg_133[0] != arg_299[1] && arg_133[0] == arg_138[0] && arg_133[0] == arg_175[0] && arg_133[0] != arg_17[1] && arg_133[0] != arg_213[1] && arg_133[0] == arg_14[0] && arg_133[0] == arg_25[0] && arg_133[0] != arg_133[1] && arg_133[0] == arg_291[0] && arg_133[0] != arg_271[1] && arg_239[0] != arg_35[1] && arg_239[0] != arg_228[1] && arg_239[0] != arg_95[1] && arg_239[0] == arg_172[0] && arg_239[0] != arg_113[1] && arg_239[0] != arg_193[1] && arg_239[0] != arg_52[1] && arg_239[0] == arg_55[0] && arg_239[0] != arg_183[1] && arg_239[0] == arg_236[0] && arg_239[0] == arg_148[0] && arg_239[0] != arg_296[1] && arg_239[0] != arg_73[1] && arg_239[0] != arg_25[1] && arg_239[0] != arg_63[1] && arg_239[0] == arg_17[0] && arg_239[0] == arg_279[0] && arg_239[0] == arg_103[0] && arg_239[0] == arg_113[0] && arg_239[0] != arg_151[1] && arg_239[0] == arg_271[0] && arg_239[0] == arg_100[0] && arg_239[0] != arg_172[1] && arg_239[0] != arg_239[1] && arg_239[0] == arg_32[0] && arg_239[0] != arg_43[1] && arg_239[0] != arg_309[1] && arg_239[0] == arg_78[0] && arg_239[0] != arg_190[1] && arg_239[0] == arg_198[0] && arg_239[0] != arg_258[1] && arg_239[0] == arg_296[0] && arg_239[0] != arg_60[1] && arg_239[0] != arg_78[1] && arg_239[0] != arg_121[1] && arg_239[0] == arg_250[0] && arg_239[0] == arg_314[0] && arg_239[0] != arg_148[1] && arg_239[0] != arg_156[1] && arg_239[0] != arg_70[1] && arg_239[0] != arg_231[1] && arg_239[0] != arg_32[1] && arg_239[0] != arg_210[1] && arg_239[0] == arg_22[0] && arg_239[0] == arg_276[0] && arg_239[0] == arg_95[0] && arg_239[0] == arg_73[0] && arg_239[0] == arg_70[0] && arg_239[0] == arg_121[0] && arg_239[0] == arg_268[0] && arg_239[0] != arg_299[1] && arg_239[0] == arg_138[0] && arg_239[0] == arg_175[0] && arg_239[0] != arg_17[1] && arg_239[0] != arg_213[1] && arg_239[0] == arg_14[0] && arg_239[0] == arg_25[0] && arg_239[0] != arg_133[1] && arg_239[0] == arg_291[0] && arg_239[0] != arg_271[1] && arg_35[1] == arg_228[1] && arg_35[1] == arg_95[1] && arg_35[1] != arg_172[0] && arg_35[1] == arg_113[1] && arg_35[1] == arg_193[1] && arg_35[1] == arg_52[1] && arg_35[1] != arg_55[0] && arg_35[1] == arg_183[1] && arg_35[1] != arg_236[0] && arg_35[1] != arg_148[0] && arg_35[1] == arg_296[1] && arg_35[1] == arg_73[1] && arg_35[1] == arg_25[1] && arg_35[1] == arg_63[1] && arg_35[1] != arg_17[0] && arg_35[1] != arg_279[0] && arg_35[1] != arg_103[0] && arg_35[1] != arg_113[0] && arg_35[1] == arg_151[1] && arg_35[1] != arg_271[0] && arg_35[1] != arg_100[0] && arg_35[1] == arg_172[1] && arg_35[1] == arg_239[1] && arg_35[1] != arg_32[0] && arg_35[1] == arg_43[1] && arg_35[1] == arg_309[1] && arg_35[1] != arg_78[0] && arg_35[1] == arg_190[1] && arg_35[1] != arg_198[0] && arg_35[1] == arg_258[1] && arg_35[1] != arg_296[0] && arg_35[1] == arg_60[1] && arg_35[1] == arg_78[1] && arg_35[1] == arg_121[1] && arg_35[1] != arg_250[0] && arg_35[1] != arg_314[0] && arg_35[1] == arg_148[1] && arg_35[1] == arg_156[1] && arg_35[1] == arg_70[1] && arg_35[1] == arg_231[1] && arg_35[1] == arg_32[1] && arg_35[1] == arg_210[1] && arg_35[1] != arg_22[0] && arg_35[1] != arg_276[0] && arg_35[1] != arg_95[0] && arg_35[1] != arg_73[0] && arg_35[1] != arg_70[0] && arg_35[1] != arg_121[0] && arg_35[1] != arg_268[0] && arg_35[1] == arg_299[1] && arg_35[1] != arg_138[0] && arg_35[1] != arg_175[0] && arg_35[1] == arg_17[1] && arg_35[1] == arg_213[1] && arg_35[1] != arg_14[0] && arg_35[1] != arg_25[0] && arg_35[1] == arg_133[1] && arg_35[1] != arg_291[0] && arg_35[1] == arg_271[1] && arg_228[1] == arg_95[1] && arg_228[1] != arg_172[0] && arg_228[1] == arg_113[1] && arg_228[1] == arg_193[1] && arg_228[1] == arg_52[1] && arg_228[1] != arg_55[0] && arg_228[1] == arg_183[1] && arg_228[1] != arg_236[0] && arg_228[1] != arg_148[0] && arg_228[1] == arg_296[1] && arg_228[1] == arg_73[1] && arg_228[1] == arg_25[1] && arg_228[1] == arg_63[1] && arg_228[1] != arg_17[0] && arg_228[1] != arg_279[0] && arg_228[1] != arg_103[0] && arg_228[1] != arg_113[0] && arg_228[1] == arg_151[1] && arg_228[1] != arg_271[0] && arg_228[1] != arg_100[0] && arg_228[1] == arg_172[1] && arg_228[1] == arg_239[1] && arg_228[1] != arg_32[0] && arg_228[1] == arg_43[1] && arg_228[1] == arg_309[1] && arg_228[1] != arg_78[0] && arg_228[1] == arg_190[1] && arg_228[1] != arg_198[0] && arg_228[1] == arg_258[1] && arg_228[1] != arg_296[0] && arg_228[1] == arg_60[1] && arg_228[1] == arg_78[1] && arg_228[1] == arg_121[1] && arg_228[1] != arg_250[0] && arg_228[1] != arg_314[0] && arg_228[1] == arg_148[1] && arg_228[1] == arg_156[1] && arg_228[1] == arg_70[1] && arg_228[1] == arg_231[1] && arg_228[1] == arg_32[1] && arg_228[1] == arg_210[1] && arg_228[1] != arg_22[0] && arg_228[1] != arg_276[0] && arg_228[1] != arg_95[0] && arg_228[1] != arg_73[0] && arg_228[1] != arg_70[0] && arg_228[1] != arg_121[0] && arg_228[1] != arg_268[0] && arg_228[1] == arg_299[1] && arg_228[1] != arg_138[0] && arg_228[1] != arg_175[0] && arg_228[1] == arg_17[1] && arg_228[1] == arg_213[1] && arg_228[1] != arg_14[0] && arg_228[1] != arg_25[0] && arg_228[1] == arg_133[1] && arg_228[1] != arg_291[0] && arg_228[1] == arg_271[1] && arg_95[1] != arg_172[0] && arg_95[1] == arg_113[1] && arg_95[1] == arg_193[1] && arg_95[1] == arg_52[1] && arg_95[1] != arg_55[0] && arg_95[1] == arg_183[1] && arg_95[1] != arg_236[0] && arg_95[1] != arg_148[0] && arg_95[1] == arg_296[1] && arg_95[1] == arg_73[1] && arg_95[1] == arg_25[1] && arg_95[1] == arg_63[1] && arg_95[1] != arg_17[0] && arg_95[1] != arg_279[0] && arg_95[1] != arg_103[0] && arg_95[1] != arg_113[0] && arg_95[1] == arg_151[1] && arg_95[1] != arg_271[0] && arg_95[1] != arg_100[0] && arg_95[1] == arg_172[1] && arg_95[1] == arg_239[1] && arg_95[1] != arg_32[0] && arg_95[1] == arg_43[1] && arg_95[1] == arg_309[1] && arg_95[1] != arg_78[0] && arg_95[1] == arg_190[1] && arg_95[1] != arg_198[0] && arg_95[1] == arg_258[1] && arg_95[1] != arg_296[0] && arg_95[1] == arg_60[1] && arg_95[1] == arg_78[1] && arg_95[1] == arg_121[1] && arg_95[1] != arg_250[0] && arg_95[1] != arg_314[0] && arg_95[1] == arg_148[1] && arg_95[1] == arg_156[1] && arg_95[1] == arg_70[1] && arg_95[1] == arg_231[1] && arg_95[1] == arg_32[1] && arg_95[1] == arg_210[1] && arg_95[1] != arg_22[0] && arg_95[1] != arg_276[0] && arg_95[1] != arg_95[0] && arg_95[1] != arg_73[0] && arg_95[1] != arg_70[0] && arg_95[1] != arg_121[0] && arg_95[1] != arg_268[0] && arg_95[1] == arg_299[1] && arg_95[1] != arg_138[0] && arg_95[1] != arg_175[0] && arg_95[1] == arg_17[1] && arg_95[1] == arg_213[1] && arg_95[1] != arg_14[0] && arg_95[1] != arg_25[0] && arg_95[1] == arg_133[1] && arg_95[1] != arg_291[0] && arg_95[1] == arg_271[1] && arg_172[0] != arg_113[1] && arg_172[0] != arg_193[1] && arg_172[0] != arg_52[1] && arg_172[0] == arg_55[0] && arg_172[0] != arg_183[1] && arg_172[0] == arg_236[0] && arg_172[0] == arg_148[0] && arg_172[0] != arg_296[1] && arg_172[0] != arg_73[1] && arg_172[0] != arg_25[1] && arg_172[0] != arg_63[1] && arg_172[0] == arg_17[0] && arg_172[0] == arg_279[0] && arg_172[0] == arg_103[0] && arg_172[0] == arg_113[0] && arg_172[0] != arg_151[1] && arg_172[0] == arg_271[0] && arg_172[0] == arg_100[0] && arg_172[0] != arg_172[1] && arg_172[0] != arg_239[1] && arg_172[0] == arg_32[0] && arg_172[0] != arg_43[1] && arg_172[0] != arg_309[1] && arg_172[0] == arg_78[0] && arg_172[0] != arg_190[1] && arg_172[0] == arg_198[0] && arg_172[0] != arg_258[1] && arg_172[0] == arg_296[0] && arg_172[0] != arg_60[1] && arg_172[0] != arg_78[1] && arg_172[0] != arg_121[1] && arg_172[0] == arg_250[0] && arg_172[0] == arg_314[0] && arg_172[0] != arg_148[1] && arg_172[0] != arg_156[1] && arg_172[0] != arg_70[1] && arg_172[0] != arg_231[1] && arg_172[0] != arg_32[1] && arg_172[0] != arg_210[1] && arg_172[0] == arg_22[0] && arg_172[0] == arg_276[0] && arg_172[0] == arg_95[0] && arg_172[0] == arg_73[0] && arg_172[0] == arg_70[0] && arg_172[0] == arg_121[0] && arg_172[0] == arg_268[0] && arg_172[0] != arg_299[1] && arg_172[0] == arg_138[0] && arg_172[0] == arg_175[0] && arg_172[0] != arg_17[1] && arg_172[0] != arg_213[1] && arg_172[0] == arg_14[0] && arg_172[0] == arg_25[0] && arg_172[0] != arg_133[1] && arg_172[0] == arg_291[0] && arg_172[0] != arg_271[1] && arg_113[1] == arg_193[1] && arg_113[1] == arg_52[1] && arg_113[1] != arg_55[0] && arg_113[1] == arg_183[1] && arg_113[1] != arg_236[0] && arg_113[1] != arg_148[0] && arg_113[1] == arg_296[1] && arg_113[1] == arg_73[1] && arg_113[1] == arg_25[1] && arg_113[1] == arg_63[1] && arg_113[1] != arg_17[0] && arg_113[1] != arg_279[0] && arg_113[1] != arg_103[0] && arg_113[1] != arg_113[0] && arg_113[1] == arg_151[1] && arg_113[1] != arg_271[0] && arg_113[1] != arg_100[0] && arg_113[1] == arg_172[1] && arg_113[1] == arg_239[1] && arg_113[1] != arg_32[0] && arg_113[1] == arg_43[1] && arg_113[1] == arg_309[1] && arg_113[1] != arg_78[0] && arg_113[1] == arg_190[1] && arg_113[1] != arg_198[0] && arg_113[1] == arg_258[1] && arg_113[1] != arg_296[0] && arg_113[1] == arg_60[1] && arg_113[1] == arg_78[1] && arg_113[1] == arg_121[1] && arg_113[1] != arg_250[0] && arg_113[1] != arg_314[0] && arg_113[1] == arg_148[1] && arg_113[1] == arg_156[1] && arg_113[1] == arg_70[1] && arg_113[1] == arg_231[1] && arg_113[1] == arg_32[1] && arg_113[1] == arg_210[1] && arg_113[1] != arg_22[0] && arg_113[1] != arg_276[0] && arg_113[1] != arg_95[0] && arg_113[1] != arg_73[0] && arg_113[1] != arg_70[0] && arg_113[1] != arg_121[0] && arg_113[1] != arg_268[0] && arg_113[1] == arg_299[1] && arg_113[1] != arg_138[0] && arg_113[1] != arg_175[0] && arg_113[1] == arg_17[1] && arg_113[1] == arg_213[1] && arg_113[1] != arg_14[0] && arg_113[1] != arg_25[0] && arg_113[1] == arg_133[1] && arg_113[1] != arg_291[0] && arg_113[1] == arg_271[1] && arg_193[1] == arg_52[1] && arg_193[1] != arg_55[0] && arg_193[1] == arg_183[1] && arg_193[1] != arg_236[0] && arg_193[1] != arg_148[0] && arg_193[1] == arg_296[1] && arg_193[1] == arg_73[1] && arg_193[1] == arg_25[1] && arg_193[1] == arg_63[1] && arg_193[1] != arg_17[0] && arg_193[1] != arg_279[0] && arg_193[1] != arg_103[0] && arg_193[1] != arg_113[0] && arg_193[1] == arg_151[1] && arg_193[1] != arg_271[0] && arg_193[1] != arg_100[0] && arg_193[1] == arg_172[1] && arg_193[1] == arg_239[1] && arg_193[1] != arg_32[0] && arg_193[1] == arg_43[1] && arg_193[1] == arg_309[1] && arg_193[1] != arg_78[0] && arg_193[1] == arg_190[1] && arg_193[1] != arg_198[0] && arg_193[1] == arg_258[1] && arg_193[1] != arg_296[0] && arg_193[1] == arg_60[1] && arg_193[1] == arg_78[1] && arg_193[1] == arg_121[1] && arg_193[1] != arg_250[0] && arg_193[1] != arg_314[0] && arg_193[1] == arg_148[1] && arg_193[1] == arg_156[1] && arg_193[1] == arg_70[1] && arg_193[1] == arg_231[1] && arg_193[1] == arg_32[1] && arg_193[1] == arg_210[1] && arg_193[1] != arg_22[0] && arg_193[1] != arg_276[0] && arg_193[1] != arg_95[0] && arg_193[1] != arg_73[0] && arg_193[1] != arg_70[0] && arg_193[1] != arg_121[0] && arg_193[1] != arg_268[0] && arg_193[1] == arg_299[1] && arg_193[1] != arg_138[0] && arg_193[1] != arg_175[0] && arg_193[1] == arg_17[1] && arg_193[1] == arg_213[1] && arg_193[1] != arg_14[0] && arg_193[1] != arg_25[0] && arg_193[1] == arg_133[1] && arg_193[1] != arg_291[0] && arg_193[1] == arg_271[1] && arg_52[1] != arg_55[0] && arg_52[1] == arg_183[1] && arg_52[1] != arg_236[0] && arg_52[1] != arg_148[0] && arg_52[1] == arg_296[1] && arg_52[1] == arg_73[1] && arg_52[1] == arg_25[1] && arg_52[1] == arg_63[1] && arg_52[1] != arg_17[0] && arg_52[1] != arg_279[0] && arg_52[1] != arg_103[0] && arg_52[1] != arg_113[0] && arg_52[1] == arg_151[1] && arg_52[1] != arg_271[0] && arg_52[1] != arg_100[0] && arg_52[1] == arg_172[1] && arg_52[1] == arg_239[1] && arg_52[1] != arg_32[0] && arg_52[1] == arg_43[1] && arg_52[1] == arg_309[1] && arg_52[1] != arg_78[0] && arg_52[1] == arg_190[1] && arg_52[1] != arg_198[0] && arg_52[1] == arg_258[1] && arg_52[1] != arg_296[0] && arg_52[1] == arg_60[1] && arg_52[1] == arg_78[1] && arg_52[1] == arg_121[1] && arg_52[1] != arg_250[0] && arg_52[1] != arg_314[0] && arg_52[1] == arg_148[1] && arg_52[1] == arg_156[1] && arg_52[1] == arg_70[1] && arg_52[1] == arg_231[1] && arg_52[1] == arg_32[1] && arg_52[1] == arg_210[1] && arg_52[1] != arg_22[0] && arg_52[1] != arg_276[0] && arg_52[1] != arg_95[0] && arg_52[1] != arg_73[0] && arg_52[1] != arg_70[0] && arg_52[1] != arg_121[0] && arg_52[1] != arg_268[0] && arg_52[1] == arg_299[1] && arg_52[1] != arg_138[0] && arg_52[1] != arg_175[0] && arg_52[1] == arg_17[1] && arg_52[1] == arg_213[1] && arg_52[1] != arg_14[0] && arg_52[1] != arg_25[0] && arg_52[1] == arg_133[1] && arg_52[1] != arg_291[0] && arg_52[1] == arg_271[1] && arg_55[0] != arg_183[1] && arg_55[0] == arg_236[0] && arg_55[0] == arg_148[0] && arg_55[0] != arg_296[1] && arg_55[0] != arg_73[1] && arg_55[0] != arg_25[1] && arg_55[0] != arg_63[1] && arg_55[0] == arg_17[0] && arg_55[0] == arg_279[0] && arg_55[0] == arg_103[0] && arg_55[0] == arg_113[0] && arg_55[0] != arg_151[1] && arg_55[0] == arg_271[0] && arg_55[0] == arg_100[0] && arg_55[0] != arg_172[1] && arg_55[0] != arg_239[1] && arg_55[0] == arg_32[0] && arg_55[0] != arg_43[1] && arg_55[0] != arg_309[1] && arg_55[0] == arg_78[0] && arg_55[0] != arg_190[1] && arg_55[0] == arg_198[0] && arg_55[0] != arg_258[1] && arg_55[0] == arg_296[0] && arg_55[0] != arg_60[1] && arg_55[0] != arg_78[1] && arg_55[0] != arg_121[1] && arg_55[0] == arg_250[0] && arg_55[0] == arg_314[0] && arg_55[0] != arg_148[1] && arg_55[0] != arg_156[1] && arg_55[0] != arg_70[1] && arg_55[0] != arg_231[1] && arg_55[0] != arg_32[1] && arg_55[0] != arg_210[1] && arg_55[0] == arg_22[0] && arg_55[0] == arg_276[0] && arg_55[0] == arg_95[0] && arg_55[0] == arg_73[0] && arg_55[0] == arg_70[0] && arg_55[0] == arg_121[0] && arg_55[0] == arg_268[0] && arg_55[0] != arg_299[1] && arg_55[0] == arg_138[0] && arg_55[0] == arg_175[0] && arg_55[0] != arg_17[1] && arg_55[0] != arg_213[1] && arg_55[0] == arg_14[0] && arg_55[0] == arg_25[0] && arg_55[0] != arg_133[1] && arg_55[0] == arg_291[0] && arg_55[0] != arg_271[1] && arg_183[1] != arg_236[0] && arg_183[1] != arg_148[0] && arg_183[1] == arg_296[1] && arg_183[1] == arg_73[1] && arg_183[1] == arg_25[1] && arg_183[1] == arg_63[1] && arg_183[1] != arg_17[0] && arg_183[1] != arg_279[0] && arg_183[1] != arg_103[0] && arg_183[1] != arg_113[0] && arg_183[1] == arg_151[1] && arg_183[1] != arg_271[0] && arg_183[1] != arg_100[0] && arg_183[1] == arg_172[1] && arg_183[1] == arg_239[1] && arg_183[1] != arg_32[0] && arg_183[1] == arg_43[1] && arg_183[1] == arg_309[1] && arg_183[1] != arg_78[0] && arg_183[1] == arg_190[1] && arg_183[1] != arg_198[0] && arg_183[1] == arg_258[1] && arg_183[1] != arg_296[0] && arg_183[1] == arg_60[1] && arg_183[1] == arg_78[1] && arg_183[1] == arg_121[1] && arg_183[1] != arg_250[0] && arg_183[1] != arg_314[0] && arg_183[1] == arg_148[1] && arg_183[1] == arg_156[1] && arg_183[1] == arg_70[1] && arg_183[1] == arg_231[1] && arg_183[1] == arg_32[1] && arg_183[1] == arg_210[1] && arg_183[1] != arg_22[0] && arg_183[1] != arg_276[0] && arg_183[1] != arg_95[0] && arg_183[1] != arg_73[0] && arg_183[1] != arg_70[0] && arg_183[1] != arg_121[0] && arg_183[1] != arg_268[0] && arg_183[1] == arg_299[1] && arg_183[1] != arg_138[0] && arg_183[1] != arg_175[0] && arg_183[1] == arg_17[1] && arg_183[1] == arg_213[1] && arg_183[1] != arg_14[0] && arg_183[1] != arg_25[0] && arg_183[1] == arg_133[1] && arg_183[1] != arg_291[0] && arg_183[1] == arg_271[1] && arg_236[0] == arg_148[0] && arg_236[0] != arg_296[1] && arg_236[0] != arg_73[1] && arg_236[0] != arg_25[1] && arg_236[0] != arg_63[1] && arg_236[0] == arg_17[0] && arg_236[0] == arg_279[0] && arg_236[0] == arg_103[0] && arg_236[0] == arg_113[0] && arg_236[0] != arg_151[1] && arg_236[0] == arg_271[0] && arg_236[0] == arg_100[0] && arg_236[0] != arg_172[1] && arg_236[0] != arg_239[1] && arg_236[0] == arg_32[0] && arg_236[0] != arg_43[1] && arg_236[0] != arg_309[1] && arg_236[0] == arg_78[0] && arg_236[0] != arg_190[1] && arg_236[0] == arg_198[0] && arg_236[0] != arg_258[1] && arg_236[0] == arg_296[0] && arg_236[0] != arg_60[1] && arg_236[0] != arg_78[1] && arg_236[0] != arg_121[1] && arg_236[0] == arg_250[0] && arg_236[0] == arg_314[0] && arg_236[0] != arg_148[1] && arg_236[0] != arg_156[1] && arg_236[0] != arg_70[1] && arg_236[0] != arg_231[1] && arg_236[0] != arg_32[1] && arg_236[0] != arg_210[1] && arg_236[0] == arg_22[0] && arg_236[0] == arg_276[0] && arg_236[0] == arg_95[0] && arg_236[0] == arg_73[0] && arg_236[0] == arg_70[0] && arg_236[0] == arg_121[0] && arg_236[0] == arg_268[0] && arg_236[0] != arg_299[1] && arg_236[0] == arg_138[0] && arg_236[0] == arg_175[0] && arg_236[0] != arg_17[1] && arg_236[0] != arg_213[1] && arg_236[0] == arg_14[0] && arg_236[0] == arg_25[0] && arg_236[0] != arg_133[1] && arg_236[0] == arg_291[0] && arg_236[0] != arg_271[1] && arg_148[0] != arg_296[1] && arg_148[0] != arg_73[1] && arg_148[0] != arg_25[1] && arg_148[0] != arg_63[1] && arg_148[0] == arg_17[0] && arg_148[0] == arg_279[0] && arg_148[0] == arg_103[0] && arg_148[0] == arg_113[0] && arg_148[0] != arg_151[1] && arg_148[0] == arg_271[0] && arg_148[0] == arg_100[0] && arg_148[0] != arg_172[1] && arg_148[0] != arg_239[1] && arg_148[0] == arg_32[0] && arg_148[0] != arg_43[1] && arg_148[0] != arg_309[1] && arg_148[0] == arg_78[0] && arg_148[0] != arg_190[1] && arg_148[0] == arg_198[0] && arg_148[0] != arg_258[1] && arg_148[0] == arg_296[0] && arg_148[0] != arg_60[1] && arg_148[0] != arg_78[1] && arg_148[0] != arg_121[1] && arg_148[0] == arg_250[0] && arg_148[0] == arg_314[0] && arg_148[0] != arg_148[1] && arg_148[0] != arg_156[1] && arg_148[0] != arg_70[1] && arg_148[0] != arg_231[1] && arg_148[0] != arg_32[1] && arg_148[0] != arg_210[1] && arg_148[0] == arg_22[0] && arg_148[0] == arg_276[0] && arg_148[0] == arg_95[0] && arg_148[0] == arg_73[0] && arg_148[0] == arg_70[0] && arg_148[0] == arg_121[0] && arg_148[0] == arg_268[0] && arg_148[0] != arg_299[1] && arg_148[0] == arg_138[0] && arg_148[0] == arg_175[0] && arg_148[0] != arg_17[1] && arg_148[0] != arg_213[1] && arg_148[0] == arg_14[0] && arg_148[0] == arg_25[0] && arg_148[0] != arg_133[1] && arg_148[0] == arg_291[0] && arg_148[0] != arg_271[1] && arg_296[1] == arg_73[1] && arg_296[1] == arg_25[1] && arg_296[1] == arg_63[1] && arg_296[1] != arg_17[0] && arg_296[1] != arg_279[0] && arg_296[1] != arg_103[0] && arg_296[1] != arg_113[0] && arg_296[1] == arg_151[1] && arg_296[1] != arg_271[0] && arg_296[1] != arg_100[0] && arg_296[1] == arg_172[1] && arg_296[1] == arg_239[1] && arg_296[1] != arg_32[0] && arg_296[1] == arg_43[1] && arg_296[1] == arg_309[1] && arg_296[1] != arg_78[0] && arg_296[1] == arg_190[1] && arg_296[1] != arg_198[0] && arg_296[1] == arg_258[1] && arg_296[1] != arg_296[0] && arg_296[1] == arg_60[1] && arg_296[1] == arg_78[1] && arg_296[1] == arg_121[1] && arg_296[1] != arg_250[0] && arg_296[1] != arg_314[0] && arg_296[1] == arg_148[1] && arg_296[1] == arg_156[1] && arg_296[1] == arg_70[1] && arg_296[1] == arg_231[1] && arg_296[1] == arg_32[1] && arg_296[1] == arg_210[1] && arg_296[1] != arg_22[0] && arg_296[1] != arg_276[0] && arg_296[1] != arg_95[0] && arg_296[1] != arg_73[0] && arg_296[1] != arg_70[0] && arg_296[1] != arg_121[0] && arg_296[1] != arg_268[0] && arg_296[1] == arg_299[1] && arg_296[1] != arg_138[0] && arg_296[1] != arg_175[0] && arg_296[1] == arg_17[1] && arg_296[1] == arg_213[1] && arg_296[1] != arg_14[0] && arg_296[1] != arg_25[0] && arg_296[1] == arg_133[1] && arg_296[1] != arg_291[0] && arg_296[1] == arg_271[1] && arg_73[1] == arg_25[1] && arg_73[1] == arg_63[1] && arg_73[1] != arg_17[0] && arg_73[1] != arg_279[0] && arg_73[1] != arg_103[0] && arg_73[1] != arg_113[0] && arg_73[1] == arg_151[1] && arg_73[1] != arg_271[0] && arg_73[1] != arg_100[0] && arg_73[1] == arg_172[1] && arg_73[1] == arg_239[1] && arg_73[1] != arg_32[0] && arg_73[1] == arg_43[1] && arg_73[1] == arg_309[1] && arg_73[1] != arg_78[0] && arg_73[1] == arg_190[1] && arg_73[1] != arg_198[0] && arg_73[1] == arg_258[1] && arg_73[1] != arg_296[0] && arg_73[1] == arg_60[1] && arg_73[1] == arg_78[1] && arg_73[1] == arg_121[1] && arg_73[1] != arg_250[0] && arg_73[1] != arg_314[0] && arg_73[1] == arg_148[1] && arg_73[1] == arg_156[1] && arg_73[1] == arg_70[1] && arg_73[1] == arg_231[1] && arg_73[1] == arg_32[1] && arg_73[1] == arg_210[1] && arg_73[1] != arg_22[0] && arg_73[1] != arg_276[0] && arg_73[1] != arg_95[0] && arg_73[1] != arg_73[0] && arg_73[1] != arg_70[0] && arg_73[1] != arg_121[0] && arg_73[1] != arg_268[0] && arg_73[1] == arg_299[1] && arg_73[1] != arg_138[0] && arg_73[1] != arg_175[0] && arg_73[1] == arg_17[1] && arg_73[1] == arg_213[1] && arg_73[1] != arg_14[0] && arg_73[1] != arg_25[0] && arg_73[1] == arg_133[1] && arg_73[1] != arg_291[0] && arg_73[1] == arg_271[1] && arg_25[1] == arg_63[1] && arg_25[1] != arg_17[0] && arg_25[1] != arg_279[0] && arg_25[1] != arg_103[0] && arg_25[1] != arg_113[0] && arg_25[1] == arg_151[1] && arg_25[1] != arg_271[0] && arg_25[1] != arg_100[0] && arg_25[1] == arg_172[1] && arg_25[1] == arg_239[1] && arg_25[1] != arg_32[0] && arg_25[1] == arg_43[1] && arg_25[1] == arg_309[1] && arg_25[1] != arg_78[0] && arg_25[1] == arg_190[1] && arg_25[1] != arg_198[0] && arg_25[1] == arg_258[1] && arg_25[1] != arg_296[0] && arg_25[1] == arg_60[1] && arg_25[1] == arg_78[1] && arg_25[1] == arg_121[1] && arg_25[1] != arg_250[0] && arg_25[1] != arg_314[0] && arg_25[1] == arg_148[1] && arg_25[1] == arg_156[1] && arg_25[1] == arg_70[1] && arg_25[1] == arg_231[1] && arg_25[1] == arg_32[1] && arg_25[1] == arg_210[1] && arg_25[1] != arg_22[0] && arg_25[1] != arg_276[0] && arg_25[1] != arg_95[0] && arg_25[1] != arg_73[0] && arg_25[1] != arg_70[0] && arg_25[1] != arg_121[0] && arg_25[1] != arg_268[0] && arg_25[1] == arg_299[1] && arg_25[1] != arg_138[0] && arg_25[1] != arg_175[0] && arg_25[1] == arg_17[1] && arg_25[1] == arg_213[1] && arg_25[1] != arg_14[0] && arg_25[1] != arg_25[0] && arg_25[1] == arg_133[1] && arg_25[1] != arg_291[0] && arg_25[1] == arg_271[1] && arg_63[1] != arg_17[0] && arg_63[1] != arg_279[0] && arg_63[1] != arg_103[0] && arg_63[1] != arg_113[0] && arg_63[1] == arg_151[1] && arg_63[1] != arg_271[0] && arg_63[1] != arg_100[0] && arg_63[1] == arg_172[1] && arg_63[1] == arg_239[1] && arg_63[1] != arg_32[0] && arg_63[1] == arg_43[1] && arg_63[1] == arg_309[1] && arg_63[1] != arg_78[0] && arg_63[1] == arg_190[1] && arg_63[1] != arg_198[0] && arg_63[1] == arg_258[1] && arg_63[1] != arg_296[0] && arg_63[1] == arg_60[1] && arg_63[1] == arg_78[1] && arg_63[1] == arg_121[1] && arg_63[1] != arg_250[0] && arg_63[1] != arg_314[0] && arg_63[1] == arg_148[1] && arg_63[1] == arg_156[1] && arg_63[1] == arg_70[1] && arg_63[1] == arg_231[1] && arg_63[1] == arg_32[1] && arg_63[1] == arg_210[1] && arg_63[1] != arg_22[0] && arg_63[1] != arg_276[0] && arg_63[1] != arg_95[0] && arg_63[1] != arg_73[0] && arg_63[1] != arg_70[0] && arg_63[1] != arg_121[0] && arg_63[1] != arg_268[0] && arg_63[1] == arg_299[1] && arg_63[1] != arg_138[0] && arg_63[1] != arg_175[0] && arg_63[1] == arg_17[1] && arg_63[1] == arg_213[1] && arg_63[1] != arg_14[0] && arg_63[1] != arg_25[0] && arg_63[1] == arg_133[1] && arg_63[1] != arg_291[0] && arg_63[1] == arg_271[1] && arg_17[0] == arg_279[0] && arg_17[0] == arg_103[0] && arg_17[0] == arg_113[0] && arg_17[0] != arg_151[1] && arg_17[0] == arg_271[0] && arg_17[0] == arg_100[0] && arg_17[0] != arg_172[1] && arg_17[0] != arg_239[1] && arg_17[0] == arg_32[0] && arg_17[0] != arg_43[1] && arg_17[0] != arg_309[1] && arg_17[0] == arg_78[0] && arg_17[0] != arg_190[1] && arg_17[0] == arg_198[0] && arg_17[0] != arg_258[1] && arg_17[0] == arg_296[0] && arg_17[0] != arg_60[1] && arg_17[0] != arg_78[1] && arg_17[0] != arg_121[1] && arg_17[0] == arg_250[0] && arg_17[0] == arg_314[0] && arg_17[0] != arg_148[1] && arg_17[0] != arg_156[1] && arg_17[0] != arg_70[1] && arg_17[0] != arg_231[1] && arg_17[0] != arg_32[1] && arg_17[0] != arg_210[1] && arg_17[0] == arg_22[0] && arg_17[0] == arg_276[0] && arg_17[0] == arg_95[0] && arg_17[0] == arg_73[0] && arg_17[0] == arg_70[0] && arg_17[0] == arg_121[0] && arg_17[0] == arg_268[0] && arg_17[0] != arg_299[1] && arg_17[0] == arg_138[0] && arg_17[0] == arg_175[0] && arg_17[0] != arg_17[1] && arg_17[0] != arg_213[1] && arg_17[0] == arg_14[0] && arg_17[0] == arg_25[0] && arg_17[0] != arg_133[1] && arg_17[0] == arg_291[0] && arg_17[0] != arg_271[1] && arg_279[0] == arg_103[0] && arg_279[0] == arg_113[0] && arg_279[0] != arg_151[1] && arg_279[0] == arg_271[0] && arg_279[0] == arg_100[0] && arg_279[0] != arg_172[1] && arg_279[0] != arg_239[1] && arg_279[0] == arg_32[0] && arg_279[0] != arg_43[1] && arg_279[0] != arg_309[1] && arg_279[0] == arg_78[0] && arg_279[0] != arg_190[1] && arg_279[0] == arg_198[0] && arg_279[0] != arg_258[1] && arg_279[0] == arg_296[0] && arg_279[0] != arg_60[1] && arg_279[0] != arg_78[1] && arg_279[0] != arg_121[1] && arg_279[0] == arg_250[0] && arg_279[0] == arg_314[0] && arg_279[0] != arg_148[1] && arg_279[0] != arg_156[1] && arg_279[0] != arg_70[1] && arg_279[0] != arg_231[1] && arg_279[0] != arg_32[1] && arg_279[0] != arg_210[1] && arg_279[0] == arg_22[0] && arg_279[0] == arg_276[0] && arg_279[0] == arg_95[0] && arg_279[0] == arg_73[0] && arg_279[0] == arg_70[0] && arg_279[0] == arg_121[0] && arg_279[0] == arg_268[0] && arg_279[0] != arg_299[1] && arg_279[0] == arg_138[0] && arg_279[0] == arg_175[0] && arg_279[0] != arg_17[1] && arg_279[0] != arg_213[1] && arg_279[0] == arg_14[0] && arg_279[0] == arg_25[0] && arg_279[0] != arg_133[1] && arg_279[0] == arg_291[0] && arg_279[0] != arg_271[1] && arg_103[0] == arg_113[0] && arg_103[0] != arg_151[1] && arg_103[0] == arg_271[0] && arg_103[0] == arg_100[0] && arg_103[0] != arg_172[1] && arg_103[0] != arg_239[1] && arg_103[0] == arg_32[0] && arg_103[0] != arg_43[1] && arg_103[0] != arg_309[1] && arg_103[0] == arg_78[0] && arg_103[0] != arg_190[1] && arg_103[0] == arg_198[0] && arg_103[0] != arg_258[1] && arg_103[0] == arg_296[0] && arg_103[0] != arg_60[1] && arg_103[0] != arg_78[1] && arg_103[0] != arg_121[1] && arg_103[0] == arg_250[0] && arg_103[0] == arg_314[0] && arg_103[0] != arg_148[1] && arg_103[0] != arg_156[1] && arg_103[0] != arg_70[1] && arg_103[0] != arg_231[1] && arg_103[0] != arg_32[1] && arg_103[0] != arg_210[1] && arg_103[0] == arg_22[0] && arg_103[0] == arg_276[0] && arg_103[0] == arg_95[0] && arg_103[0] == arg_73[0] && arg_103[0] == arg_70[0] && arg_103[0] == arg_121[0] && arg_103[0] == arg_268[0] && arg_103[0] != arg_299[1] && arg_103[0] == arg_138[0] && arg_103[0] == arg_175[0] && arg_103[0] != arg_17[1] && arg_103[0] != arg_213[1] && arg_103[0] == arg_14[0] && arg_103[0] == arg_25[0] && arg_103[0] != arg_133[1] && arg_103[0] == arg_291[0] && arg_103[0] != arg_271[1] && arg_113[0] != arg_151[1] && arg_113[0] == arg_271[0] && arg_113[0] == arg_100[0] && arg_113[0] != arg_172[1] && arg_113[0] != arg_239[1] && arg_113[0] == arg_32[0] && arg_113[0] != arg_43[1] && arg_113[0] != arg_309[1] && arg_113[0] == arg_78[0] && arg_113[0] != arg_190[1] && arg_113[0] == arg_198[0] && arg_113[0] != arg_258[1] && arg_113[0] == arg_296[0] && arg_113[0] != arg_60[1] && arg_113[0] != arg_78[1] && arg_113[0] != arg_121[1] && arg_113[0] == arg_250[0] && arg_113[0] == arg_314[0] && arg_113[0] != arg_148[1] && arg_113[0] != arg_156[1] && arg_113[0] != arg_70[1] && arg_113[0] != arg_231[1] && arg_113[0] != arg_32[1] && arg_113[0] != arg_210[1] && arg_113[0] == arg_22[0] && arg_113[0] == arg_276[0] && arg_113[0] == arg_95[0] && arg_113[0] == arg_73[0] && arg_113[0] == arg_70[0] && arg_113[0] == arg_121[0] && arg_113[0] == arg_268[0] && arg_113[0] != arg_299[1] && arg_113[0] == arg_138[0] && arg_113[0] == arg_175[0] && arg_113[0] != arg_17[1] && arg_113[0] != arg_213[1] && arg_113[0] == arg_14[0] && arg_113[0] == arg_25[0] && arg_113[0] != arg_133[1] && arg_113[0] == arg_291[0] && arg_113[0] != arg_271[1] && arg_151[1] != arg_271[0] && arg_151[1] != arg_100[0] && arg_151[1] == arg_172[1] && arg_151[1] == arg_239[1] && arg_151[1] != arg_32[0] && arg_151[1] == arg_43[1] && arg_151[1] == arg_309[1] && arg_151[1] != arg_78[0] && arg_151[1] == arg_190[1] && arg_151[1] != arg_198[0] && arg_151[1] == arg_258[1] && arg_151[1] != arg_296[0] && arg_151[1] == arg_60[1] && arg_151[1] == arg_78[1] && arg_151[1] == arg_121[1] && arg_151[1] != arg_250[0] && arg_151[1] != arg_314[0] && arg_151[1] == arg_148[1] && arg_151[1] == arg_156[1] && arg_151[1] == arg_70[1] && arg_151[1] == arg_231[1] && arg_151[1] == arg_32[1] && arg_151[1] == arg_210[1] && arg_151[1] != arg_22[0] && arg_151[1] != arg_276[0] && arg_151[1] != arg_95[0] && arg_151[1] != arg_73[0] && arg_151[1] != arg_70[0] && arg_151[1] != arg_121[0] && arg_151[1] != arg_268[0] && arg_151[1] == arg_299[1] && arg_151[1] != arg_138[0] && arg_151[1] != arg_175[0] && arg_151[1] == arg_17[1] && arg_151[1] == arg_213[1] && arg_151[1] != arg_14[0] && arg_151[1] != arg_25[0] && arg_151[1] == arg_133[1] && arg_151[1] != arg_291[0] && arg_151[1] == arg_271[1] && arg_271[0] == arg_100[0] && arg_271[0] != arg_172[1] && arg_271[0] != arg_239[1] && arg_271[0] == arg_32[0] && arg_271[0] != arg_43[1] && arg_271[0] != arg_309[1] && arg_271[0] == arg_78[0] && arg_271[0] != arg_190[1] && arg_271[0] == arg_198[0] && arg_271[0] != arg_258[1] && arg_271[0] == arg_296[0] && arg_271[0] != arg_60[1] && arg_271[0] != arg_78[1] && arg_271[0] != arg_121[1] && arg_271[0] == arg_250[0] && arg_271[0] == arg_314[0] && arg_271[0] != arg_148[1] && arg_271[0] != arg_156[1] && arg_271[0] != arg_70[1] && arg_271[0] != arg_231[1] && arg_271[0] != arg_32[1] && arg_271[0] != arg_210[1] && arg_271[0] == arg_22[0] && arg_271[0] == arg_276[0] && arg_271[0] == arg_95[0] && arg_271[0] == arg_73[0] && arg_271[0] == arg_70[0] && arg_271[0] == arg_121[0] && arg_271[0] == arg_268[0] && arg_271[0] != arg_299[1] && arg_271[0] == arg_138[0] && arg_271[0] == arg_175[0] && arg_271[0] != arg_17[1] && arg_271[0] != arg_213[1] && arg_271[0] == arg_14[0] && arg_271[0] == arg_25[0] && arg_271[0] != arg_133[1] && arg_271[0] == arg_291[0] && arg_271[0] != arg_271[1] && arg_100[0] != arg_172[1] && arg_100[0] != arg_239[1] && arg_100[0] == arg_32[0] && arg_100[0] != arg_43[1] && arg_100[0] != arg_309[1] && arg_100[0] == arg_78[0] && arg_100[0] != arg_190[1] && arg_100[0] == arg_198[0] && arg_100[0] != arg_258[1] && arg_100[0] == arg_296[0] && arg_100[0] != arg_60[1] && arg_100[0] != arg_78[1] && arg_100[0] != arg_121[1] && arg_100[0] == arg_250[0] && arg_100[0] == arg_314[0] && arg_100[0] != arg_148[1] && arg_100[0] != arg_156[1] && arg_100[0] != arg_70[1] && arg_100[0] != arg_231[1] && arg_100[0] != arg_32[1] && arg_100[0] != arg_210[1] && arg_100[0] == arg_22[0] && arg_100[0] == arg_276[0] && arg_100[0] == arg_95[0] && arg_100[0] == arg_73[0] && arg_100[0] == arg_70[0] && arg_100[0] == arg_121[0] && arg_100[0] == arg_268[0] && arg_100[0] != arg_299[1] && arg_100[0] == arg_138[0] && arg_100[0] == arg_175[0] && arg_100[0] != arg_17[1] && arg_100[0] != arg_213[1] && arg_100[0] == arg_14[0] && arg_100[0] == arg_25[0] && arg_100[0] != arg_133[1] && arg_100[0] == arg_291[0] && arg_100[0] != arg_271[1] && arg_172[1] == arg_239[1] && arg_172[1] != arg_32[0] && arg_172[1] == arg_43[1] && arg_172[1] == arg_309[1] && arg_172[1] != arg_78[0] && arg_172[1] == arg_190[1] && arg_172[1] != arg_198[0] && arg_172[1] == arg_258[1] && arg_172[1] != arg_296[0] && arg_172[1] == arg_60[1] && arg_172[1] == arg_78[1] && arg_172[1] == arg_121[1] && arg_172[1] != arg_250[0] && arg_172[1] != arg_314[0] && arg_172[1] == arg_148[1] && arg_172[1] == arg_156[1] && arg_172[1] == arg_70[1] && arg_172[1] == arg_231[1] && arg_172[1] == arg_32[1] && arg_172[1] == arg_210[1] && arg_172[1] != arg_22[0] && arg_172[1] != arg_276[0] && arg_172[1] != arg_95[0] && arg_172[1] != arg_73[0] && arg_172[1] != arg_70[0] && arg_172[1] != arg_121[0] && arg_172[1] != arg_268[0] && arg_172[1] == arg_299[1] && arg_172[1] != arg_138[0] && arg_172[1] != arg_175[0] && arg_172[1] == arg_17[1] && arg_172[1] == arg_213[1] && arg_172[1] != arg_14[0] && arg_172[1] != arg_25[0] && arg_172[1] == arg_133[1] && arg_172[1] != arg_291[0] && arg_172[1] == arg_271[1] && arg_239[1] != arg_32[0] && arg_239[1] == arg_43[1] && arg_239[1] == arg_309[1] && arg_239[1] != arg_78[0] && arg_239[1] == arg_190[1] && arg_239[1] != arg_198[0] && arg_239[1] == arg_258[1] && arg_239[1] != arg_296[0] && arg_239[1] == arg_60[1] && arg_239[1] == arg_78[1] && arg_239[1] == arg_121[1] && arg_239[1] != arg_250[0] && arg_239[1] != arg_314[0] && arg_239[1] == arg_148[1] && arg_239[1] == arg_156[1] && arg_239[1] == arg_70[1] && arg_239[1] == arg_231[1] && arg_239[1] == arg_32[1] && arg_239[1] == arg_210[1] && arg_239[1] != arg_22[0] && arg_239[1] != arg_276[0] && arg_239[1] != arg_95[0] && arg_239[1] != arg_73[0] && arg_239[1] != arg_70[0] && arg_239[1] != arg_121[0] && arg_239[1] != arg_268[0] && arg_239[1] == arg_299[1] && arg_239[1] != arg_138[0] && arg_239[1] != arg_175[0] && arg_239[1] == arg_17[1] && arg_239[1] == arg_213[1] && arg_239[1] != arg_14[0] && arg_239[1] != arg_25[0] && arg_239[1] == arg_133[1] && arg_239[1] != arg_291[0] && arg_239[1] == arg_271[1] && arg_32[0] != arg_43[1] && arg_32[0] != arg_309[1] && arg_32[0] == arg_78[0] && arg_32[0] != arg_190[1] && arg_32[0] == arg_198[0] && arg_32[0] != arg_258[1] && arg_32[0] == arg_296[0] && arg_32[0] != arg_60[1] && arg_32[0] != arg_78[1] && arg_32[0] != arg_121[1] && arg_32[0] == arg_250[0] && arg_32[0] == arg_314[0] && arg_32[0] != arg_148[1] && arg_32[0] != arg_156[1] && arg_32[0] != arg_70[1] && arg_32[0] != arg_231[1] && arg_32[0] != arg_32[1] && arg_32[0] != arg_210[1] && arg_32[0] == arg_22[0] && arg_32[0] == arg_276[0] && arg_32[0] == arg_95[0] && arg_32[0] == arg_73[0] && arg_32[0] == arg_70[0] && arg_32[0] == arg_121[0] && arg_32[0] == arg_268[0] && arg_32[0] != arg_299[1] && arg_32[0] == arg_138[0] && arg_32[0] == arg_175[0] && arg_32[0] != arg_17[1] && arg_32[0] != arg_213[1] && arg_32[0] == arg_14[0] && arg_32[0] == arg_25[0] && arg_32[0] != arg_133[1] && arg_32[0] == arg_291[0] && arg_32[0] != arg_271[1] && arg_43[1] == arg_309[1] && arg_43[1] != arg_78[0] && arg_43[1] == arg_190[1] && arg_43[1] != arg_198[0] && arg_43[1] == arg_258[1] && arg_43[1] != arg_296[0] && arg_43[1] == arg_60[1] && arg_43[1] == arg_78[1] && arg_43[1] == arg_121[1] && arg_43[1] != arg_250[0] && arg_43[1] != arg_314[0] && arg_43[1] == arg_148[1] && arg_43[1] == arg_156[1] && arg_43[1] == arg_70[1] && arg_43[1] == arg_231[1] && arg_43[1] == arg_32[1] && arg_43[1] == arg_210[1] && arg_43[1] != arg_22[0] && arg_43[1] != arg_276[0] && arg_43[1] != arg_95[0] && arg_43[1] != arg_73[0] && arg_43[1] != arg_70[0] && arg_43[1] != arg_121[0] && arg_43[1] != arg_268[0] && arg_43[1] == arg_299[1] && arg_43[1] != arg_138[0] && arg_43[1] != arg_175[0] && arg_43[1] == arg_17[1] && arg_43[1] == arg_213[1] && arg_43[1] != arg_14[0] && arg_43[1] != arg_25[0] && arg_43[1] == arg_133[1] && arg_43[1] != arg_291[0] && arg_43[1] == arg_271[1] && arg_309[1] != arg_78[0] && arg_309[1] == arg_190[1] && arg_309[1] != arg_198[0] && arg_309[1] == arg_258[1] && arg_309[1] != arg_296[0] && arg_309[1] == arg_60[1] && arg_309[1] == arg_78[1] && arg_309[1] == arg_121[1] && arg_309[1] != arg_250[0] && arg_309[1] != arg_314[0] && arg_309[1] == arg_148[1] && arg_309[1] == arg_156[1] && arg_309[1] == arg_70[1] && arg_309[1] == arg_231[1] && arg_309[1] == arg_32[1] && arg_309[1] == arg_210[1] && arg_309[1] != arg_22[0] && arg_309[1] != arg_276[0] && arg_309[1] != arg_95[0] && arg_309[1] != arg_73[0] && arg_309[1] != arg_70[0] && arg_309[1] != arg_121[0] && arg_309[1] != arg_268[0] && arg_309[1] == arg_299[1] && arg_309[1] != arg_138[0] && arg_309[1] != arg_175[0] && arg_309[1] == arg_17[1] && arg_309[1] == arg_213[1] && arg_309[1] != arg_14[0] && arg_309[1] != arg_25[0] && arg_309[1] == arg_133[1] && arg_309[1] != arg_291[0] && arg_309[1] == arg_271[1] && arg_78[0] != arg_190[1] && arg_78[0] == arg_198[0] && arg_78[0] != arg_258[1] && arg_78[0] == arg_296[0] && arg_78[0] != arg_60[1] && arg_78[0] != arg_78[1] && arg_78[0] != arg_121[1] && arg_78[0] == arg_250[0] && arg_78[0] == arg_314[0] && arg_78[0] != arg_148[1] && arg_78[0] != arg_156[1] && arg_78[0] != arg_70[1] && arg_78[0] != arg_231[1] && arg_78[0] != arg_32[1] && arg_78[0] != arg_210[1] && arg_78[0] == arg_22[0] && arg_78[0] == arg_276[0] && arg_78[0] == arg_95[0] && arg_78[0] == arg_73[0] && arg_78[0] == arg_70[0] && arg_78[0] == arg_121[0] && arg_78[0] == arg_268[0] && arg_78[0] != arg_299[1] && arg_78[0] == arg_138[0] && arg_78[0] == arg_175[0] && arg_78[0] != arg_17[1] && arg_78[0] != arg_213[1] && arg_78[0] == arg_14[0] && arg_78[0] == arg_25[0] && arg_78[0] != arg_133[1] && arg_78[0] == arg_291[0] && arg_78[0] != arg_271[1] && arg_190[1] != arg_198[0] && arg_190[1] == arg_258[1] && arg_190[1] != arg_296[0] && arg_190[1] == arg_60[1] && arg_190[1] == arg_78[1] && arg_190[1] == arg_121[1] && arg_190[1] != arg_250[0] && arg_190[1] != arg_314[0] && arg_190[1] == arg_148[1] && arg_190[1] == arg_156[1] && arg_190[1] == arg_70[1] && arg_190[1] == arg_231[1] && arg_190[1] == arg_32[1] && arg_190[1] == arg_210[1] && arg_190[1] != arg_22[0] && arg_190[1] != arg_276[0] && arg_190[1] != arg_95[0] && arg_190[1] != arg_73[0] && arg_190[1] != arg_70[0] && arg_190[1] != arg_121[0] && arg_190[1] != arg_268[0] && arg_190[1] == arg_299[1] && arg_190[1] != arg_138[0] && arg_190[1] != arg_175[0] && arg_190[1] == arg_17[1] && arg_190[1] == arg_213[1] && arg_190[1] != arg_14[0] && arg_190[1] != arg_25[0] && arg_190[1] == arg_133[1] && arg_190[1] != arg_291[0] && arg_190[1] == arg_271[1] && arg_198[0] != arg_258[1] && arg_198[0] == arg_296[0] && arg_198[0] != arg_60[1] && arg_198[0] != arg_78[1] && arg_198[0] != arg_121[1] && arg_198[0] == arg_250[0] && arg_198[0] == arg_314[0] && arg_198[0] != arg_148[1] && arg_198[0] != arg_156[1] && arg_198[0] != arg_70[1] && arg_198[0] != arg_231[1] && arg_198[0] != arg_32[1] && arg_198[0] != arg_210[1] && arg_198[0] == arg_22[0] && arg_198[0] == arg_276[0] && arg_198[0] == arg_95[0] && arg_198[0] == arg_73[0] && arg_198[0] == arg_70[0] && arg_198[0] == arg_121[0] && arg_198[0] == arg_268[0] && arg_198[0] != arg_299[1] && arg_198[0] == arg_138[0] && arg_198[0] == arg_175[0] && arg_198[0] != arg_17[1] && arg_198[0] != arg_213[1] && arg_198[0] == arg_14[0] && arg_198[0] == arg_25[0] && arg_198[0] != arg_133[1] && arg_198[0] == arg_291[0] && arg_198[0] != arg_271[1] && arg_258[1] != arg_296[0] && arg_258[1] == arg_60[1] && arg_258[1] == arg_78[1] && arg_258[1] == arg_121[1] && arg_258[1] != arg_250[0] && arg_258[1] != arg_314[0] && arg_258[1] == arg_148[1] && arg_258[1] == arg_156[1] && arg_258[1] == arg_70[1] && arg_258[1] == arg_231[1] && arg_258[1] == arg_32[1] && arg_258[1] == arg_210[1] && arg_258[1] != arg_22[0] && arg_258[1] != arg_276[0] && arg_258[1] != arg_95[0] && arg_258[1] != arg_73[0] && arg_258[1] != arg_70[0] && arg_258[1] != arg_121[0] && arg_258[1] != arg_268[0] && arg_258[1] == arg_299[1] && arg_258[1] != arg_138[0] && arg_258[1] != arg_175[0] && arg_258[1] == arg_17[1] && arg_258[1] == arg_213[1] && arg_258[1] != arg_14[0] && arg_258[1] != arg_25[0] && arg_258[1] == arg_133[1] && arg_258[1] != arg_291[0] && arg_258[1] == arg_271[1] && arg_296[0] != arg_60[1] && arg_296[0] != arg_78[1] && arg_296[0] != arg_121[1] && arg_296[0] == arg_250[0] && arg_296[0] == arg_314[0] && arg_296[0] != arg_148[1] && arg_296[0] != arg_156[1] && arg_296[0] != arg_70[1] && arg_296[0] != arg_231[1] && arg_296[0] != arg_32[1] && arg_296[0] != arg_210[1] && arg_296[0] == arg_22[0] && arg_296[0] == arg_276[0] && arg_296[0] == arg_95[0] && arg_296[0] == arg_73[0] && arg_296[0] == arg_70[0] && arg_296[0] == arg_121[0] && arg_296[0] == arg_268[0] && arg_296[0] != arg_299[1] && arg_296[0] == arg_138[0] && arg_296[0] == arg_175[0] && arg_296[0] != arg_17[1] && arg_296[0] != arg_213[1] && arg_296[0] == arg_14[0] && arg_296[0] == arg_25[0] && arg_296[0] != arg_133[1] && arg_296[0] == arg_291[0] && arg_296[0] != arg_271[1] && arg_60[1] == arg_78[1] && arg_60[1] == arg_121[1] && arg_60[1] != arg_250[0] && arg_60[1] != arg_314[0] && arg_60[1] == arg_148[1] && arg_60[1] == arg_156[1] && arg_60[1] == arg_70[1] && arg_60[1] == arg_231[1] && arg_60[1] == arg_32[1] && arg_60[1] == arg_210[1] && arg_60[1] != arg_22[0] && arg_60[1] != arg_276[0] && arg_60[1] != arg_95[0] && arg_60[1] != arg_73[0] && arg_60[1] != arg_70[0] && arg_60[1] != arg_121[0] && arg_60[1] != arg_268[0] && arg_60[1] == arg_299[1] && arg_60[1] != arg_138[0] && arg_60[1] != arg_175[0] && arg_60[1] == arg_17[1] && arg_60[1] == arg_213[1] && arg_60[1] != arg_14[0] && arg_60[1] != arg_25[0] && arg_60[1] == arg_133[1] && arg_60[1] != arg_291[0] && arg_60[1] == arg_271[1] && arg_78[1] == arg_121[1] && arg_78[1] != arg_250[0] && arg_78[1] != arg_314[0] && arg_78[1] == arg_148[1] && arg_78[1] == arg_156[1] && arg_78[1] == arg_70[1] && arg_78[1] == arg_231[1] && arg_78[1] == arg_32[1] && arg_78[1] == arg_210[1] && arg_78[1] != arg_22[0] && arg_78[1] != arg_276[0] && arg_78[1] != arg_95[0] && arg_78[1] != arg_73[0] && arg_78[1] != arg_70[0] && arg_78[1] != arg_121[0] && arg_78[1] != arg_268[0] && arg_78[1] == arg_299[1] && arg_78[1] != arg_138[0] && arg_78[1] != arg_175[0] && arg_78[1] == arg_17[1] && arg_78[1] == arg_213[1] && arg_78[1] != arg_14[0] && arg_78[1] != arg_25[0] && arg_78[1] == arg_133[1] && arg_78[1] != arg_291[0] && arg_78[1] == arg_271[1] && arg_121[1] != arg_250[0] && arg_121[1] != arg_314[0] && arg_121[1] == arg_148[1] && arg_121[1] == arg_156[1] && arg_121[1] == arg_70[1] && arg_121[1] == arg_231[1] && arg_121[1] == arg_32[1] && arg_121[1] == arg_210[1] && arg_121[1] != arg_22[0] && arg_121[1] != arg_276[0] && arg_121[1] != arg_95[0] && arg_121[1] != arg_73[0] && arg_121[1] != arg_70[0] && arg_121[1] != arg_121[0] && arg_121[1] != arg_268[0] && arg_121[1] == arg_299[1] && arg_121[1] != arg_138[0] && arg_121[1] != arg_175[0] && arg_121[1] == arg_17[1] && arg_121[1] == arg_213[1] && arg_121[1] != arg_14[0] && arg_121[1] != arg_25[0] && arg_121[1] == arg_133[1] && arg_121[1] != arg_291[0] && arg_121[1] == arg_271[1] && arg_250[0] == arg_314[0] && arg_250[0] != arg_148[1] && arg_250[0] != arg_156[1] && arg_250[0] != arg_70[1] && arg_250[0] != arg_231[1] && arg_250[0] != arg_32[1] && arg_250[0] != arg_210[1] && arg_250[0] == arg_22[0] && arg_250[0] == arg_276[0] && arg_250[0] == arg_95[0] && arg_250[0] == arg_73[0] && arg_250[0] == arg_70[0] && arg_250[0] == arg_121[0] && arg_250[0] == arg_268[0] && arg_250[0] != arg_299[1] && arg_250[0] == arg_138[0] && arg_250[0] == arg_175[0] && arg_250[0] != arg_17[1] && arg_250[0] != arg_213[1] && arg_250[0] == arg_14[0] && arg_250[0] == arg_25[0] && arg_250[0] != arg_133[1] && arg_250[0] == arg_291[0] && arg_250[0] != arg_271[1] && arg_314[0] != arg_148[1] && arg_314[0] != arg_156[1] && arg_314[0] != arg_70[1] && arg_314[0] != arg_231[1] && arg_314[0] != arg_32[1] && arg_314[0] != arg_210[1] && arg_314[0] == arg_22[0] && arg_314[0] == arg_276[0] && arg_314[0] == arg_95[0] && arg_314[0] == arg_73[0] && arg_314[0] == arg_70[0] && arg_314[0] == arg_121[0] && arg_314[0] == arg_268[0] && arg_314[0] != arg_299[1] && arg_314[0] == arg_138[0] && arg_314[0] == arg_175[0] && arg_314[0] != arg_17[1] && arg_314[0] != arg_213[1] && arg_314[0] == arg_14[0] && arg_314[0] == arg_25[0] && arg_314[0] != arg_133[1] && arg_314[0] == arg_291[0] && arg_314[0] != arg_271[1] && arg_148[1] == arg_156[1] && arg_148[1] == arg_70[1] && arg_148[1] == arg_231[1] && arg_148[1] == arg_32[1] && arg_148[1] == arg_210[1] && arg_148[1] != arg_22[0] && arg_148[1] != arg_276[0] && arg_148[1] != arg_95[0] && arg_148[1] != arg_73[0] && arg_148[1] != arg_70[0] && arg_148[1] != arg_121[0] && arg_148[1] != arg_268[0] && arg_148[1] == arg_299[1] && arg_148[1] != arg_138[0] && arg_148[1] != arg_175[0] && arg_148[1] == arg_17[1] && arg_148[1] == arg_213[1] && arg_148[1] != arg_14[0] && arg_148[1] != arg_25[0] && arg_148[1] == arg_133[1] && arg_148[1] != arg_291[0] && arg_148[1] == arg_271[1] && arg_156[1] == arg_70[1] && arg_156[1] == arg_231[1] && arg_156[1] == arg_32[1] && arg_156[1] == arg_210[1] && arg_156[1] != arg_22[0] && arg_156[1] != arg_276[0] && arg_156[1] != arg_95[0] && arg_156[1] != arg_73[0] && arg_156[1] != arg_70[0] && arg_156[1] != arg_121[0] && arg_156[1] != arg_268[0] && arg_156[1] == arg_299[1] && arg_156[1] != arg_138[0] && arg_156[1] != arg_175[0] && arg_156[1] == arg_17[1] && arg_156[1] == arg_213[1] && arg_156[1] != arg_14[0] && arg_156[1] != arg_25[0] && arg_156[1] == arg_133[1] && arg_156[1] != arg_291[0] && arg_156[1] == arg_271[1] && arg_70[1] == arg_231[1] && arg_70[1] == arg_32[1] && arg_70[1] == arg_210[1] && arg_70[1] != arg_22[0] && arg_70[1] != arg_276[0] && arg_70[1] != arg_95[0] && arg_70[1] != arg_73[0] && arg_70[1] != arg_70[0] && arg_70[1] != arg_121[0] && arg_70[1] != arg_268[0] && arg_70[1] == arg_299[1] && arg_70[1] != arg_138[0] && arg_70[1] != arg_175[0] && arg_70[1] == arg_17[1] && arg_70[1] == arg_213[1] && arg_70[1] != arg_14[0] && arg_70[1] != arg_25[0] && arg_70[1] == arg_133[1] && arg_70[1] != arg_291[0] && arg_70[1] == arg_271[1] && arg_231[1] == arg_32[1] && arg_231[1] == arg_210[1] && arg_231[1] != arg_22[0] && arg_231[1] != arg_276[0] && arg_231[1] != arg_95[0] && arg_231[1] != arg_73[0] && arg_231[1] != arg_70[0] && arg_231[1] != arg_121[0] && arg_231[1] != arg_268[0] && arg_231[1] == arg_299[1] && arg_231[1] != arg_138[0] && arg_231[1] != arg_175[0] && arg_231[1] == arg_17[1] && arg_231[1] == arg_213[1] && arg_231[1] != arg_14[0] && arg_231[1] != arg_25[0] && arg_231[1] == arg_133[1] && arg_231[1] != arg_291[0] && arg_231[1] == arg_271[1] && arg_32[1] == arg_210[1] && arg_32[1] != arg_22[0] && arg_32[1] != arg_276[0] && arg_32[1] != arg_95[0] && arg_32[1] != arg_73[0] && arg_32[1] != arg_70[0] && arg_32[1] != arg_121[0] && arg_32[1] != arg_268[0] && arg_32[1] == arg_299[1] && arg_32[1] != arg_138[0] && arg_32[1] != arg_175[0] && arg_32[1] == arg_17[1] && arg_32[1] == arg_213[1] && arg_32[1] != arg_14[0] && arg_32[1] != arg_25[0] && arg_32[1] == arg_133[1] && arg_32[1] != arg_291[0] && arg_32[1] == arg_271[1] && arg_210[1] != arg_22[0] && arg_210[1] != arg_276[0] && arg_210[1] != arg_95[0] && arg_210[1] != arg_73[0] && arg_210[1] != arg_70[0] && arg_210[1] != arg_121[0] && arg_210[1] != arg_268[0] && arg_210[1] == arg_299[1] && arg_210[1] != arg_138[0] && arg_210[1] != arg_175[0] && arg_210[1] == arg_17[1] && arg_210[1] == arg_213[1] && arg_210[1] != arg_14[0] && arg_210[1] != arg_25[0] && arg_210[1] == arg_133[1] && arg_210[1] != arg_291[0] && arg_210[1] == arg_271[1] && arg_22[0] == arg_276[0] && arg_22[0] == arg_95[0] && arg_22[0] == arg_73[0] && arg_22[0] == arg_70[0] && arg_22[0] == arg_121[0] && arg_22[0] == arg_268[0] && arg_22[0] != arg_299[1] && arg_22[0] == arg_138[0] && arg_22[0] == arg_175[0] && arg_22[0] != arg_17[1] && arg_22[0] != arg_213[1] && arg_22[0] == arg_14[0] && arg_22[0] == arg_25[0] && arg_22[0] != arg_133[1] && arg_22[0] == arg_291[0] && arg_22[0] != arg_271[1] && arg_276[0] == arg_95[0] && arg_276[0] == arg_73[0] && arg_276[0] == arg_70[0] && arg_276[0] == arg_121[0] && arg_276[0] == arg_268[0] && arg_276[0] != arg_299[1] && arg_276[0] == arg_138[0] && arg_276[0] == arg_175[0] && arg_276[0] != arg_17[1] && arg_276[0] != arg_213[1] && arg_276[0] == arg_14[0] && arg_276[0] == arg_25[0] && arg_276[0] != arg_133[1] && arg_276[0] == arg_291[0] && arg_276[0] != arg_271[1] && arg_95[0] == arg_73[0] && arg_95[0] == arg_70[0] && arg_95[0] == arg_121[0] && arg_95[0] == arg_268[0] && arg_95[0] != arg_299[1] && arg_95[0] == arg_138[0] && arg_95[0] == arg_175[0] && arg_95[0] != arg_17[1] && arg_95[0] != arg_213[1] && arg_95[0] == arg_14[0] && arg_95[0] == arg_25[0] && arg_95[0] != arg_133[1] && arg_95[0] == arg_291[0] && arg_95[0] != arg_271[1] && arg_73[0] == arg_70[0] && arg_73[0] == arg_121[0] && arg_73[0] == arg_268[0] && arg_73[0] != arg_299[1] && arg_73[0] == arg_138[0] && arg_73[0] == arg_175[0] && arg_73[0] != arg_17[1] && arg_73[0] != arg_213[1] && arg_73[0] == arg_14[0] && arg_73[0] == arg_25[0] && arg_73[0] != arg_133[1] && arg_73[0] == arg_291[0] && arg_73[0] != arg_271[1] && arg_70[0] == arg_121[0] && arg_70[0] == arg_268[0] && arg_70[0] != arg_299[1] && arg_70[0] == arg_138[0] && arg_70[0] == arg_175[0] && arg_70[0] != arg_17[1] && arg_70[0] != arg_213[1] && arg_70[0] == arg_14[0] && arg_70[0] == arg_25[0] && arg_70[0] != arg_133[1] && arg_70[0] == arg_291[0] && arg_70[0] != arg_271[1] && arg_121[0] == arg_268[0] && arg_121[0] != arg_299[1] && arg_121[0] == arg_138[0] && arg_121[0] == arg_175[0] && arg_121[0] != arg_17[1] && arg_121[0] != arg_213[1] && arg_121[0] == arg_14[0] && arg_121[0] == arg_25[0] && arg_121[0] != arg_133[1] && arg_121[0] == arg_291[0] && arg_121[0] != arg_271[1] && arg_268[0] != arg_299[1] && arg_268[0] == arg_138[0] && arg_268[0] == arg_175[0] && arg_268[0] != arg_17[1] && arg_268[0] != arg_213[1] && arg_268[0] == arg_14[0] && arg_268[0] == arg_25[0] && arg_268[0] != arg_133[1] && arg_268[0] == arg_291[0] && arg_268[0] != arg_271[1] && arg_299[1] != arg_138[0] && arg_299[1] != arg_175[0] && arg_299[1] == arg_17[1] && arg_299[1] == arg_213[1] && arg_299[1] != arg_14[0] && arg_299[1] != arg_25[0] && arg_299[1] == arg_133[1] && arg_299[1] != arg_291[0] && arg_299[1] == arg_271[1] && arg_138[0] == arg_175[0] && arg_138[0] != arg_17[1] && arg_138[0] != arg_213[1] && arg_138[0] == arg_14[0] && arg_138[0] == arg_25[0] && arg_138[0] != arg_133[1] && arg_138[0] == arg_291[0] && arg_138[0] != arg_271[1] && arg_175[0] != arg_17[1] && arg_175[0] != arg_213[1] && arg_175[0] == arg_14[0] && arg_175[0] == arg_25[0] && arg_175[0] != arg_133[1] && arg_175[0] == arg_291[0] && arg_175[0] != arg_271[1] && arg_17[1] == arg_213[1] && arg_17[1] != arg_14[0] && arg_17[1] != arg_25[0] && arg_17[1] == arg_133[1] && arg_17[1] != arg_291[0] && arg_17[1] == arg_271[1] && arg_213[1] != arg_14[0] && arg_213[1] != arg_25[0] && arg_213[1] == arg_133[1] && arg_213[1] != arg_291[0] && arg_213[1] == arg_271[1] && arg_14[0] == arg_25[0] && arg_14[0] != arg_133[1] && arg_14[0] == arg_291[0] && arg_14[0] != arg_271[1] && arg_25[0] != arg_133[1] && arg_25[0] == arg_291[0] && arg_25[0] != arg_271[1] && arg_133[1] != arg_291[0] && arg_133[1] == arg_271[1] && arg_291[0] != arg_271[1] {
let rep_insts = pos.func.dfg.inst_results(inst);
let rep_insts_0 = rep_insts[0];
pos.func.dfg.change_to_alias(arg_1, rep_insts_0);
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1396(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bxor => {
if rhs_1 == -64 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_4 = args;
match opcode {
Opcode::Bxor => {
match pos.func.dfg.value_def(arg_4[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_5 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_5[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_4 == 7 {
match pos.func.dfg.value_def(arg_4[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_7 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_7[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_8) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_9 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_9[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_10 = arg;
let rhs_7 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_7 == 7 {
if rhs_6 == 7 {
if rhs_3 == 7 {
if arg_7[0] != arg_10 && arg_7[0] != arg_9[0] && arg_7[0] == arg_2[1] && arg_7[0] != arg_2[0] && arg_7[0] != arg_6 && arg_7[0] != arg_5[0] && arg_10 != arg_9[0] && arg_10 != arg_2[1] && arg_10 != arg_2[0] && arg_10 != arg_6 && arg_10 != arg_5[0] && arg_9[0] != arg_2[1] && arg_9[0] != arg_2[0] && arg_9[0] != arg_6 && arg_9[0] != arg_5[0] && arg_2[1] != arg_2[0] && arg_2[1] != arg_6 && arg_2[1] != arg_5[0] && arg_2[0] != arg_6 && arg_2[0] == arg_5[0] && arg_6 != arg_5[0] {
let rhs_inst_17 = pos.ins().band_imm(arg_3, 4294967239_u64 as i64);
let rhs_inst_18 = pos.ins().bnot(rhs_inst_17);
pos.func.dfg.replace(inst).bnot(rhs_inst_18);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1397(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_3 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_3[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_4) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_5 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_5[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_6) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_7 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_7[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_8) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_9 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_9[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_10 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_10) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_11 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_11[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_12 = arg;
let rhs_7 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_12) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_13 = arg;
let rhs_8 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_8 == 255 {
if rhs_7 == 1 {
match pos.func.dfg.value_def(arg_11[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_14 = arg;
let rhs_11 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_11 == 255 {
if rhs_6 == 2 {
match pos.func.dfg.value_def(arg_9[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_15 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_15[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_16 = arg;
let rhs_14 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_16) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_17 = arg;
let rhs_15 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_15 == 255 {
if rhs_14 == 1 {
match pos.func.dfg.value_def(arg_15[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_18 = arg;
let rhs_18 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_18 == 255 {
if rhs_5 == 4 {
match pos.func.dfg.value_def(arg_7[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_19 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_19[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_20 = arg;
let rhs_21 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_20) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_21 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_21[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_22 = arg;
let rhs_22 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_22) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_23 = arg;
let rhs_23 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_23 == 255 {
if rhs_22 == 1 {
match pos.func.dfg.value_def(arg_21[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_24 = arg;
let rhs_26 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_26 == 255 {
if rhs_21 == 2 {
match pos.func.dfg.value_def(arg_19[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_25 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_25[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_26 = arg;
let rhs_29 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_26) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_27 = arg;
let rhs_30 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_30 == 255 {
if rhs_29 == 1 {
match pos.func.dfg.value_def(arg_25[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_28 = arg;
let rhs_33 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_33 == 255 {
if rhs_4 == 8 {
match pos.func.dfg.value_def(arg_5[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_29 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_29[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_30 = arg;
let rhs_36 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_30) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_31 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_31[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_32 = arg;
let rhs_37 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_32) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_33 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_33[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_34 = arg;
let rhs_38 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_34) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_35 = arg;
let rhs_39 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_39 == 255 {
if rhs_38 == 1 {
match pos.func.dfg.value_def(arg_33[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_36 = arg;
let rhs_42 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_42 == 255 {
if rhs_37 == 2 {
match pos.func.dfg.value_def(arg_31[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_37 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_37[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_38 = arg;
let rhs_45 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_38) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_39 = arg;
let rhs_46 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_46 == 255 {
if rhs_45 == 1 {
match pos.func.dfg.value_def(arg_37[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_40 = arg;
let rhs_49 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_49 == 255 {
if rhs_36 == 4 {
match pos.func.dfg.value_def(arg_29[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_41 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_41[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_42 = arg;
let rhs_52 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_42) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_43 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_43[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_44 = arg;
let rhs_53 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_44) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_45 = arg;
let rhs_54 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_54 == 255 {
if rhs_53 == 1 {
match pos.func.dfg.value_def(arg_43[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_46 = arg;
let rhs_57 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_57 == 255 {
if rhs_52 == 2 {
match pos.func.dfg.value_def(arg_41[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_47 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_47[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_48 = arg;
let rhs_60 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_48) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_49 = arg;
let rhs_61 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_61 == 255 {
if rhs_60 == 1 {
match pos.func.dfg.value_def(arg_47[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_50 = arg;
let rhs_64 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_64 == 255 {
if rhs_3 == 16 {
match pos.func.dfg.value_def(arg_3[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_51 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_51[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_52 = arg;
let rhs_67 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_52) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_53 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_53[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_54 = arg;
let rhs_68 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_54) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_55 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_55[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_56 = arg;
let rhs_69 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_56) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_57 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_57[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_58 = arg;
let rhs_70 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_58) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_59 = arg;
let rhs_71 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_71 == 255 {
if rhs_70 == 1 {
match pos.func.dfg.value_def(arg_57[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_60 = arg;
let rhs_74 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_74 == 255 {
if rhs_69 == 2 {
match pos.func.dfg.value_def(arg_55[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_61 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_61[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_62 = arg;
let rhs_77 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_62) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_63 = arg;
let rhs_78 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_78 == 255 {
if rhs_77 == 1 {
match pos.func.dfg.value_def(arg_61[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_64 = arg;
let rhs_81 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_81 == 255 {
if rhs_68 == 4 {
match pos.func.dfg.value_def(arg_53[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_65 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_65[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_66 = arg;
let rhs_84 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_66) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_67 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_67[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_68 = arg;
let rhs_85 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_68) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_69 = arg;
let rhs_86 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_86 == 255 {
if rhs_85 == 1 {
match pos.func.dfg.value_def(arg_67[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_70 = arg;
let rhs_89 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_89 == 255 {
if rhs_84 == 2 {
match pos.func.dfg.value_def(arg_65[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_71 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_71[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_72 = arg;
let rhs_92 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_72) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_73 = arg;
let rhs_93 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_93 == 255 {
if rhs_92 == 1 {
match pos.func.dfg.value_def(arg_71[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_74 = arg;
let rhs_96 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_96 == 255 {
if rhs_67 == 8 {
match pos.func.dfg.value_def(arg_51[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_75 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_75[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_76 = arg;
let rhs_99 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_76) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_77 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_77[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_78 = arg;
let rhs_100 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_78) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_79 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_79[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_80 = arg;
let rhs_101 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_80) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_81 = arg;
let rhs_102 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_102 == 255 {
if rhs_101 == 1 {
match pos.func.dfg.value_def(arg_79[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_82 = arg;
let rhs_105 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_105 == 255 {
if rhs_100 == 2 {
match pos.func.dfg.value_def(arg_77[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_83 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_83[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_84 = arg;
let rhs_108 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_84) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_85 = arg;
let rhs_109 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_109 == 255 {
if rhs_108 == 1 {
match pos.func.dfg.value_def(arg_83[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_86 = arg;
let rhs_112 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_112 == 255 {
if rhs_99 == 4 {
match pos.func.dfg.value_def(arg_75[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_87 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_87[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_88 = arg;
let rhs_115 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_88) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_89 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_89[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_90 = arg;
let rhs_116 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_90) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_91 = arg;
let rhs_117 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_117 == 255 {
if rhs_116 == 1 {
match pos.func.dfg.value_def(arg_89[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_92 = arg;
let rhs_120 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_120 == 255 {
if rhs_115 == 2 {
match pos.func.dfg.value_def(arg_87[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_93 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_93[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_94 = arg;
let rhs_123 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_94) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_95 = arg;
let rhs_124 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_124 == 255 {
if rhs_123 == 1 {
match pos.func.dfg.value_def(arg_93[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_96 = arg;
let rhs_127 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_127 == 255 {
if rhs_2 == 32 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_97 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_97[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_98 = arg;
let rhs_130 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_98) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_99 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_99[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_100 = arg;
let rhs_131 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_100) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_101 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_101[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_102 = arg;
let rhs_132 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_102) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_103 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_103[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_104 = arg;
let rhs_133 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_104) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_105 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_105[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_106 = arg;
let rhs_134 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_106) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_107 = arg;
let rhs_135 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_135 == 255 {
if rhs_134 == 1 {
match pos.func.dfg.value_def(arg_105[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_108 = arg;
let rhs_138 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_138 == 255 {
if rhs_133 == 2 {
match pos.func.dfg.value_def(arg_103[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_109 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_109[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_110 = arg;
let rhs_141 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_110) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_111 = arg;
let rhs_142 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_142 == 255 {
if rhs_141 == 1 {
match pos.func.dfg.value_def(arg_109[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_112 = arg;
let rhs_145 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_145 == 255 {
if rhs_132 == 4 {
match pos.func.dfg.value_def(arg_101[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_113 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_113[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_114 = arg;
let rhs_148 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_114) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_115 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_115[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_116 = arg;
let rhs_149 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_116) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_117 = arg;
let rhs_150 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_150 == 255 {
if rhs_149 == 1 {
match pos.func.dfg.value_def(arg_115[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_118 = arg;
let rhs_153 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_153 == 255 {
if rhs_148 == 2 {
match pos.func.dfg.value_def(arg_113[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_119 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_119[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_120 = arg;
let rhs_156 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_120) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_121 = arg;
let rhs_157 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_157 == 255 {
if rhs_156 == 1 {
match pos.func.dfg.value_def(arg_119[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_122 = arg;
let rhs_160 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_160 == 255 {
if rhs_131 == 8 {
match pos.func.dfg.value_def(arg_99[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_123 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_123[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_124 = arg;
let rhs_163 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_124) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_125 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_125[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_126 = arg;
let rhs_164 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_126) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_127 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_127[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_128 = arg;
let rhs_165 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_128) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_129 = arg;
let rhs_166 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_166 == 255 {
if rhs_165 == 1 {
match pos.func.dfg.value_def(arg_127[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_130 = arg;
let rhs_169 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_169 == 255 {
if rhs_164 == 2 {
match pos.func.dfg.value_def(arg_125[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_131 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_131[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_132 = arg;
let rhs_172 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_132) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_133 = arg;
let rhs_173 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_173 == 255 {
if rhs_172 == 1 {
match pos.func.dfg.value_def(arg_131[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_134 = arg;
let rhs_176 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_176 == 255 {
if rhs_163 == 4 {
match pos.func.dfg.value_def(arg_123[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_135 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_135[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_136 = arg;
let rhs_179 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_136) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_137 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_137[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_138 = arg;
let rhs_180 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_138) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_139 = arg;
let rhs_181 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_181 == 255 {
if rhs_180 == 1 {
match pos.func.dfg.value_def(arg_137[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_140 = arg;
let rhs_184 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_184 == 255 {
if rhs_179 == 2 {
match pos.func.dfg.value_def(arg_135[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_141 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_141[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_142 = arg;
let rhs_187 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_142) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_143 = arg;
let rhs_188 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_188 == 255 {
if rhs_187 == 1 {
match pos.func.dfg.value_def(arg_141[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_144 = arg;
let rhs_191 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_191 == 255 {
if rhs_130 == 16 {
match pos.func.dfg.value_def(arg_97[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_145 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_145[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_146 = arg;
let rhs_194 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_146) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_147 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_147[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_148 = arg;
let rhs_195 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_148) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_149 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_149[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_150 = arg;
let rhs_196 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_150) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_151 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_151[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_152 = arg;
let rhs_197 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_152) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_153 = arg;
let rhs_198 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_198 == 255 {
if rhs_197 == 1 {
match pos.func.dfg.value_def(arg_151[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_154 = arg;
let rhs_201 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_201 == 255 {
if rhs_196 == 2 {
match pos.func.dfg.value_def(arg_149[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_155 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_155[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_156 = arg;
let rhs_204 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_156) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_157 = arg;
let rhs_205 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_205 == 255 {
if rhs_204 == 1 {
match pos.func.dfg.value_def(arg_155[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_158 = arg;
let rhs_208 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_208 == 255 {
if rhs_195 == 4 {
match pos.func.dfg.value_def(arg_147[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_159 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_159[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_160 = arg;
let rhs_211 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_160) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_161 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_161[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_162 = arg;
let rhs_212 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_162) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_163 = arg;
let rhs_213 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_213 == 255 {
if rhs_212 == 1 {
match pos.func.dfg.value_def(arg_161[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_164 = arg;
let rhs_216 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_216 == 255 {
if rhs_211 == 2 {
match pos.func.dfg.value_def(arg_159[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_165 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_165[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_166 = arg;
let rhs_219 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_166) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_167 = arg;
let rhs_220 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_220 == 255 {
if rhs_219 == 1 {
match pos.func.dfg.value_def(arg_165[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_168 = arg;
let rhs_223 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_223 == 255 {
if rhs_194 == 8 {
match pos.func.dfg.value_def(arg_145[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_169 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_169[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_170 = arg;
let rhs_226 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_170) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_171 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_171[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_172 = arg;
let rhs_227 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_172) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_173 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_173[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_174 = arg;
let rhs_228 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_174) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_175 = arg;
let rhs_229 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_229 == 255 {
if rhs_228 == 1 {
match pos.func.dfg.value_def(arg_173[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_176 = arg;
let rhs_232 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_232 == 255 {
if rhs_227 == 2 {
match pos.func.dfg.value_def(arg_171[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_177 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_177[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_178 = arg;
let rhs_235 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_178) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_179 = arg;
let rhs_236 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_236 == 255 {
if rhs_235 == 1 {
match pos.func.dfg.value_def(arg_177[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_180 = arg;
let rhs_239 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_239 == 255 {
if rhs_226 == 4 {
match pos.func.dfg.value_def(arg_169[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_181 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_181[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_182 = arg;
let rhs_242 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_182) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_183 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_183[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_184 = arg;
let rhs_243 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_184) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_185 = arg;
let rhs_244 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_244 == 255 {
if rhs_243 == 1 {
match pos.func.dfg.value_def(arg_183[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_186 = arg;
let rhs_247 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_247 == 255 {
if rhs_242 == 2 {
match pos.func.dfg.value_def(arg_181[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_187 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_187[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_188 = arg;
let rhs_250 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_188) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_189 = arg;
let rhs_251 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_251 == 255 {
if rhs_250 == 1 {
match pos.func.dfg.value_def(arg_187[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_190 = arg;
let rhs_254 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
if rhs_254 == 255 {
if rhs_1 == 1 {
if arg_60 == arg_163 && arg_60 == arg_59 && arg_60 == arg_154 && arg_60 == arg_81 && arg_60 == arg_49 && arg_60 == arg_143 && arg_60 == arg_36 && arg_60 == arg_179 && arg_60 == arg_70 && arg_60 == arg_140 && arg_60 == arg_82 && arg_60 == arg_111 && arg_60 == arg_23 && arg_60 == arg_130 && arg_60 == arg_73 && arg_60 == arg_95 && arg_60 == arg_157 && arg_60 == arg_69 && arg_60 == arg_74 && arg_60 == arg_164 && arg_60 == arg_139 && arg_60 == arg_153 && arg_60 == arg_189 && arg_60 == arg_107 && arg_60 == arg_13 && arg_60 == arg_45 && arg_60 == arg_180 && arg_60 == arg_14 && arg_60 == arg_134 && arg_60 == arg_18 && arg_60 == arg_117 && arg_60 == arg_86 && arg_60 == arg_176 && arg_60 == arg_121 && arg_60 == arg_122 && arg_60 == arg_129 && arg_60 == arg_168 && arg_60 == arg_108 && arg_60 == arg_28 && arg_60 == arg_46 && arg_60 == arg_96 && arg_60 == arg_186 && arg_60 == arg_175 && arg_60 == arg_35 && arg_60 == arg_112 && arg_60 == arg_17 && arg_60 == arg_39 && arg_60 == arg_40 && arg_60 == arg_24 && arg_60 == arg_133 && arg_60 == arg_144 && arg_60 == arg_190 && arg_60 == arg_63 && arg_60 == arg_118 && arg_60 == arg_27 && arg_60 == arg_92 && arg_60 == arg_185 && arg_60 == arg_167 && arg_60 == arg_64 && arg_60 == arg_50 && arg_60 == arg_91 && arg_60 == arg_158 && arg_60 == arg_85 && arg_163 == arg_59 && arg_163 == arg_154 && arg_163 == arg_81 && arg_163 == arg_49 && arg_163 == arg_143 && arg_163 == arg_36 && arg_163 == arg_179 && arg_163 == arg_70 && arg_163 == arg_140 && arg_163 == arg_82 && arg_163 == arg_111 && arg_163 == arg_23 && arg_163 == arg_130 && arg_163 == arg_73 && arg_163 == arg_95 && arg_163 == arg_157 && arg_163 == arg_69 && arg_163 == arg_74 && arg_163 == arg_164 && arg_163 == arg_139 && arg_163 == arg_153 && arg_163 == arg_189 && arg_163 == arg_107 && arg_163 == arg_13 && arg_163 == arg_45 && arg_163 == arg_180 && arg_163 == arg_14 && arg_163 == arg_134 && arg_163 == arg_18 && arg_163 == arg_117 && arg_163 == arg_86 && arg_163 == arg_176 && arg_163 == arg_121 && arg_163 == arg_122 && arg_163 == arg_129 && arg_163 == arg_168 && arg_163 == arg_108 && arg_163 == arg_28 && arg_163 == arg_46 && arg_163 == arg_96 && arg_163 == arg_186 && arg_163 == arg_175 && arg_163 == arg_35 && arg_163 == arg_112 && arg_163 == arg_17 && arg_163 == arg_39 && arg_163 == arg_40 && arg_163 == arg_24 && arg_163 == arg_133 && arg_163 == arg_144 && arg_163 == arg_190 && arg_163 == arg_63 && arg_163 == arg_118 && arg_163 == arg_27 && arg_163 == arg_92 && arg_163 == arg_185 && arg_163 == arg_167 && arg_163 == arg_64 && arg_163 == arg_50 && arg_163 == arg_91 && arg_163 == arg_158 && arg_163 == arg_85 && arg_59 == arg_154 && arg_59 == arg_81 && arg_59 == arg_49 && arg_59 == arg_143 && arg_59 == arg_36 && arg_59 == arg_179 && arg_59 == arg_70 && arg_59 == arg_140 && arg_59 == arg_82 && arg_59 == arg_111 && arg_59 == arg_23 && arg_59 == arg_130 && arg_59 == arg_73 && arg_59 == arg_95 && arg_59 == arg_157 && arg_59 == arg_69 && arg_59 == arg_74 && arg_59 == arg_164 && arg_59 == arg_139 && arg_59 == arg_153 && arg_59 == arg_189 && arg_59 == arg_107 && arg_59 == arg_13 && arg_59 == arg_45 && arg_59 == arg_180 && arg_59 == arg_14 && arg_59 == arg_134 && arg_59 == arg_18 && arg_59 == arg_117 && arg_59 == arg_86 && arg_59 == arg_176 && arg_59 == arg_121 && arg_59 == arg_122 && arg_59 == arg_129 && arg_59 == arg_168 && arg_59 == arg_108 && arg_59 == arg_28 && arg_59 == arg_46 && arg_59 == arg_96 && arg_59 == arg_186 && arg_59 == arg_175 && arg_59 == arg_35 && arg_59 == arg_112 && arg_59 == arg_17 && arg_59 == arg_39 && arg_59 == arg_40 && arg_59 == arg_24 && arg_59 == arg_133 && arg_59 == arg_144 && arg_59 == arg_190 && arg_59 == arg_63 && arg_59 == arg_118 && arg_59 == arg_27 && arg_59 == arg_92 && arg_59 == arg_185 && arg_59 == arg_167 && arg_59 == arg_64 && arg_59 == arg_50 && arg_59 == arg_91 && arg_59 == arg_158 && arg_59 == arg_85 && arg_154 == arg_81 && arg_154 == arg_49 && arg_154 == arg_143 && arg_154 == arg_36 && arg_154 == arg_179 && arg_154 == arg_70 && arg_154 == arg_140 && arg_154 == arg_82 && arg_154 == arg_111 && arg_154 == arg_23 && arg_154 == arg_130 && arg_154 == arg_73 && arg_154 == arg_95 && arg_154 == arg_157 && arg_154 == arg_69 && arg_154 == arg_74 && arg_154 == arg_164 && arg_154 == arg_139 && arg_154 == arg_153 && arg_154 == arg_189 && arg_154 == arg_107 && arg_154 == arg_13 && arg_154 == arg_45 && arg_154 == arg_180 && arg_154 == arg_14 && arg_154 == arg_134 && arg_154 == arg_18 && arg_154 == arg_117 && arg_154 == arg_86 && arg_154 == arg_176 && arg_154 == arg_121 && arg_154 == arg_122 && arg_154 == arg_129 && arg_154 == arg_168 && arg_154 == arg_108 && arg_154 == arg_28 && arg_154 == arg_46 && arg_154 == arg_96 && arg_154 == arg_186 && arg_154 == arg_175 && arg_154 == arg_35 && arg_154 == arg_112 && arg_154 == arg_17 && arg_154 == arg_39 && arg_154 == arg_40 && arg_154 == arg_24 && arg_154 == arg_133 && arg_154 == arg_144 && arg_154 == arg_190 && arg_154 == arg_63 && arg_154 == arg_118 && arg_154 == arg_27 && arg_154 == arg_92 && arg_154 == arg_185 && arg_154 == arg_167 && arg_154 == arg_64 && arg_154 == arg_50 && arg_154 == arg_91 && arg_154 == arg_158 && arg_154 == arg_85 && arg_81 == arg_49 && arg_81 == arg_143 && arg_81 == arg_36 && arg_81 == arg_179 && arg_81 == arg_70 && arg_81 == arg_140 && arg_81 == arg_82 && arg_81 == arg_111 && arg_81 == arg_23 && arg_81 == arg_130 && arg_81 == arg_73 && arg_81 == arg_95 && arg_81 == arg_157 && arg_81 == arg_69 && arg_81 == arg_74 && arg_81 == arg_164 && arg_81 == arg_139 && arg_81 == arg_153 && arg_81 == arg_189 && arg_81 == arg_107 && arg_81 == arg_13 && arg_81 == arg_45 && arg_81 == arg_180 && arg_81 == arg_14 && arg_81 == arg_134 && arg_81 == arg_18 && arg_81 == arg_117 && arg_81 == arg_86 && arg_81 == arg_176 && arg_81 == arg_121 && arg_81 == arg_122 && arg_81 == arg_129 && arg_81 == arg_168 && arg_81 == arg_108 && arg_81 == arg_28 && arg_81 == arg_46 && arg_81 == arg_96 && arg_81 == arg_186 && arg_81 == arg_175 && arg_81 == arg_35 && arg_81 == arg_112 && arg_81 == arg_17 && arg_81 == arg_39 && arg_81 == arg_40 && arg_81 == arg_24 && arg_81 == arg_133 && arg_81 == arg_144 && arg_81 == arg_190 && arg_81 == arg_63 && arg_81 == arg_118 && arg_81 == arg_27 && arg_81 == arg_92 && arg_81 == arg_185 && arg_81 == arg_167 && arg_81 == arg_64 && arg_81 == arg_50 && arg_81 == arg_91 && arg_81 == arg_158 && arg_81 == arg_85 && arg_49 == arg_143 && arg_49 == arg_36 && arg_49 == arg_179 && arg_49 == arg_70 && arg_49 == arg_140 && arg_49 == arg_82 && arg_49 == arg_111 && arg_49 == arg_23 && arg_49 == arg_130 && arg_49 == arg_73 && arg_49 == arg_95 && arg_49 == arg_157 && arg_49 == arg_69 && arg_49 == arg_74 && arg_49 == arg_164 && arg_49 == arg_139 && arg_49 == arg_153 && arg_49 == arg_189 && arg_49 == arg_107 && arg_49 == arg_13 && arg_49 == arg_45 && arg_49 == arg_180 && arg_49 == arg_14 && arg_49 == arg_134 && arg_49 == arg_18 && arg_49 == arg_117 && arg_49 == arg_86 && arg_49 == arg_176 && arg_49 == arg_121 && arg_49 == arg_122 && arg_49 == arg_129 && arg_49 == arg_168 && arg_49 == arg_108 && arg_49 == arg_28 && arg_49 == arg_46 && arg_49 == arg_96 && arg_49 == arg_186 && arg_49 == arg_175 && arg_49 == arg_35 && arg_49 == arg_112 && arg_49 == arg_17 && arg_49 == arg_39 && arg_49 == arg_40 && arg_49 == arg_24 && arg_49 == arg_133 && arg_49 == arg_144 && arg_49 == arg_190 && arg_49 == arg_63 && arg_49 == arg_118 && arg_49 == arg_27 && arg_49 == arg_92 && arg_49 == arg_185 && arg_49 == arg_167 && arg_49 == arg_64 && arg_49 == arg_50 && arg_49 == arg_91 && arg_49 == arg_158 && arg_49 == arg_85 && arg_143 == arg_36 && arg_143 == arg_179 && arg_143 == arg_70 && arg_143 == arg_140 && arg_143 == arg_82 && arg_143 == arg_111 && arg_143 == arg_23 && arg_143 == arg_130 && arg_143 == arg_73 && arg_143 == arg_95 && arg_143 == arg_157 && arg_143 == arg_69 && arg_143 == arg_74 && arg_143 == arg_164 && arg_143 == arg_139 && arg_143 == arg_153 && arg_143 == arg_189 && arg_143 == arg_107 && arg_143 == arg_13 && arg_143 == arg_45 && arg_143 == arg_180 && arg_143 == arg_14 && arg_143 == arg_134 && arg_143 == arg_18 && arg_143 == arg_117 && arg_143 == arg_86 && arg_143 == arg_176 && arg_143 == arg_121 && arg_143 == arg_122 && arg_143 == arg_129 && arg_143 == arg_168 && arg_143 == arg_108 && arg_143 == arg_28 && arg_143 == arg_46 && arg_143 == arg_96 && arg_143 == arg_186 && arg_143 == arg_175 && arg_143 == arg_35 && arg_143 == arg_112 && arg_143 == arg_17 && arg_143 == arg_39 && arg_143 == arg_40 && arg_143 == arg_24 && arg_143 == arg_133 && arg_143 == arg_144 && arg_143 == arg_190 && arg_143 == arg_63 && arg_143 == arg_118 && arg_143 == arg_27 && arg_143 == arg_92 && arg_143 == arg_185 && arg_143 == arg_167 && arg_143 == arg_64 && arg_143 == arg_50 && arg_143 == arg_91 && arg_143 == arg_158 && arg_143 == arg_85 && arg_36 == arg_179 && arg_36 == arg_70 && arg_36 == arg_140 && arg_36 == arg_82 && arg_36 == arg_111 && arg_36 == arg_23 && arg_36 == arg_130 && arg_36 == arg_73 && arg_36 == arg_95 && arg_36 == arg_157 && arg_36 == arg_69 && arg_36 == arg_74 && arg_36 == arg_164 && arg_36 == arg_139 && arg_36 == arg_153 && arg_36 == arg_189 && arg_36 == arg_107 && arg_36 == arg_13 && arg_36 == arg_45 && arg_36 == arg_180 && arg_36 == arg_14 && arg_36 == arg_134 && arg_36 == arg_18 && arg_36 == arg_117 && arg_36 == arg_86 && arg_36 == arg_176 && arg_36 == arg_121 && arg_36 == arg_122 && arg_36 == arg_129 && arg_36 == arg_168 && arg_36 == arg_108 && arg_36 == arg_28 && arg_36 == arg_46 && arg_36 == arg_96 && arg_36 == arg_186 && arg_36 == arg_175 && arg_36 == arg_35 && arg_36 == arg_112 && arg_36 == arg_17 && arg_36 == arg_39 && arg_36 == arg_40 && arg_36 == arg_24 && arg_36 == arg_133 && arg_36 == arg_144 && arg_36 == arg_190 && arg_36 == arg_63 && arg_36 == arg_118 && arg_36 == arg_27 && arg_36 == arg_92 && arg_36 == arg_185 && arg_36 == arg_167 && arg_36 == arg_64 && arg_36 == arg_50 && arg_36 == arg_91 && arg_36 == arg_158 && arg_36 == arg_85 && arg_179 == arg_70 && arg_179 == arg_140 && arg_179 == arg_82 && arg_179 == arg_111 && arg_179 == arg_23 && arg_179 == arg_130 && arg_179 == arg_73 && arg_179 == arg_95 && arg_179 == arg_157 && arg_179 == arg_69 && arg_179 == arg_74 && arg_179 == arg_164 && arg_179 == arg_139 && arg_179 == arg_153 && arg_179 == arg_189 && arg_179 == arg_107 && arg_179 == arg_13 && arg_179 == arg_45 && arg_179 == arg_180 && arg_179 == arg_14 && arg_179 == arg_134 && arg_179 == arg_18 && arg_179 == arg_117 && arg_179 == arg_86 && arg_179 == arg_176 && arg_179 == arg_121 && arg_179 == arg_122 && arg_179 == arg_129 && arg_179 == arg_168 && arg_179 == arg_108 && arg_179 == arg_28 && arg_179 == arg_46 && arg_179 == arg_96 && arg_179 == arg_186 && arg_179 == arg_175 && arg_179 == arg_35 && arg_179 == arg_112 && arg_179 == arg_17 && arg_179 == arg_39 && arg_179 == arg_40 && arg_179 == arg_24 && arg_179 == arg_133 && arg_179 == arg_144 && arg_179 == arg_190 && arg_179 == arg_63 && arg_179 == arg_118 && arg_179 == arg_27 && arg_179 == arg_92 && arg_179 == arg_185 && arg_179 == arg_167 && arg_179 == arg_64 && arg_179 == arg_50 && arg_179 == arg_91 && arg_179 == arg_158 && arg_179 == arg_85 && arg_70 == arg_140 && arg_70 == arg_82 && arg_70 == arg_111 && arg_70 == arg_23 && arg_70 == arg_130 && arg_70 == arg_73 && arg_70 == arg_95 && arg_70 == arg_157 && arg_70 == arg_69 && arg_70 == arg_74 && arg_70 == arg_164 && arg_70 == arg_139 && arg_70 == arg_153 && arg_70 == arg_189 && arg_70 == arg_107 && arg_70 == arg_13 && arg_70 == arg_45 && arg_70 == arg_180 && arg_70 == arg_14 && arg_70 == arg_134 && arg_70 == arg_18 && arg_70 == arg_117 && arg_70 == arg_86 && arg_70 == arg_176 && arg_70 == arg_121 && arg_70 == arg_122 && arg_70 == arg_129 && arg_70 == arg_168 && arg_70 == arg_108 && arg_70 == arg_28 && arg_70 == arg_46 && arg_70 == arg_96 && arg_70 == arg_186 && arg_70 == arg_175 && arg_70 == arg_35 && arg_70 == arg_112 && arg_70 == arg_17 && arg_70 == arg_39 && arg_70 == arg_40 && arg_70 == arg_24 && arg_70 == arg_133 && arg_70 == arg_144 && arg_70 == arg_190 && arg_70 == arg_63 && arg_70 == arg_118 && arg_70 == arg_27 && arg_70 == arg_92 && arg_70 == arg_185 && arg_70 == arg_167 && arg_70 == arg_64 && arg_70 == arg_50 && arg_70 == arg_91 && arg_70 == arg_158 && arg_70 == arg_85 && arg_140 == arg_82 && arg_140 == arg_111 && arg_140 == arg_23 && arg_140 == arg_130 && arg_140 == arg_73 && arg_140 == arg_95 && arg_140 == arg_157 && arg_140 == arg_69 && arg_140 == arg_74 && arg_140 == arg_164 && arg_140 == arg_139 && arg_140 == arg_153 && arg_140 == arg_189 && arg_140 == arg_107 && arg_140 == arg_13 && arg_140 == arg_45 && arg_140 == arg_180 && arg_140 == arg_14 && arg_140 == arg_134 && arg_140 == arg_18 && arg_140 == arg_117 && arg_140 == arg_86 && arg_140 == arg_176 && arg_140 == arg_121 && arg_140 == arg_122 && arg_140 == arg_129 && arg_140 == arg_168 && arg_140 == arg_108 && arg_140 == arg_28 && arg_140 == arg_46 && arg_140 == arg_96 && arg_140 == arg_186 && arg_140 == arg_175 && arg_140 == arg_35 && arg_140 == arg_112 && arg_140 == arg_17 && arg_140 == arg_39 && arg_140 == arg_40 && arg_140 == arg_24 && arg_140 == arg_133 && arg_140 == arg_144 && arg_140 == arg_190 && arg_140 == arg_63 && arg_140 == arg_118 && arg_140 == arg_27 && arg_140 == arg_92 && arg_140 == arg_185 && arg_140 == arg_167 && arg_140 == arg_64 && arg_140 == arg_50 && arg_140 == arg_91 && arg_140 == arg_158 && arg_140 == arg_85 && arg_82 == arg_111 && arg_82 == arg_23 && arg_82 == arg_130 && arg_82 == arg_73 && arg_82 == arg_95 && arg_82 == arg_157 && arg_82 == arg_69 && arg_82 == arg_74 && arg_82 == arg_164 && arg_82 == arg_139 && arg_82 == arg_153 && arg_82 == arg_189 && arg_82 == arg_107 && arg_82 == arg_13 && arg_82 == arg_45 && arg_82 == arg_180 && arg_82 == arg_14 && arg_82 == arg_134 && arg_82 == arg_18 && arg_82 == arg_117 && arg_82 == arg_86 && arg_82 == arg_176 && arg_82 == arg_121 && arg_82 == arg_122 && arg_82 == arg_129 && arg_82 == arg_168 && arg_82 == arg_108 && arg_82 == arg_28 && arg_82 == arg_46 && arg_82 == arg_96 && arg_82 == arg_186 && arg_82 == arg_175 && arg_82 == arg_35 && arg_82 == arg_112 && arg_82 == arg_17 && arg_82 == arg_39 && arg_82 == arg_40 && arg_82 == arg_24 && arg_82 == arg_133 && arg_82 == arg_144 && arg_82 == arg_190 && arg_82 == arg_63 && arg_82 == arg_118 && arg_82 == arg_27 && arg_82 == arg_92 && arg_82 == arg_185 && arg_82 == arg_167 && arg_82 == arg_64 && arg_82 == arg_50 && arg_82 == arg_91 && arg_82 == arg_158 && arg_82 == arg_85 && arg_111 == arg_23 && arg_111 == arg_130 && arg_111 == arg_73 && arg_111 == arg_95 && arg_111 == arg_157 && arg_111 == arg_69 && arg_111 == arg_74 && arg_111 == arg_164 && arg_111 == arg_139 && arg_111 == arg_153 && arg_111 == arg_189 && arg_111 == arg_107 && arg_111 == arg_13 && arg_111 == arg_45 && arg_111 == arg_180 && arg_111 == arg_14 && arg_111 == arg_134 && arg_111 == arg_18 && arg_111 == arg_117 && arg_111 == arg_86 && arg_111 == arg_176 && arg_111 == arg_121 && arg_111 == arg_122 && arg_111 == arg_129 && arg_111 == arg_168 && arg_111 == arg_108 && arg_111 == arg_28 && arg_111 == arg_46 && arg_111 == arg_96 && arg_111 == arg_186 && arg_111 == arg_175 && arg_111 == arg_35 && arg_111 == arg_112 && arg_111 == arg_17 && arg_111 == arg_39 && arg_111 == arg_40 && arg_111 == arg_24 && arg_111 == arg_133 && arg_111 == arg_144 && arg_111 == arg_190 && arg_111 == arg_63 && arg_111 == arg_118 && arg_111 == arg_27 && arg_111 == arg_92 && arg_111 == arg_185 && arg_111 == arg_167 && arg_111 == arg_64 && arg_111 == arg_50 && arg_111 == arg_91 && arg_111 == arg_158 && arg_111 == arg_85 && arg_23 == arg_130 && arg_23 == arg_73 && arg_23 == arg_95 && arg_23 == arg_157 && arg_23 == arg_69 && arg_23 == arg_74 && arg_23 == arg_164 && arg_23 == arg_139 && arg_23 == arg_153 && arg_23 == arg_189 && arg_23 == arg_107 && arg_23 == arg_13 && arg_23 == arg_45 && arg_23 == arg_180 && arg_23 == arg_14 && arg_23 == arg_134 && arg_23 == arg_18 && arg_23 == arg_117 && arg_23 == arg_86 && arg_23 == arg_176 && arg_23 == arg_121 && arg_23 == arg_122 && arg_23 == arg_129 && arg_23 == arg_168 && arg_23 == arg_108 && arg_23 == arg_28 && arg_23 == arg_46 && arg_23 == arg_96 && arg_23 == arg_186 && arg_23 == arg_175 && arg_23 == arg_35 && arg_23 == arg_112 && arg_23 == arg_17 && arg_23 == arg_39 && arg_23 == arg_40 && arg_23 == arg_24 && arg_23 == arg_133 && arg_23 == arg_144 && arg_23 == arg_190 && arg_23 == arg_63 && arg_23 == arg_118 && arg_23 == arg_27 && arg_23 == arg_92 && arg_23 == arg_185 && arg_23 == arg_167 && arg_23 == arg_64 && arg_23 == arg_50 && arg_23 == arg_91 && arg_23 == arg_158 && arg_23 == arg_85 && arg_130 == arg_73 && arg_130 == arg_95 && arg_130 == arg_157 && arg_130 == arg_69 && arg_130 == arg_74 && arg_130 == arg_164 && arg_130 == arg_139 && arg_130 == arg_153 && arg_130 == arg_189 && arg_130 == arg_107 && arg_130 == arg_13 && arg_130 == arg_45 && arg_130 == arg_180 && arg_130 == arg_14 && arg_130 == arg_134 && arg_130 == arg_18 && arg_130 == arg_117 && arg_130 == arg_86 && arg_130 == arg_176 && arg_130 == arg_121 && arg_130 == arg_122 && arg_130 == arg_129 && arg_130 == arg_168 && arg_130 == arg_108 && arg_130 == arg_28 && arg_130 == arg_46 && arg_130 == arg_96 && arg_130 == arg_186 && arg_130 == arg_175 && arg_130 == arg_35 && arg_130 == arg_112 && arg_130 == arg_17 && arg_130 == arg_39 && arg_130 == arg_40 && arg_130 == arg_24 && arg_130 == arg_133 && arg_130 == arg_144 && arg_130 == arg_190 && arg_130 == arg_63 && arg_130 == arg_118 && arg_130 == arg_27 && arg_130 == arg_92 && arg_130 == arg_185 && arg_130 == arg_167 && arg_130 == arg_64 && arg_130 == arg_50 && arg_130 == arg_91 && arg_130 == arg_158 && arg_130 == arg_85 && arg_73 == arg_95 && arg_73 == arg_157 && arg_73 == arg_69 && arg_73 == arg_74 && arg_73 == arg_164 && arg_73 == arg_139 && arg_73 == arg_153 && arg_73 == arg_189 && arg_73 == arg_107 && arg_73 == arg_13 && arg_73 == arg_45 && arg_73 == arg_180 && arg_73 == arg_14 && arg_73 == arg_134 && arg_73 == arg_18 && arg_73 == arg_117 && arg_73 == arg_86 && arg_73 == arg_176 && arg_73 == arg_121 && arg_73 == arg_122 && arg_73 == arg_129 && arg_73 == arg_168 && arg_73 == arg_108 && arg_73 == arg_28 && arg_73 == arg_46 && arg_73 == arg_96 && arg_73 == arg_186 && arg_73 == arg_175 && arg_73 == arg_35 && arg_73 == arg_112 && arg_73 == arg_17 && arg_73 == arg_39 && arg_73 == arg_40 && arg_73 == arg_24 && arg_73 == arg_133 && arg_73 == arg_144 && arg_73 == arg_190 && arg_73 == arg_63 && arg_73 == arg_118 && arg_73 == arg_27 && arg_73 == arg_92 && arg_73 == arg_185 && arg_73 == arg_167 && arg_73 == arg_64 && arg_73 == arg_50 && arg_73 == arg_91 && arg_73 == arg_158 && arg_73 == arg_85 && arg_95 == arg_157 && arg_95 == arg_69 && arg_95 == arg_74 && arg_95 == arg_164 && arg_95 == arg_139 && arg_95 == arg_153 && arg_95 == arg_189 && arg_95 == arg_107 && arg_95 == arg_13 && arg_95 == arg_45 && arg_95 == arg_180 && arg_95 == arg_14 && arg_95 == arg_134 && arg_95 == arg_18 && arg_95 == arg_117 && arg_95 == arg_86 && arg_95 == arg_176 && arg_95 == arg_121 && arg_95 == arg_122 && arg_95 == arg_129 && arg_95 == arg_168 && arg_95 == arg_108 && arg_95 == arg_28 && arg_95 == arg_46 && arg_95 == arg_96 && arg_95 == arg_186 && arg_95 == arg_175 && arg_95 == arg_35 && arg_95 == arg_112 && arg_95 == arg_17 && arg_95 == arg_39 && arg_95 == arg_40 && arg_95 == arg_24 && arg_95 == arg_133 && arg_95 == arg_144 && arg_95 == arg_190 && arg_95 == arg_63 && arg_95 == arg_118 && arg_95 == arg_27 && arg_95 == arg_92 && arg_95 == arg_185 && arg_95 == arg_167 && arg_95 == arg_64 && arg_95 == arg_50 && arg_95 == arg_91 && arg_95 == arg_158 && arg_95 == arg_85 && arg_157 == arg_69 && arg_157 == arg_74 && arg_157 == arg_164 && arg_157 == arg_139 && arg_157 == arg_153 && arg_157 == arg_189 && arg_157 == arg_107 && arg_157 == arg_13 && arg_157 == arg_45 && arg_157 == arg_180 && arg_157 == arg_14 && arg_157 == arg_134 && arg_157 == arg_18 && arg_157 == arg_117 && arg_157 == arg_86 && arg_157 == arg_176 && arg_157 == arg_121 && arg_157 == arg_122 && arg_157 == arg_129 && arg_157 == arg_168 && arg_157 == arg_108 && arg_157 == arg_28 && arg_157 == arg_46 && arg_157 == arg_96 && arg_157 == arg_186 && arg_157 == arg_175 && arg_157 == arg_35 && arg_157 == arg_112 && arg_157 == arg_17 && arg_157 == arg_39 && arg_157 == arg_40 && arg_157 == arg_24 && arg_157 == arg_133 && arg_157 == arg_144 && arg_157 == arg_190 && arg_157 == arg_63 && arg_157 == arg_118 && arg_157 == arg_27 && arg_157 == arg_92 && arg_157 == arg_185 && arg_157 == arg_167 && arg_157 == arg_64 && arg_157 == arg_50 && arg_157 == arg_91 && arg_157 == arg_158 && arg_157 == arg_85 && arg_69 == arg_74 && arg_69 == arg_164 && arg_69 == arg_139 && arg_69 == arg_153 && arg_69 == arg_189 && arg_69 == arg_107 && arg_69 == arg_13 && arg_69 == arg_45 && arg_69 == arg_180 && arg_69 == arg_14 && arg_69 == arg_134 && arg_69 == arg_18 && arg_69 == arg_117 && arg_69 == arg_86 && arg_69 == arg_176 && arg_69 == arg_121 && arg_69 == arg_122 && arg_69 == arg_129 && arg_69 == arg_168 && arg_69 == arg_108 && arg_69 == arg_28 && arg_69 == arg_46 && arg_69 == arg_96 && arg_69 == arg_186 && arg_69 == arg_175 && arg_69 == arg_35 && arg_69 == arg_112 && arg_69 == arg_17 && arg_69 == arg_39 && arg_69 == arg_40 && arg_69 == arg_24 && arg_69 == arg_133 && arg_69 == arg_144 && arg_69 == arg_190 && arg_69 == arg_63 && arg_69 == arg_118 && arg_69 == arg_27 && arg_69 == arg_92 && arg_69 == arg_185 && arg_69 == arg_167 && arg_69 == arg_64 && arg_69 == arg_50 && arg_69 == arg_91 && arg_69 == arg_158 && arg_69 == arg_85 && arg_74 == arg_164 && arg_74 == arg_139 && arg_74 == arg_153 && arg_74 == arg_189 && arg_74 == arg_107 && arg_74 == arg_13 && arg_74 == arg_45 && arg_74 == arg_180 && arg_74 == arg_14 && arg_74 == arg_134 && arg_74 == arg_18 && arg_74 == arg_117 && arg_74 == arg_86 && arg_74 == arg_176 && arg_74 == arg_121 && arg_74 == arg_122 && arg_74 == arg_129 && arg_74 == arg_168 && arg_74 == arg_108 && arg_74 == arg_28 && arg_74 == arg_46 && arg_74 == arg_96 && arg_74 == arg_186 && arg_74 == arg_175 && arg_74 == arg_35 && arg_74 == arg_112 && arg_74 == arg_17 && arg_74 == arg_39 && arg_74 == arg_40 && arg_74 == arg_24 && arg_74 == arg_133 && arg_74 == arg_144 && arg_74 == arg_190 && arg_74 == arg_63 && arg_74 == arg_118 && arg_74 == arg_27 && arg_74 == arg_92 && arg_74 == arg_185 && arg_74 == arg_167 && arg_74 == arg_64 && arg_74 == arg_50 && arg_74 == arg_91 && arg_74 == arg_158 && arg_74 == arg_85 && arg_164 == arg_139 && arg_164 == arg_153 && arg_164 == arg_189 && arg_164 == arg_107 && arg_164 == arg_13 && arg_164 == arg_45 && arg_164 == arg_180 && arg_164 == arg_14 && arg_164 == arg_134 && arg_164 == arg_18 && arg_164 == arg_117 && arg_164 == arg_86 && arg_164 == arg_176 && arg_164 == arg_121 && arg_164 == arg_122 && arg_164 == arg_129 && arg_164 == arg_168 && arg_164 == arg_108 && arg_164 == arg_28 && arg_164 == arg_46 && arg_164 == arg_96 && arg_164 == arg_186 && arg_164 == arg_175 && arg_164 == arg_35 && arg_164 == arg_112 && arg_164 == arg_17 && arg_164 == arg_39 && arg_164 == arg_40 && arg_164 == arg_24 && arg_164 == arg_133 && arg_164 == arg_144 && arg_164 == arg_190 && arg_164 == arg_63 && arg_164 == arg_118 && arg_164 == arg_27 && arg_164 == arg_92 && arg_164 == arg_185 && arg_164 == arg_167 && arg_164 == arg_64 && arg_164 == arg_50 && arg_164 == arg_91 && arg_164 == arg_158 && arg_164 == arg_85 && arg_139 == arg_153 && arg_139 == arg_189 && arg_139 == arg_107 && arg_139 == arg_13 && arg_139 == arg_45 && arg_139 == arg_180 && arg_139 == arg_14 && arg_139 == arg_134 && arg_139 == arg_18 && arg_139 == arg_117 && arg_139 == arg_86 && arg_139 == arg_176 && arg_139 == arg_121 && arg_139 == arg_122 && arg_139 == arg_129 && arg_139 == arg_168 && arg_139 == arg_108 && arg_139 == arg_28 && arg_139 == arg_46 && arg_139 == arg_96 && arg_139 == arg_186 && arg_139 == arg_175 && arg_139 == arg_35 && arg_139 == arg_112 && arg_139 == arg_17 && arg_139 == arg_39 && arg_139 == arg_40 && arg_139 == arg_24 && arg_139 == arg_133 && arg_139 == arg_144 && arg_139 == arg_190 && arg_139 == arg_63 && arg_139 == arg_118 && arg_139 == arg_27 && arg_139 == arg_92 && arg_139 == arg_185 && arg_139 == arg_167 && arg_139 == arg_64 && arg_139 == arg_50 && arg_139 == arg_91 && arg_139 == arg_158 && arg_139 == arg_85 && arg_153 == arg_189 && arg_153 == arg_107 && arg_153 == arg_13 && arg_153 == arg_45 && arg_153 == arg_180 && arg_153 == arg_14 && arg_153 == arg_134 && arg_153 == arg_18 && arg_153 == arg_117 && arg_153 == arg_86 && arg_153 == arg_176 && arg_153 == arg_121 && arg_153 == arg_122 && arg_153 == arg_129 && arg_153 == arg_168 && arg_153 == arg_108 && arg_153 == arg_28 && arg_153 == arg_46 && arg_153 == arg_96 && arg_153 == arg_186 && arg_153 == arg_175 && arg_153 == arg_35 && arg_153 == arg_112 && arg_153 == arg_17 && arg_153 == arg_39 && arg_153 == arg_40 && arg_153 == arg_24 && arg_153 == arg_133 && arg_153 == arg_144 && arg_153 == arg_190 && arg_153 == arg_63 && arg_153 == arg_118 && arg_153 == arg_27 && arg_153 == arg_92 && arg_153 == arg_185 && arg_153 == arg_167 && arg_153 == arg_64 && arg_153 == arg_50 && arg_153 == arg_91 && arg_153 == arg_158 && arg_153 == arg_85 && arg_189 == arg_107 && arg_189 == arg_13 && arg_189 == arg_45 && arg_189 == arg_180 && arg_189 == arg_14 && arg_189 == arg_134 && arg_189 == arg_18 && arg_189 == arg_117 && arg_189 == arg_86 && arg_189 == arg_176 && arg_189 == arg_121 && arg_189 == arg_122 && arg_189 == arg_129 && arg_189 == arg_168 && arg_189 == arg_108 && arg_189 == arg_28 && arg_189 == arg_46 && arg_189 == arg_96 && arg_189 == arg_186 && arg_189 == arg_175 && arg_189 == arg_35 && arg_189 == arg_112 && arg_189 == arg_17 && arg_189 == arg_39 && arg_189 == arg_40 && arg_189 == arg_24 && arg_189 == arg_133 && arg_189 == arg_144 && arg_189 == arg_190 && arg_189 == arg_63 && arg_189 == arg_118 && arg_189 == arg_27 && arg_189 == arg_92 && arg_189 == arg_185 && arg_189 == arg_167 && arg_189 == arg_64 && arg_189 == arg_50 && arg_189 == arg_91 && arg_189 == arg_158 && arg_189 == arg_85 && arg_107 == arg_13 && arg_107 == arg_45 && arg_107 == arg_180 && arg_107 == arg_14 && arg_107 == arg_134 && arg_107 == arg_18 && arg_107 == arg_117 && arg_107 == arg_86 && arg_107 == arg_176 && arg_107 == arg_121 && arg_107 == arg_122 && arg_107 == arg_129 && arg_107 == arg_168 && arg_107 == arg_108 && arg_107 == arg_28 && arg_107 == arg_46 && arg_107 == arg_96 && arg_107 == arg_186 && arg_107 == arg_175 && arg_107 == arg_35 && arg_107 == arg_112 && arg_107 == arg_17 && arg_107 == arg_39 && arg_107 == arg_40 && arg_107 == arg_24 && arg_107 == arg_133 && arg_107 == arg_144 && arg_107 == arg_190 && arg_107 == arg_63 && arg_107 == arg_118 && arg_107 == arg_27 && arg_107 == arg_92 && arg_107 == arg_185 && arg_107 == arg_167 && arg_107 == arg_64 && arg_107 == arg_50 && arg_107 == arg_91 && arg_107 == arg_158 && arg_107 == arg_85 && arg_13 == arg_45 && arg_13 == arg_180 && arg_13 == arg_14 && arg_13 == arg_134 && arg_13 == arg_18 && arg_13 == arg_117 && arg_13 == arg_86 && arg_13 == arg_176 && arg_13 == arg_121 && arg_13 == arg_122 && arg_13 == arg_129 && arg_13 == arg_168 && arg_13 == arg_108 && arg_13 == arg_28 && arg_13 == arg_46 && arg_13 == arg_96 && arg_13 == arg_186 && arg_13 == arg_175 && arg_13 == arg_35 && arg_13 == arg_112 && arg_13 == arg_17 && arg_13 == arg_39 && arg_13 == arg_40 && arg_13 == arg_24 && arg_13 == arg_133 && arg_13 == arg_144 && arg_13 == arg_190 && arg_13 == arg_63 && arg_13 == arg_118 && arg_13 == arg_27 && arg_13 == arg_92 && arg_13 == arg_185 && arg_13 == arg_167 && arg_13 == arg_64 && arg_13 == arg_50 && arg_13 == arg_91 && arg_13 == arg_158 && arg_13 == arg_85 && arg_45 == arg_180 && arg_45 == arg_14 && arg_45 == arg_134 && arg_45 == arg_18 && arg_45 == arg_117 && arg_45 == arg_86 && arg_45 == arg_176 && arg_45 == arg_121 && arg_45 == arg_122 && arg_45 == arg_129 && arg_45 == arg_168 && arg_45 == arg_108 && arg_45 == arg_28 && arg_45 == arg_46 && arg_45 == arg_96 && arg_45 == arg_186 && arg_45 == arg_175 && arg_45 == arg_35 && arg_45 == arg_112 && arg_45 == arg_17 && arg_45 == arg_39 && arg_45 == arg_40 && arg_45 == arg_24 && arg_45 == arg_133 && arg_45 == arg_144 && arg_45 == arg_190 && arg_45 == arg_63 && arg_45 == arg_118 && arg_45 == arg_27 && arg_45 == arg_92 && arg_45 == arg_185 && arg_45 == arg_167 && arg_45 == arg_64 && arg_45 == arg_50 && arg_45 == arg_91 && arg_45 == arg_158 && arg_45 == arg_85 && arg_180 == arg_14 && arg_180 == arg_134 && arg_180 == arg_18 && arg_180 == arg_117 && arg_180 == arg_86 && arg_180 == arg_176 && arg_180 == arg_121 && arg_180 == arg_122 && arg_180 == arg_129 && arg_180 == arg_168 && arg_180 == arg_108 && arg_180 == arg_28 && arg_180 == arg_46 && arg_180 == arg_96 && arg_180 == arg_186 && arg_180 == arg_175 && arg_180 == arg_35 && arg_180 == arg_112 && arg_180 == arg_17 && arg_180 == arg_39 && arg_180 == arg_40 && arg_180 == arg_24 && arg_180 == arg_133 && arg_180 == arg_144 && arg_180 == arg_190 && arg_180 == arg_63 && arg_180 == arg_118 && arg_180 == arg_27 && arg_180 == arg_92 && arg_180 == arg_185 && arg_180 == arg_167 && arg_180 == arg_64 && arg_180 == arg_50 && arg_180 == arg_91 && arg_180 == arg_158 && arg_180 == arg_85 && arg_14 == arg_134 && arg_14 == arg_18 && arg_14 == arg_117 && arg_14 == arg_86 && arg_14 == arg_176 && arg_14 == arg_121 && arg_14 == arg_122 && arg_14 == arg_129 && arg_14 == arg_168 && arg_14 == arg_108 && arg_14 == arg_28 && arg_14 == arg_46 && arg_14 == arg_96 && arg_14 == arg_186 && arg_14 == arg_175 && arg_14 == arg_35 && arg_14 == arg_112 && arg_14 == arg_17 && arg_14 == arg_39 && arg_14 == arg_40 && arg_14 == arg_24 && arg_14 == arg_133 && arg_14 == arg_144 && arg_14 == arg_190 && arg_14 == arg_63 && arg_14 == arg_118 && arg_14 == arg_27 && arg_14 == arg_92 && arg_14 == arg_185 && arg_14 == arg_167 && arg_14 == arg_64 && arg_14 == arg_50 && arg_14 == arg_91 && arg_14 == arg_158 && arg_14 == arg_85 && arg_134 == arg_18 && arg_134 == arg_117 && arg_134 == arg_86 && arg_134 == arg_176 && arg_134 == arg_121 && arg_134 == arg_122 && arg_134 == arg_129 && arg_134 == arg_168 && arg_134 == arg_108 && arg_134 == arg_28 && arg_134 == arg_46 && arg_134 == arg_96 && arg_134 == arg_186 && arg_134 == arg_175 && arg_134 == arg_35 && arg_134 == arg_112 && arg_134 == arg_17 && arg_134 == arg_39 && arg_134 == arg_40 && arg_134 == arg_24 && arg_134 == arg_133 && arg_134 == arg_144 && arg_134 == arg_190 && arg_134 == arg_63 && arg_134 == arg_118 && arg_134 == arg_27 && arg_134 == arg_92 && arg_134 == arg_185 && arg_134 == arg_167 && arg_134 == arg_64 && arg_134 == arg_50 && arg_134 == arg_91 && arg_134 == arg_158 && arg_134 == arg_85 && arg_18 == arg_117 && arg_18 == arg_86 && arg_18 == arg_176 && arg_18 == arg_121 && arg_18 == arg_122 && arg_18 == arg_129 && arg_18 == arg_168 && arg_18 == arg_108 && arg_18 == arg_28 && arg_18 == arg_46 && arg_18 == arg_96 && arg_18 == arg_186 && arg_18 == arg_175 && arg_18 == arg_35 && arg_18 == arg_112 && arg_18 == arg_17 && arg_18 == arg_39 && arg_18 == arg_40 && arg_18 == arg_24 && arg_18 == arg_133 && arg_18 == arg_144 && arg_18 == arg_190 && arg_18 == arg_63 && arg_18 == arg_118 && arg_18 == arg_27 && arg_18 == arg_92 && arg_18 == arg_185 && arg_18 == arg_167 && arg_18 == arg_64 && arg_18 == arg_50 && arg_18 == arg_91 && arg_18 == arg_158 && arg_18 == arg_85 && arg_117 == arg_86 && arg_117 == arg_176 && arg_117 == arg_121 && arg_117 == arg_122 && arg_117 == arg_129 && arg_117 == arg_168 && arg_117 == arg_108 && arg_117 == arg_28 && arg_117 == arg_46 && arg_117 == arg_96 && arg_117 == arg_186 && arg_117 == arg_175 && arg_117 == arg_35 && arg_117 == arg_112 && arg_117 == arg_17 && arg_117 == arg_39 && arg_117 == arg_40 && arg_117 == arg_24 && arg_117 == arg_133 && arg_117 == arg_144 && arg_117 == arg_190 && arg_117 == arg_63 && arg_117 == arg_118 && arg_117 == arg_27 && arg_117 == arg_92 && arg_117 == arg_185 && arg_117 == arg_167 && arg_117 == arg_64 && arg_117 == arg_50 && arg_117 == arg_91 && arg_117 == arg_158 && arg_117 == arg_85 && arg_86 == arg_176 && arg_86 == arg_121 && arg_86 == arg_122 && arg_86 == arg_129 && arg_86 == arg_168 && arg_86 == arg_108 && arg_86 == arg_28 && arg_86 == arg_46 && arg_86 == arg_96 && arg_86 == arg_186 && arg_86 == arg_175 && arg_86 == arg_35 && arg_86 == arg_112 && arg_86 == arg_17 && arg_86 == arg_39 && arg_86 == arg_40 && arg_86 == arg_24 && arg_86 == arg_133 && arg_86 == arg_144 && arg_86 == arg_190 && arg_86 == arg_63 && arg_86 == arg_118 && arg_86 == arg_27 && arg_86 == arg_92 && arg_86 == arg_185 && arg_86 == arg_167 && arg_86 == arg_64 && arg_86 == arg_50 && arg_86 == arg_91 && arg_86 == arg_158 && arg_86 == arg_85 && arg_176 == arg_121 && arg_176 == arg_122 && arg_176 == arg_129 && arg_176 == arg_168 && arg_176 == arg_108 && arg_176 == arg_28 && arg_176 == arg_46 && arg_176 == arg_96 && arg_176 == arg_186 && arg_176 == arg_175 && arg_176 == arg_35 && arg_176 == arg_112 && arg_176 == arg_17 && arg_176 == arg_39 && arg_176 == arg_40 && arg_176 == arg_24 && arg_176 == arg_133 && arg_176 == arg_144 && arg_176 == arg_190 && arg_176 == arg_63 && arg_176 == arg_118 && arg_176 == arg_27 && arg_176 == arg_92 && arg_176 == arg_185 && arg_176 == arg_167 && arg_176 == arg_64 && arg_176 == arg_50 && arg_176 == arg_91 && arg_176 == arg_158 && arg_176 == arg_85 && arg_121 == arg_122 && arg_121 == arg_129 && arg_121 == arg_168 && arg_121 == arg_108 && arg_121 == arg_28 && arg_121 == arg_46 && arg_121 == arg_96 && arg_121 == arg_186 && arg_121 == arg_175 && arg_121 == arg_35 && arg_121 == arg_112 && arg_121 == arg_17 && arg_121 == arg_39 && arg_121 == arg_40 && arg_121 == arg_24 && arg_121 == arg_133 && arg_121 == arg_144 && arg_121 == arg_190 && arg_121 == arg_63 && arg_121 == arg_118 && arg_121 == arg_27 && arg_121 == arg_92 && arg_121 == arg_185 && arg_121 == arg_167 && arg_121 == arg_64 && arg_121 == arg_50 && arg_121 == arg_91 && arg_121 == arg_158 && arg_121 == arg_85 && arg_122 == arg_129 && arg_122 == arg_168 && arg_122 == arg_108 && arg_122 == arg_28 && arg_122 == arg_46 && arg_122 == arg_96 && arg_122 == arg_186 && arg_122 == arg_175 && arg_122 == arg_35 && arg_122 == arg_112 && arg_122 == arg_17 && arg_122 == arg_39 && arg_122 == arg_40 && arg_122 == arg_24 && arg_122 == arg_133 && arg_122 == arg_144 && arg_122 == arg_190 && arg_122 == arg_63 && arg_122 == arg_118 && arg_122 == arg_27 && arg_122 == arg_92 && arg_122 == arg_185 && arg_122 == arg_167 && arg_122 == arg_64 && arg_122 == arg_50 && arg_122 == arg_91 && arg_122 == arg_158 && arg_122 == arg_85 && arg_129 == arg_168 && arg_129 == arg_108 && arg_129 == arg_28 && arg_129 == arg_46 && arg_129 == arg_96 && arg_129 == arg_186 && arg_129 == arg_175 && arg_129 == arg_35 && arg_129 == arg_112 && arg_129 == arg_17 && arg_129 == arg_39 && arg_129 == arg_40 && arg_129 == arg_24 && arg_129 == arg_133 && arg_129 == arg_144 && arg_129 == arg_190 && arg_129 == arg_63 && arg_129 == arg_118 && arg_129 == arg_27 && arg_129 == arg_92 && arg_129 == arg_185 && arg_129 == arg_167 && arg_129 == arg_64 && arg_129 == arg_50 && arg_129 == arg_91 && arg_129 == arg_158 && arg_129 == arg_85 && arg_168 == arg_108 && arg_168 == arg_28 && arg_168 == arg_46 && arg_168 == arg_96 && arg_168 == arg_186 && arg_168 == arg_175 && arg_168 == arg_35 && arg_168 == arg_112 && arg_168 == arg_17 && arg_168 == arg_39 && arg_168 == arg_40 && arg_168 == arg_24 && arg_168 == arg_133 && arg_168 == arg_144 && arg_168 == arg_190 && arg_168 == arg_63 && arg_168 == arg_118 && arg_168 == arg_27 && arg_168 == arg_92 && arg_168 == arg_185 && arg_168 == arg_167 && arg_168 == arg_64 && arg_168 == arg_50 && arg_168 == arg_91 && arg_168 == arg_158 && arg_168 == arg_85 && arg_108 == arg_28 && arg_108 == arg_46 && arg_108 == arg_96 && arg_108 == arg_186 && arg_108 == arg_175 && arg_108 == arg_35 && arg_108 == arg_112 && arg_108 == arg_17 && arg_108 == arg_39 && arg_108 == arg_40 && arg_108 == arg_24 && arg_108 == arg_133 && arg_108 == arg_144 && arg_108 == arg_190 && arg_108 == arg_63 && arg_108 == arg_118 && arg_108 == arg_27 && arg_108 == arg_92 && arg_108 == arg_185 && arg_108 == arg_167 && arg_108 == arg_64 && arg_108 == arg_50 && arg_108 == arg_91 && arg_108 == arg_158 && arg_108 == arg_85 && arg_28 == arg_46 && arg_28 == arg_96 && arg_28 == arg_186 && arg_28 == arg_175 && arg_28 == arg_35 && arg_28 == arg_112 && arg_28 == arg_17 && arg_28 == arg_39 && arg_28 == arg_40 && arg_28 == arg_24 && arg_28 == arg_133 && arg_28 == arg_144 && arg_28 == arg_190 && arg_28 == arg_63 && arg_28 == arg_118 && arg_28 == arg_27 && arg_28 == arg_92 && arg_28 == arg_185 && arg_28 == arg_167 && arg_28 == arg_64 && arg_28 == arg_50 && arg_28 == arg_91 && arg_28 == arg_158 && arg_28 == arg_85 && arg_46 == arg_96 && arg_46 == arg_186 && arg_46 == arg_175 && arg_46 == arg_35 && arg_46 == arg_112 && arg_46 == arg_17 && arg_46 == arg_39 && arg_46 == arg_40 && arg_46 == arg_24 && arg_46 == arg_133 && arg_46 == arg_144 && arg_46 == arg_190 && arg_46 == arg_63 && arg_46 == arg_118 && arg_46 == arg_27 && arg_46 == arg_92 && arg_46 == arg_185 && arg_46 == arg_167 && arg_46 == arg_64 && arg_46 == arg_50 && arg_46 == arg_91 && arg_46 == arg_158 && arg_46 == arg_85 && arg_96 == arg_186 && arg_96 == arg_175 && arg_96 == arg_35 && arg_96 == arg_112 && arg_96 == arg_17 && arg_96 == arg_39 && arg_96 == arg_40 && arg_96 == arg_24 && arg_96 == arg_133 && arg_96 == arg_144 && arg_96 == arg_190 && arg_96 == arg_63 && arg_96 == arg_118 && arg_96 == arg_27 && arg_96 == arg_92 && arg_96 == arg_185 && arg_96 == arg_167 && arg_96 == arg_64 && arg_96 == arg_50 && arg_96 == arg_91 && arg_96 == arg_158 && arg_96 == arg_85 && arg_186 == arg_175 && arg_186 == arg_35 && arg_186 == arg_112 && arg_186 == arg_17 && arg_186 == arg_39 && arg_186 == arg_40 && arg_186 == arg_24 && arg_186 == arg_133 && arg_186 == arg_144 && arg_186 == arg_190 && arg_186 == arg_63 && arg_186 == arg_118 && arg_186 == arg_27 && arg_186 == arg_92 && arg_186 == arg_185 && arg_186 == arg_167 && arg_186 == arg_64 && arg_186 == arg_50 && arg_186 == arg_91 && arg_186 == arg_158 && arg_186 == arg_85 && arg_175 == arg_35 && arg_175 == arg_112 && arg_175 == arg_17 && arg_175 == arg_39 && arg_175 == arg_40 && arg_175 == arg_24 && arg_175 == arg_133 && arg_175 == arg_144 && arg_175 == arg_190 && arg_175 == arg_63 && arg_175 == arg_118 && arg_175 == arg_27 && arg_175 == arg_92 && arg_175 == arg_185 && arg_175 == arg_167 && arg_175 == arg_64 && arg_175 == arg_50 && arg_175 == arg_91 && arg_175 == arg_158 && arg_175 == arg_85 && arg_35 == arg_112 && arg_35 == arg_17 && arg_35 == arg_39 && arg_35 == arg_40 && arg_35 == arg_24 && arg_35 == arg_133 && arg_35 == arg_144 && arg_35 == arg_190 && arg_35 == arg_63 && arg_35 == arg_118 && arg_35 == arg_27 && arg_35 == arg_92 && arg_35 == arg_185 && arg_35 == arg_167 && arg_35 == arg_64 && arg_35 == arg_50 && arg_35 == arg_91 && arg_35 == arg_158 && arg_35 == arg_85 && arg_112 == arg_17 && arg_112 == arg_39 && arg_112 == arg_40 && arg_112 == arg_24 && arg_112 == arg_133 && arg_112 == arg_144 && arg_112 == arg_190 && arg_112 == arg_63 && arg_112 == arg_118 && arg_112 == arg_27 && arg_112 == arg_92 && arg_112 == arg_185 && arg_112 == arg_167 && arg_112 == arg_64 && arg_112 == arg_50 && arg_112 == arg_91 && arg_112 == arg_158 && arg_112 == arg_85 && arg_17 == arg_39 && arg_17 == arg_40 && arg_17 == arg_24 && arg_17 == arg_133 && arg_17 == arg_144 && arg_17 == arg_190 && arg_17 == arg_63 && arg_17 == arg_118 && arg_17 == arg_27 && arg_17 == arg_92 && arg_17 == arg_185 && arg_17 == arg_167 && arg_17 == arg_64 && arg_17 == arg_50 && arg_17 == arg_91 && arg_17 == arg_158 && arg_17 == arg_85 && arg_39 == arg_40 && arg_39 == arg_24 && arg_39 == arg_133 && arg_39 == arg_144 && arg_39 == arg_190 && arg_39 == arg_63 && arg_39 == arg_118 && arg_39 == arg_27 && arg_39 == arg_92 && arg_39 == arg_185 && arg_39 == arg_167 && arg_39 == arg_64 && arg_39 == arg_50 && arg_39 == arg_91 && arg_39 == arg_158 && arg_39 == arg_85 && arg_40 == arg_24 && arg_40 == arg_133 && arg_40 == arg_144 && arg_40 == arg_190 && arg_40 == arg_63 && arg_40 == arg_118 && arg_40 == arg_27 && arg_40 == arg_92 && arg_40 == arg_185 && arg_40 == arg_167 && arg_40 == arg_64 && arg_40 == arg_50 && arg_40 == arg_91 && arg_40 == arg_158 && arg_40 == arg_85 && arg_24 == arg_133 && arg_24 == arg_144 && arg_24 == arg_190 && arg_24 == arg_63 && arg_24 == arg_118 && arg_24 == arg_27 && arg_24 == arg_92 && arg_24 == arg_185 && arg_24 == arg_167 && arg_24 == arg_64 && arg_24 == arg_50 && arg_24 == arg_91 && arg_24 == arg_158 && arg_24 == arg_85 && arg_133 == arg_144 && arg_133 == arg_190 && arg_133 == arg_63 && arg_133 == arg_118 && arg_133 == arg_27 && arg_133 == arg_92 && arg_133 == arg_185 && arg_133 == arg_167 && arg_133 == arg_64 && arg_133 == arg_50 && arg_133 == arg_91 && arg_133 == arg_158 && arg_133 == arg_85 && arg_144 == arg_190 && arg_144 == arg_63 && arg_144 == arg_118 && arg_144 == arg_27 && arg_144 == arg_92 && arg_144 == arg_185 && arg_144 == arg_167 && arg_144 == arg_64 && arg_144 == arg_50 && arg_144 == arg_91 && arg_144 == arg_158 && arg_144 == arg_85 && arg_190 == arg_63 && arg_190 == arg_118 && arg_190 == arg_27 && arg_190 == arg_92 && arg_190 == arg_185 && arg_190 == arg_167 && arg_190 == arg_64 && arg_190 == arg_50 && arg_190 == arg_91 && arg_190 == arg_158 && arg_190 == arg_85 && arg_63 == arg_118 && arg_63 == arg_27 && arg_63 == arg_92 && arg_63 == arg_185 && arg_63 == arg_167 && arg_63 == arg_64 && arg_63 == arg_50 && arg_63 == arg_91 && arg_63 == arg_158 && arg_63 == arg_85 && arg_118 == arg_27 && arg_118 == arg_92 && arg_118 == arg_185 && arg_118 == arg_167 && arg_118 == arg_64 && arg_118 == arg_50 && arg_118 == arg_91 && arg_118 == arg_158 && arg_118 == arg_85 && arg_27 == arg_92 && arg_27 == arg_185 && arg_27 == arg_167 && arg_27 == arg_64 && arg_27 == arg_50 && arg_27 == arg_91 && arg_27 == arg_158 && arg_27 == arg_85 && arg_92 == arg_185 && arg_92 == arg_167 && arg_92 == arg_64 && arg_92 == arg_50 && arg_92 == arg_91 && arg_92 == arg_158 && arg_92 == arg_85 && arg_185 == arg_167 && arg_185 == arg_64 && arg_185 == arg_50 && arg_185 == arg_91 && arg_185 == arg_158 && arg_185 == arg_85 && arg_167 == arg_64 && arg_167 == arg_50 && arg_167 == arg_91 && arg_167 == arg_158 && arg_167 == arg_85 && arg_64 == arg_50 && arg_64 == arg_91 && arg_64 == arg_158 && arg_64 == arg_85 && arg_50 == arg_91 && arg_50 == arg_158 && arg_50 == arg_85 && arg_91 == arg_158 && arg_91 == arg_85 && arg_158 == arg_85 {
let rhs_inst_16 = pos.ins().iadd_imm(arg_146, 1_u64 as i64);
let rhs_inst_17 = pos.ins().bnot(rhs_inst_16);
pos.func.dfg.replace(inst).bnot(rhs_inst_17);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1398(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_3 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_3) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_4 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_4[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_5) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_6 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_6[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_7 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_7) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_8 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_8[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_9 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_9) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_10 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_10[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_11 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_11) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_12 = arg;
let rhs_7 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_12) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_13 = arg;
let rhs_8 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_13) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_14 = arg;
let rhs_9 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_14) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_15 = arg;
let rhs_10 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_10 == 7 {
if rhs_9 == 3 {
if rhs_8 == 4294967295 {
if rhs_7 == -1 {
if rhs_6 == 1 {
match pos.func.dfg.value_def(arg_10[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_16 = arg;
let rhs_16 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_16) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_17 = arg;
let rhs_17 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_17) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_18 = arg;
let rhs_18 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_18) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_19 = arg;
let rhs_19 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_19 == 7 {
if rhs_18 == 3 {
if rhs_17 == 4294967295 {
if rhs_16 == -1 {
if rhs_5 == 2 {
match pos.func.dfg.value_def(arg_8[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_20 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_20[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_21 = arg;
let rhs_25 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_21) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_22 = arg;
let rhs_26 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_22) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_23 = arg;
let rhs_27 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_23) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_24 = arg;
let rhs_28 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_24) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_25 = arg;
let rhs_29 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_29 == 7 {
if rhs_28 == 3 {
if rhs_27 == 4294967295 {
if rhs_26 == -1 {
if rhs_25 == 1 {
match pos.func.dfg.value_def(arg_20[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_26 = arg;
let rhs_35 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_26) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_27 = arg;
let rhs_36 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_27) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_28 = arg;
let rhs_37 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_28) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_29 = arg;
let rhs_38 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_38 == 7 {
if rhs_37 == 3 {
if rhs_36 == 4294967295 {
if rhs_35 == -1 {
if rhs_4 == 4 {
match pos.func.dfg.value_def(arg_6[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_30 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_30[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_31 = arg;
let rhs_44 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_31) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_32 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_32[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_33 = arg;
let rhs_45 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_33) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_34 = arg;
let rhs_46 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_34) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_35 = arg;
let rhs_47 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_35) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_36 = arg;
let rhs_48 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_36) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_37 = arg;
let rhs_49 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_49 == 7 {
if rhs_48 == 3 {
if rhs_47 == 4294967295 {
if rhs_46 == -1 {
if rhs_45 == 1 {
match pos.func.dfg.value_def(arg_32[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_38 = arg;
let rhs_55 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_38) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_39 = arg;
let rhs_56 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_39) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_40 = arg;
let rhs_57 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_40) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_41 = arg;
let rhs_58 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_58 == 7 {
if rhs_57 == 3 {
if rhs_56 == 4294967295 {
if rhs_55 == -1 {
if rhs_44 == 2 {
match pos.func.dfg.value_def(arg_30[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_42 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_42[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_43 = arg;
let rhs_64 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_43) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_44 = arg;
let rhs_65 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_44) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_45 = arg;
let rhs_66 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_45) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_46 = arg;
let rhs_67 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_46) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_47 = arg;
let rhs_68 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_68 == 7 {
if rhs_67 == 3 {
if rhs_66 == 4294967295 {
if rhs_65 == -1 {
if rhs_64 == 1 {
match pos.func.dfg.value_def(arg_42[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_48 = arg;
let rhs_74 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_48) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_49 = arg;
let rhs_75 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_49) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_50 = arg;
let rhs_76 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_50) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_51 = arg;
let rhs_77 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_77 == 7 {
if rhs_76 == 3 {
if rhs_75 == 4294967295 {
if rhs_74 == -1 {
if rhs_3 == 8 {
match pos.func.dfg.value_def(arg_4[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_52 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_52[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_53 = arg;
let rhs_83 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_53) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_54 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_54[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_55 = arg;
let rhs_84 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_55) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_56 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_56[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_57 = arg;
let rhs_85 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_57) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_58 = arg;
let rhs_86 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_58) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_59 = arg;
let rhs_87 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_59) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_60 = arg;
let rhs_88 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_60) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_61 = arg;
let rhs_89 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_89 == 7 {
if rhs_88 == 3 {
if rhs_87 == 4294967295 {
if rhs_86 == -1 {
if rhs_85 == 1 {
match pos.func.dfg.value_def(arg_56[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_62 = arg;
let rhs_95 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_62) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_63 = arg;
let rhs_96 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_63) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_64 = arg;
let rhs_97 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_64) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_65 = arg;
let rhs_98 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_98 == 7 {
if rhs_97 == 3 {
if rhs_96 == 4294967295 {
if rhs_95 == -1 {
if rhs_84 == 2 {
match pos.func.dfg.value_def(arg_54[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_66 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_66[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_67 = arg;
let rhs_104 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_67) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_68 = arg;
let rhs_105 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_68) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_69 = arg;
let rhs_106 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_69) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_70 = arg;
let rhs_107 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_70) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_71 = arg;
let rhs_108 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_108 == 7 {
if rhs_107 == 3 {
if rhs_106 == 4294967295 {
if rhs_105 == -1 {
if rhs_104 == 1 {
match pos.func.dfg.value_def(arg_66[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_72 = arg;
let rhs_114 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_72) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_73 = arg;
let rhs_115 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_73) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_74 = arg;
let rhs_116 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_74) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_75 = arg;
let rhs_117 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_117 == 7 {
if rhs_116 == 3 {
if rhs_115 == 4294967295 {
if rhs_114 == -1 {
if rhs_83 == 4 {
match pos.func.dfg.value_def(arg_52[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_76 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_76[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_77 = arg;
let rhs_123 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_77) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_78 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_78[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_79 = arg;
let rhs_124 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_79) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_80 = arg;
let rhs_125 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_80) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_81 = arg;
let rhs_126 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_81) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_82 = arg;
let rhs_127 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_82) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_83 = arg;
let rhs_128 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_128 == 7 {
if rhs_127 == 3 {
if rhs_126 == 4294967295 {
if rhs_125 == -1 {
if rhs_124 == 1 {
match pos.func.dfg.value_def(arg_78[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_84 = arg;
let rhs_134 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_84) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_85 = arg;
let rhs_135 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_85) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_86 = arg;
let rhs_136 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_86) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_87 = arg;
let rhs_137 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_137 == 7 {
if rhs_136 == 3 {
if rhs_135 == 4294967295 {
if rhs_134 == -1 {
if rhs_123 == 2 {
match pos.func.dfg.value_def(arg_76[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_88 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_88[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_89 = arg;
let rhs_143 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_89) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_90 = arg;
let rhs_144 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_90) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_91 = arg;
let rhs_145 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_91) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_92 = arg;
let rhs_146 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_92) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_93 = arg;
let rhs_147 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_147 == 7 {
if rhs_146 == 3 {
if rhs_145 == 4294967295 {
if rhs_144 == -1 {
if rhs_143 == 1 {
match pos.func.dfg.value_def(arg_88[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_94 = arg;
let rhs_153 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_94) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_95 = arg;
let rhs_154 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_95) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_96 = arg;
let rhs_155 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_96) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_97 = arg;
let rhs_156 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_156 == 7 {
if rhs_155 == 3 {
if rhs_154 == 4294967295 {
if rhs_153 == -1 {
if rhs_2 == 16 {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_98 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_98[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_99 = arg;
let rhs_162 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_99) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_100 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_100[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_101 = arg;
let rhs_163 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_101) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_102 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_102[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_103 = arg;
let rhs_164 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_103) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_104 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_104[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_105 = arg;
let rhs_165 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_105) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_106 = arg;
let rhs_166 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_106) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_107 = arg;
let rhs_167 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_107) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_108 = arg;
let rhs_168 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_108) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_109 = arg;
let rhs_169 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_169 == 7 {
if rhs_168 == 3 {
if rhs_167 == 4294967295 {
if rhs_166 == -1 {
if rhs_165 == 1 {
match pos.func.dfg.value_def(arg_104[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_110 = arg;
let rhs_175 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_110) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_111 = arg;
let rhs_176 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_111) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_112 = arg;
let rhs_177 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_112) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_113 = arg;
let rhs_178 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_178 == 7 {
if rhs_177 == 3 {
if rhs_176 == 4294967295 {
if rhs_175 == -1 {
if rhs_164 == 2 {
match pos.func.dfg.value_def(arg_102[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_114 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_114[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_115 = arg;
let rhs_184 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_115) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_116 = arg;
let rhs_185 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_116) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_117 = arg;
let rhs_186 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_117) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_118 = arg;
let rhs_187 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_118) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_119 = arg;
let rhs_188 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_188 == 7 {
if rhs_187 == 3 {
if rhs_186 == 4294967295 {
if rhs_185 == -1 {
if rhs_184 == 1 {
match pos.func.dfg.value_def(arg_114[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_120 = arg;
let rhs_194 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_120) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_121 = arg;
let rhs_195 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_121) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_122 = arg;
let rhs_196 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_122) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_123 = arg;
let rhs_197 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_197 == 7 {
if rhs_196 == 3 {
if rhs_195 == 4294967295 {
if rhs_194 == -1 {
if rhs_163 == 4 {
match pos.func.dfg.value_def(arg_100[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_124 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_124[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_125 = arg;
let rhs_203 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_125) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_126 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_126[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_127 = arg;
let rhs_204 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_127) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_128 = arg;
let rhs_205 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_128) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_129 = arg;
let rhs_206 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_129) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_130 = arg;
let rhs_207 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_130) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_131 = arg;
let rhs_208 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_208 == 7 {
if rhs_207 == 3 {
if rhs_206 == 4294967295 {
if rhs_205 == -1 {
if rhs_204 == 1 {
match pos.func.dfg.value_def(arg_126[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_132 = arg;
let rhs_214 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_132) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_133 = arg;
let rhs_215 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_133) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_134 = arg;
let rhs_216 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_134) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_135 = arg;
let rhs_217 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_217 == 7 {
if rhs_216 == 3 {
if rhs_215 == 4294967295 {
if rhs_214 == -1 {
if rhs_203 == 2 {
match pos.func.dfg.value_def(arg_124[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_136 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_136[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_137 = arg;
let rhs_223 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_137) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_138 = arg;
let rhs_224 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_138) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_139 = arg;
let rhs_225 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_139) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_140 = arg;
let rhs_226 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_140) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_141 = arg;
let rhs_227 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_227 == 7 {
if rhs_226 == 3 {
if rhs_225 == 4294967295 {
if rhs_224 == -1 {
if rhs_223 == 1 {
match pos.func.dfg.value_def(arg_136[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_142 = arg;
let rhs_233 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_142) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_143 = arg;
let rhs_234 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_143) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_144 = arg;
let rhs_235 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_144) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_145 = arg;
let rhs_236 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_236 == 7 {
if rhs_235 == 3 {
if rhs_234 == 4294967295 {
if rhs_233 == -1 {
if rhs_162 == 8 {
match pos.func.dfg.value_def(arg_98[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_146 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_146[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_147 = arg;
let rhs_242 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_147) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_148 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_148[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_149 = arg;
let rhs_243 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_149) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_150 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_150[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_151 = arg;
let rhs_244 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_151) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_152 = arg;
let rhs_245 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_152) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_153 = arg;
let rhs_246 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_153) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_154 = arg;
let rhs_247 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_154) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_155 = arg;
let rhs_248 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_248 == 7 {
if rhs_247 == 3 {
if rhs_246 == 4294967295 {
if rhs_245 == -1 {
if rhs_244 == 1 {
match pos.func.dfg.value_def(arg_150[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_156 = arg;
let rhs_254 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_156) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_157 = arg;
let rhs_255 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_157) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_158 = arg;
let rhs_256 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_158) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_159 = arg;
let rhs_257 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_257 == 7 {
if rhs_256 == 3 {
if rhs_255 == 4294967295 {
if rhs_254 == -1 {
if rhs_243 == 2 {
match pos.func.dfg.value_def(arg_148[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_160 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_160[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_161 = arg;
let rhs_263 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_161) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_162 = arg;
let rhs_264 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_162) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_163 = arg;
let rhs_265 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_163) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_164 = arg;
let rhs_266 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_164) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_165 = arg;
let rhs_267 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_267 == 7 {
if rhs_266 == 3 {
if rhs_265 == 4294967295 {
if rhs_264 == -1 {
if rhs_263 == 1 {
match pos.func.dfg.value_def(arg_160[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_166 = arg;
let rhs_273 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_166) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_167 = arg;
let rhs_274 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_167) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_168 = arg;
let rhs_275 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_168) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_169 = arg;
let rhs_276 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_276 == 7 {
if rhs_275 == 3 {
if rhs_274 == 4294967295 {
if rhs_273 == -1 {
if rhs_242 == 4 {
match pos.func.dfg.value_def(arg_146[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_170 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_170[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_171 = arg;
let rhs_282 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_171) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_172 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_172[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_173 = arg;
let rhs_283 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_173) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_174 = arg;
let rhs_284 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_174) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_175 = arg;
let rhs_285 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_175) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_176 = arg;
let rhs_286 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_176) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_177 = arg;
let rhs_287 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_287 == 7 {
if rhs_286 == 3 {
if rhs_285 == 4294967295 {
if rhs_284 == -1 {
if rhs_283 == 1 {
match pos.func.dfg.value_def(arg_172[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_178 = arg;
let rhs_293 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_178) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_179 = arg;
let rhs_294 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_179) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_180 = arg;
let rhs_295 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_180) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_181 = arg;
let rhs_296 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_296 == 7 {
if rhs_295 == 3 {
if rhs_294 == 4294967295 {
if rhs_293 == -1 {
if rhs_282 == 2 {
match pos.func.dfg.value_def(arg_170[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_182 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_182[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_183 = arg;
let rhs_302 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_183) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_184 = arg;
let rhs_303 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_184) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_185 = arg;
let rhs_304 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_185) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_186 = arg;
let rhs_305 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_186) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_187 = arg;
let rhs_306 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_306 == 7 {
if rhs_305 == 3 {
if rhs_304 == 4294967295 {
if rhs_303 == -1 {
if rhs_302 == 1 {
match pos.func.dfg.value_def(arg_182[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_188 = arg;
let rhs_312 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_188) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_189 = arg;
let rhs_313 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_189) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_190 = arg;
let rhs_314 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_190) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_191 = arg;
let rhs_315 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_315 == 7 {
if rhs_314 == 3 {
if rhs_313 == 4294967295 {
if rhs_312 == -1 {
if rhs_1 == 32 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_192 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_192[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_193 = arg;
let rhs_321 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_193) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_194 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_194[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_195 = arg;
let rhs_322 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_195) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_196 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_196[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_197 = arg;
let rhs_323 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_197) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_198 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_198[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_199 = arg;
let rhs_324 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_199) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_200 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_200[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_201 = arg;
let rhs_325 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_201) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_202 = arg;
let rhs_326 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_202) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_203 = arg;
let rhs_327 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_203) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_204 = arg;
let rhs_328 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_204) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_205 = arg;
let rhs_329 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_329 == 7 {
if rhs_328 == 3 {
if rhs_327 == 4294967295 {
if rhs_326 == -1 {
if rhs_325 == 1 {
match pos.func.dfg.value_def(arg_200[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_206 = arg;
let rhs_335 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_206) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_207 = arg;
let rhs_336 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_207) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_208 = arg;
let rhs_337 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_208) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_209 = arg;
let rhs_338 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_338 == 7 {
if rhs_337 == 3 {
if rhs_336 == 4294967295 {
if rhs_335 == -1 {
if rhs_324 == 2 {
match pos.func.dfg.value_def(arg_198[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_210 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_210[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_211 = arg;
let rhs_344 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_211) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_212 = arg;
let rhs_345 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_212) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_213 = arg;
let rhs_346 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_213) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_214 = arg;
let rhs_347 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_214) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_215 = arg;
let rhs_348 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_348 == 7 {
if rhs_347 == 3 {
if rhs_346 == 4294967295 {
if rhs_345 == -1 {
if rhs_344 == 1 {
match pos.func.dfg.value_def(arg_210[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_216 = arg;
let rhs_354 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_216) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_217 = arg;
let rhs_355 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_217) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_218 = arg;
let rhs_356 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_218) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_219 = arg;
let rhs_357 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_357 == 7 {
if rhs_356 == 3 {
if rhs_355 == 4294967295 {
if rhs_354 == -1 {
if rhs_323 == 4 {
match pos.func.dfg.value_def(arg_196[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_220 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_220[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_221 = arg;
let rhs_363 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_221) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_222 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_222[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_223 = arg;
let rhs_364 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_223) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_224 = arg;
let rhs_365 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_224) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_225 = arg;
let rhs_366 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_225) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_226 = arg;
let rhs_367 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_226) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_227 = arg;
let rhs_368 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_368 == 7 {
if rhs_367 == 3 {
if rhs_366 == 4294967295 {
if rhs_365 == -1 {
if rhs_364 == 1 {
match pos.func.dfg.value_def(arg_222[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_228 = arg;
let rhs_374 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_228) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_229 = arg;
let rhs_375 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_229) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_230 = arg;
let rhs_376 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_230) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_231 = arg;
let rhs_377 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_377 == 7 {
if rhs_376 == 3 {
if rhs_375 == 4294967295 {
if rhs_374 == -1 {
if rhs_363 == 2 {
match pos.func.dfg.value_def(arg_220[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_232 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_232[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_233 = arg;
let rhs_383 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_233) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_234 = arg;
let rhs_384 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_234) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_235 = arg;
let rhs_385 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_235) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_236 = arg;
let rhs_386 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_236) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_237 = arg;
let rhs_387 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_387 == 7 {
if rhs_386 == 3 {
if rhs_385 == 4294967295 {
if rhs_384 == -1 {
if rhs_383 == 1 {
match pos.func.dfg.value_def(arg_232[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_238 = arg;
let rhs_393 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_238) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_239 = arg;
let rhs_394 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_239) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_240 = arg;
let rhs_395 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_240) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_241 = arg;
let rhs_396 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_396 == 7 {
if rhs_395 == 3 {
if rhs_394 == 4294967295 {
if rhs_393 == -1 {
if rhs_322 == 8 {
match pos.func.dfg.value_def(arg_194[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_242 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_242[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_243 = arg;
let rhs_402 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_243) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_244 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_244[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_245 = arg;
let rhs_403 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_245) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_246 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_246[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_247 = arg;
let rhs_404 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_247) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_248 = arg;
let rhs_405 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_248) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_249 = arg;
let rhs_406 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_249) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_250 = arg;
let rhs_407 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_250) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_251 = arg;
let rhs_408 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_408 == 7 {
if rhs_407 == 3 {
if rhs_406 == 4294967295 {
if rhs_405 == -1 {
if rhs_404 == 1 {
match pos.func.dfg.value_def(arg_246[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_252 = arg;
let rhs_414 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_252) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_253 = arg;
let rhs_415 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_253) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_254 = arg;
let rhs_416 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_254) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_255 = arg;
let rhs_417 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_417 == 7 {
if rhs_416 == 3 {
if rhs_415 == 4294967295 {
if rhs_414 == -1 {
if rhs_403 == 2 {
match pos.func.dfg.value_def(arg_244[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_256 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_256[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_257 = arg;
let rhs_423 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_257) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_258 = arg;
let rhs_424 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_258) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_259 = arg;
let rhs_425 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_259) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_260 = arg;
let rhs_426 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_260) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_261 = arg;
let rhs_427 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_427 == 7 {
if rhs_426 == 3 {
if rhs_425 == 4294967295 {
if rhs_424 == -1 {
if rhs_423 == 1 {
match pos.func.dfg.value_def(arg_256[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_262 = arg;
let rhs_433 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_262) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_263 = arg;
let rhs_434 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_263) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_264 = arg;
let rhs_435 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_264) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_265 = arg;
let rhs_436 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_436 == 7 {
if rhs_435 == 3 {
if rhs_434 == 4294967295 {
if rhs_433 == -1 {
if rhs_402 == 4 {
match pos.func.dfg.value_def(arg_242[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_266 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_266[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_267 = arg;
let rhs_442 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_267) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_268 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_268[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_269 = arg;
let rhs_443 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_269) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_270 = arg;
let rhs_444 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_270) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_271 = arg;
let rhs_445 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_271) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_272 = arg;
let rhs_446 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_272) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_273 = arg;
let rhs_447 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_447 == 7 {
if rhs_446 == 3 {
if rhs_445 == 4294967295 {
if rhs_444 == -1 {
if rhs_443 == 1 {
match pos.func.dfg.value_def(arg_268[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_274 = arg;
let rhs_453 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_274) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_275 = arg;
let rhs_454 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_275) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_276 = arg;
let rhs_455 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_276) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_277 = arg;
let rhs_456 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_456 == 7 {
if rhs_455 == 3 {
if rhs_454 == 4294967295 {
if rhs_453 == -1 {
if rhs_442 == 2 {
match pos.func.dfg.value_def(arg_266[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_278 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_278[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_279 = arg;
let rhs_462 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_279) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_280 = arg;
let rhs_463 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_280) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_281 = arg;
let rhs_464 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_281) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_282 = arg;
let rhs_465 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_282) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_283 = arg;
let rhs_466 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_466 == 7 {
if rhs_465 == 3 {
if rhs_464 == 4294967295 {
if rhs_463 == -1 {
if rhs_462 == 1 {
match pos.func.dfg.value_def(arg_278[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_284 = arg;
let rhs_472 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_284) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_285 = arg;
let rhs_473 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_285) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_286 = arg;
let rhs_474 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_286) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_287 = arg;
let rhs_475 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_475 == 7 {
if rhs_474 == 3 {
if rhs_473 == 4294967295 {
if rhs_472 == -1 {
if rhs_321 == 16 {
match pos.func.dfg.value_def(arg_192[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_288 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_288[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_289 = arg;
let rhs_481 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_289) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_290 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_290[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_291 = arg;
let rhs_482 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_291) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_292 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_292[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_293 = arg;
let rhs_483 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_293) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_294 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_294[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_295 = arg;
let rhs_484 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_295) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_296 = arg;
let rhs_485 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_296) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_297 = arg;
let rhs_486 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_297) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_298 = arg;
let rhs_487 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_298) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_299 = arg;
let rhs_488 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_488 == 7 {
if rhs_487 == 3 {
if rhs_486 == 4294967295 {
if rhs_485 == -1 {
if rhs_484 == 1 {
match pos.func.dfg.value_def(arg_294[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_300 = arg;
let rhs_494 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_300) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_301 = arg;
let rhs_495 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_301) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_302 = arg;
let rhs_496 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_302) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_303 = arg;
let rhs_497 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_497 == 7 {
if rhs_496 == 3 {
if rhs_495 == 4294967295 {
if rhs_494 == -1 {
if rhs_483 == 2 {
match pos.func.dfg.value_def(arg_292[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_304 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_304[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_305 = arg;
let rhs_503 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_305) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_306 = arg;
let rhs_504 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_306) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_307 = arg;
let rhs_505 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_307) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_308 = arg;
let rhs_506 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_308) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_309 = arg;
let rhs_507 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_507 == 7 {
if rhs_506 == 3 {
if rhs_505 == 4294967295 {
if rhs_504 == -1 {
if rhs_503 == 1 {
match pos.func.dfg.value_def(arg_304[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_310 = arg;
let rhs_513 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_310) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_311 = arg;
let rhs_514 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_311) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_312 = arg;
let rhs_515 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_312) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_313 = arg;
let rhs_516 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_516 == 7 {
if rhs_515 == 3 {
if rhs_514 == 4294967295 {
if rhs_513 == -1 {
if rhs_482 == 4 {
match pos.func.dfg.value_def(arg_290[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_314 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_314[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_315 = arg;
let rhs_522 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_315) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_316 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_316[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_317 = arg;
let rhs_523 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_317) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_318 = arg;
let rhs_524 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_318) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_319 = arg;
let rhs_525 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_319) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_320 = arg;
let rhs_526 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_320) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_321 = arg;
let rhs_527 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_527 == 7 {
if rhs_526 == 3 {
if rhs_525 == 4294967295 {
if rhs_524 == -1 {
if rhs_523 == 1 {
match pos.func.dfg.value_def(arg_316[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_322 = arg;
let rhs_533 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_322) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_323 = arg;
let rhs_534 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_323) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_324 = arg;
let rhs_535 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_324) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_325 = arg;
let rhs_536 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_536 == 7 {
if rhs_535 == 3 {
if rhs_534 == 4294967295 {
if rhs_533 == -1 {
if rhs_522 == 2 {
match pos.func.dfg.value_def(arg_314[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_326 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_326[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_327 = arg;
let rhs_542 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_327) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_328 = arg;
let rhs_543 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_328) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_329 = arg;
let rhs_544 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_329) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_330 = arg;
let rhs_545 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_330) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_331 = arg;
let rhs_546 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_546 == 7 {
if rhs_545 == 3 {
if rhs_544 == 4294967295 {
if rhs_543 == -1 {
if rhs_542 == 1 {
match pos.func.dfg.value_def(arg_326[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_332 = arg;
let rhs_552 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_332) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_333 = arg;
let rhs_553 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_333) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_334 = arg;
let rhs_554 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_334) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_335 = arg;
let rhs_555 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_555 == 7 {
if rhs_554 == 3 {
if rhs_553 == 4294967295 {
if rhs_552 == -1 {
if rhs_481 == 8 {
match pos.func.dfg.value_def(arg_288[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_336 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_336[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_337 = arg;
let rhs_561 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_337) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_338 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_338[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_339 = arg;
let rhs_562 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_339) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_340 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_340[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_341 = arg;
let rhs_563 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_341) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_342 = arg;
let rhs_564 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_342) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_343 = arg;
let rhs_565 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_343) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_344 = arg;
let rhs_566 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_344) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_345 = arg;
let rhs_567 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_567 == 7 {
if rhs_566 == 3 {
if rhs_565 == 4294967295 {
if rhs_564 == -1 {
if rhs_563 == 1 {
match pos.func.dfg.value_def(arg_340[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_346 = arg;
let rhs_573 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_346) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_347 = arg;
let rhs_574 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_347) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_348 = arg;
let rhs_575 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_348) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_349 = arg;
let rhs_576 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_576 == 7 {
if rhs_575 == 3 {
if rhs_574 == 4294967295 {
if rhs_573 == -1 {
if rhs_562 == 2 {
match pos.func.dfg.value_def(arg_338[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_350 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_350[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_351 = arg;
let rhs_582 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_351) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_352 = arg;
let rhs_583 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_352) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_353 = arg;
let rhs_584 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_353) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_354 = arg;
let rhs_585 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_354) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_355 = arg;
let rhs_586 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_586 == 7 {
if rhs_585 == 3 {
if rhs_584 == 4294967295 {
if rhs_583 == -1 {
if rhs_582 == 1 {
match pos.func.dfg.value_def(arg_350[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_356 = arg;
let rhs_592 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_356) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_357 = arg;
let rhs_593 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_357) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_358 = arg;
let rhs_594 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_358) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_359 = arg;
let rhs_595 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_595 == 7 {
if rhs_594 == 3 {
if rhs_593 == 4294967295 {
if rhs_592 == -1 {
if rhs_561 == 4 {
match pos.func.dfg.value_def(arg_336[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_360 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_360[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_361 = arg;
let rhs_601 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_361) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_362 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_362[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_363 = arg;
let rhs_602 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_363) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_364 = arg;
let rhs_603 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_364) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_365 = arg;
let rhs_604 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_365) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_366 = arg;
let rhs_605 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_366) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_367 = arg;
let rhs_606 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_606 == 7 {
if rhs_605 == 3 {
if rhs_604 == 4294967295 {
if rhs_603 == -1 {
if rhs_602 == 1 {
match pos.func.dfg.value_def(arg_362[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_368 = arg;
let rhs_612 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_368) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_369 = arg;
let rhs_613 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_369) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_370 = arg;
let rhs_614 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_370) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_371 = arg;
let rhs_615 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_615 == 7 {
if rhs_614 == 3 {
if rhs_613 == 4294967295 {
if rhs_612 == -1 {
if rhs_601 == 2 {
match pos.func.dfg.value_def(arg_360[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_372 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_372[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_373 = arg;
let rhs_621 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_373) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_374 = arg;
let rhs_622 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_374) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_375 = arg;
let rhs_623 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_375) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_376 = arg;
let rhs_624 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_376) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_377 = arg;
let rhs_625 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_625 == 7 {
if rhs_624 == 3 {
if rhs_623 == 4294967295 {
if rhs_622 == -1 {
if rhs_621 == 1 {
match pos.func.dfg.value_def(arg_372[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_378 = arg;
let rhs_631 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_378) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_379 = arg;
let rhs_632 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_379) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_380 = arg;
let rhs_633 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_380) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_381 = arg;
let rhs_634 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_634 == 7 {
if rhs_633 == 3 {
if rhs_632 == 4294967295 {
if rhs_631 == -1 {
if arg_191 == arg_93 && arg_191 == arg_37 && arg_191 == arg_251 && arg_191 == arg_113 && arg_191 == arg_75 && arg_191 == arg_371 && arg_191 == arg_145 && arg_191 == arg_303 && arg_191 == arg_273 && arg_191 == arg_87 && arg_191 == arg_181 && arg_191 == arg_155 && arg_191 == arg_215 && arg_191 == arg_135 && arg_191 == arg_237 && arg_191 == arg_15 && arg_191 == arg_381 && arg_191 == arg_131 && arg_191 == arg_205 && arg_191 == arg_277 && arg_191 == arg_321 && arg_191 == arg_355 && arg_191 == arg_377 && arg_191 == arg_141 && arg_191 == arg_109 && arg_191 == arg_187 && arg_191 == arg_83 && arg_191 == arg_19 && arg_191 == arg_51 && arg_191 == arg_71 && arg_191 == arg_25 && arg_191 == arg_219 && arg_191 == arg_159 && arg_191 == arg_169 && arg_191 == arg_47 && arg_191 == arg_119 && arg_191 == arg_123 && arg_191 == arg_231 && arg_191 == arg_261 && arg_191 == arg_345 && arg_191 == arg_359 && arg_191 == arg_227 && arg_191 == arg_241 && arg_191 == arg_287 && arg_191 == arg_313 && arg_191 == arg_331 && arg_191 == arg_283 && arg_191 == arg_29 && arg_191 == arg_165 && arg_191 == arg_97 && arg_191 == arg_265 && arg_191 == arg_41 && arg_191 == arg_325 && arg_191 == arg_335 && arg_191 == arg_349 && arg_191 == arg_309 && arg_191 == arg_299 && arg_191 == arg_61 && arg_191 == arg_65 && arg_191 == arg_177 && arg_191 == arg_367 && arg_191 == arg_255 && arg_191 == arg_209 && arg_93 == arg_37 && arg_93 == arg_251 && arg_93 == arg_113 && arg_93 == arg_75 && arg_93 == arg_371 && arg_93 == arg_145 && arg_93 == arg_303 && arg_93 == arg_273 && arg_93 == arg_87 && arg_93 == arg_181 && arg_93 == arg_155 && arg_93 == arg_215 && arg_93 == arg_135 && arg_93 == arg_237 && arg_93 == arg_15 && arg_93 == arg_381 && arg_93 == arg_131 && arg_93 == arg_205 && arg_93 == arg_277 && arg_93 == arg_321 && arg_93 == arg_355 && arg_93 == arg_377 && arg_93 == arg_141 && arg_93 == arg_109 && arg_93 == arg_187 && arg_93 == arg_83 && arg_93 == arg_19 && arg_93 == arg_51 && arg_93 == arg_71 && arg_93 == arg_25 && arg_93 == arg_219 && arg_93 == arg_159 && arg_93 == arg_169 && arg_93 == arg_47 && arg_93 == arg_119 && arg_93 == arg_123 && arg_93 == arg_231 && arg_93 == arg_261 && arg_93 == arg_345 && arg_93 == arg_359 && arg_93 == arg_227 && arg_93 == arg_241 && arg_93 == arg_287 && arg_93 == arg_313 && arg_93 == arg_331 && arg_93 == arg_283 && arg_93 == arg_29 && arg_93 == arg_165 && arg_93 == arg_97 && arg_93 == arg_265 && arg_93 == arg_41 && arg_93 == arg_325 && arg_93 == arg_335 && arg_93 == arg_349 && arg_93 == arg_309 && arg_93 == arg_299 && arg_93 == arg_61 && arg_93 == arg_65 && arg_93 == arg_177 && arg_93 == arg_367 && arg_93 == arg_255 && arg_93 == arg_209 && arg_37 == arg_251 && arg_37 == arg_113 && arg_37 == arg_75 && arg_37 == arg_371 && arg_37 == arg_145 && arg_37 == arg_303 && arg_37 == arg_273 && arg_37 == arg_87 && arg_37 == arg_181 && arg_37 == arg_155 && arg_37 == arg_215 && arg_37 == arg_135 && arg_37 == arg_237 && arg_37 == arg_15 && arg_37 == arg_381 && arg_37 == arg_131 && arg_37 == arg_205 && arg_37 == arg_277 && arg_37 == arg_321 && arg_37 == arg_355 && arg_37 == arg_377 && arg_37 == arg_141 && arg_37 == arg_109 && arg_37 == arg_187 && arg_37 == arg_83 && arg_37 == arg_19 && arg_37 == arg_51 && arg_37 == arg_71 && arg_37 == arg_25 && arg_37 == arg_219 && arg_37 == arg_159 && arg_37 == arg_169 && arg_37 == arg_47 && arg_37 == arg_119 && arg_37 == arg_123 && arg_37 == arg_231 && arg_37 == arg_261 && arg_37 == arg_345 && arg_37 == arg_359 && arg_37 == arg_227 && arg_37 == arg_241 && arg_37 == arg_287 && arg_37 == arg_313 && arg_37 == arg_331 && arg_37 == arg_283 && arg_37 == arg_29 && arg_37 == arg_165 && arg_37 == arg_97 && arg_37 == arg_265 && arg_37 == arg_41 && arg_37 == arg_325 && arg_37 == arg_335 && arg_37 == arg_349 && arg_37 == arg_309 && arg_37 == arg_299 && arg_37 == arg_61 && arg_37 == arg_65 && arg_37 == arg_177 && arg_37 == arg_367 && arg_37 == arg_255 && arg_37 == arg_209 && arg_251 == arg_113 && arg_251 == arg_75 && arg_251 == arg_371 && arg_251 == arg_145 && arg_251 == arg_303 && arg_251 == arg_273 && arg_251 == arg_87 && arg_251 == arg_181 && arg_251 == arg_155 && arg_251 == arg_215 && arg_251 == arg_135 && arg_251 == arg_237 && arg_251 == arg_15 && arg_251 == arg_381 && arg_251 == arg_131 && arg_251 == arg_205 && arg_251 == arg_277 && arg_251 == arg_321 && arg_251 == arg_355 && arg_251 == arg_377 && arg_251 == arg_141 && arg_251 == arg_109 && arg_251 == arg_187 && arg_251 == arg_83 && arg_251 == arg_19 && arg_251 == arg_51 && arg_251 == arg_71 && arg_251 == arg_25 && arg_251 == arg_219 && arg_251 == arg_159 && arg_251 == arg_169 && arg_251 == arg_47 && arg_251 == arg_119 && arg_251 == arg_123 && arg_251 == arg_231 && arg_251 == arg_261 && arg_251 == arg_345 && arg_251 == arg_359 && arg_251 == arg_227 && arg_251 == arg_241 && arg_251 == arg_287 && arg_251 == arg_313 && arg_251 == arg_331 && arg_251 == arg_283 && arg_251 == arg_29 && arg_251 == arg_165 && arg_251 == arg_97 && arg_251 == arg_265 && arg_251 == arg_41 && arg_251 == arg_325 && arg_251 == arg_335 && arg_251 == arg_349 && arg_251 == arg_309 && arg_251 == arg_299 && arg_251 == arg_61 && arg_251 == arg_65 && arg_251 == arg_177 && arg_251 == arg_367 && arg_251 == arg_255 && arg_251 == arg_209 && arg_113 == arg_75 && arg_113 == arg_371 && arg_113 == arg_145 && arg_113 == arg_303 && arg_113 == arg_273 && arg_113 == arg_87 && arg_113 == arg_181 && arg_113 == arg_155 && arg_113 == arg_215 && arg_113 == arg_135 && arg_113 == arg_237 && arg_113 == arg_15 && arg_113 == arg_381 && arg_113 == arg_131 && arg_113 == arg_205 && arg_113 == arg_277 && arg_113 == arg_321 && arg_113 == arg_355 && arg_113 == arg_377 && arg_113 == arg_141 && arg_113 == arg_109 && arg_113 == arg_187 && arg_113 == arg_83 && arg_113 == arg_19 && arg_113 == arg_51 && arg_113 == arg_71 && arg_113 == arg_25 && arg_113 == arg_219 && arg_113 == arg_159 && arg_113 == arg_169 && arg_113 == arg_47 && arg_113 == arg_119 && arg_113 == arg_123 && arg_113 == arg_231 && arg_113 == arg_261 && arg_113 == arg_345 && arg_113 == arg_359 && arg_113 == arg_227 && arg_113 == arg_241 && arg_113 == arg_287 && arg_113 == arg_313 && arg_113 == arg_331 && arg_113 == arg_283 && arg_113 == arg_29 && arg_113 == arg_165 && arg_113 == arg_97 && arg_113 == arg_265 && arg_113 == arg_41 && arg_113 == arg_325 && arg_113 == arg_335 && arg_113 == arg_349 && arg_113 == arg_309 && arg_113 == arg_299 && arg_113 == arg_61 && arg_113 == arg_65 && arg_113 == arg_177 && arg_113 == arg_367 && arg_113 == arg_255 && arg_113 == arg_209 && arg_75 == arg_371 && arg_75 == arg_145 && arg_75 == arg_303 && arg_75 == arg_273 && arg_75 == arg_87 && arg_75 == arg_181 && arg_75 == arg_155 && arg_75 == arg_215 && arg_75 == arg_135 && arg_75 == arg_237 && arg_75 == arg_15 && arg_75 == arg_381 && arg_75 == arg_131 && arg_75 == arg_205 && arg_75 == arg_277 && arg_75 == arg_321 && arg_75 == arg_355 && arg_75 == arg_377 && arg_75 == arg_141 && arg_75 == arg_109 && arg_75 == arg_187 && arg_75 == arg_83 && arg_75 == arg_19 && arg_75 == arg_51 && arg_75 == arg_71 && arg_75 == arg_25 && arg_75 == arg_219 && arg_75 == arg_159 && arg_75 == arg_169 && arg_75 == arg_47 && arg_75 == arg_119 && arg_75 == arg_123 && arg_75 == arg_231 && arg_75 == arg_261 && arg_75 == arg_345 && arg_75 == arg_359 && arg_75 == arg_227 && arg_75 == arg_241 && arg_75 == arg_287 && arg_75 == arg_313 && arg_75 == arg_331 && arg_75 == arg_283 && arg_75 == arg_29 && arg_75 == arg_165 && arg_75 == arg_97 && arg_75 == arg_265 && arg_75 == arg_41 && arg_75 == arg_325 && arg_75 == arg_335 && arg_75 == arg_349 && arg_75 == arg_309 && arg_75 == arg_299 && arg_75 == arg_61 && arg_75 == arg_65 && arg_75 == arg_177 && arg_75 == arg_367 && arg_75 == arg_255 && arg_75 == arg_209 && arg_371 == arg_145 && arg_371 == arg_303 && arg_371 == arg_273 && arg_371 == arg_87 && arg_371 == arg_181 && arg_371 == arg_155 && arg_371 == arg_215 && arg_371 == arg_135 && arg_371 == arg_237 && arg_371 == arg_15 && arg_371 == arg_381 && arg_371 == arg_131 && arg_371 == arg_205 && arg_371 == arg_277 && arg_371 == arg_321 && arg_371 == arg_355 && arg_371 == arg_377 && arg_371 == arg_141 && arg_371 == arg_109 && arg_371 == arg_187 && arg_371 == arg_83 && arg_371 == arg_19 && arg_371 == arg_51 && arg_371 == arg_71 && arg_371 == arg_25 && arg_371 == arg_219 && arg_371 == arg_159 && arg_371 == arg_169 && arg_371 == arg_47 && arg_371 == arg_119 && arg_371 == arg_123 && arg_371 == arg_231 && arg_371 == arg_261 && arg_371 == arg_345 && arg_371 == arg_359 && arg_371 == arg_227 && arg_371 == arg_241 && arg_371 == arg_287 && arg_371 == arg_313 && arg_371 == arg_331 && arg_371 == arg_283 && arg_371 == arg_29 && arg_371 == arg_165 && arg_371 == arg_97 && arg_371 == arg_265 && arg_371 == arg_41 && arg_371 == arg_325 && arg_371 == arg_335 && arg_371 == arg_349 && arg_371 == arg_309 && arg_371 == arg_299 && arg_371 == arg_61 && arg_371 == arg_65 && arg_371 == arg_177 && arg_371 == arg_367 && arg_371 == arg_255 && arg_371 == arg_209 && arg_145 == arg_303 && arg_145 == arg_273 && arg_145 == arg_87 && arg_145 == arg_181 && arg_145 == arg_155 && arg_145 == arg_215 && arg_145 == arg_135 && arg_145 == arg_237 && arg_145 == arg_15 && arg_145 == arg_381 && arg_145 == arg_131 && arg_145 == arg_205 && arg_145 == arg_277 && arg_145 == arg_321 && arg_145 == arg_355 && arg_145 == arg_377 && arg_145 == arg_141 && arg_145 == arg_109 && arg_145 == arg_187 && arg_145 == arg_83 && arg_145 == arg_19 && arg_145 == arg_51 && arg_145 == arg_71 && arg_145 == arg_25 && arg_145 == arg_219 && arg_145 == arg_159 && arg_145 == arg_169 && arg_145 == arg_47 && arg_145 == arg_119 && arg_145 == arg_123 && arg_145 == arg_231 && arg_145 == arg_261 && arg_145 == arg_345 && arg_145 == arg_359 && arg_145 == arg_227 && arg_145 == arg_241 && arg_145 == arg_287 && arg_145 == arg_313 && arg_145 == arg_331 && arg_145 == arg_283 && arg_145 == arg_29 && arg_145 == arg_165 && arg_145 == arg_97 && arg_145 == arg_265 && arg_145 == arg_41 && arg_145 == arg_325 && arg_145 == arg_335 && arg_145 == arg_349 && arg_145 == arg_309 && arg_145 == arg_299 && arg_145 == arg_61 && arg_145 == arg_65 && arg_145 == arg_177 && arg_145 == arg_367 && arg_145 == arg_255 && arg_145 == arg_209 && arg_303 == arg_273 && arg_303 == arg_87 && arg_303 == arg_181 && arg_303 == arg_155 && arg_303 == arg_215 && arg_303 == arg_135 && arg_303 == arg_237 && arg_303 == arg_15 && arg_303 == arg_381 && arg_303 == arg_131 && arg_303 == arg_205 && arg_303 == arg_277 && arg_303 == arg_321 && arg_303 == arg_355 && arg_303 == arg_377 && arg_303 == arg_141 && arg_303 == arg_109 && arg_303 == arg_187 && arg_303 == arg_83 && arg_303 == arg_19 && arg_303 == arg_51 && arg_303 == arg_71 && arg_303 == arg_25 && arg_303 == arg_219 && arg_303 == arg_159 && arg_303 == arg_169 && arg_303 == arg_47 && arg_303 == arg_119 && arg_303 == arg_123 && arg_303 == arg_231 && arg_303 == arg_261 && arg_303 == arg_345 && arg_303 == arg_359 && arg_303 == arg_227 && arg_303 == arg_241 && arg_303 == arg_287 && arg_303 == arg_313 && arg_303 == arg_331 && arg_303 == arg_283 && arg_303 == arg_29 && arg_303 == arg_165 && arg_303 == arg_97 && arg_303 == arg_265 && arg_303 == arg_41 && arg_303 == arg_325 && arg_303 == arg_335 && arg_303 == arg_349 && arg_303 == arg_309 && arg_303 == arg_299 && arg_303 == arg_61 && arg_303 == arg_65 && arg_303 == arg_177 && arg_303 == arg_367 && arg_303 == arg_255 && arg_303 == arg_209 && arg_273 == arg_87 && arg_273 == arg_181 && arg_273 == arg_155 && arg_273 == arg_215 && arg_273 == arg_135 && arg_273 == arg_237 && arg_273 == arg_15 && arg_273 == arg_381 && arg_273 == arg_131 && arg_273 == arg_205 && arg_273 == arg_277 && arg_273 == arg_321 && arg_273 == arg_355 && arg_273 == arg_377 && arg_273 == arg_141 && arg_273 == arg_109 && arg_273 == arg_187 && arg_273 == arg_83 && arg_273 == arg_19 && arg_273 == arg_51 && arg_273 == arg_71 && arg_273 == arg_25 && arg_273 == arg_219 && arg_273 == arg_159 && arg_273 == arg_169 && arg_273 == arg_47 && arg_273 == arg_119 && arg_273 == arg_123 && arg_273 == arg_231 && arg_273 == arg_261 && arg_273 == arg_345 && arg_273 == arg_359 && arg_273 == arg_227 && arg_273 == arg_241 && arg_273 == arg_287 && arg_273 == arg_313 && arg_273 == arg_331 && arg_273 == arg_283 && arg_273 == arg_29 && arg_273 == arg_165 && arg_273 == arg_97 && arg_273 == arg_265 && arg_273 == arg_41 && arg_273 == arg_325 && arg_273 == arg_335 && arg_273 == arg_349 && arg_273 == arg_309 && arg_273 == arg_299 && arg_273 == arg_61 && arg_273 == arg_65 && arg_273 == arg_177 && arg_273 == arg_367 && arg_273 == arg_255 && arg_273 == arg_209 && arg_87 == arg_181 && arg_87 == arg_155 && arg_87 == arg_215 && arg_87 == arg_135 && arg_87 == arg_237 && arg_87 == arg_15 && arg_87 == arg_381 && arg_87 == arg_131 && arg_87 == arg_205 && arg_87 == arg_277 && arg_87 == arg_321 && arg_87 == arg_355 && arg_87 == arg_377 && arg_87 == arg_141 && arg_87 == arg_109 && arg_87 == arg_187 && arg_87 == arg_83 && arg_87 == arg_19 && arg_87 == arg_51 && arg_87 == arg_71 && arg_87 == arg_25 && arg_87 == arg_219 && arg_87 == arg_159 && arg_87 == arg_169 && arg_87 == arg_47 && arg_87 == arg_119 && arg_87 == arg_123 && arg_87 == arg_231 && arg_87 == arg_261 && arg_87 == arg_345 && arg_87 == arg_359 && arg_87 == arg_227 && arg_87 == arg_241 && arg_87 == arg_287 && arg_87 == arg_313 && arg_87 == arg_331 && arg_87 == arg_283 && arg_87 == arg_29 && arg_87 == arg_165 && arg_87 == arg_97 && arg_87 == arg_265 && arg_87 == arg_41 && arg_87 == arg_325 && arg_87 == arg_335 && arg_87 == arg_349 && arg_87 == arg_309 && arg_87 == arg_299 && arg_87 == arg_61 && arg_87 == arg_65 && arg_87 == arg_177 && arg_87 == arg_367 && arg_87 == arg_255 && arg_87 == arg_209 && arg_181 == arg_155 && arg_181 == arg_215 && arg_181 == arg_135 && arg_181 == arg_237 && arg_181 == arg_15 && arg_181 == arg_381 && arg_181 == arg_131 && arg_181 == arg_205 && arg_181 == arg_277 && arg_181 == arg_321 && arg_181 == arg_355 && arg_181 == arg_377 && arg_181 == arg_141 && arg_181 == arg_109 && arg_181 == arg_187 && arg_181 == arg_83 && arg_181 == arg_19 && arg_181 == arg_51 && arg_181 == arg_71 && arg_181 == arg_25 && arg_181 == arg_219 && arg_181 == arg_159 && arg_181 == arg_169 && arg_181 == arg_47 && arg_181 == arg_119 && arg_181 == arg_123 && arg_181 == arg_231 && arg_181 == arg_261 && arg_181 == arg_345 && arg_181 == arg_359 && arg_181 == arg_227 && arg_181 == arg_241 && arg_181 == arg_287 && arg_181 == arg_313 && arg_181 == arg_331 && arg_181 == arg_283 && arg_181 == arg_29 && arg_181 == arg_165 && arg_181 == arg_97 && arg_181 == arg_265 && arg_181 == arg_41 && arg_181 == arg_325 && arg_181 == arg_335 && arg_181 == arg_349 && arg_181 == arg_309 && arg_181 == arg_299 && arg_181 == arg_61 && arg_181 == arg_65 && arg_181 == arg_177 && arg_181 == arg_367 && arg_181 == arg_255 && arg_181 == arg_209 && arg_155 == arg_215 && arg_155 == arg_135 && arg_155 == arg_237 && arg_155 == arg_15 && arg_155 == arg_381 && arg_155 == arg_131 && arg_155 == arg_205 && arg_155 == arg_277 && arg_155 == arg_321 && arg_155 == arg_355 && arg_155 == arg_377 && arg_155 == arg_141 && arg_155 == arg_109 && arg_155 == arg_187 && arg_155 == arg_83 && arg_155 == arg_19 && arg_155 == arg_51 && arg_155 == arg_71 && arg_155 == arg_25 && arg_155 == arg_219 && arg_155 == arg_159 && arg_155 == arg_169 && arg_155 == arg_47 && arg_155 == arg_119 && arg_155 == arg_123 && arg_155 == arg_231 && arg_155 == arg_261 && arg_155 == arg_345 && arg_155 == arg_359 && arg_155 == arg_227 && arg_155 == arg_241 && arg_155 == arg_287 && arg_155 == arg_313 && arg_155 == arg_331 && arg_155 == arg_283 && arg_155 == arg_29 && arg_155 == arg_165 && arg_155 == arg_97 && arg_155 == arg_265 && arg_155 == arg_41 && arg_155 == arg_325 && arg_155 == arg_335 && arg_155 == arg_349 && arg_155 == arg_309 && arg_155 == arg_299 && arg_155 == arg_61 && arg_155 == arg_65 && arg_155 == arg_177 && arg_155 == arg_367 && arg_155 == arg_255 && arg_155 == arg_209 && arg_215 == arg_135 && arg_215 == arg_237 && arg_215 == arg_15 && arg_215 == arg_381 && arg_215 == arg_131 && arg_215 == arg_205 && arg_215 == arg_277 && arg_215 == arg_321 && arg_215 == arg_355 && arg_215 == arg_377 && arg_215 == arg_141 && arg_215 == arg_109 && arg_215 == arg_187 && arg_215 == arg_83 && arg_215 == arg_19 && arg_215 == arg_51 && arg_215 == arg_71 && arg_215 == arg_25 && arg_215 == arg_219 && arg_215 == arg_159 && arg_215 == arg_169 && arg_215 == arg_47 && arg_215 == arg_119 && arg_215 == arg_123 && arg_215 == arg_231 && arg_215 == arg_261 && arg_215 == arg_345 && arg_215 == arg_359 && arg_215 == arg_227 && arg_215 == arg_241 && arg_215 == arg_287 && arg_215 == arg_313 && arg_215 == arg_331 && arg_215 == arg_283 && arg_215 == arg_29 && arg_215 == arg_165 && arg_215 == arg_97 && arg_215 == arg_265 && arg_215 == arg_41 && arg_215 == arg_325 && arg_215 == arg_335 && arg_215 == arg_349 && arg_215 == arg_309 && arg_215 == arg_299 && arg_215 == arg_61 && arg_215 == arg_65 && arg_215 == arg_177 && arg_215 == arg_367 && arg_215 == arg_255 && arg_215 == arg_209 && arg_135 == arg_237 && arg_135 == arg_15 && arg_135 == arg_381 && arg_135 == arg_131 && arg_135 == arg_205 && arg_135 == arg_277 && arg_135 == arg_321 && arg_135 == arg_355 && arg_135 == arg_377 && arg_135 == arg_141 && arg_135 == arg_109 && arg_135 == arg_187 && arg_135 == arg_83 && arg_135 == arg_19 && arg_135 == arg_51 && arg_135 == arg_71 && arg_135 == arg_25 && arg_135 == arg_219 && arg_135 == arg_159 && arg_135 == arg_169 && arg_135 == arg_47 && arg_135 == arg_119 && arg_135 == arg_123 && arg_135 == arg_231 && arg_135 == arg_261 && arg_135 == arg_345 && arg_135 == arg_359 && arg_135 == arg_227 && arg_135 == arg_241 && arg_135 == arg_287 && arg_135 == arg_313 && arg_135 == arg_331 && arg_135 == arg_283 && arg_135 == arg_29 && arg_135 == arg_165 && arg_135 == arg_97 && arg_135 == arg_265 && arg_135 == arg_41 && arg_135 == arg_325 && arg_135 == arg_335 && arg_135 == arg_349 && arg_135 == arg_309 && arg_135 == arg_299 && arg_135 == arg_61 && arg_135 == arg_65 && arg_135 == arg_177 && arg_135 == arg_367 && arg_135 == arg_255 && arg_135 == arg_209 && arg_237 == arg_15 && arg_237 == arg_381 && arg_237 == arg_131 && arg_237 == arg_205 && arg_237 == arg_277 && arg_237 == arg_321 && arg_237 == arg_355 && arg_237 == arg_377 && arg_237 == arg_141 && arg_237 == arg_109 && arg_237 == arg_187 && arg_237 == arg_83 && arg_237 == arg_19 && arg_237 == arg_51 && arg_237 == arg_71 && arg_237 == arg_25 && arg_237 == arg_219 && arg_237 == arg_159 && arg_237 == arg_169 && arg_237 == arg_47 && arg_237 == arg_119 && arg_237 == arg_123 && arg_237 == arg_231 && arg_237 == arg_261 && arg_237 == arg_345 && arg_237 == arg_359 && arg_237 == arg_227 && arg_237 == arg_241 && arg_237 == arg_287 && arg_237 == arg_313 && arg_237 == arg_331 && arg_237 == arg_283 && arg_237 == arg_29 && arg_237 == arg_165 && arg_237 == arg_97 && arg_237 == arg_265 && arg_237 == arg_41 && arg_237 == arg_325 && arg_237 == arg_335 && arg_237 == arg_349 && arg_237 == arg_309 && arg_237 == arg_299 && arg_237 == arg_61 && arg_237 == arg_65 && arg_237 == arg_177 && arg_237 == arg_367 && arg_237 == arg_255 && arg_237 == arg_209 && arg_15 == arg_381 && arg_15 == arg_131 && arg_15 == arg_205 && arg_15 == arg_277 && arg_15 == arg_321 && arg_15 == arg_355 && arg_15 == arg_377 && arg_15 == arg_141 && arg_15 == arg_109 && arg_15 == arg_187 && arg_15 == arg_83 && arg_15 == arg_19 && arg_15 == arg_51 && arg_15 == arg_71 && arg_15 == arg_25 && arg_15 == arg_219 && arg_15 == arg_159 && arg_15 == arg_169 && arg_15 == arg_47 && arg_15 == arg_119 && arg_15 == arg_123 && arg_15 == arg_231 && arg_15 == arg_261 && arg_15 == arg_345 && arg_15 == arg_359 && arg_15 == arg_227 && arg_15 == arg_241 && arg_15 == arg_287 && arg_15 == arg_313 && arg_15 == arg_331 && arg_15 == arg_283 && arg_15 == arg_29 && arg_15 == arg_165 && arg_15 == arg_97 && arg_15 == arg_265 && arg_15 == arg_41 && arg_15 == arg_325 && arg_15 == arg_335 && arg_15 == arg_349 && arg_15 == arg_309 && arg_15 == arg_299 && arg_15 == arg_61 && arg_15 == arg_65 && arg_15 == arg_177 && arg_15 == arg_367 && arg_15 == arg_255 && arg_15 == arg_209 && arg_381 == arg_131 && arg_381 == arg_205 && arg_381 == arg_277 && arg_381 == arg_321 && arg_381 == arg_355 && arg_381 == arg_377 && arg_381 == arg_141 && arg_381 == arg_109 && arg_381 == arg_187 && arg_381 == arg_83 && arg_381 == arg_19 && arg_381 == arg_51 && arg_381 == arg_71 && arg_381 == arg_25 && arg_381 == arg_219 && arg_381 == arg_159 && arg_381 == arg_169 && arg_381 == arg_47 && arg_381 == arg_119 && arg_381 == arg_123 && arg_381 == arg_231 && arg_381 == arg_261 && arg_381 == arg_345 && arg_381 == arg_359 && arg_381 == arg_227 && arg_381 == arg_241 && arg_381 == arg_287 && arg_381 == arg_313 && arg_381 == arg_331 && arg_381 == arg_283 && arg_381 == arg_29 && arg_381 == arg_165 && arg_381 == arg_97 && arg_381 == arg_265 && arg_381 == arg_41 && arg_381 == arg_325 && arg_381 == arg_335 && arg_381 == arg_349 && arg_381 == arg_309 && arg_381 == arg_299 && arg_381 == arg_61 && arg_381 == arg_65 && arg_381 == arg_177 && arg_381 == arg_367 && arg_381 == arg_255 && arg_381 == arg_209 && arg_131 == arg_205 && arg_131 == arg_277 && arg_131 == arg_321 && arg_131 == arg_355 && arg_131 == arg_377 && arg_131 == arg_141 && arg_131 == arg_109 && arg_131 == arg_187 && arg_131 == arg_83 && arg_131 == arg_19 && arg_131 == arg_51 && arg_131 == arg_71 && arg_131 == arg_25 && arg_131 == arg_219 && arg_131 == arg_159 && arg_131 == arg_169 && arg_131 == arg_47 && arg_131 == arg_119 && arg_131 == arg_123 && arg_131 == arg_231 && arg_131 == arg_261 && arg_131 == arg_345 && arg_131 == arg_359 && arg_131 == arg_227 && arg_131 == arg_241 && arg_131 == arg_287 && arg_131 == arg_313 && arg_131 == arg_331 && arg_131 == arg_283 && arg_131 == arg_29 && arg_131 == arg_165 && arg_131 == arg_97 && arg_131 == arg_265 && arg_131 == arg_41 && arg_131 == arg_325 && arg_131 == arg_335 && arg_131 == arg_349 && arg_131 == arg_309 && arg_131 == arg_299 && arg_131 == arg_61 && arg_131 == arg_65 && arg_131 == arg_177 && arg_131 == arg_367 && arg_131 == arg_255 && arg_131 == arg_209 && arg_205 == arg_277 && arg_205 == arg_321 && arg_205 == arg_355 && arg_205 == arg_377 && arg_205 == arg_141 && arg_205 == arg_109 && arg_205 == arg_187 && arg_205 == arg_83 && arg_205 == arg_19 && arg_205 == arg_51 && arg_205 == arg_71 && arg_205 == arg_25 && arg_205 == arg_219 && arg_205 == arg_159 && arg_205 == arg_169 && arg_205 == arg_47 && arg_205 == arg_119 && arg_205 == arg_123 && arg_205 == arg_231 && arg_205 == arg_261 && arg_205 == arg_345 && arg_205 == arg_359 && arg_205 == arg_227 && arg_205 == arg_241 && arg_205 == arg_287 && arg_205 == arg_313 && arg_205 == arg_331 && arg_205 == arg_283 && arg_205 == arg_29 && arg_205 == arg_165 && arg_205 == arg_97 && arg_205 == arg_265 && arg_205 == arg_41 && arg_205 == arg_325 && arg_205 == arg_335 && arg_205 == arg_349 && arg_205 == arg_309 && arg_205 == arg_299 && arg_205 == arg_61 && arg_205 == arg_65 && arg_205 == arg_177 && arg_205 == arg_367 && arg_205 == arg_255 && arg_205 == arg_209 && arg_277 == arg_321 && arg_277 == arg_355 && arg_277 == arg_377 && arg_277 == arg_141 && arg_277 == arg_109 && arg_277 == arg_187 && arg_277 == arg_83 && arg_277 == arg_19 && arg_277 == arg_51 && arg_277 == arg_71 && arg_277 == arg_25 && arg_277 == arg_219 && arg_277 == arg_159 && arg_277 == arg_169 && arg_277 == arg_47 && arg_277 == arg_119 && arg_277 == arg_123 && arg_277 == arg_231 && arg_277 == arg_261 && arg_277 == arg_345 && arg_277 == arg_359 && arg_277 == arg_227 && arg_277 == arg_241 && arg_277 == arg_287 && arg_277 == arg_313 && arg_277 == arg_331 && arg_277 == arg_283 && arg_277 == arg_29 && arg_277 == arg_165 && arg_277 == arg_97 && arg_277 == arg_265 && arg_277 == arg_41 && arg_277 == arg_325 && arg_277 == arg_335 && arg_277 == arg_349 && arg_277 == arg_309 && arg_277 == arg_299 && arg_277 == arg_61 && arg_277 == arg_65 && arg_277 == arg_177 && arg_277 == arg_367 && arg_277 == arg_255 && arg_277 == arg_209 && arg_321 == arg_355 && arg_321 == arg_377 && arg_321 == arg_141 && arg_321 == arg_109 && arg_321 == arg_187 && arg_321 == arg_83 && arg_321 == arg_19 && arg_321 == arg_51 && arg_321 == arg_71 && arg_321 == arg_25 && arg_321 == arg_219 && arg_321 == arg_159 && arg_321 == arg_169 && arg_321 == arg_47 && arg_321 == arg_119 && arg_321 == arg_123 && arg_321 == arg_231 && arg_321 == arg_261 && arg_321 == arg_345 && arg_321 == arg_359 && arg_321 == arg_227 && arg_321 == arg_241 && arg_321 == arg_287 && arg_321 == arg_313 && arg_321 == arg_331 && arg_321 == arg_283 && arg_321 == arg_29 && arg_321 == arg_165 && arg_321 == arg_97 && arg_321 == arg_265 && arg_321 == arg_41 && arg_321 == arg_325 && arg_321 == arg_335 && arg_321 == arg_349 && arg_321 == arg_309 && arg_321 == arg_299 && arg_321 == arg_61 && arg_321 == arg_65 && arg_321 == arg_177 && arg_321 == arg_367 && arg_321 == arg_255 && arg_321 == arg_209 && arg_355 == arg_377 && arg_355 == arg_141 && arg_355 == arg_109 && arg_355 == arg_187 && arg_355 == arg_83 && arg_355 == arg_19 && arg_355 == arg_51 && arg_355 == arg_71 && arg_355 == arg_25 && arg_355 == arg_219 && arg_355 == arg_159 && arg_355 == arg_169 && arg_355 == arg_47 && arg_355 == arg_119 && arg_355 == arg_123 && arg_355 == arg_231 && arg_355 == arg_261 && arg_355 == arg_345 && arg_355 == arg_359 && arg_355 == arg_227 && arg_355 == arg_241 && arg_355 == arg_287 && arg_355 == arg_313 && arg_355 == arg_331 && arg_355 == arg_283 && arg_355 == arg_29 && arg_355 == arg_165 && arg_355 == arg_97 && arg_355 == arg_265 && arg_355 == arg_41 && arg_355 == arg_325 && arg_355 == arg_335 && arg_355 == arg_349 && arg_355 == arg_309 && arg_355 == arg_299 && arg_355 == arg_61 && arg_355 == arg_65 && arg_355 == arg_177 && arg_355 == arg_367 && arg_355 == arg_255 && arg_355 == arg_209 && arg_377 == arg_141 && arg_377 == arg_109 && arg_377 == arg_187 && arg_377 == arg_83 && arg_377 == arg_19 && arg_377 == arg_51 && arg_377 == arg_71 && arg_377 == arg_25 && arg_377 == arg_219 && arg_377 == arg_159 && arg_377 == arg_169 && arg_377 == arg_47 && arg_377 == arg_119 && arg_377 == arg_123 && arg_377 == arg_231 && arg_377 == arg_261 && arg_377 == arg_345 && arg_377 == arg_359 && arg_377 == arg_227 && arg_377 == arg_241 && arg_377 == arg_287 && arg_377 == arg_313 && arg_377 == arg_331 && arg_377 == arg_283 && arg_377 == arg_29 && arg_377 == arg_165 && arg_377 == arg_97 && arg_377 == arg_265 && arg_377 == arg_41 && arg_377 == arg_325 && arg_377 == arg_335 && arg_377 == arg_349 && arg_377 == arg_309 && arg_377 == arg_299 && arg_377 == arg_61 && arg_377 == arg_65 && arg_377 == arg_177 && arg_377 == arg_367 && arg_377 == arg_255 && arg_377 == arg_209 && arg_141 == arg_109 && arg_141 == arg_187 && arg_141 == arg_83 && arg_141 == arg_19 && arg_141 == arg_51 && arg_141 == arg_71 && arg_141 == arg_25 && arg_141 == arg_219 && arg_141 == arg_159 && arg_141 == arg_169 && arg_141 == arg_47 && arg_141 == arg_119 && arg_141 == arg_123 && arg_141 == arg_231 && arg_141 == arg_261 && arg_141 == arg_345 && arg_141 == arg_359 && arg_141 == arg_227 && arg_141 == arg_241 && arg_141 == arg_287 && arg_141 == arg_313 && arg_141 == arg_331 && arg_141 == arg_283 && arg_141 == arg_29 && arg_141 == arg_165 && arg_141 == arg_97 && arg_141 == arg_265 && arg_141 == arg_41 && arg_141 == arg_325 && arg_141 == arg_335 && arg_141 == arg_349 && arg_141 == arg_309 && arg_141 == arg_299 && arg_141 == arg_61 && arg_141 == arg_65 && arg_141 == arg_177 && arg_141 == arg_367 && arg_141 == arg_255 && arg_141 == arg_209 && arg_109 == arg_187 && arg_109 == arg_83 && arg_109 == arg_19 && arg_109 == arg_51 && arg_109 == arg_71 && arg_109 == arg_25 && arg_109 == arg_219 && arg_109 == arg_159 && arg_109 == arg_169 && arg_109 == arg_47 && arg_109 == arg_119 && arg_109 == arg_123 && arg_109 == arg_231 && arg_109 == arg_261 && arg_109 == arg_345 && arg_109 == arg_359 && arg_109 == arg_227 && arg_109 == arg_241 && arg_109 == arg_287 && arg_109 == arg_313 && arg_109 == arg_331 && arg_109 == arg_283 && arg_109 == arg_29 && arg_109 == arg_165 && arg_109 == arg_97 && arg_109 == arg_265 && arg_109 == arg_41 && arg_109 == arg_325 && arg_109 == arg_335 && arg_109 == arg_349 && arg_109 == arg_309 && arg_109 == arg_299 && arg_109 == arg_61 && arg_109 == arg_65 && arg_109 == arg_177 && arg_109 == arg_367 && arg_109 == arg_255 && arg_109 == arg_209 && arg_187 == arg_83 && arg_187 == arg_19 && arg_187 == arg_51 && arg_187 == arg_71 && arg_187 == arg_25 && arg_187 == arg_219 && arg_187 == arg_159 && arg_187 == arg_169 && arg_187 == arg_47 && arg_187 == arg_119 && arg_187 == arg_123 && arg_187 == arg_231 && arg_187 == arg_261 && arg_187 == arg_345 && arg_187 == arg_359 && arg_187 == arg_227 && arg_187 == arg_241 && arg_187 == arg_287 && arg_187 == arg_313 && arg_187 == arg_331 && arg_187 == arg_283 && arg_187 == arg_29 && arg_187 == arg_165 && arg_187 == arg_97 && arg_187 == arg_265 && arg_187 == arg_41 && arg_187 == arg_325 && arg_187 == arg_335 && arg_187 == arg_349 && arg_187 == arg_309 && arg_187 == arg_299 && arg_187 == arg_61 && arg_187 == arg_65 && arg_187 == arg_177 && arg_187 == arg_367 && arg_187 == arg_255 && arg_187 == arg_209 && arg_83 == arg_19 && arg_83 == arg_51 && arg_83 == arg_71 && arg_83 == arg_25 && arg_83 == arg_219 && arg_83 == arg_159 && arg_83 == arg_169 && arg_83 == arg_47 && arg_83 == arg_119 && arg_83 == arg_123 && arg_83 == arg_231 && arg_83 == arg_261 && arg_83 == arg_345 && arg_83 == arg_359 && arg_83 == arg_227 && arg_83 == arg_241 && arg_83 == arg_287 && arg_83 == arg_313 && arg_83 == arg_331 && arg_83 == arg_283 && arg_83 == arg_29 && arg_83 == arg_165 && arg_83 == arg_97 && arg_83 == arg_265 && arg_83 == arg_41 && arg_83 == arg_325 && arg_83 == arg_335 && arg_83 == arg_349 && arg_83 == arg_309 && arg_83 == arg_299 && arg_83 == arg_61 && arg_83 == arg_65 && arg_83 == arg_177 && arg_83 == arg_367 && arg_83 == arg_255 && arg_83 == arg_209 && arg_19 == arg_51 && arg_19 == arg_71 && arg_19 == arg_25 && arg_19 == arg_219 && arg_19 == arg_159 && arg_19 == arg_169 && arg_19 == arg_47 && arg_19 == arg_119 && arg_19 == arg_123 && arg_19 == arg_231 && arg_19 == arg_261 && arg_19 == arg_345 && arg_19 == arg_359 && arg_19 == arg_227 && arg_19 == arg_241 && arg_19 == arg_287 && arg_19 == arg_313 && arg_19 == arg_331 && arg_19 == arg_283 && arg_19 == arg_29 && arg_19 == arg_165 && arg_19 == arg_97 && arg_19 == arg_265 && arg_19 == arg_41 && arg_19 == arg_325 && arg_19 == arg_335 && arg_19 == arg_349 && arg_19 == arg_309 && arg_19 == arg_299 && arg_19 == arg_61 && arg_19 == arg_65 && arg_19 == arg_177 && arg_19 == arg_367 && arg_19 == arg_255 && arg_19 == arg_209 && arg_51 == arg_71 && arg_51 == arg_25 && arg_51 == arg_219 && arg_51 == arg_159 && arg_51 == arg_169 && arg_51 == arg_47 && arg_51 == arg_119 && arg_51 == arg_123 && arg_51 == arg_231 && arg_51 == arg_261 && arg_51 == arg_345 && arg_51 == arg_359 && arg_51 == arg_227 && arg_51 == arg_241 && arg_51 == arg_287 && arg_51 == arg_313 && arg_51 == arg_331 && arg_51 == arg_283 && arg_51 == arg_29 && arg_51 == arg_165 && arg_51 == arg_97 && arg_51 == arg_265 && arg_51 == arg_41 && arg_51 == arg_325 && arg_51 == arg_335 && arg_51 == arg_349 && arg_51 == arg_309 && arg_51 == arg_299 && arg_51 == arg_61 && arg_51 == arg_65 && arg_51 == arg_177 && arg_51 == arg_367 && arg_51 == arg_255 && arg_51 == arg_209 && arg_71 == arg_25 && arg_71 == arg_219 && arg_71 == arg_159 && arg_71 == arg_169 && arg_71 == arg_47 && arg_71 == arg_119 && arg_71 == arg_123 && arg_71 == arg_231 && arg_71 == arg_261 && arg_71 == arg_345 && arg_71 == arg_359 && arg_71 == arg_227 && arg_71 == arg_241 && arg_71 == arg_287 && arg_71 == arg_313 && arg_71 == arg_331 && arg_71 == arg_283 && arg_71 == arg_29 && arg_71 == arg_165 && arg_71 == arg_97 && arg_71 == arg_265 && arg_71 == arg_41 && arg_71 == arg_325 && arg_71 == arg_335 && arg_71 == arg_349 && arg_71 == arg_309 && arg_71 == arg_299 && arg_71 == arg_61 && arg_71 == arg_65 && arg_71 == arg_177 && arg_71 == arg_367 && arg_71 == arg_255 && arg_71 == arg_209 && arg_25 == arg_219 && arg_25 == arg_159 && arg_25 == arg_169 && arg_25 == arg_47 && arg_25 == arg_119 && arg_25 == arg_123 && arg_25 == arg_231 && arg_25 == arg_261 && arg_25 == arg_345 && arg_25 == arg_359 && arg_25 == arg_227 && arg_25 == arg_241 && arg_25 == arg_287 && arg_25 == arg_313 && arg_25 == arg_331 && arg_25 == arg_283 && arg_25 == arg_29 && arg_25 == arg_165 && arg_25 == arg_97 && arg_25 == arg_265 && arg_25 == arg_41 && arg_25 == arg_325 && arg_25 == arg_335 && arg_25 == arg_349 && arg_25 == arg_309 && arg_25 == arg_299 && arg_25 == arg_61 && arg_25 == arg_65 && arg_25 == arg_177 && arg_25 == arg_367 && arg_25 == arg_255 && arg_25 == arg_209 && arg_219 == arg_159 && arg_219 == arg_169 && arg_219 == arg_47 && arg_219 == arg_119 && arg_219 == arg_123 && arg_219 == arg_231 && arg_219 == arg_261 && arg_219 == arg_345 && arg_219 == arg_359 && arg_219 == arg_227 && arg_219 == arg_241 && arg_219 == arg_287 && arg_219 == arg_313 && arg_219 == arg_331 && arg_219 == arg_283 && arg_219 == arg_29 && arg_219 == arg_165 && arg_219 == arg_97 && arg_219 == arg_265 && arg_219 == arg_41 && arg_219 == arg_325 && arg_219 == arg_335 && arg_219 == arg_349 && arg_219 == arg_309 && arg_219 == arg_299 && arg_219 == arg_61 && arg_219 == arg_65 && arg_219 == arg_177 && arg_219 == arg_367 && arg_219 == arg_255 && arg_219 == arg_209 && arg_159 == arg_169 && arg_159 == arg_47 && arg_159 == arg_119 && arg_159 == arg_123 && arg_159 == arg_231 && arg_159 == arg_261 && arg_159 == arg_345 && arg_159 == arg_359 && arg_159 == arg_227 && arg_159 == arg_241 && arg_159 == arg_287 && arg_159 == arg_313 && arg_159 == arg_331 && arg_159 == arg_283 && arg_159 == arg_29 && arg_159 == arg_165 && arg_159 == arg_97 && arg_159 == arg_265 && arg_159 == arg_41 && arg_159 == arg_325 && arg_159 == arg_335 && arg_159 == arg_349 && arg_159 == arg_309 && arg_159 == arg_299 && arg_159 == arg_61 && arg_159 == arg_65 && arg_159 == arg_177 && arg_159 == arg_367 && arg_159 == arg_255 && arg_159 == arg_209 && arg_169 == arg_47 && arg_169 == arg_119 && arg_169 == arg_123 && arg_169 == arg_231 && arg_169 == arg_261 && arg_169 == arg_345 && arg_169 == arg_359 && arg_169 == arg_227 && arg_169 == arg_241 && arg_169 == arg_287 && arg_169 == arg_313 && arg_169 == arg_331 && arg_169 == arg_283 && arg_169 == arg_29 && arg_169 == arg_165 && arg_169 == arg_97 && arg_169 == arg_265 && arg_169 == arg_41 && arg_169 == arg_325 && arg_169 == arg_335 && arg_169 == arg_349 && arg_169 == arg_309 && arg_169 == arg_299 && arg_169 == arg_61 && arg_169 == arg_65 && arg_169 == arg_177 && arg_169 == arg_367 && arg_169 == arg_255 && arg_169 == arg_209 && arg_47 == arg_119 && arg_47 == arg_123 && arg_47 == arg_231 && arg_47 == arg_261 && arg_47 == arg_345 && arg_47 == arg_359 && arg_47 == arg_227 && arg_47 == arg_241 && arg_47 == arg_287 && arg_47 == arg_313 && arg_47 == arg_331 && arg_47 == arg_283 && arg_47 == arg_29 && arg_47 == arg_165 && arg_47 == arg_97 && arg_47 == arg_265 && arg_47 == arg_41 && arg_47 == arg_325 && arg_47 == arg_335 && arg_47 == arg_349 && arg_47 == arg_309 && arg_47 == arg_299 && arg_47 == arg_61 && arg_47 == arg_65 && arg_47 == arg_177 && arg_47 == arg_367 && arg_47 == arg_255 && arg_47 == arg_209 && arg_119 == arg_123 && arg_119 == arg_231 && arg_119 == arg_261 && arg_119 == arg_345 && arg_119 == arg_359 && arg_119 == arg_227 && arg_119 == arg_241 && arg_119 == arg_287 && arg_119 == arg_313 && arg_119 == arg_331 && arg_119 == arg_283 && arg_119 == arg_29 && arg_119 == arg_165 && arg_119 == arg_97 && arg_119 == arg_265 && arg_119 == arg_41 && arg_119 == arg_325 && arg_119 == arg_335 && arg_119 == arg_349 && arg_119 == arg_309 && arg_119 == arg_299 && arg_119 == arg_61 && arg_119 == arg_65 && arg_119 == arg_177 && arg_119 == arg_367 && arg_119 == arg_255 && arg_119 == arg_209 && arg_123 == arg_231 && arg_123 == arg_261 && arg_123 == arg_345 && arg_123 == arg_359 && arg_123 == arg_227 && arg_123 == arg_241 && arg_123 == arg_287 && arg_123 == arg_313 && arg_123 == arg_331 && arg_123 == arg_283 && arg_123 == arg_29 && arg_123 == arg_165 && arg_123 == arg_97 && arg_123 == arg_265 && arg_123 == arg_41 && arg_123 == arg_325 && arg_123 == arg_335 && arg_123 == arg_349 && arg_123 == arg_309 && arg_123 == arg_299 && arg_123 == arg_61 && arg_123 == arg_65 && arg_123 == arg_177 && arg_123 == arg_367 && arg_123 == arg_255 && arg_123 == arg_209 && arg_231 == arg_261 && arg_231 == arg_345 && arg_231 == arg_359 && arg_231 == arg_227 && arg_231 == arg_241 && arg_231 == arg_287 && arg_231 == arg_313 && arg_231 == arg_331 && arg_231 == arg_283 && arg_231 == arg_29 && arg_231 == arg_165 && arg_231 == arg_97 && arg_231 == arg_265 && arg_231 == arg_41 && arg_231 == arg_325 && arg_231 == arg_335 && arg_231 == arg_349 && arg_231 == arg_309 && arg_231 == arg_299 && arg_231 == arg_61 && arg_231 == arg_65 && arg_231 == arg_177 && arg_231 == arg_367 && arg_231 == arg_255 && arg_231 == arg_209 && arg_261 == arg_345 && arg_261 == arg_359 && arg_261 == arg_227 && arg_261 == arg_241 && arg_261 == arg_287 && arg_261 == arg_313 && arg_261 == arg_331 && arg_261 == arg_283 && arg_261 == arg_29 && arg_261 == arg_165 && arg_261 == arg_97 && arg_261 == arg_265 && arg_261 == arg_41 && arg_261 == arg_325 && arg_261 == arg_335 && arg_261 == arg_349 && arg_261 == arg_309 && arg_261 == arg_299 && arg_261 == arg_61 && arg_261 == arg_65 && arg_261 == arg_177 && arg_261 == arg_367 && arg_261 == arg_255 && arg_261 == arg_209 && arg_345 == arg_359 && arg_345 == arg_227 && arg_345 == arg_241 && arg_345 == arg_287 && arg_345 == arg_313 && arg_345 == arg_331 && arg_345 == arg_283 && arg_345 == arg_29 && arg_345 == arg_165 && arg_345 == arg_97 && arg_345 == arg_265 && arg_345 == arg_41 && arg_345 == arg_325 && arg_345 == arg_335 && arg_345 == arg_349 && arg_345 == arg_309 && arg_345 == arg_299 && arg_345 == arg_61 && arg_345 == arg_65 && arg_345 == arg_177 && arg_345 == arg_367 && arg_345 == arg_255 && arg_345 == arg_209 && arg_359 == arg_227 && arg_359 == arg_241 && arg_359 == arg_287 && arg_359 == arg_313 && arg_359 == arg_331 && arg_359 == arg_283 && arg_359 == arg_29 && arg_359 == arg_165 && arg_359 == arg_97 && arg_359 == arg_265 && arg_359 == arg_41 && arg_359 == arg_325 && arg_359 == arg_335 && arg_359 == arg_349 && arg_359 == arg_309 && arg_359 == arg_299 && arg_359 == arg_61 && arg_359 == arg_65 && arg_359 == arg_177 && arg_359 == arg_367 && arg_359 == arg_255 && arg_359 == arg_209 && arg_227 == arg_241 && arg_227 == arg_287 && arg_227 == arg_313 && arg_227 == arg_331 && arg_227 == arg_283 && arg_227 == arg_29 && arg_227 == arg_165 && arg_227 == arg_97 && arg_227 == arg_265 && arg_227 == arg_41 && arg_227 == arg_325 && arg_227 == arg_335 && arg_227 == arg_349 && arg_227 == arg_309 && arg_227 == arg_299 && arg_227 == arg_61 && arg_227 == arg_65 && arg_227 == arg_177 && arg_227 == arg_367 && arg_227 == arg_255 && arg_227 == arg_209 && arg_241 == arg_287 && arg_241 == arg_313 && arg_241 == arg_331 && arg_241 == arg_283 && arg_241 == arg_29 && arg_241 == arg_165 && arg_241 == arg_97 && arg_241 == arg_265 && arg_241 == arg_41 && arg_241 == arg_325 && arg_241 == arg_335 && arg_241 == arg_349 && arg_241 == arg_309 && arg_241 == arg_299 && arg_241 == arg_61 && arg_241 == arg_65 && arg_241 == arg_177 && arg_241 == arg_367 && arg_241 == arg_255 && arg_241 == arg_209 && arg_287 == arg_313 && arg_287 == arg_331 && arg_287 == arg_283 && arg_287 == arg_29 && arg_287 == arg_165 && arg_287 == arg_97 && arg_287 == arg_265 && arg_287 == arg_41 && arg_287 == arg_325 && arg_287 == arg_335 && arg_287 == arg_349 && arg_287 == arg_309 && arg_287 == arg_299 && arg_287 == arg_61 && arg_287 == arg_65 && arg_287 == arg_177 && arg_287 == arg_367 && arg_287 == arg_255 && arg_287 == arg_209 && arg_313 == arg_331 && arg_313 == arg_283 && arg_313 == arg_29 && arg_313 == arg_165 && arg_313 == arg_97 && arg_313 == arg_265 && arg_313 == arg_41 && arg_313 == arg_325 && arg_313 == arg_335 && arg_313 == arg_349 && arg_313 == arg_309 && arg_313 == arg_299 && arg_313 == arg_61 && arg_313 == arg_65 && arg_313 == arg_177 && arg_313 == arg_367 && arg_313 == arg_255 && arg_313 == arg_209 && arg_331 == arg_283 && arg_331 == arg_29 && arg_331 == arg_165 && arg_331 == arg_97 && arg_331 == arg_265 && arg_331 == arg_41 && arg_331 == arg_325 && arg_331 == arg_335 && arg_331 == arg_349 && arg_331 == arg_309 && arg_331 == arg_299 && arg_331 == arg_61 && arg_331 == arg_65 && arg_331 == arg_177 && arg_331 == arg_367 && arg_331 == arg_255 && arg_331 == arg_209 && arg_283 == arg_29 && arg_283 == arg_165 && arg_283 == arg_97 && arg_283 == arg_265 && arg_283 == arg_41 && arg_283 == arg_325 && arg_283 == arg_335 && arg_283 == arg_349 && arg_283 == arg_309 && arg_283 == arg_299 && arg_283 == arg_61 && arg_283 == arg_65 && arg_283 == arg_177 && arg_283 == arg_367 && arg_283 == arg_255 && arg_283 == arg_209 && arg_29 == arg_165 && arg_29 == arg_97 && arg_29 == arg_265 && arg_29 == arg_41 && arg_29 == arg_325 && arg_29 == arg_335 && arg_29 == arg_349 && arg_29 == arg_309 && arg_29 == arg_299 && arg_29 == arg_61 && arg_29 == arg_65 && arg_29 == arg_177 && arg_29 == arg_367 && arg_29 == arg_255 && arg_29 == arg_209 && arg_165 == arg_97 && arg_165 == arg_265 && arg_165 == arg_41 && arg_165 == arg_325 && arg_165 == arg_335 && arg_165 == arg_349 && arg_165 == arg_309 && arg_165 == arg_299 && arg_165 == arg_61 && arg_165 == arg_65 && arg_165 == arg_177 && arg_165 == arg_367 && arg_165 == arg_255 && arg_165 == arg_209 && arg_97 == arg_265 && arg_97 == arg_41 && arg_97 == arg_325 && arg_97 == arg_335 && arg_97 == arg_349 && arg_97 == arg_309 && arg_97 == arg_299 && arg_97 == arg_61 && arg_97 == arg_65 && arg_97 == arg_177 && arg_97 == arg_367 && arg_97 == arg_255 && arg_97 == arg_209 && arg_265 == arg_41 && arg_265 == arg_325 && arg_265 == arg_335 && arg_265 == arg_349 && arg_265 == arg_309 && arg_265 == arg_299 && arg_265 == arg_61 && arg_265 == arg_65 && arg_265 == arg_177 && arg_265 == arg_367 && arg_265 == arg_255 && arg_265 == arg_209 && arg_41 == arg_325 && arg_41 == arg_335 && arg_41 == arg_349 && arg_41 == arg_309 && arg_41 == arg_299 && arg_41 == arg_61 && arg_41 == arg_65 && arg_41 == arg_177 && arg_41 == arg_367 && arg_41 == arg_255 && arg_41 == arg_209 && arg_325 == arg_335 && arg_325 == arg_349 && arg_325 == arg_309 && arg_325 == arg_299 && arg_325 == arg_61 && arg_325 == arg_65 && arg_325 == arg_177 && arg_325 == arg_367 && arg_325 == arg_255 && arg_325 == arg_209 && arg_335 == arg_349 && arg_335 == arg_309 && arg_335 == arg_299 && arg_335 == arg_61 && arg_335 == arg_65 && arg_335 == arg_177 && arg_335 == arg_367 && arg_335 == arg_255 && arg_335 == arg_209 && arg_349 == arg_309 && arg_349 == arg_299 && arg_349 == arg_61 && arg_349 == arg_65 && arg_349 == arg_177 && arg_349 == arg_367 && arg_349 == arg_255 && arg_349 == arg_209 && arg_309 == arg_299 && arg_309 == arg_61 && arg_309 == arg_65 && arg_309 == arg_177 && arg_309 == arg_367 && arg_309 == arg_255 && arg_309 == arg_209 && arg_299 == arg_61 && arg_299 == arg_65 && arg_299 == arg_177 && arg_299 == arg_367 && arg_299 == arg_255 && arg_299 == arg_209 && arg_61 == arg_65 && arg_61 == arg_177 && arg_61 == arg_367 && arg_61 == arg_255 && arg_61 == arg_209 && arg_65 == arg_177 && arg_65 == arg_367 && arg_65 == arg_255 && arg_65 == arg_209 && arg_177 == arg_367 && arg_177 == arg_255 && arg_177 == arg_209 && arg_367 == arg_255 && arg_367 == arg_209 && arg_255 == arg_209 {
let rep_insts = pos.func.dfg.inst_results(inst);
let rep_insts_0 = rep_insts[0];
pos.func.dfg.change_to_alias(arg_1, rep_insts_0);
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1399(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_3 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_3[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_4 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_4[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_5 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_5[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_6) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_7 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_7[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_4 == 0 {
if rhs_3 == -1 {
match pos.func.dfg.value_def(arg_5[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_9 = arg;
let rhs_7 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_9) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_10 = arg;
let rhs_8 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_10) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_11 = arg;
let rhs_9 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_11) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_12 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_12[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_13 = arg;
let rhs_10 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_10 == 0 {
if rhs_9 == -1 {
if rhs_8 == 12 {
if rhs_7 == 16 {
match pos.func.dfg.value_def(arg_4[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_14 = arg;
let rhs_15 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_14) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_15 = arg;
let rhs_16 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_15) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_16 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_16[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_17 = arg;
let rhs_17 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_17) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_18 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_18[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_19 = arg;
let rhs_18 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_18 == 0 {
if rhs_17 == -1 {
match pos.func.dfg.value_def(arg_16[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_20 = arg;
let rhs_21 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_20) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_21 = arg;
let rhs_22 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_21) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_22 = arg;
let rhs_23 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_22) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_23 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_23[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_24 = arg;
let rhs_24 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_24 == 0 {
if rhs_23 == -1 {
if rhs_22 == 12 {
if rhs_21 == 16 {
if rhs_16 == 5 {
if rhs_15 == 8 {
match pos.func.dfg.value_def(arg_3[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_25 = arg;
let rhs_31 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_25) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_26 = arg;
let rhs_32 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_26) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_27 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_27[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_28 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_28[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_29 = arg;
let rhs_33 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_29) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_30 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_30[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_31 = arg;
let rhs_34 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_34 == 0 {
if rhs_33 == -1 {
match pos.func.dfg.value_def(arg_28[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_32 = arg;
let rhs_37 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_32) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_33 = arg;
let rhs_38 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_33) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_34 = arg;
let rhs_39 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_34) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_35 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_35[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_36 = arg;
let rhs_40 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_40 == 0 {
if rhs_39 == -1 {
if rhs_38 == 12 {
if rhs_37 == 16 {
match pos.func.dfg.value_def(arg_27[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_37 = arg;
let rhs_45 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_37) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_38 = arg;
let rhs_46 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_38) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_39 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_39[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_40 = arg;
let rhs_47 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_40) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_41 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_41[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_42 = arg;
let rhs_48 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_48 == 0 {
if rhs_47 == -1 {
match pos.func.dfg.value_def(arg_39[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_43 = arg;
let rhs_51 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_43) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_44 = arg;
let rhs_52 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_44) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_45 = arg;
let rhs_53 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_45) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_46 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_46[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_47 = arg;
let rhs_54 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_54 == 0 {
if rhs_53 == -1 {
if rhs_52 == 12 {
if rhs_51 == 16 {
if rhs_46 == 5 {
if rhs_45 == 8 {
if rhs_32 == 2 {
if rhs_31 == 4 {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_48 = arg;
let rhs_63 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_48) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_49 = arg;
let rhs_64 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_49) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_50 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_50[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_51 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_51[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_52 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_52[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_53 = arg;
let rhs_65 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_53) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_54 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_54[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_55 = arg;
let rhs_66 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_66 == 0 {
if rhs_65 == -1 {
match pos.func.dfg.value_def(arg_52[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_56 = arg;
let rhs_69 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_56) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_57 = arg;
let rhs_70 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_57) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_58 = arg;
let rhs_71 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_58) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_59 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_59[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_60 = arg;
let rhs_72 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_72 == 0 {
if rhs_71 == -1 {
if rhs_70 == 12 {
if rhs_69 == 16 {
match pos.func.dfg.value_def(arg_51[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_61 = arg;
let rhs_77 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_61) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_62 = arg;
let rhs_78 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_62) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_63 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_63[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_64 = arg;
let rhs_79 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_64) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_65 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_65[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_66 = arg;
let rhs_80 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_80 == 0 {
if rhs_79 == -1 {
match pos.func.dfg.value_def(arg_63[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_67 = arg;
let rhs_83 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_67) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_68 = arg;
let rhs_84 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_68) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_69 = arg;
let rhs_85 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_69) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_70 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_70[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_71 = arg;
let rhs_86 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_86 == 0 {
if rhs_85 == -1 {
if rhs_84 == 12 {
if rhs_83 == 16 {
if rhs_78 == 5 {
if rhs_77 == 8 {
match pos.func.dfg.value_def(arg_50[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_72 = arg;
let rhs_93 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_72) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_73 = arg;
let rhs_94 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_73) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_74 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_74[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_75 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_75[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_76 = arg;
let rhs_95 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_76) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_77 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_77[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_78 = arg;
let rhs_96 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_96 == 0 {
if rhs_95 == -1 {
match pos.func.dfg.value_def(arg_75[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_79 = arg;
let rhs_99 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_79) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_80 = arg;
let rhs_100 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_80) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_81 = arg;
let rhs_101 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_81) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_82 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_82[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_83 = arg;
let rhs_102 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_102 == 0 {
if rhs_101 == -1 {
if rhs_100 == 12 {
if rhs_99 == 16 {
match pos.func.dfg.value_def(arg_74[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_84 = arg;
let rhs_107 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_84) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_85 = arg;
let rhs_108 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_85) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_86 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_86[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_87 = arg;
let rhs_109 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_87) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_88 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_88[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_89 = arg;
let rhs_110 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_110 == 0 {
if rhs_109 == -1 {
match pos.func.dfg.value_def(arg_86[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_90 = arg;
let rhs_113 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_90) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_91 = arg;
let rhs_114 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_91) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_92 = arg;
let rhs_115 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_92) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_93 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_93[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_94 = arg;
let rhs_116 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_116 == 0 {
if rhs_115 == -1 {
if rhs_114 == 12 {
if rhs_113 == 16 {
if rhs_108 == 5 {
if rhs_107 == 8 {
if rhs_94 == 2 {
if rhs_93 == 4 {
if rhs_64 == 1 {
if rhs_63 == 2 {
if rhs_2 == 1 {
if rhs_1 == 1 {
if arg_82[0] == arg_93[0] && arg_82[0] == arg_19 && arg_82[0] == arg_42 && arg_82[0] == arg_66 && arg_82[0] == arg_12[0] && arg_82[0] == arg_24 && arg_82[0] == arg_41[0] && arg_82[0] == arg_54[0] && arg_82[0] == arg_31 && arg_82[0] == arg_55 && arg_82[0] == arg_46[0] && arg_82[0] == arg_77[0] && arg_82[0] == arg_88[0] && arg_82[0] == arg_35[0] && arg_82[0] == arg_94 && arg_82[0] == arg_78 && arg_82[0] == arg_47 && arg_82[0] == arg_70[0] && arg_82[0] == arg_23[0] && arg_82[0] == arg_7[0] && arg_82[0] == arg_18[0] && arg_82[0] == arg_36 && arg_82[0] == arg_30[0] && arg_82[0] == arg_65[0] && arg_82[0] == arg_71 && arg_82[0] == arg_83 && arg_82[0] == arg_8 && arg_82[0] == arg_59[0] && arg_82[0] == arg_89 && arg_82[0] == arg_60 && arg_82[0] == arg_13 && arg_93[0] == arg_19 && arg_93[0] == arg_42 && arg_93[0] == arg_66 && arg_93[0] == arg_12[0] && arg_93[0] == arg_24 && arg_93[0] == arg_41[0] && arg_93[0] == arg_54[0] && arg_93[0] == arg_31 && arg_93[0] == arg_55 && arg_93[0] == arg_46[0] && arg_93[0] == arg_77[0] && arg_93[0] == arg_88[0] && arg_93[0] == arg_35[0] && arg_93[0] == arg_94 && arg_93[0] == arg_78 && arg_93[0] == arg_47 && arg_93[0] == arg_70[0] && arg_93[0] == arg_23[0] && arg_93[0] == arg_7[0] && arg_93[0] == arg_18[0] && arg_93[0] == arg_36 && arg_93[0] == arg_30[0] && arg_93[0] == arg_65[0] && arg_93[0] == arg_71 && arg_93[0] == arg_83 && arg_93[0] == arg_8 && arg_93[0] == arg_59[0] && arg_93[0] == arg_89 && arg_93[0] == arg_60 && arg_93[0] == arg_13 && arg_19 == arg_42 && arg_19 == arg_66 && arg_19 == arg_12[0] && arg_19 == arg_24 && arg_19 == arg_41[0] && arg_19 == arg_54[0] && arg_19 == arg_31 && arg_19 == arg_55 && arg_19 == arg_46[0] && arg_19 == arg_77[0] && arg_19 == arg_88[0] && arg_19 == arg_35[0] && arg_19 == arg_94 && arg_19 == arg_78 && arg_19 == arg_47 && arg_19 == arg_70[0] && arg_19 == arg_23[0] && arg_19 == arg_7[0] && arg_19 == arg_18[0] && arg_19 == arg_36 && arg_19 == arg_30[0] && arg_19 == arg_65[0] && arg_19 == arg_71 && arg_19 == arg_83 && arg_19 == arg_8 && arg_19 == arg_59[0] && arg_19 == arg_89 && arg_19 == arg_60 && arg_19 == arg_13 && arg_42 == arg_66 && arg_42 == arg_12[0] && arg_42 == arg_24 && arg_42 == arg_41[0] && arg_42 == arg_54[0] && arg_42 == arg_31 && arg_42 == arg_55 && arg_42 == arg_46[0] && arg_42 == arg_77[0] && arg_42 == arg_88[0] && arg_42 == arg_35[0] && arg_42 == arg_94 && arg_42 == arg_78 && arg_42 == arg_47 && arg_42 == arg_70[0] && arg_42 == arg_23[0] && arg_42 == arg_7[0] && arg_42 == arg_18[0] && arg_42 == arg_36 && arg_42 == arg_30[0] && arg_42 == arg_65[0] && arg_42 == arg_71 && arg_42 == arg_83 && arg_42 == arg_8 && arg_42 == arg_59[0] && arg_42 == arg_89 && arg_42 == arg_60 && arg_42 == arg_13 && arg_66 == arg_12[0] && arg_66 == arg_24 && arg_66 == arg_41[0] && arg_66 == arg_54[0] && arg_66 == arg_31 && arg_66 == arg_55 && arg_66 == arg_46[0] && arg_66 == arg_77[0] && arg_66 == arg_88[0] && arg_66 == arg_35[0] && arg_66 == arg_94 && arg_66 == arg_78 && arg_66 == arg_47 && arg_66 == arg_70[0] && arg_66 == arg_23[0] && arg_66 == arg_7[0] && arg_66 == arg_18[0] && arg_66 == arg_36 && arg_66 == arg_30[0] && arg_66 == arg_65[0] && arg_66 == arg_71 && arg_66 == arg_83 && arg_66 == arg_8 && arg_66 == arg_59[0] && arg_66 == arg_89 && arg_66 == arg_60 && arg_66 == arg_13 && arg_12[0] == arg_24 && arg_12[0] == arg_41[0] && arg_12[0] == arg_54[0] && arg_12[0] == arg_31 && arg_12[0] == arg_55 && arg_12[0] == arg_46[0] && arg_12[0] == arg_77[0] && arg_12[0] == arg_88[0] && arg_12[0] == arg_35[0] && arg_12[0] == arg_94 && arg_12[0] == arg_78 && arg_12[0] == arg_47 && arg_12[0] == arg_70[0] && arg_12[0] == arg_23[0] && arg_12[0] == arg_7[0] && arg_12[0] == arg_18[0] && arg_12[0] == arg_36 && arg_12[0] == arg_30[0] && arg_12[0] == arg_65[0] && arg_12[0] == arg_71 && arg_12[0] == arg_83 && arg_12[0] == arg_8 && arg_12[0] == arg_59[0] && arg_12[0] == arg_89 && arg_12[0] == arg_60 && arg_12[0] == arg_13 && arg_24 == arg_41[0] && arg_24 == arg_54[0] && arg_24 == arg_31 && arg_24 == arg_55 && arg_24 == arg_46[0] && arg_24 == arg_77[0] && arg_24 == arg_88[0] && arg_24 == arg_35[0] && arg_24 == arg_94 && arg_24 == arg_78 && arg_24 == arg_47 && arg_24 == arg_70[0] && arg_24 == arg_23[0] && arg_24 == arg_7[0] && arg_24 == arg_18[0] && arg_24 == arg_36 && arg_24 == arg_30[0] && arg_24 == arg_65[0] && arg_24 == arg_71 && arg_24 == arg_83 && arg_24 == arg_8 && arg_24 == arg_59[0] && arg_24 == arg_89 && arg_24 == arg_60 && arg_24 == arg_13 && arg_41[0] == arg_54[0] && arg_41[0] == arg_31 && arg_41[0] == arg_55 && arg_41[0] == arg_46[0] && arg_41[0] == arg_77[0] && arg_41[0] == arg_88[0] && arg_41[0] == arg_35[0] && arg_41[0] == arg_94 && arg_41[0] == arg_78 && arg_41[0] == arg_47 && arg_41[0] == arg_70[0] && arg_41[0] == arg_23[0] && arg_41[0] == arg_7[0] && arg_41[0] == arg_18[0] && arg_41[0] == arg_36 && arg_41[0] == arg_30[0] && arg_41[0] == arg_65[0] && arg_41[0] == arg_71 && arg_41[0] == arg_83 && arg_41[0] == arg_8 && arg_41[0] == arg_59[0] && arg_41[0] == arg_89 && arg_41[0] == arg_60 && arg_41[0] == arg_13 && arg_54[0] == arg_31 && arg_54[0] == arg_55 && arg_54[0] == arg_46[0] && arg_54[0] == arg_77[0] && arg_54[0] == arg_88[0] && arg_54[0] == arg_35[0] && arg_54[0] == arg_94 && arg_54[0] == arg_78 && arg_54[0] == arg_47 && arg_54[0] == arg_70[0] && arg_54[0] == arg_23[0] && arg_54[0] == arg_7[0] && arg_54[0] == arg_18[0] && arg_54[0] == arg_36 && arg_54[0] == arg_30[0] && arg_54[0] == arg_65[0] && arg_54[0] == arg_71 && arg_54[0] == arg_83 && arg_54[0] == arg_8 && arg_54[0] == arg_59[0] && arg_54[0] == arg_89 && arg_54[0] == arg_60 && arg_54[0] == arg_13 && arg_31 == arg_55 && arg_31 == arg_46[0] && arg_31 == arg_77[0] && arg_31 == arg_88[0] && arg_31 == arg_35[0] && arg_31 == arg_94 && arg_31 == arg_78 && arg_31 == arg_47 && arg_31 == arg_70[0] && arg_31 == arg_23[0] && arg_31 == arg_7[0] && arg_31 == arg_18[0] && arg_31 == arg_36 && arg_31 == arg_30[0] && arg_31 == arg_65[0] && arg_31 == arg_71 && arg_31 == arg_83 && arg_31 == arg_8 && arg_31 == arg_59[0] && arg_31 == arg_89 && arg_31 == arg_60 && arg_31 == arg_13 && arg_55 == arg_46[0] && arg_55 == arg_77[0] && arg_55 == arg_88[0] && arg_55 == arg_35[0] && arg_55 == arg_94 && arg_55 == arg_78 && arg_55 == arg_47 && arg_55 == arg_70[0] && arg_55 == arg_23[0] && arg_55 == arg_7[0] && arg_55 == arg_18[0] && arg_55 == arg_36 && arg_55 == arg_30[0] && arg_55 == arg_65[0] && arg_55 == arg_71 && arg_55 == arg_83 && arg_55 == arg_8 && arg_55 == arg_59[0] && arg_55 == arg_89 && arg_55 == arg_60 && arg_55 == arg_13 && arg_46[0] == arg_77[0] && arg_46[0] == arg_88[0] && arg_46[0] == arg_35[0] && arg_46[0] == arg_94 && arg_46[0] == arg_78 && arg_46[0] == arg_47 && arg_46[0] == arg_70[0] && arg_46[0] == arg_23[0] && arg_46[0] == arg_7[0] && arg_46[0] == arg_18[0] && arg_46[0] == arg_36 && arg_46[0] == arg_30[0] && arg_46[0] == arg_65[0] && arg_46[0] == arg_71 && arg_46[0] == arg_83 && arg_46[0] == arg_8 && arg_46[0] == arg_59[0] && arg_46[0] == arg_89 && arg_46[0] == arg_60 && arg_46[0] == arg_13 && arg_77[0] == arg_88[0] && arg_77[0] == arg_35[0] && arg_77[0] == arg_94 && arg_77[0] == arg_78 && arg_77[0] == arg_47 && arg_77[0] == arg_70[0] && arg_77[0] == arg_23[0] && arg_77[0] == arg_7[0] && arg_77[0] == arg_18[0] && arg_77[0] == arg_36 && arg_77[0] == arg_30[0] && arg_77[0] == arg_65[0] && arg_77[0] == arg_71 && arg_77[0] == arg_83 && arg_77[0] == arg_8 && arg_77[0] == arg_59[0] && arg_77[0] == arg_89 && arg_77[0] == arg_60 && arg_77[0] == arg_13 && arg_88[0] == arg_35[0] && arg_88[0] == arg_94 && arg_88[0] == arg_78 && arg_88[0] == arg_47 && arg_88[0] == arg_70[0] && arg_88[0] == arg_23[0] && arg_88[0] == arg_7[0] && arg_88[0] == arg_18[0] && arg_88[0] == arg_36 && arg_88[0] == arg_30[0] && arg_88[0] == arg_65[0] && arg_88[0] == arg_71 && arg_88[0] == arg_83 && arg_88[0] == arg_8 && arg_88[0] == arg_59[0] && arg_88[0] == arg_89 && arg_88[0] == arg_60 && arg_88[0] == arg_13 && arg_35[0] == arg_94 && arg_35[0] == arg_78 && arg_35[0] == arg_47 && arg_35[0] == arg_70[0] && arg_35[0] == arg_23[0] && arg_35[0] == arg_7[0] && arg_35[0] == arg_18[0] && arg_35[0] == arg_36 && arg_35[0] == arg_30[0] && arg_35[0] == arg_65[0] && arg_35[0] == arg_71 && arg_35[0] == arg_83 && arg_35[0] == arg_8 && arg_35[0] == arg_59[0] && arg_35[0] == arg_89 && arg_35[0] == arg_60 && arg_35[0] == arg_13 && arg_94 == arg_78 && arg_94 == arg_47 && arg_94 == arg_70[0] && arg_94 == arg_23[0] && arg_94 == arg_7[0] && arg_94 == arg_18[0] && arg_94 == arg_36 && arg_94 == arg_30[0] && arg_94 == arg_65[0] && arg_94 == arg_71 && arg_94 == arg_83 && arg_94 == arg_8 && arg_94 == arg_59[0] && arg_94 == arg_89 && arg_94 == arg_60 && arg_94 == arg_13 && arg_78 == arg_47 && arg_78 == arg_70[0] && arg_78 == arg_23[0] && arg_78 == arg_7[0] && arg_78 == arg_18[0] && arg_78 == arg_36 && arg_78 == arg_30[0] && arg_78 == arg_65[0] && arg_78 == arg_71 && arg_78 == arg_83 && arg_78 == arg_8 && arg_78 == arg_59[0] && arg_78 == arg_89 && arg_78 == arg_60 && arg_78 == arg_13 && arg_47 == arg_70[0] && arg_47 == arg_23[0] && arg_47 == arg_7[0] && arg_47 == arg_18[0] && arg_47 == arg_36 && arg_47 == arg_30[0] && arg_47 == arg_65[0] && arg_47 == arg_71 && arg_47 == arg_83 && arg_47 == arg_8 && arg_47 == arg_59[0] && arg_47 == arg_89 && arg_47 == arg_60 && arg_47 == arg_13 && arg_70[0] == arg_23[0] && arg_70[0] == arg_7[0] && arg_70[0] == arg_18[0] && arg_70[0] == arg_36 && arg_70[0] == arg_30[0] && arg_70[0] == arg_65[0] && arg_70[0] == arg_71 && arg_70[0] == arg_83 && arg_70[0] == arg_8 && arg_70[0] == arg_59[0] && arg_70[0] == arg_89 && arg_70[0] == arg_60 && arg_70[0] == arg_13 && arg_23[0] == arg_7[0] && arg_23[0] == arg_18[0] && arg_23[0] == arg_36 && arg_23[0] == arg_30[0] && arg_23[0] == arg_65[0] && arg_23[0] == arg_71 && arg_23[0] == arg_83 && arg_23[0] == arg_8 && arg_23[0] == arg_59[0] && arg_23[0] == arg_89 && arg_23[0] == arg_60 && arg_23[0] == arg_13 && arg_7[0] == arg_18[0] && arg_7[0] == arg_36 && arg_7[0] == arg_30[0] && arg_7[0] == arg_65[0] && arg_7[0] == arg_71 && arg_7[0] == arg_83 && arg_7[0] == arg_8 && arg_7[0] == arg_59[0] && arg_7[0] == arg_89 && arg_7[0] == arg_60 && arg_7[0] == arg_13 && arg_18[0] == arg_36 && arg_18[0] == arg_30[0] && arg_18[0] == arg_65[0] && arg_18[0] == arg_71 && arg_18[0] == arg_83 && arg_18[0] == arg_8 && arg_18[0] == arg_59[0] && arg_18[0] == arg_89 && arg_18[0] == arg_60 && arg_18[0] == arg_13 && arg_36 == arg_30[0] && arg_36 == arg_65[0] && arg_36 == arg_71 && arg_36 == arg_83 && arg_36 == arg_8 && arg_36 == arg_59[0] && arg_36 == arg_89 && arg_36 == arg_60 && arg_36 == arg_13 && arg_30[0] == arg_65[0] && arg_30[0] == arg_71 && arg_30[0] == arg_83 && arg_30[0] == arg_8 && arg_30[0] == arg_59[0] && arg_30[0] == arg_89 && arg_30[0] == arg_60 && arg_30[0] == arg_13 && arg_65[0] == arg_71 && arg_65[0] == arg_83 && arg_65[0] == arg_8 && arg_65[0] == arg_59[0] && arg_65[0] == arg_89 && arg_65[0] == arg_60 && arg_65[0] == arg_13 && arg_71 == arg_83 && arg_71 == arg_8 && arg_71 == arg_59[0] && arg_71 == arg_89 && arg_71 == arg_60 && arg_71 == arg_13 && arg_83 == arg_8 && arg_83 == arg_59[0] && arg_83 == arg_89 && arg_83 == arg_60 && arg_83 == arg_13 && arg_8 == arg_59[0] && arg_8 == arg_89 && arg_8 == arg_60 && arg_8 == arg_13 && arg_59[0] == arg_89 && arg_59[0] == arg_60 && arg_59[0] == arg_13 && arg_89 == arg_60 && arg_89 == arg_13 && arg_60 == arg_13 {
let rep_insts = pos.func.dfg.inst_results(inst);
let rep_insts_0 = rep_insts[0];
pos.func.dfg.change_to_alias(arg_0, rep_insts_0);
}
}
}
}
}
}
}
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1400(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_3 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_3[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_4) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_5 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_5[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_6) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_7 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_7[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_8) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_9 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_9[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_10 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_10) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_11 = arg;
let rhs_7 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_11) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_12 = arg;
let rhs_8 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_12) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_13 = args;
match opcode {
Opcode::Imul => {
if rhs_8 == 4294967295 {
if rhs_7 == -1 {
if rhs_6 == 1 {
match pos.func.dfg.value_def(arg_9[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_14 = arg;
let rhs_12 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_14) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_15 = arg;
let rhs_13 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_15) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_16 = args;
match opcode {
Opcode::Imul => {
if rhs_13 == 4294967295 {
if rhs_12 == -1 {
if rhs_5 == 2 {
match pos.func.dfg.value_def(arg_7[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_17 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_17[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_18 = arg;
let rhs_17 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_18) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_19 = arg;
let rhs_18 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_19) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_20 = arg;
let rhs_19 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_20) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_21 = args;
match opcode {
Opcode::Imul => {
if rhs_19 == 4294967295 {
if rhs_18 == -1 {
if rhs_17 == 1 {
match pos.func.dfg.value_def(arg_17[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_22 = arg;
let rhs_23 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_22) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_23 = arg;
let rhs_24 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_23) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_24 = args;
match opcode {
Opcode::Imul => {
if rhs_24 == 4294967295 {
if rhs_23 == -1 {
if rhs_4 == 4 {
match pos.func.dfg.value_def(arg_5[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_25 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_25[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_26 = arg;
let rhs_28 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_26) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_27 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_27[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_28 = arg;
let rhs_29 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_28) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_29 = arg;
let rhs_30 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_29) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_30 = arg;
let rhs_31 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_30) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_31 = args;
match opcode {
Opcode::Imul => {
if rhs_31 == 4294967295 {
if rhs_30 == -1 {
if rhs_29 == 1 {
match pos.func.dfg.value_def(arg_27[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_32 = arg;
let rhs_35 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_32) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_33 = arg;
let rhs_36 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_33) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_34 = args;
match opcode {
Opcode::Imul => {
if rhs_36 == 4294967295 {
if rhs_35 == -1 {
if rhs_28 == 2 {
match pos.func.dfg.value_def(arg_25[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_35 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_35[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_36 = arg;
let rhs_40 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_36) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_37 = arg;
let rhs_41 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_37) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_38 = arg;
let rhs_42 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_38) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_39 = args;
match opcode {
Opcode::Imul => {
if rhs_42 == 4294967295 {
if rhs_41 == -1 {
if rhs_40 == 1 {
match pos.func.dfg.value_def(arg_35[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_40 = arg;
let rhs_46 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_40) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_41 = arg;
let rhs_47 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_41) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_42 = args;
match opcode {
Opcode::Imul => {
if rhs_47 == 4294967295 {
if rhs_46 == -1 {
if rhs_3 == 8 {
match pos.func.dfg.value_def(arg_3[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_43 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_43[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_44 = arg;
let rhs_51 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_44) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_45 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_45[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_46 = arg;
let rhs_52 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_46) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_47 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_47[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_48 = arg;
let rhs_53 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_48) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_49 = arg;
let rhs_54 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_49) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_50 = arg;
let rhs_55 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_50) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_51 = args;
match opcode {
Opcode::Imul => {
if rhs_55 == 4294967295 {
if rhs_54 == -1 {
if rhs_53 == 1 {
match pos.func.dfg.value_def(arg_47[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_52 = arg;
let rhs_59 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_52) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_53 = arg;
let rhs_60 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_53) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_54 = args;
match opcode {
Opcode::Imul => {
if rhs_60 == 4294967295 {
if rhs_59 == -1 {
if rhs_52 == 2 {
match pos.func.dfg.value_def(arg_45[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_55 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_55[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_56 = arg;
let rhs_64 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_56) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_57 = arg;
let rhs_65 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_57) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_58 = arg;
let rhs_66 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_58) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_59 = args;
match opcode {
Opcode::Imul => {
if rhs_66 == 4294967295 {
if rhs_65 == -1 {
if rhs_64 == 1 {
match pos.func.dfg.value_def(arg_55[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_60 = arg;
let rhs_70 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_60) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_61 = arg;
let rhs_71 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_61) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_62 = args;
match opcode {
Opcode::Imul => {
if rhs_71 == 4294967295 {
if rhs_70 == -1 {
if rhs_51 == 4 {
match pos.func.dfg.value_def(arg_43[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_63 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_63[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_64 = arg;
let rhs_75 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_64) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_65 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_65[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_66 = arg;
let rhs_76 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_66) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_67 = arg;
let rhs_77 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_67) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_68 = arg;
let rhs_78 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_68) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_69 = args;
match opcode {
Opcode::Imul => {
if rhs_78 == 4294967295 {
if rhs_77 == -1 {
if rhs_76 == 1 {
match pos.func.dfg.value_def(arg_65[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_70 = arg;
let rhs_82 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_70) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_71 = arg;
let rhs_83 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_71) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_72 = args;
match opcode {
Opcode::Imul => {
if rhs_83 == 4294967295 {
if rhs_82 == -1 {
if rhs_75 == 2 {
match pos.func.dfg.value_def(arg_63[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_73 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_73[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_74 = arg;
let rhs_87 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_74) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_75 = arg;
let rhs_88 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_75) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_76 = arg;
let rhs_89 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_76) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_77 = args;
match opcode {
Opcode::Imul => {
if rhs_89 == 4294967295 {
if rhs_88 == -1 {
if rhs_87 == 1 {
match pos.func.dfg.value_def(arg_73[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_78 = arg;
let rhs_93 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_78) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_79 = arg;
let rhs_94 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_79) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_80 = args;
match opcode {
Opcode::Imul => {
if rhs_94 == 4294967295 {
if rhs_93 == -1 {
if rhs_2 == 16 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_81 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_81[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_82 = arg;
let rhs_98 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_82) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_83 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_83[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_84 = arg;
let rhs_99 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_84) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_85 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_85[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_86 = arg;
let rhs_100 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_86) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_87 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_87[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_88 = arg;
let rhs_101 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_88) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_89 = arg;
let rhs_102 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_89) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_90 = arg;
let rhs_103 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_90) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_91 = args;
match opcode {
Opcode::Imul => {
if rhs_103 == 4294967295 {
if rhs_102 == -1 {
if rhs_101 == 1 {
match pos.func.dfg.value_def(arg_87[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_92 = arg;
let rhs_107 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_92) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_93 = arg;
let rhs_108 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_93) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_94 = args;
match opcode {
Opcode::Imul => {
if rhs_108 == 4294967295 {
if rhs_107 == -1 {
if rhs_100 == 2 {
match pos.func.dfg.value_def(arg_85[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_95 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_95[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_96 = arg;
let rhs_112 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_96) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_97 = arg;
let rhs_113 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_97) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_98 = arg;
let rhs_114 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_98) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_99 = args;
match opcode {
Opcode::Imul => {
if rhs_114 == 4294967295 {
if rhs_113 == -1 {
if rhs_112 == 1 {
match pos.func.dfg.value_def(arg_95[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_100 = arg;
let rhs_118 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_100) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_101 = arg;
let rhs_119 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_101) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_102 = args;
match opcode {
Opcode::Imul => {
if rhs_119 == 4294967295 {
if rhs_118 == -1 {
if rhs_99 == 4 {
match pos.func.dfg.value_def(arg_83[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_103 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_103[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_104 = arg;
let rhs_123 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_104) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_105 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_105[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_106 = arg;
let rhs_124 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_106) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_107 = arg;
let rhs_125 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_107) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_108 = arg;
let rhs_126 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_108) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_109 = args;
match opcode {
Opcode::Imul => {
if rhs_126 == 4294967295 {
if rhs_125 == -1 {
if rhs_124 == 1 {
match pos.func.dfg.value_def(arg_105[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_110 = arg;
let rhs_130 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_110) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_111 = arg;
let rhs_131 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_111) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_112 = args;
match opcode {
Opcode::Imul => {
if rhs_131 == 4294967295 {
if rhs_130 == -1 {
if rhs_123 == 2 {
match pos.func.dfg.value_def(arg_103[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_113 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_113[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_114 = arg;
let rhs_135 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_114) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_115 = arg;
let rhs_136 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_115) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_116 = arg;
let rhs_137 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_116) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_117 = args;
match opcode {
Opcode::Imul => {
if rhs_137 == 4294967295 {
if rhs_136 == -1 {
if rhs_135 == 1 {
match pos.func.dfg.value_def(arg_113[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_118 = arg;
let rhs_141 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_118) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_119 = arg;
let rhs_142 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_119) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_120 = args;
match opcode {
Opcode::Imul => {
if rhs_142 == 4294967295 {
if rhs_141 == -1 {
if rhs_98 == 8 {
match pos.func.dfg.value_def(arg_81[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_121 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_121[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_122 = arg;
let rhs_146 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_122) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_123 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_123[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_124 = arg;
let rhs_147 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_124) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_125 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_125[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_126 = arg;
let rhs_148 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_126) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_127 = arg;
let rhs_149 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_127) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_128 = arg;
let rhs_150 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_128) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_129 = args;
match opcode {
Opcode::Imul => {
if rhs_150 == 4294967295 {
if rhs_149 == -1 {
if rhs_148 == 1 {
match pos.func.dfg.value_def(arg_125[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_130 = arg;
let rhs_154 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_130) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_131 = arg;
let rhs_155 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_131) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_132 = args;
match opcode {
Opcode::Imul => {
if rhs_155 == 4294967295 {
if rhs_154 == -1 {
if rhs_147 == 2 {
match pos.func.dfg.value_def(arg_123[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_133 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_133[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_134 = arg;
let rhs_159 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_134) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_135 = arg;
let rhs_160 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_135) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_136 = arg;
let rhs_161 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_136) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_137 = args;
match opcode {
Opcode::Imul => {
if rhs_161 == 4294967295 {
if rhs_160 == -1 {
if rhs_159 == 1 {
match pos.func.dfg.value_def(arg_133[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_138 = arg;
let rhs_165 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_138) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_139 = arg;
let rhs_166 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_139) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_140 = args;
match opcode {
Opcode::Imul => {
if rhs_166 == 4294967295 {
if rhs_165 == -1 {
if rhs_146 == 4 {
match pos.func.dfg.value_def(arg_121[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_141 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_141[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_142 = arg;
let rhs_170 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_142) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_143 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_143[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_144 = arg;
let rhs_171 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_144) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_145 = arg;
let rhs_172 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_145) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_146 = arg;
let rhs_173 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_146) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_147 = args;
match opcode {
Opcode::Imul => {
if rhs_173 == 4294967295 {
if rhs_172 == -1 {
if rhs_171 == 1 {
match pos.func.dfg.value_def(arg_143[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_148 = arg;
let rhs_177 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_148) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_149 = arg;
let rhs_178 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_149) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_150 = args;
match opcode {
Opcode::Imul => {
if rhs_178 == 4294967295 {
if rhs_177 == -1 {
if rhs_170 == 2 {
match pos.func.dfg.value_def(arg_141[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_151 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_151[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_152 = arg;
let rhs_182 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_152) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_153 = arg;
let rhs_183 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_153) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_154 = arg;
let rhs_184 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_154) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_155 = args;
match opcode {
Opcode::Imul => {
if rhs_184 == 4294967295 {
if rhs_183 == -1 {
if rhs_182 == 1 {
match pos.func.dfg.value_def(arg_151[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_156 = arg;
let rhs_188 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_156) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_157 = arg;
let rhs_189 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_157) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_158 = args;
match opcode {
Opcode::Imul => {
if rhs_189 == 4294967295 {
if rhs_188 == -1 {
if rhs_1 == 32 {
if arg_62[0] == arg_16[0] && arg_62[0] == arg_132[0] && arg_62[0] != arg_158[1] && arg_62[0] == arg_91[0] && arg_62[0] == arg_150[0] && arg_62[0] != arg_13[1] && arg_62[0] != arg_120[1] && arg_62[0] == arg_21[0] && arg_62[0] != arg_77[1] && arg_62[0] != arg_150[1] && arg_62[0] == arg_31[0] && arg_62[0] != arg_42[1] && arg_62[0] != arg_21[1] && arg_62[0] != arg_132[1] && arg_62[0] == arg_112[0] && arg_62[0] == arg_69[0] && arg_62[0] == arg_94[0] && arg_62[0] != arg_31[1] && arg_62[0] == arg_120[0] && arg_62[0] == arg_117[0] && arg_62[0] != arg_72[1] && arg_62[0] == arg_39[0] && arg_62[0] == arg_147[0] && arg_62[0] == arg_140[0] && arg_62[0] == arg_59[0] && arg_62[0] == arg_42[0] && arg_62[0] != arg_24[1] && arg_62[0] == arg_54[0] && arg_62[0] == arg_51[0] && arg_62[0] != arg_51[1] && arg_62[0] == arg_80[0] && arg_62[0] != arg_59[1] && arg_62[0] != arg_129[1] && arg_62[0] != arg_39[1] && arg_62[0] == arg_24[0] && arg_62[0] != arg_94[1] && arg_62[0] == arg_13[0] && arg_62[0] != arg_54[1] && arg_62[0] != arg_109[1] && arg_62[0] == arg_72[0] && arg_62[0] != arg_137[1] && arg_62[0] == arg_155[0] && arg_62[0] == arg_158[0] && arg_62[0] != arg_80[1] && arg_62[0] == arg_102[0] && arg_62[0] != arg_34[1] && arg_62[0] != arg_16[1] && arg_62[0] != arg_99[1] && arg_62[0] == arg_109[0] && arg_62[0] != arg_112[1] && arg_62[0] != arg_155[1] && arg_62[0] != arg_91[1] && arg_62[0] != arg_69[1] && arg_62[0] == arg_77[0] && arg_62[0] == arg_129[0] && arg_62[0] != arg_140[1] && arg_62[0] == arg_99[0] && arg_62[0] == arg_34[0] && arg_62[0] != arg_147[1] && arg_62[0] == arg_137[0] && arg_62[0] != arg_117[1] && arg_62[0] != arg_102[1] && arg_62[0] != arg_62[1] && arg_16[0] == arg_132[0] && arg_16[0] != arg_158[1] && arg_16[0] == arg_91[0] && arg_16[0] == arg_150[0] && arg_16[0] != arg_13[1] && arg_16[0] != arg_120[1] && arg_16[0] == arg_21[0] && arg_16[0] != arg_77[1] && arg_16[0] != arg_150[1] && arg_16[0] == arg_31[0] && arg_16[0] != arg_42[1] && arg_16[0] != arg_21[1] && arg_16[0] != arg_132[1] && arg_16[0] == arg_112[0] && arg_16[0] == arg_69[0] && arg_16[0] == arg_94[0] && arg_16[0] != arg_31[1] && arg_16[0] == arg_120[0] && arg_16[0] == arg_117[0] && arg_16[0] != arg_72[1] && arg_16[0] == arg_39[0] && arg_16[0] == arg_147[0] && arg_16[0] == arg_140[0] && arg_16[0] == arg_59[0] && arg_16[0] == arg_42[0] && arg_16[0] != arg_24[1] && arg_16[0] == arg_54[0] && arg_16[0] == arg_51[0] && arg_16[0] != arg_51[1] && arg_16[0] == arg_80[0] && arg_16[0] != arg_59[1] && arg_16[0] != arg_129[1] && arg_16[0] != arg_39[1] && arg_16[0] == arg_24[0] && arg_16[0] != arg_94[1] && arg_16[0] == arg_13[0] && arg_16[0] != arg_54[1] && arg_16[0] != arg_109[1] && arg_16[0] == arg_72[0] && arg_16[0] != arg_137[1] && arg_16[0] == arg_155[0] && arg_16[0] == arg_158[0] && arg_16[0] != arg_80[1] && arg_16[0] == arg_102[0] && arg_16[0] != arg_34[1] && arg_16[0] != arg_16[1] && arg_16[0] != arg_99[1] && arg_16[0] == arg_109[0] && arg_16[0] != arg_112[1] && arg_16[0] != arg_155[1] && arg_16[0] != arg_91[1] && arg_16[0] != arg_69[1] && arg_16[0] == arg_77[0] && arg_16[0] == arg_129[0] && arg_16[0] != arg_140[1] && arg_16[0] == arg_99[0] && arg_16[0] == arg_34[0] && arg_16[0] != arg_147[1] && arg_16[0] == arg_137[0] && arg_16[0] != arg_117[1] && arg_16[0] != arg_102[1] && arg_16[0] != arg_62[1] && arg_132[0] != arg_158[1] && arg_132[0] == arg_91[0] && arg_132[0] == arg_150[0] && arg_132[0] != arg_13[1] && arg_132[0] != arg_120[1] && arg_132[0] == arg_21[0] && arg_132[0] != arg_77[1] && arg_132[0] != arg_150[1] && arg_132[0] == arg_31[0] && arg_132[0] != arg_42[1] && arg_132[0] != arg_21[1] && arg_132[0] != arg_132[1] && arg_132[0] == arg_112[0] && arg_132[0] == arg_69[0] && arg_132[0] == arg_94[0] && arg_132[0] != arg_31[1] && arg_132[0] == arg_120[0] && arg_132[0] == arg_117[0] && arg_132[0] != arg_72[1] && arg_132[0] == arg_39[0] && arg_132[0] == arg_147[0] && arg_132[0] == arg_140[0] && arg_132[0] == arg_59[0] && arg_132[0] == arg_42[0] && arg_132[0] != arg_24[1] && arg_132[0] == arg_54[0] && arg_132[0] == arg_51[0] && arg_132[0] != arg_51[1] && arg_132[0] == arg_80[0] && arg_132[0] != arg_59[1] && arg_132[0] != arg_129[1] && arg_132[0] != arg_39[1] && arg_132[0] == arg_24[0] && arg_132[0] != arg_94[1] && arg_132[0] == arg_13[0] && arg_132[0] != arg_54[1] && arg_132[0] != arg_109[1] && arg_132[0] == arg_72[0] && arg_132[0] != arg_137[1] && arg_132[0] == arg_155[0] && arg_132[0] == arg_158[0] && arg_132[0] != arg_80[1] && arg_132[0] == arg_102[0] && arg_132[0] != arg_34[1] && arg_132[0] != arg_16[1] && arg_132[0] != arg_99[1] && arg_132[0] == arg_109[0] && arg_132[0] != arg_112[1] && arg_132[0] != arg_155[1] && arg_132[0] != arg_91[1] && arg_132[0] != arg_69[1] && arg_132[0] == arg_77[0] && arg_132[0] == arg_129[0] && arg_132[0] != arg_140[1] && arg_132[0] == arg_99[0] && arg_132[0] == arg_34[0] && arg_132[0] != arg_147[1] && arg_132[0] == arg_137[0] && arg_132[0] != arg_117[1] && arg_132[0] != arg_102[1] && arg_132[0] != arg_62[1] && arg_158[1] != arg_91[0] && arg_158[1] != arg_150[0] && arg_158[1] == arg_13[1] && arg_158[1] == arg_120[1] && arg_158[1] != arg_21[0] && arg_158[1] == arg_77[1] && arg_158[1] == arg_150[1] && arg_158[1] != arg_31[0] && arg_158[1] == arg_42[1] && arg_158[1] == arg_21[1] && arg_158[1] == arg_132[1] && arg_158[1] != arg_112[0] && arg_158[1] != arg_69[0] && arg_158[1] != arg_94[0] && arg_158[1] == arg_31[1] && arg_158[1] != arg_120[0] && arg_158[1] != arg_117[0] && arg_158[1] == arg_72[1] && arg_158[1] != arg_39[0] && arg_158[1] != arg_147[0] && arg_158[1] != arg_140[0] && arg_158[1] != arg_59[0] && arg_158[1] != arg_42[0] && arg_158[1] == arg_24[1] && arg_158[1] != arg_54[0] && arg_158[1] != arg_51[0] && arg_158[1] == arg_51[1] && arg_158[1] != arg_80[0] && arg_158[1] == arg_59[1] && arg_158[1] == arg_129[1] && arg_158[1] == arg_39[1] && arg_158[1] != arg_24[0] && arg_158[1] == arg_94[1] && arg_158[1] != arg_13[0] && arg_158[1] == arg_54[1] && arg_158[1] == arg_109[1] && arg_158[1] != arg_72[0] && arg_158[1] == arg_137[1] && arg_158[1] != arg_155[0] && arg_158[1] != arg_158[0] && arg_158[1] == arg_80[1] && arg_158[1] != arg_102[0] && arg_158[1] == arg_34[1] && arg_158[1] == arg_16[1] && arg_158[1] == arg_99[1] && arg_158[1] != arg_109[0] && arg_158[1] == arg_112[1] && arg_158[1] == arg_155[1] && arg_158[1] == arg_91[1] && arg_158[1] == arg_69[1] && arg_158[1] != arg_77[0] && arg_158[1] != arg_129[0] && arg_158[1] == arg_140[1] && arg_158[1] != arg_99[0] && arg_158[1] != arg_34[0] && arg_158[1] == arg_147[1] && arg_158[1] != arg_137[0] && arg_158[1] == arg_117[1] && arg_158[1] == arg_102[1] && arg_158[1] == arg_62[1] && arg_91[0] == arg_150[0] && arg_91[0] != arg_13[1] && arg_91[0] != arg_120[1] && arg_91[0] == arg_21[0] && arg_91[0] != arg_77[1] && arg_91[0] != arg_150[1] && arg_91[0] == arg_31[0] && arg_91[0] != arg_42[1] && arg_91[0] != arg_21[1] && arg_91[0] != arg_132[1] && arg_91[0] == arg_112[0] && arg_91[0] == arg_69[0] && arg_91[0] == arg_94[0] && arg_91[0] != arg_31[1] && arg_91[0] == arg_120[0] && arg_91[0] == arg_117[0] && arg_91[0] != arg_72[1] && arg_91[0] == arg_39[0] && arg_91[0] == arg_147[0] && arg_91[0] == arg_140[0] && arg_91[0] == arg_59[0] && arg_91[0] == arg_42[0] && arg_91[0] != arg_24[1] && arg_91[0] == arg_54[0] && arg_91[0] == arg_51[0] && arg_91[0] != arg_51[1] && arg_91[0] == arg_80[0] && arg_91[0] != arg_59[1] && arg_91[0] != arg_129[1] && arg_91[0] != arg_39[1] && arg_91[0] == arg_24[0] && arg_91[0] != arg_94[1] && arg_91[0] == arg_13[0] && arg_91[0] != arg_54[1] && arg_91[0] != arg_109[1] && arg_91[0] == arg_72[0] && arg_91[0] != arg_137[1] && arg_91[0] == arg_155[0] && arg_91[0] == arg_158[0] && arg_91[0] != arg_80[1] && arg_91[0] == arg_102[0] && arg_91[0] != arg_34[1] && arg_91[0] != arg_16[1] && arg_91[0] != arg_99[1] && arg_91[0] == arg_109[0] && arg_91[0] != arg_112[1] && arg_91[0] != arg_155[1] && arg_91[0] != arg_91[1] && arg_91[0] != arg_69[1] && arg_91[0] == arg_77[0] && arg_91[0] == arg_129[0] && arg_91[0] != arg_140[1] && arg_91[0] == arg_99[0] && arg_91[0] == arg_34[0] && arg_91[0] != arg_147[1] && arg_91[0] == arg_137[0] && arg_91[0] != arg_117[1] && arg_91[0] != arg_102[1] && arg_91[0] != arg_62[1] && arg_150[0] != arg_13[1] && arg_150[0] != arg_120[1] && arg_150[0] == arg_21[0] && arg_150[0] != arg_77[1] && arg_150[0] != arg_150[1] && arg_150[0] == arg_31[0] && arg_150[0] != arg_42[1] && arg_150[0] != arg_21[1] && arg_150[0] != arg_132[1] && arg_150[0] == arg_112[0] && arg_150[0] == arg_69[0] && arg_150[0] == arg_94[0] && arg_150[0] != arg_31[1] && arg_150[0] == arg_120[0] && arg_150[0] == arg_117[0] && arg_150[0] != arg_72[1] && arg_150[0] == arg_39[0] && arg_150[0] == arg_147[0] && arg_150[0] == arg_140[0] && arg_150[0] == arg_59[0] && arg_150[0] == arg_42[0] && arg_150[0] != arg_24[1] && arg_150[0] == arg_54[0] && arg_150[0] == arg_51[0] && arg_150[0] != arg_51[1] && arg_150[0] == arg_80[0] && arg_150[0] != arg_59[1] && arg_150[0] != arg_129[1] && arg_150[0] != arg_39[1] && arg_150[0] == arg_24[0] && arg_150[0] != arg_94[1] && arg_150[0] == arg_13[0] && arg_150[0] != arg_54[1] && arg_150[0] != arg_109[1] && arg_150[0] == arg_72[0] && arg_150[0] != arg_137[1] && arg_150[0] == arg_155[0] && arg_150[0] == arg_158[0] && arg_150[0] != arg_80[1] && arg_150[0] == arg_102[0] && arg_150[0] != arg_34[1] && arg_150[0] != arg_16[1] && arg_150[0] != arg_99[1] && arg_150[0] == arg_109[0] && arg_150[0] != arg_112[1] && arg_150[0] != arg_155[1] && arg_150[0] != arg_91[1] && arg_150[0] != arg_69[1] && arg_150[0] == arg_77[0] && arg_150[0] == arg_129[0] && arg_150[0] != arg_140[1] && arg_150[0] == arg_99[0] && arg_150[0] == arg_34[0] && arg_150[0] != arg_147[1] && arg_150[0] == arg_137[0] && arg_150[0] != arg_117[1] && arg_150[0] != arg_102[1] && arg_150[0] != arg_62[1] && arg_13[1] == arg_120[1] && arg_13[1] != arg_21[0] && arg_13[1] == arg_77[1] && arg_13[1] == arg_150[1] && arg_13[1] != arg_31[0] && arg_13[1] == arg_42[1] && arg_13[1] == arg_21[1] && arg_13[1] == arg_132[1] && arg_13[1] != arg_112[0] && arg_13[1] != arg_69[0] && arg_13[1] != arg_94[0] && arg_13[1] == arg_31[1] && arg_13[1] != arg_120[0] && arg_13[1] != arg_117[0] && arg_13[1] == arg_72[1] && arg_13[1] != arg_39[0] && arg_13[1] != arg_147[0] && arg_13[1] != arg_140[0] && arg_13[1] != arg_59[0] && arg_13[1] != arg_42[0] && arg_13[1] == arg_24[1] && arg_13[1] != arg_54[0] && arg_13[1] != arg_51[0] && arg_13[1] == arg_51[1] && arg_13[1] != arg_80[0] && arg_13[1] == arg_59[1] && arg_13[1] == arg_129[1] && arg_13[1] == arg_39[1] && arg_13[1] != arg_24[0] && arg_13[1] == arg_94[1] && arg_13[1] != arg_13[0] && arg_13[1] == arg_54[1] && arg_13[1] == arg_109[1] && arg_13[1] != arg_72[0] && arg_13[1] == arg_137[1] && arg_13[1] != arg_155[0] && arg_13[1] != arg_158[0] && arg_13[1] == arg_80[1] && arg_13[1] != arg_102[0] && arg_13[1] == arg_34[1] && arg_13[1] == arg_16[1] && arg_13[1] == arg_99[1] && arg_13[1] != arg_109[0] && arg_13[1] == arg_112[1] && arg_13[1] == arg_155[1] && arg_13[1] == arg_91[1] && arg_13[1] == arg_69[1] && arg_13[1] != arg_77[0] && arg_13[1] != arg_129[0] && arg_13[1] == arg_140[1] && arg_13[1] != arg_99[0] && arg_13[1] != arg_34[0] && arg_13[1] == arg_147[1] && arg_13[1] != arg_137[0] && arg_13[1] == arg_117[1] && arg_13[1] == arg_102[1] && arg_13[1] == arg_62[1] && arg_120[1] != arg_21[0] && arg_120[1] == arg_77[1] && arg_120[1] == arg_150[1] && arg_120[1] != arg_31[0] && arg_120[1] == arg_42[1] && arg_120[1] == arg_21[1] && arg_120[1] == arg_132[1] && arg_120[1] != arg_112[0] && arg_120[1] != arg_69[0] && arg_120[1] != arg_94[0] && arg_120[1] == arg_31[1] && arg_120[1] != arg_120[0] && arg_120[1] != arg_117[0] && arg_120[1] == arg_72[1] && arg_120[1] != arg_39[0] && arg_120[1] != arg_147[0] && arg_120[1] != arg_140[0] && arg_120[1] != arg_59[0] && arg_120[1] != arg_42[0] && arg_120[1] == arg_24[1] && arg_120[1] != arg_54[0] && arg_120[1] != arg_51[0] && arg_120[1] == arg_51[1] && arg_120[1] != arg_80[0] && arg_120[1] == arg_59[1] && arg_120[1] == arg_129[1] && arg_120[1] == arg_39[1] && arg_120[1] != arg_24[0] && arg_120[1] == arg_94[1] && arg_120[1] != arg_13[0] && arg_120[1] == arg_54[1] && arg_120[1] == arg_109[1] && arg_120[1] != arg_72[0] && arg_120[1] == arg_137[1] && arg_120[1] != arg_155[0] && arg_120[1] != arg_158[0] && arg_120[1] == arg_80[1] && arg_120[1] != arg_102[0] && arg_120[1] == arg_34[1] && arg_120[1] == arg_16[1] && arg_120[1] == arg_99[1] && arg_120[1] != arg_109[0] && arg_120[1] == arg_112[1] && arg_120[1] == arg_155[1] && arg_120[1] == arg_91[1] && arg_120[1] == arg_69[1] && arg_120[1] != arg_77[0] && arg_120[1] != arg_129[0] && arg_120[1] == arg_140[1] && arg_120[1] != arg_99[0] && arg_120[1] != arg_34[0] && arg_120[1] == arg_147[1] && arg_120[1] != arg_137[0] && arg_120[1] == arg_117[1] && arg_120[1] == arg_102[1] && arg_120[1] == arg_62[1] && arg_21[0] != arg_77[1] && arg_21[0] != arg_150[1] && arg_21[0] == arg_31[0] && arg_21[0] != arg_42[1] && arg_21[0] != arg_21[1] && arg_21[0] != arg_132[1] && arg_21[0] == arg_112[0] && arg_21[0] == arg_69[0] && arg_21[0] == arg_94[0] && arg_21[0] != arg_31[1] && arg_21[0] == arg_120[0] && arg_21[0] == arg_117[0] && arg_21[0] != arg_72[1] && arg_21[0] == arg_39[0] && arg_21[0] == arg_147[0] && arg_21[0] == arg_140[0] && arg_21[0] == arg_59[0] && arg_21[0] == arg_42[0] && arg_21[0] != arg_24[1] && arg_21[0] == arg_54[0] && arg_21[0] == arg_51[0] && arg_21[0] != arg_51[1] && arg_21[0] == arg_80[0] && arg_21[0] != arg_59[1] && arg_21[0] != arg_129[1] && arg_21[0] != arg_39[1] && arg_21[0] == arg_24[0] && arg_21[0] != arg_94[1] && arg_21[0] == arg_13[0] && arg_21[0] != arg_54[1] && arg_21[0] != arg_109[1] && arg_21[0] == arg_72[0] && arg_21[0] != arg_137[1] && arg_21[0] == arg_155[0] && arg_21[0] == arg_158[0] && arg_21[0] != arg_80[1] && arg_21[0] == arg_102[0] && arg_21[0] != arg_34[1] && arg_21[0] != arg_16[1] && arg_21[0] != arg_99[1] && arg_21[0] == arg_109[0] && arg_21[0] != arg_112[1] && arg_21[0] != arg_155[1] && arg_21[0] != arg_91[1] && arg_21[0] != arg_69[1] && arg_21[0] == arg_77[0] && arg_21[0] == arg_129[0] && arg_21[0] != arg_140[1] && arg_21[0] == arg_99[0] && arg_21[0] == arg_34[0] && arg_21[0] != arg_147[1] && arg_21[0] == arg_137[0] && arg_21[0] != arg_117[1] && arg_21[0] != arg_102[1] && arg_21[0] != arg_62[1] && arg_77[1] == arg_150[1] && arg_77[1] != arg_31[0] && arg_77[1] == arg_42[1] && arg_77[1] == arg_21[1] && arg_77[1] == arg_132[1] && arg_77[1] != arg_112[0] && arg_77[1] != arg_69[0] && arg_77[1] != arg_94[0] && arg_77[1] == arg_31[1] && arg_77[1] != arg_120[0] && arg_77[1] != arg_117[0] && arg_77[1] == arg_72[1] && arg_77[1] != arg_39[0] && arg_77[1] != arg_147[0] && arg_77[1] != arg_140[0] && arg_77[1] != arg_59[0] && arg_77[1] != arg_42[0] && arg_77[1] == arg_24[1] && arg_77[1] != arg_54[0] && arg_77[1] != arg_51[0] && arg_77[1] == arg_51[1] && arg_77[1] != arg_80[0] && arg_77[1] == arg_59[1] && arg_77[1] == arg_129[1] && arg_77[1] == arg_39[1] && arg_77[1] != arg_24[0] && arg_77[1] == arg_94[1] && arg_77[1] != arg_13[0] && arg_77[1] == arg_54[1] && arg_77[1] == arg_109[1] && arg_77[1] != arg_72[0] && arg_77[1] == arg_137[1] && arg_77[1] != arg_155[0] && arg_77[1] != arg_158[0] && arg_77[1] == arg_80[1] && arg_77[1] != arg_102[0] && arg_77[1] == arg_34[1] && arg_77[1] == arg_16[1] && arg_77[1] == arg_99[1] && arg_77[1] != arg_109[0] && arg_77[1] == arg_112[1] && arg_77[1] == arg_155[1] && arg_77[1] == arg_91[1] && arg_77[1] == arg_69[1] && arg_77[1] != arg_77[0] && arg_77[1] != arg_129[0] && arg_77[1] == arg_140[1] && arg_77[1] != arg_99[0] && arg_77[1] != arg_34[0] && arg_77[1] == arg_147[1] && arg_77[1] != arg_137[0] && arg_77[1] == arg_117[1] && arg_77[1] == arg_102[1] && arg_77[1] == arg_62[1] && arg_150[1] != arg_31[0] && arg_150[1] == arg_42[1] && arg_150[1] == arg_21[1] && arg_150[1] == arg_132[1] && arg_150[1] != arg_112[0] && arg_150[1] != arg_69[0] && arg_150[1] != arg_94[0] && arg_150[1] == arg_31[1] && arg_150[1] != arg_120[0] && arg_150[1] != arg_117[0] && arg_150[1] == arg_72[1] && arg_150[1] != arg_39[0] && arg_150[1] != arg_147[0] && arg_150[1] != arg_140[0] && arg_150[1] != arg_59[0] && arg_150[1] != arg_42[0] && arg_150[1] == arg_24[1] && arg_150[1] != arg_54[0] && arg_150[1] != arg_51[0] && arg_150[1] == arg_51[1] && arg_150[1] != arg_80[0] && arg_150[1] == arg_59[1] && arg_150[1] == arg_129[1] && arg_150[1] == arg_39[1] && arg_150[1] != arg_24[0] && arg_150[1] == arg_94[1] && arg_150[1] != arg_13[0] && arg_150[1] == arg_54[1] && arg_150[1] == arg_109[1] && arg_150[1] != arg_72[0] && arg_150[1] == arg_137[1] && arg_150[1] != arg_155[0] && arg_150[1] != arg_158[0] && arg_150[1] == arg_80[1] && arg_150[1] != arg_102[0] && arg_150[1] == arg_34[1] && arg_150[1] == arg_16[1] && arg_150[1] == arg_99[1] && arg_150[1] != arg_109[0] && arg_150[1] == arg_112[1] && arg_150[1] == arg_155[1] && arg_150[1] == arg_91[1] && arg_150[1] == arg_69[1] && arg_150[1] != arg_77[0] && arg_150[1] != arg_129[0] && arg_150[1] == arg_140[1] && arg_150[1] != arg_99[0] && arg_150[1] != arg_34[0] && arg_150[1] == arg_147[1] && arg_150[1] != arg_137[0] && arg_150[1] == arg_117[1] && arg_150[1] == arg_102[1] && arg_150[1] == arg_62[1] && arg_31[0] != arg_42[1] && arg_31[0] != arg_21[1] && arg_31[0] != arg_132[1] && arg_31[0] == arg_112[0] && arg_31[0] == arg_69[0] && arg_31[0] == arg_94[0] && arg_31[0] != arg_31[1] && arg_31[0] == arg_120[0] && arg_31[0] == arg_117[0] && arg_31[0] != arg_72[1] && arg_31[0] == arg_39[0] && arg_31[0] == arg_147[0] && arg_31[0] == arg_140[0] && arg_31[0] == arg_59[0] && arg_31[0] == arg_42[0] && arg_31[0] != arg_24[1] && arg_31[0] == arg_54[0] && arg_31[0] == arg_51[0] && arg_31[0] != arg_51[1] && arg_31[0] == arg_80[0] && arg_31[0] != arg_59[1] && arg_31[0] != arg_129[1] && arg_31[0] != arg_39[1] && arg_31[0] == arg_24[0] && arg_31[0] != arg_94[1] && arg_31[0] == arg_13[0] && arg_31[0] != arg_54[1] && arg_31[0] != arg_109[1] && arg_31[0] == arg_72[0] && arg_31[0] != arg_137[1] && arg_31[0] == arg_155[0] && arg_31[0] == arg_158[0] && arg_31[0] != arg_80[1] && arg_31[0] == arg_102[0] && arg_31[0] != arg_34[1] && arg_31[0] != arg_16[1] && arg_31[0] != arg_99[1] && arg_31[0] == arg_109[0] && arg_31[0] != arg_112[1] && arg_31[0] != arg_155[1] && arg_31[0] != arg_91[1] && arg_31[0] != arg_69[1] && arg_31[0] == arg_77[0] && arg_31[0] == arg_129[0] && arg_31[0] != arg_140[1] && arg_31[0] == arg_99[0] && arg_31[0] == arg_34[0] && arg_31[0] != arg_147[1] && arg_31[0] == arg_137[0] && arg_31[0] != arg_117[1] && arg_31[0] != arg_102[1] && arg_31[0] != arg_62[1] && arg_42[1] == arg_21[1] && arg_42[1] == arg_132[1] && arg_42[1] != arg_112[0] && arg_42[1] != arg_69[0] && arg_42[1] != arg_94[0] && arg_42[1] == arg_31[1] && arg_42[1] != arg_120[0] && arg_42[1] != arg_117[0] && arg_42[1] == arg_72[1] && arg_42[1] != arg_39[0] && arg_42[1] != arg_147[0] && arg_42[1] != arg_140[0] && arg_42[1] != arg_59[0] && arg_42[1] != arg_42[0] && arg_42[1] == arg_24[1] && arg_42[1] != arg_54[0] && arg_42[1] != arg_51[0] && arg_42[1] == arg_51[1] && arg_42[1] != arg_80[0] && arg_42[1] == arg_59[1] && arg_42[1] == arg_129[1] && arg_42[1] == arg_39[1] && arg_42[1] != arg_24[0] && arg_42[1] == arg_94[1] && arg_42[1] != arg_13[0] && arg_42[1] == arg_54[1] && arg_42[1] == arg_109[1] && arg_42[1] != arg_72[0] && arg_42[1] == arg_137[1] && arg_42[1] != arg_155[0] && arg_42[1] != arg_158[0] && arg_42[1] == arg_80[1] && arg_42[1] != arg_102[0] && arg_42[1] == arg_34[1] && arg_42[1] == arg_16[1] && arg_42[1] == arg_99[1] && arg_42[1] != arg_109[0] && arg_42[1] == arg_112[1] && arg_42[1] == arg_155[1] && arg_42[1] == arg_91[1] && arg_42[1] == arg_69[1] && arg_42[1] != arg_77[0] && arg_42[1] != arg_129[0] && arg_42[1] == arg_140[1] && arg_42[1] != arg_99[0] && arg_42[1] != arg_34[0] && arg_42[1] == arg_147[1] && arg_42[1] != arg_137[0] && arg_42[1] == arg_117[1] && arg_42[1] == arg_102[1] && arg_42[1] == arg_62[1] && arg_21[1] == arg_132[1] && arg_21[1] != arg_112[0] && arg_21[1] != arg_69[0] && arg_21[1] != arg_94[0] && arg_21[1] == arg_31[1] && arg_21[1] != arg_120[0] && arg_21[1] != arg_117[0] && arg_21[1] == arg_72[1] && arg_21[1] != arg_39[0] && arg_21[1] != arg_147[0] && arg_21[1] != arg_140[0] && arg_21[1] != arg_59[0] && arg_21[1] != arg_42[0] && arg_21[1] == arg_24[1] && arg_21[1] != arg_54[0] && arg_21[1] != arg_51[0] && arg_21[1] == arg_51[1] && arg_21[1] != arg_80[0] && arg_21[1] == arg_59[1] && arg_21[1] == arg_129[1] && arg_21[1] == arg_39[1] && arg_21[1] != arg_24[0] && arg_21[1] == arg_94[1] && arg_21[1] != arg_13[0] && arg_21[1] == arg_54[1] && arg_21[1] == arg_109[1] && arg_21[1] != arg_72[0] && arg_21[1] == arg_137[1] && arg_21[1] != arg_155[0] && arg_21[1] != arg_158[0] && arg_21[1] == arg_80[1] && arg_21[1] != arg_102[0] && arg_21[1] == arg_34[1] && arg_21[1] == arg_16[1] && arg_21[1] == arg_99[1] && arg_21[1] != arg_109[0] && arg_21[1] == arg_112[1] && arg_21[1] == arg_155[1] && arg_21[1] == arg_91[1] && arg_21[1] == arg_69[1] && arg_21[1] != arg_77[0] && arg_21[1] != arg_129[0] && arg_21[1] == arg_140[1] && arg_21[1] != arg_99[0] && arg_21[1] != arg_34[0] && arg_21[1] == arg_147[1] && arg_21[1] != arg_137[0] && arg_21[1] == arg_117[1] && arg_21[1] == arg_102[1] && arg_21[1] == arg_62[1] && arg_132[1] != arg_112[0] && arg_132[1] != arg_69[0] && arg_132[1] != arg_94[0] && arg_132[1] == arg_31[1] && arg_132[1] != arg_120[0] && arg_132[1] != arg_117[0] && arg_132[1] == arg_72[1] && arg_132[1] != arg_39[0] && arg_132[1] != arg_147[0] && arg_132[1] != arg_140[0] && arg_132[1] != arg_59[0] && arg_132[1] != arg_42[0] && arg_132[1] == arg_24[1] && arg_132[1] != arg_54[0] && arg_132[1] != arg_51[0] && arg_132[1] == arg_51[1] && arg_132[1] != arg_80[0] && arg_132[1] == arg_59[1] && arg_132[1] == arg_129[1] && arg_132[1] == arg_39[1] && arg_132[1] != arg_24[0] && arg_132[1] == arg_94[1] && arg_132[1] != arg_13[0] && arg_132[1] == arg_54[1] && arg_132[1] == arg_109[1] && arg_132[1] != arg_72[0] && arg_132[1] == arg_137[1] && arg_132[1] != arg_155[0] && arg_132[1] != arg_158[0] && arg_132[1] == arg_80[1] && arg_132[1] != arg_102[0] && arg_132[1] == arg_34[1] && arg_132[1] == arg_16[1] && arg_132[1] == arg_99[1] && arg_132[1] != arg_109[0] && arg_132[1] == arg_112[1] && arg_132[1] == arg_155[1] && arg_132[1] == arg_91[1] && arg_132[1] == arg_69[1] && arg_132[1] != arg_77[0] && arg_132[1] != arg_129[0] && arg_132[1] == arg_140[1] && arg_132[1] != arg_99[0] && arg_132[1] != arg_34[0] && arg_132[1] == arg_147[1] && arg_132[1] != arg_137[0] && arg_132[1] == arg_117[1] && arg_132[1] == arg_102[1] && arg_132[1] == arg_62[1] && arg_112[0] == arg_69[0] && arg_112[0] == arg_94[0] && arg_112[0] != arg_31[1] && arg_112[0] == arg_120[0] && arg_112[0] == arg_117[0] && arg_112[0] != arg_72[1] && arg_112[0] == arg_39[0] && arg_112[0] == arg_147[0] && arg_112[0] == arg_140[0] && arg_112[0] == arg_59[0] && arg_112[0] == arg_42[0] && arg_112[0] != arg_24[1] && arg_112[0] == arg_54[0] && arg_112[0] == arg_51[0] && arg_112[0] != arg_51[1] && arg_112[0] == arg_80[0] && arg_112[0] != arg_59[1] && arg_112[0] != arg_129[1] && arg_112[0] != arg_39[1] && arg_112[0] == arg_24[0] && arg_112[0] != arg_94[1] && arg_112[0] == arg_13[0] && arg_112[0] != arg_54[1] && arg_112[0] != arg_109[1] && arg_112[0] == arg_72[0] && arg_112[0] != arg_137[1] && arg_112[0] == arg_155[0] && arg_112[0] == arg_158[0] && arg_112[0] != arg_80[1] && arg_112[0] == arg_102[0] && arg_112[0] != arg_34[1] && arg_112[0] != arg_16[1] && arg_112[0] != arg_99[1] && arg_112[0] == arg_109[0] && arg_112[0] != arg_112[1] && arg_112[0] != arg_155[1] && arg_112[0] != arg_91[1] && arg_112[0] != arg_69[1] && arg_112[0] == arg_77[0] && arg_112[0] == arg_129[0] && arg_112[0] != arg_140[1] && arg_112[0] == arg_99[0] && arg_112[0] == arg_34[0] && arg_112[0] != arg_147[1] && arg_112[0] == arg_137[0] && arg_112[0] != arg_117[1] && arg_112[0] != arg_102[1] && arg_112[0] != arg_62[1] && arg_69[0] == arg_94[0] && arg_69[0] != arg_31[1] && arg_69[0] == arg_120[0] && arg_69[0] == arg_117[0] && arg_69[0] != arg_72[1] && arg_69[0] == arg_39[0] && arg_69[0] == arg_147[0] && arg_69[0] == arg_140[0] && arg_69[0] == arg_59[0] && arg_69[0] == arg_42[0] && arg_69[0] != arg_24[1] && arg_69[0] == arg_54[0] && arg_69[0] == arg_51[0] && arg_69[0] != arg_51[1] && arg_69[0] == arg_80[0] && arg_69[0] != arg_59[1] && arg_69[0] != arg_129[1] && arg_69[0] != arg_39[1] && arg_69[0] == arg_24[0] && arg_69[0] != arg_94[1] && arg_69[0] == arg_13[0] && arg_69[0] != arg_54[1] && arg_69[0] != arg_109[1] && arg_69[0] == arg_72[0] && arg_69[0] != arg_137[1] && arg_69[0] == arg_155[0] && arg_69[0] == arg_158[0] && arg_69[0] != arg_80[1] && arg_69[0] == arg_102[0] && arg_69[0] != arg_34[1] && arg_69[0] != arg_16[1] && arg_69[0] != arg_99[1] && arg_69[0] == arg_109[0] && arg_69[0] != arg_112[1] && arg_69[0] != arg_155[1] && arg_69[0] != arg_91[1] && arg_69[0] != arg_69[1] && arg_69[0] == arg_77[0] && arg_69[0] == arg_129[0] && arg_69[0] != arg_140[1] && arg_69[0] == arg_99[0] && arg_69[0] == arg_34[0] && arg_69[0] != arg_147[1] && arg_69[0] == arg_137[0] && arg_69[0] != arg_117[1] && arg_69[0] != arg_102[1] && arg_69[0] != arg_62[1] && arg_94[0] != arg_31[1] && arg_94[0] == arg_120[0] && arg_94[0] == arg_117[0] && arg_94[0] != arg_72[1] && arg_94[0] == arg_39[0] && arg_94[0] == arg_147[0] && arg_94[0] == arg_140[0] && arg_94[0] == arg_59[0] && arg_94[0] == arg_42[0] && arg_94[0] != arg_24[1] && arg_94[0] == arg_54[0] && arg_94[0] == arg_51[0] && arg_94[0] != arg_51[1] && arg_94[0] == arg_80[0] && arg_94[0] != arg_59[1] && arg_94[0] != arg_129[1] && arg_94[0] != arg_39[1] && arg_94[0] == arg_24[0] && arg_94[0] != arg_94[1] && arg_94[0] == arg_13[0] && arg_94[0] != arg_54[1] && arg_94[0] != arg_109[1] && arg_94[0] == arg_72[0] && arg_94[0] != arg_137[1] && arg_94[0] == arg_155[0] && arg_94[0] == arg_158[0] && arg_94[0] != arg_80[1] && arg_94[0] == arg_102[0] && arg_94[0] != arg_34[1] && arg_94[0] != arg_16[1] && arg_94[0] != arg_99[1] && arg_94[0] == arg_109[0] && arg_94[0] != arg_112[1] && arg_94[0] != arg_155[1] && arg_94[0] != arg_91[1] && arg_94[0] != arg_69[1] && arg_94[0] == arg_77[0] && arg_94[0] == arg_129[0] && arg_94[0] != arg_140[1] && arg_94[0] == arg_99[0] && arg_94[0] == arg_34[0] && arg_94[0] != arg_147[1] && arg_94[0] == arg_137[0] && arg_94[0] != arg_117[1] && arg_94[0] != arg_102[1] && arg_94[0] != arg_62[1] && arg_31[1] != arg_120[0] && arg_31[1] != arg_117[0] && arg_31[1] == arg_72[1] && arg_31[1] != arg_39[0] && arg_31[1] != arg_147[0] && arg_31[1] != arg_140[0] && arg_31[1] != arg_59[0] && arg_31[1] != arg_42[0] && arg_31[1] == arg_24[1] && arg_31[1] != arg_54[0] && arg_31[1] != arg_51[0] && arg_31[1] == arg_51[1] && arg_31[1] != arg_80[0] && arg_31[1] == arg_59[1] && arg_31[1] == arg_129[1] && arg_31[1] == arg_39[1] && arg_31[1] != arg_24[0] && arg_31[1] == arg_94[1] && arg_31[1] != arg_13[0] && arg_31[1] == arg_54[1] && arg_31[1] == arg_109[1] && arg_31[1] != arg_72[0] && arg_31[1] == arg_137[1] && arg_31[1] != arg_155[0] && arg_31[1] != arg_158[0] && arg_31[1] == arg_80[1] && arg_31[1] != arg_102[0] && arg_31[1] == arg_34[1] && arg_31[1] == arg_16[1] && arg_31[1] == arg_99[1] && arg_31[1] != arg_109[0] && arg_31[1] == arg_112[1] && arg_31[1] == arg_155[1] && arg_31[1] == arg_91[1] && arg_31[1] == arg_69[1] && arg_31[1] != arg_77[0] && arg_31[1] != arg_129[0] && arg_31[1] == arg_140[1] && arg_31[1] != arg_99[0] && arg_31[1] != arg_34[0] && arg_31[1] == arg_147[1] && arg_31[1] != arg_137[0] && arg_31[1] == arg_117[1] && arg_31[1] == arg_102[1] && arg_31[1] == arg_62[1] && arg_120[0] == arg_117[0] && arg_120[0] != arg_72[1] && arg_120[0] == arg_39[0] && arg_120[0] == arg_147[0] && arg_120[0] == arg_140[0] && arg_120[0] == arg_59[0] && arg_120[0] == arg_42[0] && arg_120[0] != arg_24[1] && arg_120[0] == arg_54[0] && arg_120[0] == arg_51[0] && arg_120[0] != arg_51[1] && arg_120[0] == arg_80[0] && arg_120[0] != arg_59[1] && arg_120[0] != arg_129[1] && arg_120[0] != arg_39[1] && arg_120[0] == arg_24[0] && arg_120[0] != arg_94[1] && arg_120[0] == arg_13[0] && arg_120[0] != arg_54[1] && arg_120[0] != arg_109[1] && arg_120[0] == arg_72[0] && arg_120[0] != arg_137[1] && arg_120[0] == arg_155[0] && arg_120[0] == arg_158[0] && arg_120[0] != arg_80[1] && arg_120[0] == arg_102[0] && arg_120[0] != arg_34[1] && arg_120[0] != arg_16[1] && arg_120[0] != arg_99[1] && arg_120[0] == arg_109[0] && arg_120[0] != arg_112[1] && arg_120[0] != arg_155[1] && arg_120[0] != arg_91[1] && arg_120[0] != arg_69[1] && arg_120[0] == arg_77[0] && arg_120[0] == arg_129[0] && arg_120[0] != arg_140[1] && arg_120[0] == arg_99[0] && arg_120[0] == arg_34[0] && arg_120[0] != arg_147[1] && arg_120[0] == arg_137[0] && arg_120[0] != arg_117[1] && arg_120[0] != arg_102[1] && arg_120[0] != arg_62[1] && arg_117[0] != arg_72[1] && arg_117[0] == arg_39[0] && arg_117[0] == arg_147[0] && arg_117[0] == arg_140[0] && arg_117[0] == arg_59[0] && arg_117[0] == arg_42[0] && arg_117[0] != arg_24[1] && arg_117[0] == arg_54[0] && arg_117[0] == arg_51[0] && arg_117[0] != arg_51[1] && arg_117[0] == arg_80[0] && arg_117[0] != arg_59[1] && arg_117[0] != arg_129[1] && arg_117[0] != arg_39[1] && arg_117[0] == arg_24[0] && arg_117[0] != arg_94[1] && arg_117[0] == arg_13[0] && arg_117[0] != arg_54[1] && arg_117[0] != arg_109[1] && arg_117[0] == arg_72[0] && arg_117[0] != arg_137[1] && arg_117[0] == arg_155[0] && arg_117[0] == arg_158[0] && arg_117[0] != arg_80[1] && arg_117[0] == arg_102[0] && arg_117[0] != arg_34[1] && arg_117[0] != arg_16[1] && arg_117[0] != arg_99[1] && arg_117[0] == arg_109[0] && arg_117[0] != arg_112[1] && arg_117[0] != arg_155[1] && arg_117[0] != arg_91[1] && arg_117[0] != arg_69[1] && arg_117[0] == arg_77[0] && arg_117[0] == arg_129[0] && arg_117[0] != arg_140[1] && arg_117[0] == arg_99[0] && arg_117[0] == arg_34[0] && arg_117[0] != arg_147[1] && arg_117[0] == arg_137[0] && arg_117[0] != arg_117[1] && arg_117[0] != arg_102[1] && arg_117[0] != arg_62[1] && arg_72[1] != arg_39[0] && arg_72[1] != arg_147[0] && arg_72[1] != arg_140[0] && arg_72[1] != arg_59[0] && arg_72[1] != arg_42[0] && arg_72[1] == arg_24[1] && arg_72[1] != arg_54[0] && arg_72[1] != arg_51[0] && arg_72[1] == arg_51[1] && arg_72[1] != arg_80[0] && arg_72[1] == arg_59[1] && arg_72[1] == arg_129[1] && arg_72[1] == arg_39[1] && arg_72[1] != arg_24[0] && arg_72[1] == arg_94[1] && arg_72[1] != arg_13[0] && arg_72[1] == arg_54[1] && arg_72[1] == arg_109[1] && arg_72[1] != arg_72[0] && arg_72[1] == arg_137[1] && arg_72[1] != arg_155[0] && arg_72[1] != arg_158[0] && arg_72[1] == arg_80[1] && arg_72[1] != arg_102[0] && arg_72[1] == arg_34[1] && arg_72[1] == arg_16[1] && arg_72[1] == arg_99[1] && arg_72[1] != arg_109[0] && arg_72[1] == arg_112[1] && arg_72[1] == arg_155[1] && arg_72[1] == arg_91[1] && arg_72[1] == arg_69[1] && arg_72[1] != arg_77[0] && arg_72[1] != arg_129[0] && arg_72[1] == arg_140[1] && arg_72[1] != arg_99[0] && arg_72[1] != arg_34[0] && arg_72[1] == arg_147[1] && arg_72[1] != arg_137[0] && arg_72[1] == arg_117[1] && arg_72[1] == arg_102[1] && arg_72[1] == arg_62[1] && arg_39[0] == arg_147[0] && arg_39[0] == arg_140[0] && arg_39[0] == arg_59[0] && arg_39[0] == arg_42[0] && arg_39[0] != arg_24[1] && arg_39[0] == arg_54[0] && arg_39[0] == arg_51[0] && arg_39[0] != arg_51[1] && arg_39[0] == arg_80[0] && arg_39[0] != arg_59[1] && arg_39[0] != arg_129[1] && arg_39[0] != arg_39[1] && arg_39[0] == arg_24[0] && arg_39[0] != arg_94[1] && arg_39[0] == arg_13[0] && arg_39[0] != arg_54[1] && arg_39[0] != arg_109[1] && arg_39[0] == arg_72[0] && arg_39[0] != arg_137[1] && arg_39[0] == arg_155[0] && arg_39[0] == arg_158[0] && arg_39[0] != arg_80[1] && arg_39[0] == arg_102[0] && arg_39[0] != arg_34[1] && arg_39[0] != arg_16[1] && arg_39[0] != arg_99[1] && arg_39[0] == arg_109[0] && arg_39[0] != arg_112[1] && arg_39[0] != arg_155[1] && arg_39[0] != arg_91[1] && arg_39[0] != arg_69[1] && arg_39[0] == arg_77[0] && arg_39[0] == arg_129[0] && arg_39[0] != arg_140[1] && arg_39[0] == arg_99[0] && arg_39[0] == arg_34[0] && arg_39[0] != arg_147[1] && arg_39[0] == arg_137[0] && arg_39[0] != arg_117[1] && arg_39[0] != arg_102[1] && arg_39[0] != arg_62[1] && arg_147[0] == arg_140[0] && arg_147[0] == arg_59[0] && arg_147[0] == arg_42[0] && arg_147[0] != arg_24[1] && arg_147[0] == arg_54[0] && arg_147[0] == arg_51[0] && arg_147[0] != arg_51[1] && arg_147[0] == arg_80[0] && arg_147[0] != arg_59[1] && arg_147[0] != arg_129[1] && arg_147[0] != arg_39[1] && arg_147[0] == arg_24[0] && arg_147[0] != arg_94[1] && arg_147[0] == arg_13[0] && arg_147[0] != arg_54[1] && arg_147[0] != arg_109[1] && arg_147[0] == arg_72[0] && arg_147[0] != arg_137[1] && arg_147[0] == arg_155[0] && arg_147[0] == arg_158[0] && arg_147[0] != arg_80[1] && arg_147[0] == arg_102[0] && arg_147[0] != arg_34[1] && arg_147[0] != arg_16[1] && arg_147[0] != arg_99[1] && arg_147[0] == arg_109[0] && arg_147[0] != arg_112[1] && arg_147[0] != arg_155[1] && arg_147[0] != arg_91[1] && arg_147[0] != arg_69[1] && arg_147[0] == arg_77[0] && arg_147[0] == arg_129[0] && arg_147[0] != arg_140[1] && arg_147[0] == arg_99[0] && arg_147[0] == arg_34[0] && arg_147[0] != arg_147[1] && arg_147[0] == arg_137[0] && arg_147[0] != arg_117[1] && arg_147[0] != arg_102[1] && arg_147[0] != arg_62[1] && arg_140[0] == arg_59[0] && arg_140[0] == arg_42[0] && arg_140[0] != arg_24[1] && arg_140[0] == arg_54[0] && arg_140[0] == arg_51[0] && arg_140[0] != arg_51[1] && arg_140[0] == arg_80[0] && arg_140[0] != arg_59[1] && arg_140[0] != arg_129[1] && arg_140[0] != arg_39[1] && arg_140[0] == arg_24[0] && arg_140[0] != arg_94[1] && arg_140[0] == arg_13[0] && arg_140[0] != arg_54[1] && arg_140[0] != arg_109[1] && arg_140[0] == arg_72[0] && arg_140[0] != arg_137[1] && arg_140[0] == arg_155[0] && arg_140[0] == arg_158[0] && arg_140[0] != arg_80[1] && arg_140[0] == arg_102[0] && arg_140[0] != arg_34[1] && arg_140[0] != arg_16[1] && arg_140[0] != arg_99[1] && arg_140[0] == arg_109[0] && arg_140[0] != arg_112[1] && arg_140[0] != arg_155[1] && arg_140[0] != arg_91[1] && arg_140[0] != arg_69[1] && arg_140[0] == arg_77[0] && arg_140[0] == arg_129[0] && arg_140[0] != arg_140[1] && arg_140[0] == arg_99[0] && arg_140[0] == arg_34[0] && arg_140[0] != arg_147[1] && arg_140[0] == arg_137[0] && arg_140[0] != arg_117[1] && arg_140[0] != arg_102[1] && arg_140[0] != arg_62[1] && arg_59[0] == arg_42[0] && arg_59[0] != arg_24[1] && arg_59[0] == arg_54[0] && arg_59[0] == arg_51[0] && arg_59[0] != arg_51[1] && arg_59[0] == arg_80[0] && arg_59[0] != arg_59[1] && arg_59[0] != arg_129[1] && arg_59[0] != arg_39[1] && arg_59[0] == arg_24[0] && arg_59[0] != arg_94[1] && arg_59[0] == arg_13[0] && arg_59[0] != arg_54[1] && arg_59[0] != arg_109[1] && arg_59[0] == arg_72[0] && arg_59[0] != arg_137[1] && arg_59[0] == arg_155[0] && arg_59[0] == arg_158[0] && arg_59[0] != arg_80[1] && arg_59[0] == arg_102[0] && arg_59[0] != arg_34[1] && arg_59[0] != arg_16[1] && arg_59[0] != arg_99[1] && arg_59[0] == arg_109[0] && arg_59[0] != arg_112[1] && arg_59[0] != arg_155[1] && arg_59[0] != arg_91[1] && arg_59[0] != arg_69[1] && arg_59[0] == arg_77[0] && arg_59[0] == arg_129[0] && arg_59[0] != arg_140[1] && arg_59[0] == arg_99[0] && arg_59[0] == arg_34[0] && arg_59[0] != arg_147[1] && arg_59[0] == arg_137[0] && arg_59[0] != arg_117[1] && arg_59[0] != arg_102[1] && arg_59[0] != arg_62[1] && arg_42[0] != arg_24[1] && arg_42[0] == arg_54[0] && arg_42[0] == arg_51[0] && arg_42[0] != arg_51[1] && arg_42[0] == arg_80[0] && arg_42[0] != arg_59[1] && arg_42[0] != arg_129[1] && arg_42[0] != arg_39[1] && arg_42[0] == arg_24[0] && arg_42[0] != arg_94[1] && arg_42[0] == arg_13[0] && arg_42[0] != arg_54[1] && arg_42[0] != arg_109[1] && arg_42[0] == arg_72[0] && arg_42[0] != arg_137[1] && arg_42[0] == arg_155[0] && arg_42[0] == arg_158[0] && arg_42[0] != arg_80[1] && arg_42[0] == arg_102[0] && arg_42[0] != arg_34[1] && arg_42[0] != arg_16[1] && arg_42[0] != arg_99[1] && arg_42[0] == arg_109[0] && arg_42[0] != arg_112[1] && arg_42[0] != arg_155[1] && arg_42[0] != arg_91[1] && arg_42[0] != arg_69[1] && arg_42[0] == arg_77[0] && arg_42[0] == arg_129[0] && arg_42[0] != arg_140[1] && arg_42[0] == arg_99[0] && arg_42[0] == arg_34[0] && arg_42[0] != arg_147[1] && arg_42[0] == arg_137[0] && arg_42[0] != arg_117[1] && arg_42[0] != arg_102[1] && arg_42[0] != arg_62[1] && arg_24[1] != arg_54[0] && arg_24[1] != arg_51[0] && arg_24[1] == arg_51[1] && arg_24[1] != arg_80[0] && arg_24[1] == arg_59[1] && arg_24[1] == arg_129[1] && arg_24[1] == arg_39[1] && arg_24[1] != arg_24[0] && arg_24[1] == arg_94[1] && arg_24[1] != arg_13[0] && arg_24[1] == arg_54[1] && arg_24[1] == arg_109[1] && arg_24[1] != arg_72[0] && arg_24[1] == arg_137[1] && arg_24[1] != arg_155[0] && arg_24[1] != arg_158[0] && arg_24[1] == arg_80[1] && arg_24[1] != arg_102[0] && arg_24[1] == arg_34[1] && arg_24[1] == arg_16[1] && arg_24[1] == arg_99[1] && arg_24[1] != arg_109[0] && arg_24[1] == arg_112[1] && arg_24[1] == arg_155[1] && arg_24[1] == arg_91[1] && arg_24[1] == arg_69[1] && arg_24[1] != arg_77[0] && arg_24[1] != arg_129[0] && arg_24[1] == arg_140[1] && arg_24[1] != arg_99[0] && arg_24[1] != arg_34[0] && arg_24[1] == arg_147[1] && arg_24[1] != arg_137[0] && arg_24[1] == arg_117[1] && arg_24[1] == arg_102[1] && arg_24[1] == arg_62[1] && arg_54[0] == arg_51[0] && arg_54[0] != arg_51[1] && arg_54[0] == arg_80[0] && arg_54[0] != arg_59[1] && arg_54[0] != arg_129[1] && arg_54[0] != arg_39[1] && arg_54[0] == arg_24[0] && arg_54[0] != arg_94[1] && arg_54[0] == arg_13[0] && arg_54[0] != arg_54[1] && arg_54[0] != arg_109[1] && arg_54[0] == arg_72[0] && arg_54[0] != arg_137[1] && arg_54[0] == arg_155[0] && arg_54[0] == arg_158[0] && arg_54[0] != arg_80[1] && arg_54[0] == arg_102[0] && arg_54[0] != arg_34[1] && arg_54[0] != arg_16[1] && arg_54[0] != arg_99[1] && arg_54[0] == arg_109[0] && arg_54[0] != arg_112[1] && arg_54[0] != arg_155[1] && arg_54[0] != arg_91[1] && arg_54[0] != arg_69[1] && arg_54[0] == arg_77[0] && arg_54[0] == arg_129[0] && arg_54[0] != arg_140[1] && arg_54[0] == arg_99[0] && arg_54[0] == arg_34[0] && arg_54[0] != arg_147[1] && arg_54[0] == arg_137[0] && arg_54[0] != arg_117[1] && arg_54[0] != arg_102[1] && arg_54[0] != arg_62[1] && arg_51[0] != arg_51[1] && arg_51[0] == arg_80[0] && arg_51[0] != arg_59[1] && arg_51[0] != arg_129[1] && arg_51[0] != arg_39[1] && arg_51[0] == arg_24[0] && arg_51[0] != arg_94[1] && arg_51[0] == arg_13[0] && arg_51[0] != arg_54[1] && arg_51[0] != arg_109[1] && arg_51[0] == arg_72[0] && arg_51[0] != arg_137[1] && arg_51[0] == arg_155[0] && arg_51[0] == arg_158[0] && arg_51[0] != arg_80[1] && arg_51[0] == arg_102[0] && arg_51[0] != arg_34[1] && arg_51[0] != arg_16[1] && arg_51[0] != arg_99[1] && arg_51[0] == arg_109[0] && arg_51[0] != arg_112[1] && arg_51[0] != arg_155[1] && arg_51[0] != arg_91[1] && arg_51[0] != arg_69[1] && arg_51[0] == arg_77[0] && arg_51[0] == arg_129[0] && arg_51[0] != arg_140[1] && arg_51[0] == arg_99[0] && arg_51[0] == arg_34[0] && arg_51[0] != arg_147[1] && arg_51[0] == arg_137[0] && arg_51[0] != arg_117[1] && arg_51[0] != arg_102[1] && arg_51[0] != arg_62[1] && arg_51[1] != arg_80[0] && arg_51[1] == arg_59[1] && arg_51[1] == arg_129[1] && arg_51[1] == arg_39[1] && arg_51[1] != arg_24[0] && arg_51[1] == arg_94[1] && arg_51[1] != arg_13[0] && arg_51[1] == arg_54[1] && arg_51[1] == arg_109[1] && arg_51[1] != arg_72[0] && arg_51[1] == arg_137[1] && arg_51[1] != arg_155[0] && arg_51[1] != arg_158[0] && arg_51[1] == arg_80[1] && arg_51[1] != arg_102[0] && arg_51[1] == arg_34[1] && arg_51[1] == arg_16[1] && arg_51[1] == arg_99[1] && arg_51[1] != arg_109[0] && arg_51[1] == arg_112[1] && arg_51[1] == arg_155[1] && arg_51[1] == arg_91[1] && arg_51[1] == arg_69[1] && arg_51[1] != arg_77[0] && arg_51[1] != arg_129[0] && arg_51[1] == arg_140[1] && arg_51[1] != arg_99[0] && arg_51[1] != arg_34[0] && arg_51[1] == arg_147[1] && arg_51[1] != arg_137[0] && arg_51[1] == arg_117[1] && arg_51[1] == arg_102[1] && arg_51[1] == arg_62[1] && arg_80[0] != arg_59[1] && arg_80[0] != arg_129[1] && arg_80[0] != arg_39[1] && arg_80[0] == arg_24[0] && arg_80[0] != arg_94[1] && arg_80[0] == arg_13[0] && arg_80[0] != arg_54[1] && arg_80[0] != arg_109[1] && arg_80[0] == arg_72[0] && arg_80[0] != arg_137[1] && arg_80[0] == arg_155[0] && arg_80[0] == arg_158[0] && arg_80[0] != arg_80[1] && arg_80[0] == arg_102[0] && arg_80[0] != arg_34[1] && arg_80[0] != arg_16[1] && arg_80[0] != arg_99[1] && arg_80[0] == arg_109[0] && arg_80[0] != arg_112[1] && arg_80[0] != arg_155[1] && arg_80[0] != arg_91[1] && arg_80[0] != arg_69[1] && arg_80[0] == arg_77[0] && arg_80[0] == arg_129[0] && arg_80[0] != arg_140[1] && arg_80[0] == arg_99[0] && arg_80[0] == arg_34[0] && arg_80[0] != arg_147[1] && arg_80[0] == arg_137[0] && arg_80[0] != arg_117[1] && arg_80[0] != arg_102[1] && arg_80[0] != arg_62[1] && arg_59[1] == arg_129[1] && arg_59[1] == arg_39[1] && arg_59[1] != arg_24[0] && arg_59[1] == arg_94[1] && arg_59[1] != arg_13[0] && arg_59[1] == arg_54[1] && arg_59[1] == arg_109[1] && arg_59[1] != arg_72[0] && arg_59[1] == arg_137[1] && arg_59[1] != arg_155[0] && arg_59[1] != arg_158[0] && arg_59[1] == arg_80[1] && arg_59[1] != arg_102[0] && arg_59[1] == arg_34[1] && arg_59[1] == arg_16[1] && arg_59[1] == arg_99[1] && arg_59[1] != arg_109[0] && arg_59[1] == arg_112[1] && arg_59[1] == arg_155[1] && arg_59[1] == arg_91[1] && arg_59[1] == arg_69[1] && arg_59[1] != arg_77[0] && arg_59[1] != arg_129[0] && arg_59[1] == arg_140[1] && arg_59[1] != arg_99[0] && arg_59[1] != arg_34[0] && arg_59[1] == arg_147[1] && arg_59[1] != arg_137[0] && arg_59[1] == arg_117[1] && arg_59[1] == arg_102[1] && arg_59[1] == arg_62[1] && arg_129[1] == arg_39[1] && arg_129[1] != arg_24[0] && arg_129[1] == arg_94[1] && arg_129[1] != arg_13[0] && arg_129[1] == arg_54[1] && arg_129[1] == arg_109[1] && arg_129[1] != arg_72[0] && arg_129[1] == arg_137[1] && arg_129[1] != arg_155[0] && arg_129[1] != arg_158[0] && arg_129[1] == arg_80[1] && arg_129[1] != arg_102[0] && arg_129[1] == arg_34[1] && arg_129[1] == arg_16[1] && arg_129[1] == arg_99[1] && arg_129[1] != arg_109[0] && arg_129[1] == arg_112[1] && arg_129[1] == arg_155[1] && arg_129[1] == arg_91[1] && arg_129[1] == arg_69[1] && arg_129[1] != arg_77[0] && arg_129[1] != arg_129[0] && arg_129[1] == arg_140[1] && arg_129[1] != arg_99[0] && arg_129[1] != arg_34[0] && arg_129[1] == arg_147[1] && arg_129[1] != arg_137[0] && arg_129[1] == arg_117[1] && arg_129[1] == arg_102[1] && arg_129[1] == arg_62[1] && arg_39[1] != arg_24[0] && arg_39[1] == arg_94[1] && arg_39[1] != arg_13[0] && arg_39[1] == arg_54[1] && arg_39[1] == arg_109[1] && arg_39[1] != arg_72[0] && arg_39[1] == arg_137[1] && arg_39[1] != arg_155[0] && arg_39[1] != arg_158[0] && arg_39[1] == arg_80[1] && arg_39[1] != arg_102[0] && arg_39[1] == arg_34[1] && arg_39[1] == arg_16[1] && arg_39[1] == arg_99[1] && arg_39[1] != arg_109[0] && arg_39[1] == arg_112[1] && arg_39[1] == arg_155[1] && arg_39[1] == arg_91[1] && arg_39[1] == arg_69[1] && arg_39[1] != arg_77[0] && arg_39[1] != arg_129[0] && arg_39[1] == arg_140[1] && arg_39[1] != arg_99[0] && arg_39[1] != arg_34[0] && arg_39[1] == arg_147[1] && arg_39[1] != arg_137[0] && arg_39[1] == arg_117[1] && arg_39[1] == arg_102[1] && arg_39[1] == arg_62[1] && arg_24[0] != arg_94[1] && arg_24[0] == arg_13[0] && arg_24[0] != arg_54[1] && arg_24[0] != arg_109[1] && arg_24[0] == arg_72[0] && arg_24[0] != arg_137[1] && arg_24[0] == arg_155[0] && arg_24[0] == arg_158[0] && arg_24[0] != arg_80[1] && arg_24[0] == arg_102[0] && arg_24[0] != arg_34[1] && arg_24[0] != arg_16[1] && arg_24[0] != arg_99[1] && arg_24[0] == arg_109[0] && arg_24[0] != arg_112[1] && arg_24[0] != arg_155[1] && arg_24[0] != arg_91[1] && arg_24[0] != arg_69[1] && arg_24[0] == arg_77[0] && arg_24[0] == arg_129[0] && arg_24[0] != arg_140[1] && arg_24[0] == arg_99[0] && arg_24[0] == arg_34[0] && arg_24[0] != arg_147[1] && arg_24[0] == arg_137[0] && arg_24[0] != arg_117[1] && arg_24[0] != arg_102[1] && arg_24[0] != arg_62[1] && arg_94[1] != arg_13[0] && arg_94[1] == arg_54[1] && arg_94[1] == arg_109[1] && arg_94[1] != arg_72[0] && arg_94[1] == arg_137[1] && arg_94[1] != arg_155[0] && arg_94[1] != arg_158[0] && arg_94[1] == arg_80[1] && arg_94[1] != arg_102[0] && arg_94[1] == arg_34[1] && arg_94[1] == arg_16[1] && arg_94[1] == arg_99[1] && arg_94[1] != arg_109[0] && arg_94[1] == arg_112[1] && arg_94[1] == arg_155[1] && arg_94[1] == arg_91[1] && arg_94[1] == arg_69[1] && arg_94[1] != arg_77[0] && arg_94[1] != arg_129[0] && arg_94[1] == arg_140[1] && arg_94[1] != arg_99[0] && arg_94[1] != arg_34[0] && arg_94[1] == arg_147[1] && arg_94[1] != arg_137[0] && arg_94[1] == arg_117[1] && arg_94[1] == arg_102[1] && arg_94[1] == arg_62[1] && arg_13[0] != arg_54[1] && arg_13[0] != arg_109[1] && arg_13[0] == arg_72[0] && arg_13[0] != arg_137[1] && arg_13[0] == arg_155[0] && arg_13[0] == arg_158[0] && arg_13[0] != arg_80[1] && arg_13[0] == arg_102[0] && arg_13[0] != arg_34[1] && arg_13[0] != arg_16[1] && arg_13[0] != arg_99[1] && arg_13[0] == arg_109[0] && arg_13[0] != arg_112[1] && arg_13[0] != arg_155[1] && arg_13[0] != arg_91[1] && arg_13[0] != arg_69[1] && arg_13[0] == arg_77[0] && arg_13[0] == arg_129[0] && arg_13[0] != arg_140[1] && arg_13[0] == arg_99[0] && arg_13[0] == arg_34[0] && arg_13[0] != arg_147[1] && arg_13[0] == arg_137[0] && arg_13[0] != arg_117[1] && arg_13[0] != arg_102[1] && arg_13[0] != arg_62[1] && arg_54[1] == arg_109[1] && arg_54[1] != arg_72[0] && arg_54[1] == arg_137[1] && arg_54[1] != arg_155[0] && arg_54[1] != arg_158[0] && arg_54[1] == arg_80[1] && arg_54[1] != arg_102[0] && arg_54[1] == arg_34[1] && arg_54[1] == arg_16[1] && arg_54[1] == arg_99[1] && arg_54[1] != arg_109[0] && arg_54[1] == arg_112[1] && arg_54[1] == arg_155[1] && arg_54[1] == arg_91[1] && arg_54[1] == arg_69[1] && arg_54[1] != arg_77[0] && arg_54[1] != arg_129[0] && arg_54[1] == arg_140[1] && arg_54[1] != arg_99[0] && arg_54[1] != arg_34[0] && arg_54[1] == arg_147[1] && arg_54[1] != arg_137[0] && arg_54[1] == arg_117[1] && arg_54[1] == arg_102[1] && arg_54[1] == arg_62[1] && arg_109[1] != arg_72[0] && arg_109[1] == arg_137[1] && arg_109[1] != arg_155[0] && arg_109[1] != arg_158[0] && arg_109[1] == arg_80[1] && arg_109[1] != arg_102[0] && arg_109[1] == arg_34[1] && arg_109[1] == arg_16[1] && arg_109[1] == arg_99[1] && arg_109[1] != arg_109[0] && arg_109[1] == arg_112[1] && arg_109[1] == arg_155[1] && arg_109[1] == arg_91[1] && arg_109[1] == arg_69[1] && arg_109[1] != arg_77[0] && arg_109[1] != arg_129[0] && arg_109[1] == arg_140[1] && arg_109[1] != arg_99[0] && arg_109[1] != arg_34[0] && arg_109[1] == arg_147[1] && arg_109[1] != arg_137[0] && arg_109[1] == arg_117[1] && arg_109[1] == arg_102[1] && arg_109[1] == arg_62[1] && arg_72[0] != arg_137[1] && arg_72[0] == arg_155[0] && arg_72[0] == arg_158[0] && arg_72[0] != arg_80[1] && arg_72[0] == arg_102[0] && arg_72[0] != arg_34[1] && arg_72[0] != arg_16[1] && arg_72[0] != arg_99[1] && arg_72[0] == arg_109[0] && arg_72[0] != arg_112[1] && arg_72[0] != arg_155[1] && arg_72[0] != arg_91[1] && arg_72[0] != arg_69[1] && arg_72[0] == arg_77[0] && arg_72[0] == arg_129[0] && arg_72[0] != arg_140[1] && arg_72[0] == arg_99[0] && arg_72[0] == arg_34[0] && arg_72[0] != arg_147[1] && arg_72[0] == arg_137[0] && arg_72[0] != arg_117[1] && arg_72[0] != arg_102[1] && arg_72[0] != arg_62[1] && arg_137[1] != arg_155[0] && arg_137[1] != arg_158[0] && arg_137[1] == arg_80[1] && arg_137[1] != arg_102[0] && arg_137[1] == arg_34[1] && arg_137[1] == arg_16[1] && arg_137[1] == arg_99[1] && arg_137[1] != arg_109[0] && arg_137[1] == arg_112[1] && arg_137[1] == arg_155[1] && arg_137[1] == arg_91[1] && arg_137[1] == arg_69[1] && arg_137[1] != arg_77[0] && arg_137[1] != arg_129[0] && arg_137[1] == arg_140[1] && arg_137[1] != arg_99[0] && arg_137[1] != arg_34[0] && arg_137[1] == arg_147[1] && arg_137[1] != arg_137[0] && arg_137[1] == arg_117[1] && arg_137[1] == arg_102[1] && arg_137[1] == arg_62[1] && arg_155[0] == arg_158[0] && arg_155[0] != arg_80[1] && arg_155[0] == arg_102[0] && arg_155[0] != arg_34[1] && arg_155[0] != arg_16[1] && arg_155[0] != arg_99[1] && arg_155[0] == arg_109[0] && arg_155[0] != arg_112[1] && arg_155[0] != arg_155[1] && arg_155[0] != arg_91[1] && arg_155[0] != arg_69[1] && arg_155[0] == arg_77[0] && arg_155[0] == arg_129[0] && arg_155[0] != arg_140[1] && arg_155[0] == arg_99[0] && arg_155[0] == arg_34[0] && arg_155[0] != arg_147[1] && arg_155[0] == arg_137[0] && arg_155[0] != arg_117[1] && arg_155[0] != arg_102[1] && arg_155[0] != arg_62[1] && arg_158[0] != arg_80[1] && arg_158[0] == arg_102[0] && arg_158[0] != arg_34[1] && arg_158[0] != arg_16[1] && arg_158[0] != arg_99[1] && arg_158[0] == arg_109[0] && arg_158[0] != arg_112[1] && arg_158[0] != arg_155[1] && arg_158[0] != arg_91[1] && arg_158[0] != arg_69[1] && arg_158[0] == arg_77[0] && arg_158[0] == arg_129[0] && arg_158[0] != arg_140[1] && arg_158[0] == arg_99[0] && arg_158[0] == arg_34[0] && arg_158[0] != arg_147[1] && arg_158[0] == arg_137[0] && arg_158[0] != arg_117[1] && arg_158[0] != arg_102[1] && arg_158[0] != arg_62[1] && arg_80[1] != arg_102[0] && arg_80[1] == arg_34[1] && arg_80[1] == arg_16[1] && arg_80[1] == arg_99[1] && arg_80[1] != arg_109[0] && arg_80[1] == arg_112[1] && arg_80[1] == arg_155[1] && arg_80[1] == arg_91[1] && arg_80[1] == arg_69[1] && arg_80[1] != arg_77[0] && arg_80[1] != arg_129[0] && arg_80[1] == arg_140[1] && arg_80[1] != arg_99[0] && arg_80[1] != arg_34[0] && arg_80[1] == arg_147[1] && arg_80[1] != arg_137[0] && arg_80[1] == arg_117[1] && arg_80[1] == arg_102[1] && arg_80[1] == arg_62[1] && arg_102[0] != arg_34[1] && arg_102[0] != arg_16[1] && arg_102[0] != arg_99[1] && arg_102[0] == arg_109[0] && arg_102[0] != arg_112[1] && arg_102[0] != arg_155[1] && arg_102[0] != arg_91[1] && arg_102[0] != arg_69[1] && arg_102[0] == arg_77[0] && arg_102[0] == arg_129[0] && arg_102[0] != arg_140[1] && arg_102[0] == arg_99[0] && arg_102[0] == arg_34[0] && arg_102[0] != arg_147[1] && arg_102[0] == arg_137[0] && arg_102[0] != arg_117[1] && arg_102[0] != arg_102[1] && arg_102[0] != arg_62[1] && arg_34[1] == arg_16[1] && arg_34[1] == arg_99[1] && arg_34[1] != arg_109[0] && arg_34[1] == arg_112[1] && arg_34[1] == arg_155[1] && arg_34[1] == arg_91[1] && arg_34[1] == arg_69[1] && arg_34[1] != arg_77[0] && arg_34[1] != arg_129[0] && arg_34[1] == arg_140[1] && arg_34[1] != arg_99[0] && arg_34[1] != arg_34[0] && arg_34[1] == arg_147[1] && arg_34[1] != arg_137[0] && arg_34[1] == arg_117[1] && arg_34[1] == arg_102[1] && arg_34[1] == arg_62[1] && arg_16[1] == arg_99[1] && arg_16[1] != arg_109[0] && arg_16[1] == arg_112[1] && arg_16[1] == arg_155[1] && arg_16[1] == arg_91[1] && arg_16[1] == arg_69[1] && arg_16[1] != arg_77[0] && arg_16[1] != arg_129[0] && arg_16[1] == arg_140[1] && arg_16[1] != arg_99[0] && arg_16[1] != arg_34[0] && arg_16[1] == arg_147[1] && arg_16[1] != arg_137[0] && arg_16[1] == arg_117[1] && arg_16[1] == arg_102[1] && arg_16[1] == arg_62[1] && arg_99[1] != arg_109[0] && arg_99[1] == arg_112[1] && arg_99[1] == arg_155[1] && arg_99[1] == arg_91[1] && arg_99[1] == arg_69[1] && arg_99[1] != arg_77[0] && arg_99[1] != arg_129[0] && arg_99[1] == arg_140[1] && arg_99[1] != arg_99[0] && arg_99[1] != arg_34[0] && arg_99[1] == arg_147[1] && arg_99[1] != arg_137[0] && arg_99[1] == arg_117[1] && arg_99[1] == arg_102[1] && arg_99[1] == arg_62[1] && arg_109[0] != arg_112[1] && arg_109[0] != arg_155[1] && arg_109[0] != arg_91[1] && arg_109[0] != arg_69[1] && arg_109[0] == arg_77[0] && arg_109[0] == arg_129[0] && arg_109[0] != arg_140[1] && arg_109[0] == arg_99[0] && arg_109[0] == arg_34[0] && arg_109[0] != arg_147[1] && arg_109[0] == arg_137[0] && arg_109[0] != arg_117[1] && arg_109[0] != arg_102[1] && arg_109[0] != arg_62[1] && arg_112[1] == arg_155[1] && arg_112[1] == arg_91[1] && arg_112[1] == arg_69[1] && arg_112[1] != arg_77[0] && arg_112[1] != arg_129[0] && arg_112[1] == arg_140[1] && arg_112[1] != arg_99[0] && arg_112[1] != arg_34[0] && arg_112[1] == arg_147[1] && arg_112[1] != arg_137[0] && arg_112[1] == arg_117[1] && arg_112[1] == arg_102[1] && arg_112[1] == arg_62[1] && arg_155[1] == arg_91[1] && arg_155[1] == arg_69[1] && arg_155[1] != arg_77[0] && arg_155[1] != arg_129[0] && arg_155[1] == arg_140[1] && arg_155[1] != arg_99[0] && arg_155[1] != arg_34[0] && arg_155[1] == arg_147[1] && arg_155[1] != arg_137[0] && arg_155[1] == arg_117[1] && arg_155[1] == arg_102[1] && arg_155[1] == arg_62[1] && arg_91[1] == arg_69[1] && arg_91[1] != arg_77[0] && arg_91[1] != arg_129[0] && arg_91[1] == arg_140[1] && arg_91[1] != arg_99[0] && arg_91[1] != arg_34[0] && arg_91[1] == arg_147[1] && arg_91[1] != arg_137[0] && arg_91[1] == arg_117[1] && arg_91[1] == arg_102[1] && arg_91[1] == arg_62[1] && arg_69[1] != arg_77[0] && arg_69[1] != arg_129[0] && arg_69[1] == arg_140[1] && arg_69[1] != arg_99[0] && arg_69[1] != arg_34[0] && arg_69[1] == arg_147[1] && arg_69[1] != arg_137[0] && arg_69[1] == arg_117[1] && arg_69[1] == arg_102[1] && arg_69[1] == arg_62[1] && arg_77[0] == arg_129[0] && arg_77[0] != arg_140[1] && arg_77[0] == arg_99[0] && arg_77[0] == arg_34[0] && arg_77[0] != arg_147[1] && arg_77[0] == arg_137[0] && arg_77[0] != arg_117[1] && arg_77[0] != arg_102[1] && arg_77[0] != arg_62[1] && arg_129[0] != arg_140[1] && arg_129[0] == arg_99[0] && arg_129[0] == arg_34[0] && arg_129[0] != arg_147[1] && arg_129[0] == arg_137[0] && arg_129[0] != arg_117[1] && arg_129[0] != arg_102[1] && arg_129[0] != arg_62[1] && arg_140[1] != arg_99[0] && arg_140[1] != arg_34[0] && arg_140[1] == arg_147[1] && arg_140[1] != arg_137[0] && arg_140[1] == arg_117[1] && arg_140[1] == arg_102[1] && arg_140[1] == arg_62[1] && arg_99[0] == arg_34[0] && arg_99[0] != arg_147[1] && arg_99[0] == arg_137[0] && arg_99[0] != arg_117[1] && arg_99[0] != arg_102[1] && arg_99[0] != arg_62[1] && arg_34[0] != arg_147[1] && arg_34[0] == arg_137[0] && arg_34[0] != arg_117[1] && arg_34[0] != arg_102[1] && arg_34[0] != arg_62[1] && arg_147[1] != arg_137[0] && arg_147[1] == arg_117[1] && arg_147[1] == arg_102[1] && arg_147[1] == arg_62[1] && arg_137[0] != arg_117[1] && arg_137[0] != arg_102[1] && arg_137[0] != arg_62[1] && arg_117[1] == arg_102[1] && arg_117[1] == arg_62[1] && arg_102[1] == arg_62[1] {
let rhs_inst_17 = pos.ins().ushr_imm(arg_122, 32_u64 as i64);
let rhs_inst_18 = pos.ins().bnot(rhs_inst_17);
pos.func.dfg.replace(inst).bnot(rhs_inst_18);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1401(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_1 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_1) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_3 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_3[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_4 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_4[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_5) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_6 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_6[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_7 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_4 == 0 {
if rhs_3 == -1 {
match pos.func.dfg.value_def(arg_4[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_7 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_8) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_9 = arg;
let rhs_8 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_9) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_10 = arg;
let rhs_9 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_10) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_11 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_11[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_12 = arg;
let rhs_10 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_10 == 0 {
if rhs_9 == -1 {
if rhs_8 == 12 {
if rhs_7 == 16 {
match pos.func.dfg.value_def(arg_3[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_13 = arg;
let rhs_15 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_13) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_14 = arg;
let rhs_16 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_14) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_15 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_15[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_16 = arg;
let rhs_17 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_16) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_17 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_17[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_18 = arg;
let rhs_18 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_18 == 0 {
if rhs_17 == -1 {
match pos.func.dfg.value_def(arg_15[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_19 = arg;
let rhs_21 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_19) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_20 = arg;
let rhs_22 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_20) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_21 = arg;
let rhs_23 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_21) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_22 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_22[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_23 = arg;
let rhs_24 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_24 == 0 {
if rhs_23 == -1 {
if rhs_22 == 12 {
if rhs_21 == 16 {
if rhs_16 == 5 {
if rhs_15 == 8 {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_24 = arg;
let rhs_31 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_24) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_25 = arg;
let rhs_32 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_25) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_26 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_26[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_27 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_27[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_28 = arg;
let rhs_33 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_28) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_29 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_29[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_30 = arg;
let rhs_34 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_34 == 0 {
if rhs_33 == -1 {
match pos.func.dfg.value_def(arg_27[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_31 = arg;
let rhs_37 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_31) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_32 = arg;
let rhs_38 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_32) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_33 = arg;
let rhs_39 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_33) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_34 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_34[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_35 = arg;
let rhs_40 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_40 == 0 {
if rhs_39 == -1 {
if rhs_38 == 12 {
if rhs_37 == 16 {
match pos.func.dfg.value_def(arg_26[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_36 = arg;
let rhs_45 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_36) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_37 = arg;
let rhs_46 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_37) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_38 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_38[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_39 = arg;
let rhs_47 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_39) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_40 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_40[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_41 = arg;
let rhs_48 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_48 == 0 {
if rhs_47 == -1 {
match pos.func.dfg.value_def(arg_38[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_42 = arg;
let rhs_51 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_42) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_43 = arg;
let rhs_52 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_43) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_44 = arg;
let rhs_53 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_44) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_45 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_45[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_46 = arg;
let rhs_54 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_54 == 0 {
if rhs_53 == -1 {
if rhs_52 == 12 {
if rhs_51 == 16 {
if rhs_46 == 5 {
if rhs_45 == 8 {
if rhs_32 == 2 {
if rhs_31 == 4 {
if rhs_2 == 1 {
if rhs_1 == 2 {
if arg_34[0] == arg_41 && arg_34[0] == arg_11[0] && arg_34[0] == arg_6[0] && arg_34[0] == arg_18 && arg_34[0] == arg_12 && arg_34[0] == arg_22[0] && arg_34[0] == arg_35 && arg_34[0] == arg_29[0] && arg_34[0] == arg_23 && arg_34[0] == arg_40[0] && arg_34[0] == arg_17[0] && arg_34[0] == arg_30 && arg_34[0] == arg_46 && arg_34[0] == arg_7 && arg_34[0] == arg_45[0] && arg_41 == arg_11[0] && arg_41 == arg_6[0] && arg_41 == arg_18 && arg_41 == arg_12 && arg_41 == arg_22[0] && arg_41 == arg_35 && arg_41 == arg_29[0] && arg_41 == arg_23 && arg_41 == arg_40[0] && arg_41 == arg_17[0] && arg_41 == arg_30 && arg_41 == arg_46 && arg_41 == arg_7 && arg_41 == arg_45[0] && arg_11[0] == arg_6[0] && arg_11[0] == arg_18 && arg_11[0] == arg_12 && arg_11[0] == arg_22[0] && arg_11[0] == arg_35 && arg_11[0] == arg_29[0] && arg_11[0] == arg_23 && arg_11[0] == arg_40[0] && arg_11[0] == arg_17[0] && arg_11[0] == arg_30 && arg_11[0] == arg_46 && arg_11[0] == arg_7 && arg_11[0] == arg_45[0] && arg_6[0] == arg_18 && arg_6[0] == arg_12 && arg_6[0] == arg_22[0] && arg_6[0] == arg_35 && arg_6[0] == arg_29[0] && arg_6[0] == arg_23 && arg_6[0] == arg_40[0] && arg_6[0] == arg_17[0] && arg_6[0] == arg_30 && arg_6[0] == arg_46 && arg_6[0] == arg_7 && arg_6[0] == arg_45[0] && arg_18 == arg_12 && arg_18 == arg_22[0] && arg_18 == arg_35 && arg_18 == arg_29[0] && arg_18 == arg_23 && arg_18 == arg_40[0] && arg_18 == arg_17[0] && arg_18 == arg_30 && arg_18 == arg_46 && arg_18 == arg_7 && arg_18 == arg_45[0] && arg_12 == arg_22[0] && arg_12 == arg_35 && arg_12 == arg_29[0] && arg_12 == arg_23 && arg_12 == arg_40[0] && arg_12 == arg_17[0] && arg_12 == arg_30 && arg_12 == arg_46 && arg_12 == arg_7 && arg_12 == arg_45[0] && arg_22[0] == arg_35 && arg_22[0] == arg_29[0] && arg_22[0] == arg_23 && arg_22[0] == arg_40[0] && arg_22[0] == arg_17[0] && arg_22[0] == arg_30 && arg_22[0] == arg_46 && arg_22[0] == arg_7 && arg_22[0] == arg_45[0] && arg_35 == arg_29[0] && arg_35 == arg_23 && arg_35 == arg_40[0] && arg_35 == arg_17[0] && arg_35 == arg_30 && arg_35 == arg_46 && arg_35 == arg_7 && arg_35 == arg_45[0] && arg_29[0] == arg_23 && arg_29[0] == arg_40[0] && arg_29[0] == arg_17[0] && arg_29[0] == arg_30 && arg_29[0] == arg_46 && arg_29[0] == arg_7 && arg_29[0] == arg_45[0] && arg_23 == arg_40[0] && arg_23 == arg_17[0] && arg_23 == arg_30 && arg_23 == arg_46 && arg_23 == arg_7 && arg_23 == arg_45[0] && arg_40[0] == arg_17[0] && arg_40[0] == arg_30 && arg_40[0] == arg_46 && arg_40[0] == arg_7 && arg_40[0] == arg_45[0] && arg_17[0] == arg_30 && arg_17[0] == arg_46 && arg_17[0] == arg_7 && arg_17[0] == arg_45[0] && arg_30 == arg_46 && arg_30 == arg_7 && arg_30 == arg_45[0] && arg_46 == arg_7 && arg_46 == arg_45[0] && arg_7 == arg_45[0] {
let rhs_inst_16 = pos.ins().iconst(I32, 1073807618_u64 as i64);
let rhs_inst_17 = pos.ins().sshr(rhs_inst_16, arg_24);
let rhs_inst_18 = pos.ins().bor_imm(rhs_inst_17, 4294967293_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_18);

}
}
}
}
}
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1402(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_3 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_3[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_4) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_5 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_5[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_6) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_7 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_7[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_8) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_9 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_9[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_10 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_10) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_11 = arg;
let rhs_7 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_11) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_12 = arg;
let rhs_8 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_12) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_13 = arg;
let rhs_9 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_13) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_14 = arg;
let rhs_10 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_10 == 7 {
if rhs_9 == 3 {
if rhs_8 == 4294967295 {
if rhs_7 == -1 {
if rhs_6 == 1 {
match pos.func.dfg.value_def(arg_9[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_15 = arg;
let rhs_16 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_15) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_16 = arg;
let rhs_17 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_16) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_17 = arg;
let rhs_18 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_17) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_18 = arg;
let rhs_19 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_19 == 7 {
if rhs_18 == 3 {
if rhs_17 == 4294967295 {
if rhs_16 == -1 {
if rhs_5 == 2 {
match pos.func.dfg.value_def(arg_7[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_19 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_19[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_20 = arg;
let rhs_25 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_20) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_21 = arg;
let rhs_26 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_21) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_22 = arg;
let rhs_27 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_22) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_23 = arg;
let rhs_28 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_23) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_24 = arg;
let rhs_29 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_29 == 7 {
if rhs_28 == 3 {
if rhs_27 == 4294967295 {
if rhs_26 == -1 {
if rhs_25 == 1 {
match pos.func.dfg.value_def(arg_19[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_25 = arg;
let rhs_35 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_25) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_26 = arg;
let rhs_36 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_26) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_27 = arg;
let rhs_37 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_27) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_28 = arg;
let rhs_38 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_38 == 7 {
if rhs_37 == 3 {
if rhs_36 == 4294967295 {
if rhs_35 == -1 {
if rhs_4 == 4 {
match pos.func.dfg.value_def(arg_5[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_29 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_29[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_30 = arg;
let rhs_44 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_30) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_31 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_31[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_32 = arg;
let rhs_45 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_32) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_33 = arg;
let rhs_46 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_33) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_34 = arg;
let rhs_47 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_34) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_35 = arg;
let rhs_48 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_35) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_36 = arg;
let rhs_49 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_49 == 7 {
if rhs_48 == 3 {
if rhs_47 == 4294967295 {
if rhs_46 == -1 {
if rhs_45 == 1 {
match pos.func.dfg.value_def(arg_31[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_37 = arg;
let rhs_55 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_37) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_38 = arg;
let rhs_56 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_38) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_39 = arg;
let rhs_57 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_39) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_40 = arg;
let rhs_58 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_58 == 7 {
if rhs_57 == 3 {
if rhs_56 == 4294967295 {
if rhs_55 == -1 {
if rhs_44 == 2 {
match pos.func.dfg.value_def(arg_29[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_41 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_41[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_42 = arg;
let rhs_64 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_42) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_43 = arg;
let rhs_65 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_43) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_44 = arg;
let rhs_66 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_44) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_45 = arg;
let rhs_67 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_45) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_46 = arg;
let rhs_68 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_68 == 7 {
if rhs_67 == 3 {
if rhs_66 == 4294967295 {
if rhs_65 == -1 {
if rhs_64 == 1 {
match pos.func.dfg.value_def(arg_41[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_47 = arg;
let rhs_74 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_47) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_48 = arg;
let rhs_75 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_48) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_49 = arg;
let rhs_76 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_49) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_50 = arg;
let rhs_77 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_77 == 7 {
if rhs_76 == 3 {
if rhs_75 == 4294967295 {
if rhs_74 == -1 {
if rhs_3 == 8 {
match pos.func.dfg.value_def(arg_3[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_51 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_51[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_52 = arg;
let rhs_83 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_52) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_53 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_53[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_54 = arg;
let rhs_84 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_54) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_55 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_55[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_56 = arg;
let rhs_85 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_56) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_57 = arg;
let rhs_86 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_57) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_58 = arg;
let rhs_87 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_58) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_59 = arg;
let rhs_88 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_59) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_60 = arg;
let rhs_89 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_89 == 7 {
if rhs_88 == 3 {
if rhs_87 == 4294967295 {
if rhs_86 == -1 {
if rhs_85 == 1 {
match pos.func.dfg.value_def(arg_55[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_61 = arg;
let rhs_95 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_61) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_62 = arg;
let rhs_96 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_62) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_63 = arg;
let rhs_97 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_63) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_64 = arg;
let rhs_98 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_98 == 7 {
if rhs_97 == 3 {
if rhs_96 == 4294967295 {
if rhs_95 == -1 {
if rhs_84 == 2 {
match pos.func.dfg.value_def(arg_53[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_65 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_65[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_66 = arg;
let rhs_104 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_66) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_67 = arg;
let rhs_105 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_67) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_68 = arg;
let rhs_106 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_68) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_69 = arg;
let rhs_107 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_69) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_70 = arg;
let rhs_108 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_108 == 7 {
if rhs_107 == 3 {
if rhs_106 == 4294967295 {
if rhs_105 == -1 {
if rhs_104 == 1 {
match pos.func.dfg.value_def(arg_65[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_71 = arg;
let rhs_114 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_71) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_72 = arg;
let rhs_115 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_72) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_73 = arg;
let rhs_116 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_73) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_74 = arg;
let rhs_117 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_117 == 7 {
if rhs_116 == 3 {
if rhs_115 == 4294967295 {
if rhs_114 == -1 {
if rhs_83 == 4 {
match pos.func.dfg.value_def(arg_51[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_75 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_75[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_76 = arg;
let rhs_123 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_76) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_77 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_77[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_78 = arg;
let rhs_124 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_78) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_79 = arg;
let rhs_125 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_79) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_80 = arg;
let rhs_126 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_80) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_81 = arg;
let rhs_127 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_81) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_82 = arg;
let rhs_128 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_128 == 7 {
if rhs_127 == 3 {
if rhs_126 == 4294967295 {
if rhs_125 == -1 {
if rhs_124 == 1 {
match pos.func.dfg.value_def(arg_77[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_83 = arg;
let rhs_134 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_83) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_84 = arg;
let rhs_135 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_84) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_85 = arg;
let rhs_136 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_85) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_86 = arg;
let rhs_137 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_137 == 7 {
if rhs_136 == 3 {
if rhs_135 == 4294967295 {
if rhs_134 == -1 {
if rhs_123 == 2 {
match pos.func.dfg.value_def(arg_75[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_87 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_87[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_88 = arg;
let rhs_143 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_88) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_89 = arg;
let rhs_144 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_89) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_90 = arg;
let rhs_145 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_90) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_91 = arg;
let rhs_146 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_91) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_92 = arg;
let rhs_147 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_147 == 7 {
if rhs_146 == 3 {
if rhs_145 == 4294967295 {
if rhs_144 == -1 {
if rhs_143 == 1 {
match pos.func.dfg.value_def(arg_87[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_93 = arg;
let rhs_153 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_93) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_94 = arg;
let rhs_154 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_94) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_95 = arg;
let rhs_155 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_95) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_96 = arg;
let rhs_156 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_156 == 7 {
if rhs_155 == 3 {
if rhs_154 == 4294967295 {
if rhs_153 == -1 {
if rhs_2 == 16 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_97 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_97[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_98 = arg;
let rhs_162 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_98) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_99 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_99[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_100 = arg;
let rhs_163 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_100) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_101 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_101[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_102 = arg;
let rhs_164 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_102) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_103 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_103[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_104 = arg;
let rhs_165 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_104) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_105 = arg;
let rhs_166 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_105) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_106 = arg;
let rhs_167 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_106) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_107 = arg;
let rhs_168 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_107) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_108 = arg;
let rhs_169 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_169 == 7 {
if rhs_168 == 3 {
if rhs_167 == 4294967295 {
if rhs_166 == -1 {
if rhs_165 == 1 {
match pos.func.dfg.value_def(arg_103[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_109 = arg;
let rhs_175 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_109) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_110 = arg;
let rhs_176 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_110) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_111 = arg;
let rhs_177 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_111) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_112 = arg;
let rhs_178 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_178 == 7 {
if rhs_177 == 3 {
if rhs_176 == 4294967295 {
if rhs_175 == -1 {
if rhs_164 == 2 {
match pos.func.dfg.value_def(arg_101[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_113 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_113[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_114 = arg;
let rhs_184 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_114) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_115 = arg;
let rhs_185 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_115) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_116 = arg;
let rhs_186 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_116) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_117 = arg;
let rhs_187 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_117) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_118 = arg;
let rhs_188 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_188 == 7 {
if rhs_187 == 3 {
if rhs_186 == 4294967295 {
if rhs_185 == -1 {
if rhs_184 == 1 {
match pos.func.dfg.value_def(arg_113[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_119 = arg;
let rhs_194 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_119) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_120 = arg;
let rhs_195 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_120) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_121 = arg;
let rhs_196 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_121) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_122 = arg;
let rhs_197 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_197 == 7 {
if rhs_196 == 3 {
if rhs_195 == 4294967295 {
if rhs_194 == -1 {
if rhs_163 == 4 {
match pos.func.dfg.value_def(arg_99[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_123 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_123[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_124 = arg;
let rhs_203 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_124) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_125 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_125[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_126 = arg;
let rhs_204 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_126) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_127 = arg;
let rhs_205 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_127) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_128 = arg;
let rhs_206 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_128) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_129 = arg;
let rhs_207 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_129) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_130 = arg;
let rhs_208 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_208 == 7 {
if rhs_207 == 3 {
if rhs_206 == 4294967295 {
if rhs_205 == -1 {
if rhs_204 == 1 {
match pos.func.dfg.value_def(arg_125[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_131 = arg;
let rhs_214 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_131) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_132 = arg;
let rhs_215 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_132) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_133 = arg;
let rhs_216 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_133) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_134 = arg;
let rhs_217 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_217 == 7 {
if rhs_216 == 3 {
if rhs_215 == 4294967295 {
if rhs_214 == -1 {
if rhs_203 == 2 {
match pos.func.dfg.value_def(arg_123[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_135 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_135[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_136 = arg;
let rhs_223 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_136) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_137 = arg;
let rhs_224 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_137) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_138 = arg;
let rhs_225 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_138) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_139 = arg;
let rhs_226 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_139) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_140 = arg;
let rhs_227 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_227 == 7 {
if rhs_226 == 3 {
if rhs_225 == 4294967295 {
if rhs_224 == -1 {
if rhs_223 == 1 {
match pos.func.dfg.value_def(arg_135[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_141 = arg;
let rhs_233 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_141) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_142 = arg;
let rhs_234 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_142) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_143 = arg;
let rhs_235 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_143) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_144 = arg;
let rhs_236 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_236 == 7 {
if rhs_235 == 3 {
if rhs_234 == 4294967295 {
if rhs_233 == -1 {
if rhs_162 == 8 {
match pos.func.dfg.value_def(arg_97[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_145 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_145[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_146 = arg;
let rhs_242 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_146) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_147 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_147[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_148 = arg;
let rhs_243 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_148) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_149 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_149[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_150 = arg;
let rhs_244 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_150) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_151 = arg;
let rhs_245 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_151) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_152 = arg;
let rhs_246 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_152) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_153 = arg;
let rhs_247 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_153) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_154 = arg;
let rhs_248 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_248 == 7 {
if rhs_247 == 3 {
if rhs_246 == 4294967295 {
if rhs_245 == -1 {
if rhs_244 == 1 {
match pos.func.dfg.value_def(arg_149[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_155 = arg;
let rhs_254 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_155) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_156 = arg;
let rhs_255 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_156) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_157 = arg;
let rhs_256 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_157) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_158 = arg;
let rhs_257 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_257 == 7 {
if rhs_256 == 3 {
if rhs_255 == 4294967295 {
if rhs_254 == -1 {
if rhs_243 == 2 {
match pos.func.dfg.value_def(arg_147[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_159 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_159[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_160 = arg;
let rhs_263 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_160) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_161 = arg;
let rhs_264 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_161) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_162 = arg;
let rhs_265 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_162) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_163 = arg;
let rhs_266 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_163) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_164 = arg;
let rhs_267 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_267 == 7 {
if rhs_266 == 3 {
if rhs_265 == 4294967295 {
if rhs_264 == -1 {
if rhs_263 == 1 {
match pos.func.dfg.value_def(arg_159[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_165 = arg;
let rhs_273 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_165) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_166 = arg;
let rhs_274 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_166) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_167 = arg;
let rhs_275 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_167) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_168 = arg;
let rhs_276 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_276 == 7 {
if rhs_275 == 3 {
if rhs_274 == 4294967295 {
if rhs_273 == -1 {
if rhs_242 == 4 {
match pos.func.dfg.value_def(arg_145[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_169 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_169[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_170 = arg;
let rhs_282 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_170) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_171 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_171[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_172 = arg;
let rhs_283 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_172) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_173 = arg;
let rhs_284 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_173) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_174 = arg;
let rhs_285 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_174) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_175 = arg;
let rhs_286 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_175) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_176 = arg;
let rhs_287 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_287 == 7 {
if rhs_286 == 3 {
if rhs_285 == 4294967295 {
if rhs_284 == -1 {
if rhs_283 == 1 {
match pos.func.dfg.value_def(arg_171[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_177 = arg;
let rhs_293 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_177) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_178 = arg;
let rhs_294 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_178) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_179 = arg;
let rhs_295 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_179) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_180 = arg;
let rhs_296 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_296 == 7 {
if rhs_295 == 3 {
if rhs_294 == 4294967295 {
if rhs_293 == -1 {
if rhs_282 == 2 {
match pos.func.dfg.value_def(arg_169[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_181 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_181[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_182 = arg;
let rhs_302 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_182) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_183 = arg;
let rhs_303 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_183) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_184 = arg;
let rhs_304 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_184) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_185 = arg;
let rhs_305 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_185) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_186 = arg;
let rhs_306 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_306 == 7 {
if rhs_305 == 3 {
if rhs_304 == 4294967295 {
if rhs_303 == -1 {
if rhs_302 == 1 {
match pos.func.dfg.value_def(arg_181[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_187 = arg;
let rhs_312 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_187) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_188 = arg;
let rhs_313 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_188) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_189 = arg;
let rhs_314 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_189) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_190 = arg;
let rhs_315 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_315 == 7 {
if rhs_314 == 3 {
if rhs_313 == 4294967295 {
if rhs_312 == -1 {
if rhs_1 == 32 {
if arg_46 == arg_40 && arg_46 == arg_82 && arg_46 == arg_96 && arg_46 == arg_50 && arg_46 == arg_60 && arg_46 == arg_176 && arg_46 == arg_190 && arg_46 == arg_70 && arg_46 == arg_14 && arg_46 == arg_108 && arg_46 == arg_144 && arg_46 == arg_118 && arg_46 == arg_168 && arg_46 == arg_164 && arg_46 == arg_28 && arg_46 == arg_24 && arg_46 == arg_130 && arg_46 == arg_92 && arg_46 == arg_18 && arg_46 == arg_36 && arg_46 == arg_158 && arg_46 == arg_180 && arg_46 == arg_86 && arg_46 == arg_112 && arg_46 == arg_122 && arg_46 == arg_186 && arg_46 == arg_140 && arg_46 == arg_74 && arg_46 == arg_134 && arg_46 == arg_154 && arg_46 == arg_64 && arg_40 == arg_82 && arg_40 == arg_96 && arg_40 == arg_50 && arg_40 == arg_60 && arg_40 == arg_176 && arg_40 == arg_190 && arg_40 == arg_70 && arg_40 == arg_14 && arg_40 == arg_108 && arg_40 == arg_144 && arg_40 == arg_118 && arg_40 == arg_168 && arg_40 == arg_164 && arg_40 == arg_28 && arg_40 == arg_24 && arg_40 == arg_130 && arg_40 == arg_92 && arg_40 == arg_18 && arg_40 == arg_36 && arg_40 == arg_158 && arg_40 == arg_180 && arg_40 == arg_86 && arg_40 == arg_112 && arg_40 == arg_122 && arg_40 == arg_186 && arg_40 == arg_140 && arg_40 == arg_74 && arg_40 == arg_134 && arg_40 == arg_154 && arg_40 == arg_64 && arg_82 == arg_96 && arg_82 == arg_50 && arg_82 == arg_60 && arg_82 == arg_176 && arg_82 == arg_190 && arg_82 == arg_70 && arg_82 == arg_14 && arg_82 == arg_108 && arg_82 == arg_144 && arg_82 == arg_118 && arg_82 == arg_168 && arg_82 == arg_164 && arg_82 == arg_28 && arg_82 == arg_24 && arg_82 == arg_130 && arg_82 == arg_92 && arg_82 == arg_18 && arg_82 == arg_36 && arg_82 == arg_158 && arg_82 == arg_180 && arg_82 == arg_86 && arg_82 == arg_112 && arg_82 == arg_122 && arg_82 == arg_186 && arg_82 == arg_140 && arg_82 == arg_74 && arg_82 == arg_134 && arg_82 == arg_154 && arg_82 == arg_64 && arg_96 == arg_50 && arg_96 == arg_60 && arg_96 == arg_176 && arg_96 == arg_190 && arg_96 == arg_70 && arg_96 == arg_14 && arg_96 == arg_108 && arg_96 == arg_144 && arg_96 == arg_118 && arg_96 == arg_168 && arg_96 == arg_164 && arg_96 == arg_28 && arg_96 == arg_24 && arg_96 == arg_130 && arg_96 == arg_92 && arg_96 == arg_18 && arg_96 == arg_36 && arg_96 == arg_158 && arg_96 == arg_180 && arg_96 == arg_86 && arg_96 == arg_112 && arg_96 == arg_122 && arg_96 == arg_186 && arg_96 == arg_140 && arg_96 == arg_74 && arg_96 == arg_134 && arg_96 == arg_154 && arg_96 == arg_64 && arg_50 == arg_60 && arg_50 == arg_176 && arg_50 == arg_190 && arg_50 == arg_70 && arg_50 == arg_14 && arg_50 == arg_108 && arg_50 == arg_144 && arg_50 == arg_118 && arg_50 == arg_168 && arg_50 == arg_164 && arg_50 == arg_28 && arg_50 == arg_24 && arg_50 == arg_130 && arg_50 == arg_92 && arg_50 == arg_18 && arg_50 == arg_36 && arg_50 == arg_158 && arg_50 == arg_180 && arg_50 == arg_86 && arg_50 == arg_112 && arg_50 == arg_122 && arg_50 == arg_186 && arg_50 == arg_140 && arg_50 == arg_74 && arg_50 == arg_134 && arg_50 == arg_154 && arg_50 == arg_64 && arg_60 == arg_176 && arg_60 == arg_190 && arg_60 == arg_70 && arg_60 == arg_14 && arg_60 == arg_108 && arg_60 == arg_144 && arg_60 == arg_118 && arg_60 == arg_168 && arg_60 == arg_164 && arg_60 == arg_28 && arg_60 == arg_24 && arg_60 == arg_130 && arg_60 == arg_92 && arg_60 == arg_18 && arg_60 == arg_36 && arg_60 == arg_158 && arg_60 == arg_180 && arg_60 == arg_86 && arg_60 == arg_112 && arg_60 == arg_122 && arg_60 == arg_186 && arg_60 == arg_140 && arg_60 == arg_74 && arg_60 == arg_134 && arg_60 == arg_154 && arg_60 == arg_64 && arg_176 == arg_190 && arg_176 == arg_70 && arg_176 == arg_14 && arg_176 == arg_108 && arg_176 == arg_144 && arg_176 == arg_118 && arg_176 == arg_168 && arg_176 == arg_164 && arg_176 == arg_28 && arg_176 == arg_24 && arg_176 == arg_130 && arg_176 == arg_92 && arg_176 == arg_18 && arg_176 == arg_36 && arg_176 == arg_158 && arg_176 == arg_180 && arg_176 == arg_86 && arg_176 == arg_112 && arg_176 == arg_122 && arg_176 == arg_186 && arg_176 == arg_140 && arg_176 == arg_74 && arg_176 == arg_134 && arg_176 == arg_154 && arg_176 == arg_64 && arg_190 == arg_70 && arg_190 == arg_14 && arg_190 == arg_108 && arg_190 == arg_144 && arg_190 == arg_118 && arg_190 == arg_168 && arg_190 == arg_164 && arg_190 == arg_28 && arg_190 == arg_24 && arg_190 == arg_130 && arg_190 == arg_92 && arg_190 == arg_18 && arg_190 == arg_36 && arg_190 == arg_158 && arg_190 == arg_180 && arg_190 == arg_86 && arg_190 == arg_112 && arg_190 == arg_122 && arg_190 == arg_186 && arg_190 == arg_140 && arg_190 == arg_74 && arg_190 == arg_134 && arg_190 == arg_154 && arg_190 == arg_64 && arg_70 == arg_14 && arg_70 == arg_108 && arg_70 == arg_144 && arg_70 == arg_118 && arg_70 == arg_168 && arg_70 == arg_164 && arg_70 == arg_28 && arg_70 == arg_24 && arg_70 == arg_130 && arg_70 == arg_92 && arg_70 == arg_18 && arg_70 == arg_36 && arg_70 == arg_158 && arg_70 == arg_180 && arg_70 == arg_86 && arg_70 == arg_112 && arg_70 == arg_122 && arg_70 == arg_186 && arg_70 == arg_140 && arg_70 == arg_74 && arg_70 == arg_134 && arg_70 == arg_154 && arg_70 == arg_64 && arg_14 == arg_108 && arg_14 == arg_144 && arg_14 == arg_118 && arg_14 == arg_168 && arg_14 == arg_164 && arg_14 == arg_28 && arg_14 == arg_24 && arg_14 == arg_130 && arg_14 == arg_92 && arg_14 == arg_18 && arg_14 == arg_36 && arg_14 == arg_158 && arg_14 == arg_180 && arg_14 == arg_86 && arg_14 == arg_112 && arg_14 == arg_122 && arg_14 == arg_186 && arg_14 == arg_140 && arg_14 == arg_74 && arg_14 == arg_134 && arg_14 == arg_154 && arg_14 == arg_64 && arg_108 == arg_144 && arg_108 == arg_118 && arg_108 == arg_168 && arg_108 == arg_164 && arg_108 == arg_28 && arg_108 == arg_24 && arg_108 == arg_130 && arg_108 == arg_92 && arg_108 == arg_18 && arg_108 == arg_36 && arg_108 == arg_158 && arg_108 == arg_180 && arg_108 == arg_86 && arg_108 == arg_112 && arg_108 == arg_122 && arg_108 == arg_186 && arg_108 == arg_140 && arg_108 == arg_74 && arg_108 == arg_134 && arg_108 == arg_154 && arg_108 == arg_64 && arg_144 == arg_118 && arg_144 == arg_168 && arg_144 == arg_164 && arg_144 == arg_28 && arg_144 == arg_24 && arg_144 == arg_130 && arg_144 == arg_92 && arg_144 == arg_18 && arg_144 == arg_36 && arg_144 == arg_158 && arg_144 == arg_180 && arg_144 == arg_86 && arg_144 == arg_112 && arg_144 == arg_122 && arg_144 == arg_186 && arg_144 == arg_140 && arg_144 == arg_74 && arg_144 == arg_134 && arg_144 == arg_154 && arg_144 == arg_64 && arg_118 == arg_168 && arg_118 == arg_164 && arg_118 == arg_28 && arg_118 == arg_24 && arg_118 == arg_130 && arg_118 == arg_92 && arg_118 == arg_18 && arg_118 == arg_36 && arg_118 == arg_158 && arg_118 == arg_180 && arg_118 == arg_86 && arg_118 == arg_112 && arg_118 == arg_122 && arg_118 == arg_186 && arg_118 == arg_140 && arg_118 == arg_74 && arg_118 == arg_134 && arg_118 == arg_154 && arg_118 == arg_64 && arg_168 == arg_164 && arg_168 == arg_28 && arg_168 == arg_24 && arg_168 == arg_130 && arg_168 == arg_92 && arg_168 == arg_18 && arg_168 == arg_36 && arg_168 == arg_158 && arg_168 == arg_180 && arg_168 == arg_86 && arg_168 == arg_112 && arg_168 == arg_122 && arg_168 == arg_186 && arg_168 == arg_140 && arg_168 == arg_74 && arg_168 == arg_134 && arg_168 == arg_154 && arg_168 == arg_64 && arg_164 == arg_28 && arg_164 == arg_24 && arg_164 == arg_130 && arg_164 == arg_92 && arg_164 == arg_18 && arg_164 == arg_36 && arg_164 == arg_158 && arg_164 == arg_180 && arg_164 == arg_86 && arg_164 == arg_112 && arg_164 == arg_122 && arg_164 == arg_186 && arg_164 == arg_140 && arg_164 == arg_74 && arg_164 == arg_134 && arg_164 == arg_154 && arg_164 == arg_64 && arg_28 == arg_24 && arg_28 == arg_130 && arg_28 == arg_92 && arg_28 == arg_18 && arg_28 == arg_36 && arg_28 == arg_158 && arg_28 == arg_180 && arg_28 == arg_86 && arg_28 == arg_112 && arg_28 == arg_122 && arg_28 == arg_186 && arg_28 == arg_140 && arg_28 == arg_74 && arg_28 == arg_134 && arg_28 == arg_154 && arg_28 == arg_64 && arg_24 == arg_130 && arg_24 == arg_92 && arg_24 == arg_18 && arg_24 == arg_36 && arg_24 == arg_158 && arg_24 == arg_180 && arg_24 == arg_86 && arg_24 == arg_112 && arg_24 == arg_122 && arg_24 == arg_186 && arg_24 == arg_140 && arg_24 == arg_74 && arg_24 == arg_134 && arg_24 == arg_154 && arg_24 == arg_64 && arg_130 == arg_92 && arg_130 == arg_18 && arg_130 == arg_36 && arg_130 == arg_158 && arg_130 == arg_180 && arg_130 == arg_86 && arg_130 == arg_112 && arg_130 == arg_122 && arg_130 == arg_186 && arg_130 == arg_140 && arg_130 == arg_74 && arg_130 == arg_134 && arg_130 == arg_154 && arg_130 == arg_64 && arg_92 == arg_18 && arg_92 == arg_36 && arg_92 == arg_158 && arg_92 == arg_180 && arg_92 == arg_86 && arg_92 == arg_112 && arg_92 == arg_122 && arg_92 == arg_186 && arg_92 == arg_140 && arg_92 == arg_74 && arg_92 == arg_134 && arg_92 == arg_154 && arg_92 == arg_64 && arg_18 == arg_36 && arg_18 == arg_158 && arg_18 == arg_180 && arg_18 == arg_86 && arg_18 == arg_112 && arg_18 == arg_122 && arg_18 == arg_186 && arg_18 == arg_140 && arg_18 == arg_74 && arg_18 == arg_134 && arg_18 == arg_154 && arg_18 == arg_64 && arg_36 == arg_158 && arg_36 == arg_180 && arg_36 == arg_86 && arg_36 == arg_112 && arg_36 == arg_122 && arg_36 == arg_186 && arg_36 == arg_140 && arg_36 == arg_74 && arg_36 == arg_134 && arg_36 == arg_154 && arg_36 == arg_64 && arg_158 == arg_180 && arg_158 == arg_86 && arg_158 == arg_112 && arg_158 == arg_122 && arg_158 == arg_186 && arg_158 == arg_140 && arg_158 == arg_74 && arg_158 == arg_134 && arg_158 == arg_154 && arg_158 == arg_64 && arg_180 == arg_86 && arg_180 == arg_112 && arg_180 == arg_122 && arg_180 == arg_186 && arg_180 == arg_140 && arg_180 == arg_74 && arg_180 == arg_134 && arg_180 == arg_154 && arg_180 == arg_64 && arg_86 == arg_112 && arg_86 == arg_122 && arg_86 == arg_186 && arg_86 == arg_140 && arg_86 == arg_74 && arg_86 == arg_134 && arg_86 == arg_154 && arg_86 == arg_64 && arg_112 == arg_122 && arg_112 == arg_186 && arg_112 == arg_140 && arg_112 == arg_74 && arg_112 == arg_134 && arg_112 == arg_154 && arg_112 == arg_64 && arg_122 == arg_186 && arg_122 == arg_140 && arg_122 == arg_74 && arg_122 == arg_134 && arg_122 == arg_154 && arg_122 == arg_64 && arg_186 == arg_140 && arg_186 == arg_74 && arg_186 == arg_134 && arg_186 == arg_154 && arg_186 == arg_64 && arg_140 == arg_74 && arg_140 == arg_134 && arg_140 == arg_154 && arg_140 == arg_64 && arg_74 == arg_134 && arg_74 == arg_154 && arg_74 == arg_64 && arg_134 == arg_154 && arg_134 == arg_64 && arg_154 == arg_64 {
let rhs_inst_17 = pos.ins().ushr_imm(arg_146, 32_u64 as i64);
let rhs_inst_18 = pos.ins().bnot(rhs_inst_17);
pos.func.dfg.replace(inst).bnot(rhs_inst_18);

}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1403(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_3 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_3[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_4) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_5 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_5[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_6) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_7 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_7[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_8) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_9 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_9[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_10 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_10) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_11 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_11[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_12 = arg;
let rhs_7 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_12) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_13 = arg;
let rhs_8 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_13) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_14 = arg;
let rhs_9 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_14) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_15 = args;
match opcode {
Opcode::Imul => {
if rhs_9 == 4294967295 {
if rhs_8 == -1 {
if rhs_7 == 1 {
match pos.func.dfg.value_def(arg_11[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_16 = arg;
let rhs_13 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_16) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_17 = arg;
let rhs_14 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_17) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_18 = args;
match opcode {
Opcode::Imul => {
if rhs_14 == 4294967295 {
if rhs_13 == -1 {
if rhs_6 == 2 {
match pos.func.dfg.value_def(arg_9[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_19 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_19[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_20 = arg;
let rhs_18 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_20) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_21 = arg;
let rhs_19 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_21) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_22 = arg;
let rhs_20 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_22) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_23 = args;
match opcode {
Opcode::Imul => {
if rhs_20 == 4294967295 {
if rhs_19 == -1 {
if rhs_18 == 1 {
match pos.func.dfg.value_def(arg_19[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_24 = arg;
let rhs_24 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_24) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_25 = arg;
let rhs_25 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_25) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_26 = args;
match opcode {
Opcode::Imul => {
if rhs_25 == 4294967295 {
if rhs_24 == -1 {
if rhs_5 == 4 {
match pos.func.dfg.value_def(arg_7[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_27 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_27[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_28 = arg;
let rhs_29 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_28) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_29 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_29[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_30 = arg;
let rhs_30 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_30) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_31 = arg;
let rhs_31 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_31) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_32 = arg;
let rhs_32 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_32) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_33 = args;
match opcode {
Opcode::Imul => {
if rhs_32 == 4294967295 {
if rhs_31 == -1 {
if rhs_30 == 1 {
match pos.func.dfg.value_def(arg_29[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_34 = arg;
let rhs_36 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_34) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_35 = arg;
let rhs_37 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_35) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_36 = args;
match opcode {
Opcode::Imul => {
if rhs_37 == 4294967295 {
if rhs_36 == -1 {
if rhs_29 == 2 {
match pos.func.dfg.value_def(arg_27[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_37 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_37[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_38 = arg;
let rhs_41 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_38) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_39 = arg;
let rhs_42 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_39) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_40 = arg;
let rhs_43 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_40) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_41 = args;
match opcode {
Opcode::Imul => {
if rhs_43 == 4294967295 {
if rhs_42 == -1 {
if rhs_41 == 1 {
match pos.func.dfg.value_def(arg_37[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_42 = arg;
let rhs_47 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_42) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_43 = arg;
let rhs_48 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_43) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_44 = args;
match opcode {
Opcode::Imul => {
if rhs_48 == 4294967295 {
if rhs_47 == -1 {
if rhs_4 == 8 {
match pos.func.dfg.value_def(arg_5[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_45 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_45[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_46 = arg;
let rhs_52 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_46) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_47 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_47[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_48 = arg;
let rhs_53 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_48) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_49 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_49[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_50 = arg;
let rhs_54 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_50) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_51 = arg;
let rhs_55 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_51) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_52 = arg;
let rhs_56 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_52) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_53 = args;
match opcode {
Opcode::Imul => {
if rhs_56 == 4294967295 {
if rhs_55 == -1 {
if rhs_54 == 1 {
match pos.func.dfg.value_def(arg_49[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_54 = arg;
let rhs_60 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_54) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_55 = arg;
let rhs_61 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_55) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_56 = args;
match opcode {
Opcode::Imul => {
if rhs_61 == 4294967295 {
if rhs_60 == -1 {
if rhs_53 == 2 {
match pos.func.dfg.value_def(arg_47[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_57 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_57[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_58 = arg;
let rhs_65 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_58) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_59 = arg;
let rhs_66 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_59) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_60 = arg;
let rhs_67 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_60) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_61 = args;
match opcode {
Opcode::Imul => {
if rhs_67 == 4294967295 {
if rhs_66 == -1 {
if rhs_65 == 1 {
match pos.func.dfg.value_def(arg_57[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_62 = arg;
let rhs_71 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_62) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_63 = arg;
let rhs_72 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_63) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_64 = args;
match opcode {
Opcode::Imul => {
if rhs_72 == 4294967295 {
if rhs_71 == -1 {
if rhs_52 == 4 {
match pos.func.dfg.value_def(arg_45[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_65 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_65[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_66 = arg;
let rhs_76 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_66) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_67 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_67[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_68 = arg;
let rhs_77 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_68) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_69 = arg;
let rhs_78 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_69) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_70 = arg;
let rhs_79 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_70) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_71 = args;
match opcode {
Opcode::Imul => {
if rhs_79 == 4294967295 {
if rhs_78 == -1 {
if rhs_77 == 1 {
match pos.func.dfg.value_def(arg_67[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_72 = arg;
let rhs_83 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_72) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_73 = arg;
let rhs_84 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_73) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_74 = args;
match opcode {
Opcode::Imul => {
if rhs_84 == 4294967295 {
if rhs_83 == -1 {
if rhs_76 == 2 {
match pos.func.dfg.value_def(arg_65[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_75 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_75[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_76 = arg;
let rhs_88 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_76) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_77 = arg;
let rhs_89 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_77) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_78 = arg;
let rhs_90 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_78) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_79 = args;
match opcode {
Opcode::Imul => {
if rhs_90 == 4294967295 {
if rhs_89 == -1 {
if rhs_88 == 1 {
match pos.func.dfg.value_def(arg_75[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_80 = arg;
let rhs_94 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_80) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_81 = arg;
let rhs_95 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_81) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_82 = args;
match opcode {
Opcode::Imul => {
if rhs_95 == 4294967295 {
if rhs_94 == -1 {
if rhs_3 == 16 {
match pos.func.dfg.value_def(arg_3[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_83 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_83[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_84 = arg;
let rhs_99 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_84) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_85 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_85[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_86 = arg;
let rhs_100 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_86) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_87 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_87[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_88 = arg;
let rhs_101 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_88) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_89 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_89[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_90 = arg;
let rhs_102 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_90) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_91 = arg;
let rhs_103 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_91) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_92 = arg;
let rhs_104 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_92) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_93 = args;
match opcode {
Opcode::Imul => {
if rhs_104 == 4294967295 {
if rhs_103 == -1 {
if rhs_102 == 1 {
match pos.func.dfg.value_def(arg_89[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_94 = arg;
let rhs_108 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_94) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_95 = arg;
let rhs_109 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_95) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_96 = args;
match opcode {
Opcode::Imul => {
if rhs_109 == 4294967295 {
if rhs_108 == -1 {
if rhs_101 == 2 {
match pos.func.dfg.value_def(arg_87[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_97 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_97[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_98 = arg;
let rhs_113 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_98) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_99 = arg;
let rhs_114 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_99) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_100 = arg;
let rhs_115 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_100) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_101 = args;
match opcode {
Opcode::Imul => {
if rhs_115 == 4294967295 {
if rhs_114 == -1 {
if rhs_113 == 1 {
match pos.func.dfg.value_def(arg_97[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_102 = arg;
let rhs_119 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_102) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_103 = arg;
let rhs_120 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_103) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_104 = args;
match opcode {
Opcode::Imul => {
if rhs_120 == 4294967295 {
if rhs_119 == -1 {
if rhs_100 == 4 {
match pos.func.dfg.value_def(arg_85[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_105 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_105[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_106 = arg;
let rhs_124 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_106) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_107 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_107[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_108 = arg;
let rhs_125 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_108) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_109 = arg;
let rhs_126 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_109) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_110 = arg;
let rhs_127 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_110) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_111 = args;
match opcode {
Opcode::Imul => {
if rhs_127 == 4294967295 {
if rhs_126 == -1 {
if rhs_125 == 1 {
match pos.func.dfg.value_def(arg_107[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_112 = arg;
let rhs_131 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_112) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_113 = arg;
let rhs_132 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_113) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_114 = args;
match opcode {
Opcode::Imul => {
if rhs_132 == 4294967295 {
if rhs_131 == -1 {
if rhs_124 == 2 {
match pos.func.dfg.value_def(arg_105[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_115 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_115[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_116 = arg;
let rhs_136 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_116) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_117 = arg;
let rhs_137 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_117) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_118 = arg;
let rhs_138 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_118) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_119 = args;
match opcode {
Opcode::Imul => {
if rhs_138 == 4294967295 {
if rhs_137 == -1 {
if rhs_136 == 1 {
match pos.func.dfg.value_def(arg_115[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_120 = arg;
let rhs_142 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_120) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_121 = arg;
let rhs_143 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_121) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_122 = args;
match opcode {
Opcode::Imul => {
if rhs_143 == 4294967295 {
if rhs_142 == -1 {
if rhs_99 == 8 {
match pos.func.dfg.value_def(arg_83[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_123 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_123[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_124 = arg;
let rhs_147 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_124) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_125 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_125[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_126 = arg;
let rhs_148 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_126) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_127 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_127[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_128 = arg;
let rhs_149 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_128) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_129 = arg;
let rhs_150 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_129) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_130 = arg;
let rhs_151 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_130) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_131 = args;
match opcode {
Opcode::Imul => {
if rhs_151 == 4294967295 {
if rhs_150 == -1 {
if rhs_149 == 1 {
match pos.func.dfg.value_def(arg_127[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_132 = arg;
let rhs_155 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_132) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_133 = arg;
let rhs_156 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_133) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_134 = args;
match opcode {
Opcode::Imul => {
if rhs_156 == 4294967295 {
if rhs_155 == -1 {
if rhs_148 == 2 {
match pos.func.dfg.value_def(arg_125[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_135 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_135[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_136 = arg;
let rhs_160 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_136) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_137 = arg;
let rhs_161 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_137) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_138 = arg;
let rhs_162 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_138) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_139 = args;
match opcode {
Opcode::Imul => {
if rhs_162 == 4294967295 {
if rhs_161 == -1 {
if rhs_160 == 1 {
match pos.func.dfg.value_def(arg_135[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_140 = arg;
let rhs_166 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_140) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_141 = arg;
let rhs_167 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_141) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_142 = args;
match opcode {
Opcode::Imul => {
if rhs_167 == 4294967295 {
if rhs_166 == -1 {
if rhs_147 == 4 {
match pos.func.dfg.value_def(arg_123[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_143 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_143[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_144 = arg;
let rhs_171 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_144) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_145 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_145[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_146 = arg;
let rhs_172 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_146) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_147 = arg;
let rhs_173 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_147) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_148 = arg;
let rhs_174 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_148) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_149 = args;
match opcode {
Opcode::Imul => {
if rhs_174 == 4294967295 {
if rhs_173 == -1 {
if rhs_172 == 1 {
match pos.func.dfg.value_def(arg_145[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_150 = arg;
let rhs_178 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_150) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_151 = arg;
let rhs_179 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_151) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_152 = args;
match opcode {
Opcode::Imul => {
if rhs_179 == 4294967295 {
if rhs_178 == -1 {
if rhs_171 == 2 {
match pos.func.dfg.value_def(arg_143[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_153 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_153[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_154 = arg;
let rhs_183 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_154) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_155 = arg;
let rhs_184 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_155) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_156 = arg;
let rhs_185 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_156) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_157 = args;
match opcode {
Opcode::Imul => {
if rhs_185 == 4294967295 {
if rhs_184 == -1 {
if rhs_183 == 1 {
match pos.func.dfg.value_def(arg_153[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_158 = arg;
let rhs_189 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_158) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_159 = arg;
let rhs_190 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_159) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_160 = args;
match opcode {
Opcode::Imul => {
if rhs_190 == 4294967295 {
if rhs_189 == -1 {
if rhs_2 == 32 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_161 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_161[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_162 = arg;
let rhs_194 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_162) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_163 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_163[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_164 = arg;
let rhs_195 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_164) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_165 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_165[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_166 = arg;
let rhs_196 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_166) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_167 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_167[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_168 = arg;
let rhs_197 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_168) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_169 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_169[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_170 = arg;
let rhs_198 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_170) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_171 = arg;
let rhs_199 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_171) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_172 = arg;
let rhs_200 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_172) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_173 = args;
match opcode {
Opcode::Imul => {
if rhs_200 == 4294967295 {
if rhs_199 == -1 {
if rhs_198 == 1 {
match pos.func.dfg.value_def(arg_169[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_174 = arg;
let rhs_204 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_174) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_175 = arg;
let rhs_205 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_175) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_176 = args;
match opcode {
Opcode::Imul => {
if rhs_205 == 4294967295 {
if rhs_204 == -1 {
if rhs_197 == 2 {
match pos.func.dfg.value_def(arg_167[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_177 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_177[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_178 = arg;
let rhs_209 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_178) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_179 = arg;
let rhs_210 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_179) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_180 = arg;
let rhs_211 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_180) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_181 = args;
match opcode {
Opcode::Imul => {
if rhs_211 == 4294967295 {
if rhs_210 == -1 {
if rhs_209 == 1 {
match pos.func.dfg.value_def(arg_177[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_182 = arg;
let rhs_215 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_182) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_183 = arg;
let rhs_216 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_183) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_184 = args;
match opcode {
Opcode::Imul => {
if rhs_216 == 4294967295 {
if rhs_215 == -1 {
if rhs_196 == 4 {
match pos.func.dfg.value_def(arg_165[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_185 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_185[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_186 = arg;
let rhs_220 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_186) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_187 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_187[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_188 = arg;
let rhs_221 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_188) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_189 = arg;
let rhs_222 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_189) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_190 = arg;
let rhs_223 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_190) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_191 = args;
match opcode {
Opcode::Imul => {
if rhs_223 == 4294967295 {
if rhs_222 == -1 {
if rhs_221 == 1 {
match pos.func.dfg.value_def(arg_187[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_192 = arg;
let rhs_227 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_192) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_193 = arg;
let rhs_228 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_193) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_194 = args;
match opcode {
Opcode::Imul => {
if rhs_228 == 4294967295 {
if rhs_227 == -1 {
if rhs_220 == 2 {
match pos.func.dfg.value_def(arg_185[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_195 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_195[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_196 = arg;
let rhs_232 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_196) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_197 = arg;
let rhs_233 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_197) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_198 = arg;
let rhs_234 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_198) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_199 = args;
match opcode {
Opcode::Imul => {
if rhs_234 == 4294967295 {
if rhs_233 == -1 {
if rhs_232 == 1 {
match pos.func.dfg.value_def(arg_195[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_200 = arg;
let rhs_238 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_200) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_201 = arg;
let rhs_239 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_201) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_202 = args;
match opcode {
Opcode::Imul => {
if rhs_239 == 4294967295 {
if rhs_238 == -1 {
if rhs_195 == 8 {
match pos.func.dfg.value_def(arg_163[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_203 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_203[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_204 = arg;
let rhs_243 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_204) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_205 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_205[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_206 = arg;
let rhs_244 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_206) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_207 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_207[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_208 = arg;
let rhs_245 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_208) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_209 = arg;
let rhs_246 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_209) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_210 = arg;
let rhs_247 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_210) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_211 = args;
match opcode {
Opcode::Imul => {
if rhs_247 == 4294967295 {
if rhs_246 == -1 {
if rhs_245 == 1 {
match pos.func.dfg.value_def(arg_207[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_212 = arg;
let rhs_251 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_212) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_213 = arg;
let rhs_252 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_213) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_214 = args;
match opcode {
Opcode::Imul => {
if rhs_252 == 4294967295 {
if rhs_251 == -1 {
if rhs_244 == 2 {
match pos.func.dfg.value_def(arg_205[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_215 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_215[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_216 = arg;
let rhs_256 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_216) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_217 = arg;
let rhs_257 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_217) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_218 = arg;
let rhs_258 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_218) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_219 = args;
match opcode {
Opcode::Imul => {
if rhs_258 == 4294967295 {
if rhs_257 == -1 {
if rhs_256 == 1 {
match pos.func.dfg.value_def(arg_215[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_220 = arg;
let rhs_262 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_220) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_221 = arg;
let rhs_263 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_221) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_222 = args;
match opcode {
Opcode::Imul => {
if rhs_263 == 4294967295 {
if rhs_262 == -1 {
if rhs_243 == 4 {
match pos.func.dfg.value_def(arg_203[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_223 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_223[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_224 = arg;
let rhs_267 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_224) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_225 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_225[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_226 = arg;
let rhs_268 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_226) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_227 = arg;
let rhs_269 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_227) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_228 = arg;
let rhs_270 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_228) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_229 = args;
match opcode {
Opcode::Imul => {
if rhs_270 == 4294967295 {
if rhs_269 == -1 {
if rhs_268 == 1 {
match pos.func.dfg.value_def(arg_225[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_230 = arg;
let rhs_274 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_230) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_231 = arg;
let rhs_275 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_231) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_232 = args;
match opcode {
Opcode::Imul => {
if rhs_275 == 4294967295 {
if rhs_274 == -1 {
if rhs_267 == 2 {
match pos.func.dfg.value_def(arg_223[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_233 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_233[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_234 = arg;
let rhs_279 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_234) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_235 = arg;
let rhs_280 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_235) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_236 = arg;
let rhs_281 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_236) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_237 = args;
match opcode {
Opcode::Imul => {
if rhs_281 == 4294967295 {
if rhs_280 == -1 {
if rhs_279 == 1 {
match pos.func.dfg.value_def(arg_233[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_238 = arg;
let rhs_285 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_238) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_239 = arg;
let rhs_286 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_239) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_240 = args;
match opcode {
Opcode::Imul => {
if rhs_286 == 4294967295 {
if rhs_285 == -1 {
if rhs_194 == 16 {
match pos.func.dfg.value_def(arg_161[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_241 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_241[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_242 = arg;
let rhs_290 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_242) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_243 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_243[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_244 = arg;
let rhs_291 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_244) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_245 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_245[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_246 = arg;
let rhs_292 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_246) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_247 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_247[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_248 = arg;
let rhs_293 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_248) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_249 = arg;
let rhs_294 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_249) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_250 = arg;
let rhs_295 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_250) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_251 = args;
match opcode {
Opcode::Imul => {
if rhs_295 == 4294967295 {
if rhs_294 == -1 {
if rhs_293 == 1 {
match pos.func.dfg.value_def(arg_247[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_252 = arg;
let rhs_299 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_252) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_253 = arg;
let rhs_300 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_253) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_254 = args;
match opcode {
Opcode::Imul => {
if rhs_300 == 4294967295 {
if rhs_299 == -1 {
if rhs_292 == 2 {
match pos.func.dfg.value_def(arg_245[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_255 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_255[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_256 = arg;
let rhs_304 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_256) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_257 = arg;
let rhs_305 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_257) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_258 = arg;
let rhs_306 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_258) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_259 = args;
match opcode {
Opcode::Imul => {
if rhs_306 == 4294967295 {
if rhs_305 == -1 {
if rhs_304 == 1 {
match pos.func.dfg.value_def(arg_255[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_260 = arg;
let rhs_310 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_260) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_261 = arg;
let rhs_311 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_261) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_262 = args;
match opcode {
Opcode::Imul => {
if rhs_311 == 4294967295 {
if rhs_310 == -1 {
if rhs_291 == 4 {
match pos.func.dfg.value_def(arg_243[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_263 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_263[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_264 = arg;
let rhs_315 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_264) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_265 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_265[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_266 = arg;
let rhs_316 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_266) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_267 = arg;
let rhs_317 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_267) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_268 = arg;
let rhs_318 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_268) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_269 = args;
match opcode {
Opcode::Imul => {
if rhs_318 == 4294967295 {
if rhs_317 == -1 {
if rhs_316 == 1 {
match pos.func.dfg.value_def(arg_265[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_270 = arg;
let rhs_322 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_270) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_271 = arg;
let rhs_323 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_271) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_272 = args;
match opcode {
Opcode::Imul => {
if rhs_323 == 4294967295 {
if rhs_322 == -1 {
if rhs_315 == 2 {
match pos.func.dfg.value_def(arg_263[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_273 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_273[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_274 = arg;
let rhs_327 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_274) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_275 = arg;
let rhs_328 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_275) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_276 = arg;
let rhs_329 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_276) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_277 = args;
match opcode {
Opcode::Imul => {
if rhs_329 == 4294967295 {
if rhs_328 == -1 {
if rhs_327 == 1 {
match pos.func.dfg.value_def(arg_273[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_278 = arg;
let rhs_333 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_278) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_279 = arg;
let rhs_334 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_279) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_280 = args;
match opcode {
Opcode::Imul => {
if rhs_334 == 4294967295 {
if rhs_333 == -1 {
if rhs_290 == 8 {
match pos.func.dfg.value_def(arg_241[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_281 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_281[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_282 = arg;
let rhs_338 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_282) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_283 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_283[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_284 = arg;
let rhs_339 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_284) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_285 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_285[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_286 = arg;
let rhs_340 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_286) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_287 = arg;
let rhs_341 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_287) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_288 = arg;
let rhs_342 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_288) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_289 = args;
match opcode {
Opcode::Imul => {
if rhs_342 == 4294967295 {
if rhs_341 == -1 {
if rhs_340 == 1 {
match pos.func.dfg.value_def(arg_285[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_290 = arg;
let rhs_346 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_290) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_291 = arg;
let rhs_347 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_291) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_292 = args;
match opcode {
Opcode::Imul => {
if rhs_347 == 4294967295 {
if rhs_346 == -1 {
if rhs_339 == 2 {
match pos.func.dfg.value_def(arg_283[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_293 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_293[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_294 = arg;
let rhs_351 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_294) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_295 = arg;
let rhs_352 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_295) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_296 = arg;
let rhs_353 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_296) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_297 = args;
match opcode {
Opcode::Imul => {
if rhs_353 == 4294967295 {
if rhs_352 == -1 {
if rhs_351 == 1 {
match pos.func.dfg.value_def(arg_293[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_298 = arg;
let rhs_357 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_298) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_299 = arg;
let rhs_358 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_299) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_300 = args;
match opcode {
Opcode::Imul => {
if rhs_358 == 4294967295 {
if rhs_357 == -1 {
if rhs_338 == 4 {
match pos.func.dfg.value_def(arg_281[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_301 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_301[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_302 = arg;
let rhs_362 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_302) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_303 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_303[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_304 = arg;
let rhs_363 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_304) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_305 = arg;
let rhs_364 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_305) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_306 = arg;
let rhs_365 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_306) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_307 = args;
match opcode {
Opcode::Imul => {
if rhs_365 == 4294967295 {
if rhs_364 == -1 {
if rhs_363 == 1 {
match pos.func.dfg.value_def(arg_303[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_308 = arg;
let rhs_369 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_308) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_309 = arg;
let rhs_370 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_309) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_310 = args;
match opcode {
Opcode::Imul => {
if rhs_370 == 4294967295 {
if rhs_369 == -1 {
if rhs_362 == 2 {
match pos.func.dfg.value_def(arg_301[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_311 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_311[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_312 = arg;
let rhs_374 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_312) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_313 = arg;
let rhs_375 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_313) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_314 = arg;
let rhs_376 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_314) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_315 = args;
match opcode {
Opcode::Imul => {
if rhs_376 == 4294967295 {
if rhs_375 == -1 {
if rhs_374 == 1 {
match pos.func.dfg.value_def(arg_311[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_316 = arg;
let rhs_380 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_316) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_317 = arg;
let rhs_381 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_317) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_318 = args;
match opcode {
Opcode::Imul => {
if rhs_381 == 4294967295 {
if rhs_380 == -1 {
if rhs_1 == 1 {
if arg_104[1] == arg_160[1] && arg_104[1] != arg_61[0] && arg_104[1] == arg_61[1] && arg_104[1] == arg_82[1] && arg_104[1] != arg_44[0] && arg_104[1] != arg_318[0] && arg_104[1] == arg_74[1] && arg_104[1] == arg_152[1] && arg_104[1] != arg_297[0] && arg_104[1] != arg_173[0] && arg_104[1] != arg_199[0] && arg_104[1] != arg_300[0] && arg_104[1] == arg_259[1] && arg_104[1] != arg_229[0] && arg_104[1] == arg_254[1] && arg_104[1] != arg_26[0] && arg_104[1] != arg_104[0] && arg_104[1] != arg_176[0] && arg_104[1] == arg_122[1] && arg_104[1] == arg_101[1] && arg_104[1] == arg_297[1] && arg_104[1] == arg_134[1] && arg_104[1] == arg_119[1] && arg_104[1] == arg_26[1] && arg_104[1] == arg_23[1] && arg_104[1] != arg_160[0] && arg_104[1] != arg_292[0] && arg_104[1] == arg_237[1] && arg_104[1] != arg_181[0] && arg_104[1] != arg_191[0] && arg_104[1] == arg_199[1] && arg_104[1] != arg_71[0] && arg_104[1] == arg_269[1] && arg_104[1] == arg_53[1] && arg_104[1] != arg_157[0] && arg_104[1] == arg_292[1] && arg_104[1] == arg_289[1] && arg_104[1] == arg_300[1] && arg_104[1] != arg_289[0] && arg_104[1] == arg_33[1] && arg_104[1] != arg_111[0] && arg_104[1] == arg_272[1] && arg_104[1] != arg_96[0] && arg_104[1] != arg_36[0] && arg_104[1] != arg_259[0] && arg_104[1] != arg_254[0] && arg_104[1] == arg_64[1] && arg_104[1] != arg_280[0] && arg_104[1] == arg_307[1] && arg_104[1] == arg_111[1] && arg_104[1] != arg_64[0] && arg_104[1] != arg_74[0] && arg_104[1] == arg_232[1] && arg_104[1] == arg_44[1] && arg_104[1] != arg_240[0] && arg_104[1] != arg_194[0] && arg_104[1] != arg_149[0] && arg_104[1] != arg_53[0] && arg_104[1] == arg_36[1] && arg_104[1] != arg_310[0] && arg_104[1] != arg_33[0] && arg_104[1] == arg_280[1] && arg_104[1] == arg_79[1] && arg_104[1] == arg_191[1] && arg_104[1] == arg_194[1] && arg_104[1] != arg_131[0] && arg_104[1] == arg_222[1] && arg_104[1] != arg_211[0] && arg_104[1] != arg_251[0] && arg_104[1] == arg_202[1] && arg_104[1] != arg_272[0] && arg_104[1] == arg_251[1] && arg_104[1] == arg_318[1] && arg_104[1] == arg_211[1] && arg_104[1] != arg_277[0] && arg_104[1] != arg_82[0] && arg_104[1] != arg_222[0] && arg_104[1] == arg_184[1] && arg_104[1] == arg_310[1] && arg_104[1] == arg_315[1] && arg_104[1] != arg_23[0] && arg_104[1] == arg_41[1] && arg_104[1] == arg_56[1] && arg_104[1] == arg_71[1] && arg_104[1] == arg_157[1] && arg_104[1] != arg_232[0] && arg_104[1] == arg_15[1] && arg_104[1] != arg_262[0] && arg_104[1] != arg_269[0] && arg_104[1] == arg_114[1] && arg_104[1] != arg_56[0] && arg_104[1] != arg_219[0] && arg_104[1] == arg_18[1] && arg_104[1] != arg_93[0] && arg_104[1] != arg_202[0] && arg_104[1] != arg_315[0] && arg_104[1] == arg_240[1] && arg_104[1] == arg_176[1] && arg_104[1] == arg_181[1] && arg_104[1] != arg_114[0] && arg_104[1] != arg_122[0] && arg_104[1] != arg_142[0] && arg_104[1] == arg_142[1] && arg_104[1] != arg_79[0] && arg_104[1] != arg_152[0] && arg_104[1] == arg_173[1] && arg_104[1] != arg_237[0] && arg_104[1] == arg_277[1] && arg_104[1] == arg_139[1] && arg_104[1] == arg_96[1] && arg_104[1] == arg_131[1] && arg_104[1] == arg_229[1] && arg_104[1] != arg_15[0] && arg_104[1] != arg_101[0] && arg_104[1] != arg_184[0] && arg_104[1] == arg_262[1] && arg_104[1] != arg_41[0] && arg_104[1] == arg_93[1] && arg_104[1] != arg_18[0] && arg_104[1] == arg_214[1] && arg_104[1] != arg_119[0] && arg_104[1] != arg_214[0] && arg_104[1] != arg_139[0] && arg_104[1] != arg_307[0] && arg_104[1] == arg_149[1] && arg_104[1] != arg_134[0] && arg_104[1] == arg_219[1] && arg_160[1] != arg_61[0] && arg_160[1] == arg_61[1] && arg_160[1] == arg_82[1] && arg_160[1] != arg_44[0] && arg_160[1] != arg_318[0] && arg_160[1] == arg_74[1] && arg_160[1] == arg_152[1] && arg_160[1] != arg_297[0] && arg_160[1] != arg_173[0] && arg_160[1] != arg_199[0] && arg_160[1] != arg_300[0] && arg_160[1] == arg_259[1] && arg_160[1] != arg_229[0] && arg_160[1] == arg_254[1] && arg_160[1] != arg_26[0] && arg_160[1] != arg_104[0] && arg_160[1] != arg_176[0] && arg_160[1] == arg_122[1] && arg_160[1] == arg_101[1] && arg_160[1] == arg_297[1] && arg_160[1] == arg_134[1] && arg_160[1] == arg_119[1] && arg_160[1] == arg_26[1] && arg_160[1] == arg_23[1] && arg_160[1] != arg_160[0] && arg_160[1] != arg_292[0] && arg_160[1] == arg_237[1] && arg_160[1] != arg_181[0] && arg_160[1] != arg_191[0] && arg_160[1] == arg_199[1] && arg_160[1] != arg_71[0] && arg_160[1] == arg_269[1] && arg_160[1] == arg_53[1] && arg_160[1] != arg_157[0] && arg_160[1] == arg_292[1] && arg_160[1] == arg_289[1] && arg_160[1] == arg_300[1] && arg_160[1] != arg_289[0] && arg_160[1] == arg_33[1] && arg_160[1] != arg_111[0] && arg_160[1] == arg_272[1] && arg_160[1] != arg_96[0] && arg_160[1] != arg_36[0] && arg_160[1] != arg_259[0] && arg_160[1] != arg_254[0] && arg_160[1] == arg_64[1] && arg_160[1] != arg_280[0] && arg_160[1] == arg_307[1] && arg_160[1] == arg_111[1] && arg_160[1] != arg_64[0] && arg_160[1] != arg_74[0] && arg_160[1] == arg_232[1] && arg_160[1] == arg_44[1] && arg_160[1] != arg_240[0] && arg_160[1] != arg_194[0] && arg_160[1] != arg_149[0] && arg_160[1] != arg_53[0] && arg_160[1] == arg_36[1] && arg_160[1] != arg_310[0] && arg_160[1] != arg_33[0] && arg_160[1] == arg_280[1] && arg_160[1] == arg_79[1] && arg_160[1] == arg_191[1] && arg_160[1] == arg_194[1] && arg_160[1] != arg_131[0] && arg_160[1] == arg_222[1] && arg_160[1] != arg_211[0] && arg_160[1] != arg_251[0] && arg_160[1] == arg_202[1] && arg_160[1] != arg_272[0] && arg_160[1] == arg_251[1] && arg_160[1] == arg_318[1] && arg_160[1] == arg_211[1] && arg_160[1] != arg_277[0] && arg_160[1] != arg_82[0] && arg_160[1] != arg_222[0] && arg_160[1] == arg_184[1] && arg_160[1] == arg_310[1] && arg_160[1] == arg_315[1] && arg_160[1] != arg_23[0] && arg_160[1] == arg_41[1] && arg_160[1] == arg_56[1] && arg_160[1] == arg_71[1] && arg_160[1] == arg_157[1] && arg_160[1] != arg_232[0] && arg_160[1] == arg_15[1] && arg_160[1] != arg_262[0] && arg_160[1] != arg_269[0] && arg_160[1] == arg_114[1] && arg_160[1] != arg_56[0] && arg_160[1] != arg_219[0] && arg_160[1] == arg_18[1] && arg_160[1] != arg_93[0] && arg_160[1] != arg_202[0] && arg_160[1] != arg_315[0] && arg_160[1] == arg_240[1] && arg_160[1] == arg_176[1] && arg_160[1] == arg_181[1] && arg_160[1] != arg_114[0] && arg_160[1] != arg_122[0] && arg_160[1] != arg_142[0] && arg_160[1] == arg_142[1] && arg_160[1] != arg_79[0] && arg_160[1] != arg_152[0] && arg_160[1] == arg_173[1] && arg_160[1] != arg_237[0] && arg_160[1] == arg_277[1] && arg_160[1] == arg_139[1] && arg_160[1] == arg_96[1] && arg_160[1] == arg_131[1] && arg_160[1] == arg_229[1] && arg_160[1] != arg_15[0] && arg_160[1] != arg_101[0] && arg_160[1] != arg_184[0] && arg_160[1] == arg_262[1] && arg_160[1] != arg_41[0] && arg_160[1] == arg_93[1] && arg_160[1] != arg_18[0] && arg_160[1] == arg_214[1] && arg_160[1] != arg_119[0] && arg_160[1] != arg_214[0] && arg_160[1] != arg_139[0] && arg_160[1] != arg_307[0] && arg_160[1] == arg_149[1] && arg_160[1] != arg_134[0] && arg_160[1] == arg_219[1] && arg_61[0] != arg_61[1] && arg_61[0] != arg_82[1] && arg_61[0] == arg_44[0] && arg_61[0] == arg_318[0] && arg_61[0] != arg_74[1] && arg_61[0] != arg_152[1] && arg_61[0] == arg_297[0] && arg_61[0] == arg_173[0] && arg_61[0] == arg_199[0] && arg_61[0] == arg_300[0] && arg_61[0] != arg_259[1] && arg_61[0] == arg_229[0] && arg_61[0] != arg_254[1] && arg_61[0] == arg_26[0] && arg_61[0] == arg_104[0] && arg_61[0] == arg_176[0] && arg_61[0] != arg_122[1] && arg_61[0] != arg_101[1] && arg_61[0] != arg_297[1] && arg_61[0] != arg_134[1] && arg_61[0] != arg_119[1] && arg_61[0] != arg_26[1] && arg_61[0] != arg_23[1] && arg_61[0] == arg_160[0] && arg_61[0] == arg_292[0] && arg_61[0] != arg_237[1] && arg_61[0] == arg_181[0] && arg_61[0] == arg_191[0] && arg_61[0] != arg_199[1] && arg_61[0] == arg_71[0] && arg_61[0] != arg_269[1] && arg_61[0] != arg_53[1] && arg_61[0] == arg_157[0] && arg_61[0] != arg_292[1] && arg_61[0] != arg_289[1] && arg_61[0] != arg_300[1] && arg_61[0] == arg_289[0] && arg_61[0] != arg_33[1] && arg_61[0] == arg_111[0] && arg_61[0] != arg_272[1] && arg_61[0] == arg_96[0] && arg_61[0] == arg_36[0] && arg_61[0] == arg_259[0] && arg_61[0] == arg_254[0] && arg_61[0] != arg_64[1] && arg_61[0] == arg_280[0] && arg_61[0] != arg_307[1] && arg_61[0] != arg_111[1] && arg_61[0] == arg_64[0] && arg_61[0] == arg_74[0] && arg_61[0] != arg_232[1] && arg_61[0] != arg_44[1] && arg_61[0] == arg_240[0] && arg_61[0] == arg_194[0] && arg_61[0] == arg_149[0] && arg_61[0] == arg_53[0] && arg_61[0] != arg_36[1] && arg_61[0] == arg_310[0] && arg_61[0] == arg_33[0] && arg_61[0] != arg_280[1] && arg_61[0] != arg_79[1] && arg_61[0] != arg_191[1] && arg_61[0] != arg_194[1] && arg_61[0] == arg_131[0] && arg_61[0] != arg_222[1] && arg_61[0] == arg_211[0] && arg_61[0] == arg_251[0] && arg_61[0] != arg_202[1] && arg_61[0] == arg_272[0] && arg_61[0] != arg_251[1] && arg_61[0] != arg_318[1] && arg_61[0] != arg_211[1] && arg_61[0] == arg_277[0] && arg_61[0] == arg_82[0] && arg_61[0] == arg_222[0] && arg_61[0] != arg_184[1] && arg_61[0] != arg_310[1] && arg_61[0] != arg_315[1] && arg_61[0] == arg_23[0] && arg_61[0] != arg_41[1] && arg_61[0] != arg_56[1] && arg_61[0] != arg_71[1] && arg_61[0] != arg_157[1] && arg_61[0] == arg_232[0] && arg_61[0] != arg_15[1] && arg_61[0] == arg_262[0] && arg_61[0] == arg_269[0] && arg_61[0] != arg_114[1] && arg_61[0] == arg_56[0] && arg_61[0] == arg_219[0] && arg_61[0] != arg_18[1] && arg_61[0] == arg_93[0] && arg_61[0] == arg_202[0] && arg_61[0] == arg_315[0] && arg_61[0] != arg_240[1] && arg_61[0] != arg_176[1] && arg_61[0] != arg_181[1] && arg_61[0] == arg_114[0] && arg_61[0] == arg_122[0] && arg_61[0] == arg_142[0] && arg_61[0] != arg_142[1] && arg_61[0] == arg_79[0] && arg_61[0] == arg_152[0] && arg_61[0] != arg_173[1] && arg_61[0] == arg_237[0] && arg_61[0] != arg_277[1] && arg_61[0] != arg_139[1] && arg_61[0] != arg_96[1] && arg_61[0] != arg_131[1] && arg_61[0] != arg_229[1] && arg_61[0] == arg_15[0] && arg_61[0] == arg_101[0] && arg_61[0] == arg_184[0] && arg_61[0] != arg_262[1] && arg_61[0] == arg_41[0] && arg_61[0] != arg_93[1] && arg_61[0] == arg_18[0] && arg_61[0] != arg_214[1] && arg_61[0] == arg_119[0] && arg_61[0] == arg_214[0] && arg_61[0] == arg_139[0] && arg_61[0] == arg_307[0] && arg_61[0] != arg_149[1] && arg_61[0] == arg_134[0] && arg_61[0] != arg_219[1] && arg_61[1] == arg_82[1] && arg_61[1] != arg_44[0] && arg_61[1] != arg_318[0] && arg_61[1] == arg_74[1] && arg_61[1] == arg_152[1] && arg_61[1] != arg_297[0] && arg_61[1] != arg_173[0] && arg_61[1] != arg_199[0] && arg_61[1] != arg_300[0] && arg_61[1] == arg_259[1] && arg_61[1] != arg_229[0] && arg_61[1] == arg_254[1] && arg_61[1] != arg_26[0] && arg_61[1] != arg_104[0] && arg_61[1] != arg_176[0] && arg_61[1] == arg_122[1] && arg_61[1] == arg_101[1] && arg_61[1] == arg_297[1] && arg_61[1] == arg_134[1] && arg_61[1] == arg_119[1] && arg_61[1] == arg_26[1] && arg_61[1] == arg_23[1] && arg_61[1] != arg_160[0] && arg_61[1] != arg_292[0] && arg_61[1] == arg_237[1] && arg_61[1] != arg_181[0] && arg_61[1] != arg_191[0] && arg_61[1] == arg_199[1] && arg_61[1] != arg_71[0] && arg_61[1] == arg_269[1] && arg_61[1] == arg_53[1] && arg_61[1] != arg_157[0] && arg_61[1] == arg_292[1] && arg_61[1] == arg_289[1] && arg_61[1] == arg_300[1] && arg_61[1] != arg_289[0] && arg_61[1] == arg_33[1] && arg_61[1] != arg_111[0] && arg_61[1] == arg_272[1] && arg_61[1] != arg_96[0] && arg_61[1] != arg_36[0] && arg_61[1] != arg_259[0] && arg_61[1] != arg_254[0] && arg_61[1] == arg_64[1] && arg_61[1] != arg_280[0] && arg_61[1] == arg_307[1] && arg_61[1] == arg_111[1] && arg_61[1] != arg_64[0] && arg_61[1] != arg_74[0] && arg_61[1] == arg_232[1] && arg_61[1] == arg_44[1] && arg_61[1] != arg_240[0] && arg_61[1] != arg_194[0] && arg_61[1] != arg_149[0] && arg_61[1] != arg_53[0] && arg_61[1] == arg_36[1] && arg_61[1] != arg_310[0] && arg_61[1] != arg_33[0] && arg_61[1] == arg_280[1] && arg_61[1] == arg_79[1] && arg_61[1] == arg_191[1] && arg_61[1] == arg_194[1] && arg_61[1] != arg_131[0] && arg_61[1] == arg_222[1] && arg_61[1] != arg_211[0] && arg_61[1] != arg_251[0] && arg_61[1] == arg_202[1] && arg_61[1] != arg_272[0] && arg_61[1] == arg_251[1] && arg_61[1] == arg_318[1] && arg_61[1] == arg_211[1] && arg_61[1] != arg_277[0] && arg_61[1] != arg_82[0] && arg_61[1] != arg_222[0] && arg_61[1] == arg_184[1] && arg_61[1] == arg_310[1] && arg_61[1] == arg_315[1] && arg_61[1] != arg_23[0] && arg_61[1] == arg_41[1] && arg_61[1] == arg_56[1] && arg_61[1] == arg_71[1] && arg_61[1] == arg_157[1] && arg_61[1] != arg_232[0] && arg_61[1] == arg_15[1] && arg_61[1] != arg_262[0] && arg_61[1] != arg_269[0] && arg_61[1] == arg_114[1] && arg_61[1] != arg_56[0] && arg_61[1] != arg_219[0] && arg_61[1] == arg_18[1] && arg_61[1] != arg_93[0] && arg_61[1] != arg_202[0] && arg_61[1] != arg_315[0] && arg_61[1] == arg_240[1] && arg_61[1] == arg_176[1] && arg_61[1] == arg_181[1] && arg_61[1] != arg_114[0] && arg_61[1] != arg_122[0] && arg_61[1] != arg_142[0] && arg_61[1] == arg_142[1] && arg_61[1] != arg_79[0] && arg_61[1] != arg_152[0] && arg_61[1] == arg_173[1] && arg_61[1] != arg_237[0] && arg_61[1] == arg_277[1] && arg_61[1] == arg_139[1] && arg_61[1] == arg_96[1] && arg_61[1] == arg_131[1] && arg_61[1] == arg_229[1] && arg_61[1] != arg_15[0] && arg_61[1] != arg_101[0] && arg_61[1] != arg_184[0] && arg_61[1] == arg_262[1] && arg_61[1] != arg_41[0] && arg_61[1] == arg_93[1] && arg_61[1] != arg_18[0] && arg_61[1] == arg_214[1] && arg_61[1] != arg_119[0] && arg_61[1] != arg_214[0] && arg_61[1] != arg_139[0] && arg_61[1] != arg_307[0] && arg_61[1] == arg_149[1] && arg_61[1] != arg_134[0] && arg_61[1] == arg_219[1] && arg_82[1] != arg_44[0] && arg_82[1] != arg_318[0] && arg_82[1] == arg_74[1] && arg_82[1] == arg_152[1] && arg_82[1] != arg_297[0] && arg_82[1] != arg_173[0] && arg_82[1] != arg_199[0] && arg_82[1] != arg_300[0] && arg_82[1] == arg_259[1] && arg_82[1] != arg_229[0] && arg_82[1] == arg_254[1] && arg_82[1] != arg_26[0] && arg_82[1] != arg_104[0] && arg_82[1] != arg_176[0] && arg_82[1] == arg_122[1] && arg_82[1] == arg_101[1] && arg_82[1] == arg_297[1] && arg_82[1] == arg_134[1] && arg_82[1] == arg_119[1] && arg_82[1] == arg_26[1] && arg_82[1] == arg_23[1] && arg_82[1] != arg_160[0] && arg_82[1] != arg_292[0] && arg_82[1] == arg_237[1] && arg_82[1] != arg_181[0] && arg_82[1] != arg_191[0] && arg_82[1] == arg_199[1] && arg_82[1] != arg_71[0] && arg_82[1] == arg_269[1] && arg_82[1] == arg_53[1] && arg_82[1] != arg_157[0] && arg_82[1] == arg_292[1] && arg_82[1] == arg_289[1] && arg_82[1] == arg_300[1] && arg_82[1] != arg_289[0] && arg_82[1] == arg_33[1] && arg_82[1] != arg_111[0] && arg_82[1] == arg_272[1] && arg_82[1] != arg_96[0] && arg_82[1] != arg_36[0] && arg_82[1] != arg_259[0] && arg_82[1] != arg_254[0] && arg_82[1] == arg_64[1] && arg_82[1] != arg_280[0] && arg_82[1] == arg_307[1] && arg_82[1] == arg_111[1] && arg_82[1] != arg_64[0] && arg_82[1] != arg_74[0] && arg_82[1] == arg_232[1] && arg_82[1] == arg_44[1] && arg_82[1] != arg_240[0] && arg_82[1] != arg_194[0] && arg_82[1] != arg_149[0] && arg_82[1] != arg_53[0] && arg_82[1] == arg_36[1] && arg_82[1] != arg_310[0] && arg_82[1] != arg_33[0] && arg_82[1] == arg_280[1] && arg_82[1] == arg_79[1] && arg_82[1] == arg_191[1] && arg_82[1] == arg_194[1] && arg_82[1] != arg_131[0] && arg_82[1] == arg_222[1] && arg_82[1] != arg_211[0] && arg_82[1] != arg_251[0] && arg_82[1] == arg_202[1] && arg_82[1] != arg_272[0] && arg_82[1] == arg_251[1] && arg_82[1] == arg_318[1] && arg_82[1] == arg_211[1] && arg_82[1] != arg_277[0] && arg_82[1] != arg_82[0] && arg_82[1] != arg_222[0] && arg_82[1] == arg_184[1] && arg_82[1] == arg_310[1] && arg_82[1] == arg_315[1] && arg_82[1] != arg_23[0] && arg_82[1] == arg_41[1] && arg_82[1] == arg_56[1] && arg_82[1] == arg_71[1] && arg_82[1] == arg_157[1] && arg_82[1] != arg_232[0] && arg_82[1] == arg_15[1] && arg_82[1] != arg_262[0] && arg_82[1] != arg_269[0] && arg_82[1] == arg_114[1] && arg_82[1] != arg_56[0] && arg_82[1] != arg_219[0] && arg_82[1] == arg_18[1] && arg_82[1] != arg_93[0] && arg_82[1] != arg_202[0] && arg_82[1] != arg_315[0] && arg_82[1] == arg_240[1] && arg_82[1] == arg_176[1] && arg_82[1] == arg_181[1] && arg_82[1] != arg_114[0] && arg_82[1] != arg_122[0] && arg_82[1] != arg_142[0] && arg_82[1] == arg_142[1] && arg_82[1] != arg_79[0] && arg_82[1] != arg_152[0] && arg_82[1] == arg_173[1] && arg_82[1] != arg_237[0] && arg_82[1] == arg_277[1] && arg_82[1] == arg_139[1] && arg_82[1] == arg_96[1] && arg_82[1] == arg_131[1] && arg_82[1] == arg_229[1] && arg_82[1] != arg_15[0] && arg_82[1] != arg_101[0] && arg_82[1] != arg_184[0] && arg_82[1] == arg_262[1] && arg_82[1] != arg_41[0] && arg_82[1] == arg_93[1] && arg_82[1] != arg_18[0] && arg_82[1] == arg_214[1] && arg_82[1] != arg_119[0] && arg_82[1] != arg_214[0] && arg_82[1] != arg_139[0] && arg_82[1] != arg_307[0] && arg_82[1] == arg_149[1] && arg_82[1] != arg_134[0] && arg_82[1] == arg_219[1] && arg_44[0] == arg_318[0] && arg_44[0] != arg_74[1] && arg_44[0] != arg_152[1] && arg_44[0] == arg_297[0] && arg_44[0] == arg_173[0] && arg_44[0] == arg_199[0] && arg_44[0] == arg_300[0] && arg_44[0] != arg_259[1] && arg_44[0] == arg_229[0] && arg_44[0] != arg_254[1] && arg_44[0] == arg_26[0] && arg_44[0] == arg_104[0] && arg_44[0] == arg_176[0] && arg_44[0] != arg_122[1] && arg_44[0] != arg_101[1] && arg_44[0] != arg_297[1] && arg_44[0] != arg_134[1] && arg_44[0] != arg_119[1] && arg_44[0] != arg_26[1] && arg_44[0] != arg_23[1] && arg_44[0] == arg_160[0] && arg_44[0] == arg_292[0] && arg_44[0] != arg_237[1] && arg_44[0] == arg_181[0] && arg_44[0] == arg_191[0] && arg_44[0] != arg_199[1] && arg_44[0] == arg_71[0] && arg_44[0] != arg_269[1] && arg_44[0] != arg_53[1] && arg_44[0] == arg_157[0] && arg_44[0] != arg_292[1] && arg_44[0] != arg_289[1] && arg_44[0] != arg_300[1] && arg_44[0] == arg_289[0] && arg_44[0] != arg_33[1] && arg_44[0] == arg_111[0] && arg_44[0] != arg_272[1] && arg_44[0] == arg_96[0] && arg_44[0] == arg_36[0] && arg_44[0] == arg_259[0] && arg_44[0] == arg_254[0] && arg_44[0] != arg_64[1] && arg_44[0] == arg_280[0] && arg_44[0] != arg_307[1] && arg_44[0] != arg_111[1] && arg_44[0] == arg_64[0] && arg_44[0] == arg_74[0] && arg_44[0] != arg_232[1] && arg_44[0] != arg_44[1] && arg_44[0] == arg_240[0] && arg_44[0] == arg_194[0] && arg_44[0] == arg_149[0] && arg_44[0] == arg_53[0] && arg_44[0] != arg_36[1] && arg_44[0] == arg_310[0] && arg_44[0] == arg_33[0] && arg_44[0] != arg_280[1] && arg_44[0] != arg_79[1] && arg_44[0] != arg_191[1] && arg_44[0] != arg_194[1] && arg_44[0] == arg_131[0] && arg_44[0] != arg_222[1] && arg_44[0] == arg_211[0] && arg_44[0] == arg_251[0] && arg_44[0] != arg_202[1] && arg_44[0] == arg_272[0] && arg_44[0] != arg_251[1] && arg_44[0] != arg_318[1] && arg_44[0] != arg_211[1] && arg_44[0] == arg_277[0] && arg_44[0] == arg_82[0] && arg_44[0] == arg_222[0] && arg_44[0] != arg_184[1] && arg_44[0] != arg_310[1] && arg_44[0] != arg_315[1] && arg_44[0] == arg_23[0] && arg_44[0] != arg_41[1] && arg_44[0] != arg_56[1] && arg_44[0] != arg_71[1] && arg_44[0] != arg_157[1] && arg_44[0] == arg_232[0] && arg_44[0] != arg_15[1] && arg_44[0] == arg_262[0] && arg_44[0] == arg_269[0] && arg_44[0] != arg_114[1] && arg_44[0] == arg_56[0] && arg_44[0] == arg_219[0] && arg_44[0] != arg_18[1] && arg_44[0] == arg_93[0] && arg_44[0] == arg_202[0] && arg_44[0] == arg_315[0] && arg_44[0] != arg_240[1] && arg_44[0] != arg_176[1] && arg_44[0] != arg_181[1] && arg_44[0] == arg_114[0] && arg_44[0] == arg_122[0] && arg_44[0] == arg_142[0] && arg_44[0] != arg_142[1] && arg_44[0] == arg_79[0] && arg_44[0] == arg_152[0] && arg_44[0] != arg_173[1] && arg_44[0] == arg_237[0] && arg_44[0] != arg_277[1] && arg_44[0] != arg_139[1] && arg_44[0] != arg_96[1] && arg_44[0] != arg_131[1] && arg_44[0] != arg_229[1] && arg_44[0] == arg_15[0] && arg_44[0] == arg_101[0] && arg_44[0] == arg_184[0] && arg_44[0] != arg_262[1] && arg_44[0] == arg_41[0] && arg_44[0] != arg_93[1] && arg_44[0] == arg_18[0] && arg_44[0] != arg_214[1] && arg_44[0] == arg_119[0] && arg_44[0] == arg_214[0] && arg_44[0] == arg_139[0] && arg_44[0] == arg_307[0] && arg_44[0] != arg_149[1] && arg_44[0] == arg_134[0] && arg_44[0] != arg_219[1] && arg_318[0] != arg_74[1] && arg_318[0] != arg_152[1] && arg_318[0] == arg_297[0] && arg_318[0] == arg_173[0] && arg_318[0] == arg_199[0] && arg_318[0] == arg_300[0] && arg_318[0] != arg_259[1] && arg_318[0] == arg_229[0] && arg_318[0] != arg_254[1] && arg_318[0] == arg_26[0] && arg_318[0] == arg_104[0] && arg_318[0] == arg_176[0] && arg_318[0] != arg_122[1] && arg_318[0] != arg_101[1] && arg_318[0] != arg_297[1] && arg_318[0] != arg_134[1] && arg_318[0] != arg_119[1] && arg_318[0] != arg_26[1] && arg_318[0] != arg_23[1] && arg_318[0] == arg_160[0] && arg_318[0] == arg_292[0] && arg_318[0] != arg_237[1] && arg_318[0] == arg_181[0] && arg_318[0] == arg_191[0] && arg_318[0] != arg_199[1] && arg_318[0] == arg_71[0] && arg_318[0] != arg_269[1] && arg_318[0] != arg_53[1] && arg_318[0] == arg_157[0] && arg_318[0] != arg_292[1] && arg_318[0] != arg_289[1] && arg_318[0] != arg_300[1] && arg_318[0] == arg_289[0] && arg_318[0] != arg_33[1] && arg_318[0] == arg_111[0] && arg_318[0] != arg_272[1] && arg_318[0] == arg_96[0] && arg_318[0] == arg_36[0] && arg_318[0] == arg_259[0] && arg_318[0] == arg_254[0] && arg_318[0] != arg_64[1] && arg_318[0] == arg_280[0] && arg_318[0] != arg_307[1] && arg_318[0] != arg_111[1] && arg_318[0] == arg_64[0] && arg_318[0] == arg_74[0] && arg_318[0] != arg_232[1] && arg_318[0] != arg_44[1] && arg_318[0] == arg_240[0] && arg_318[0] == arg_194[0] && arg_318[0] == arg_149[0] && arg_318[0] == arg_53[0] && arg_318[0] != arg_36[1] && arg_318[0] == arg_310[0] && arg_318[0] == arg_33[0] && arg_318[0] != arg_280[1] && arg_318[0] != arg_79[1] && arg_318[0] != arg_191[1] && arg_318[0] != arg_194[1] && arg_318[0] == arg_131[0] && arg_318[0] != arg_222[1] && arg_318[0] == arg_211[0] && arg_318[0] == arg_251[0] && arg_318[0] != arg_202[1] && arg_318[0] == arg_272[0] && arg_318[0] != arg_251[1] && arg_318[0] != arg_318[1] && arg_318[0] != arg_211[1] && arg_318[0] == arg_277[0] && arg_318[0] == arg_82[0] && arg_318[0] == arg_222[0] && arg_318[0] != arg_184[1] && arg_318[0] != arg_310[1] && arg_318[0] != arg_315[1] && arg_318[0] == arg_23[0] && arg_318[0] != arg_41[1] && arg_318[0] != arg_56[1] && arg_318[0] != arg_71[1] && arg_318[0] != arg_157[1] && arg_318[0] == arg_232[0] && arg_318[0] != arg_15[1] && arg_318[0] == arg_262[0] && arg_318[0] == arg_269[0] && arg_318[0] != arg_114[1] && arg_318[0] == arg_56[0] && arg_318[0] == arg_219[0] && arg_318[0] != arg_18[1] && arg_318[0] == arg_93[0] && arg_318[0] == arg_202[0] && arg_318[0] == arg_315[0] && arg_318[0] != arg_240[1] && arg_318[0] != arg_176[1] && arg_318[0] != arg_181[1] && arg_318[0] == arg_114[0] && arg_318[0] == arg_122[0] && arg_318[0] == arg_142[0] && arg_318[0] != arg_142[1] && arg_318[0] == arg_79[0] && arg_318[0] == arg_152[0] && arg_318[0] != arg_173[1] && arg_318[0] == arg_237[0] && arg_318[0] != arg_277[1] && arg_318[0] != arg_139[1] && arg_318[0] != arg_96[1] && arg_318[0] != arg_131[1] && arg_318[0] != arg_229[1] && arg_318[0] == arg_15[0] && arg_318[0] == arg_101[0] && arg_318[0] == arg_184[0] && arg_318[0] != arg_262[1] && arg_318[0] == arg_41[0] && arg_318[0] != arg_93[1] && arg_318[0] == arg_18[0] && arg_318[0] != arg_214[1] && arg_318[0] == arg_119[0] && arg_318[0] == arg_214[0] && arg_318[0] == arg_139[0] && arg_318[0] == arg_307[0] && arg_318[0] != arg_149[1] && arg_318[0] == arg_134[0] && arg_318[0] != arg_219[1] && arg_74[1] == arg_152[1] && arg_74[1] != arg_297[0] && arg_74[1] != arg_173[0] && arg_74[1] != arg_199[0] && arg_74[1] != arg_300[0] && arg_74[1] == arg_259[1] && arg_74[1] != arg_229[0] && arg_74[1] == arg_254[1] && arg_74[1] != arg_26[0] && arg_74[1] != arg_104[0] && arg_74[1] != arg_176[0] && arg_74[1] == arg_122[1] && arg_74[1] == arg_101[1] && arg_74[1] == arg_297[1] && arg_74[1] == arg_134[1] && arg_74[1] == arg_119[1] && arg_74[1] == arg_26[1] && arg_74[1] == arg_23[1] && arg_74[1] != arg_160[0] && arg_74[1] != arg_292[0] && arg_74[1] == arg_237[1] && arg_74[1] != arg_181[0] && arg_74[1] != arg_191[0] && arg_74[1] == arg_199[1] && arg_74[1] != arg_71[0] && arg_74[1] == arg_269[1] && arg_74[1] == arg_53[1] && arg_74[1] != arg_157[0] && arg_74[1] == arg_292[1] && arg_74[1] == arg_289[1] && arg_74[1] == arg_300[1] && arg_74[1] != arg_289[0] && arg_74[1] == arg_33[1] && arg_74[1] != arg_111[0] && arg_74[1] == arg_272[1] && arg_74[1] != arg_96[0] && arg_74[1] != arg_36[0] && arg_74[1] != arg_259[0] && arg_74[1] != arg_254[0] && arg_74[1] == arg_64[1] && arg_74[1] != arg_280[0] && arg_74[1] == arg_307[1] && arg_74[1] == arg_111[1] && arg_74[1] != arg_64[0] && arg_74[1] != arg_74[0] && arg_74[1] == arg_232[1] && arg_74[1] == arg_44[1] && arg_74[1] != arg_240[0] && arg_74[1] != arg_194[0] && arg_74[1] != arg_149[0] && arg_74[1] != arg_53[0] && arg_74[1] == arg_36[1] && arg_74[1] != arg_310[0] && arg_74[1] != arg_33[0] && arg_74[1] == arg_280[1] && arg_74[1] == arg_79[1] && arg_74[1] == arg_191[1] && arg_74[1] == arg_194[1] && arg_74[1] != arg_131[0] && arg_74[1] == arg_222[1] && arg_74[1] != arg_211[0] && arg_74[1] != arg_251[0] && arg_74[1] == arg_202[1] && arg_74[1] != arg_272[0] && arg_74[1] == arg_251[1] && arg_74[1] == arg_318[1] && arg_74[1] == arg_211[1] && arg_74[1] != arg_277[0] && arg_74[1] != arg_82[0] && arg_74[1] != arg_222[0] && arg_74[1] == arg_184[1] && arg_74[1] == arg_310[1] && arg_74[1] == arg_315[1] && arg_74[1] != arg_23[0] && arg_74[1] == arg_41[1] && arg_74[1] == arg_56[1] && arg_74[1] == arg_71[1] && arg_74[1] == arg_157[1] && arg_74[1] != arg_232[0] && arg_74[1] == arg_15[1] && arg_74[1] != arg_262[0] && arg_74[1] != arg_269[0] && arg_74[1] == arg_114[1] && arg_74[1] != arg_56[0] && arg_74[1] != arg_219[0] && arg_74[1] == arg_18[1] && arg_74[1] != arg_93[0] && arg_74[1] != arg_202[0] && arg_74[1] != arg_315[0] && arg_74[1] == arg_240[1] && arg_74[1] == arg_176[1] && arg_74[1] == arg_181[1] && arg_74[1] != arg_114[0] && arg_74[1] != arg_122[0] && arg_74[1] != arg_142[0] && arg_74[1] == arg_142[1] && arg_74[1] != arg_79[0] && arg_74[1] != arg_152[0] && arg_74[1] == arg_173[1] && arg_74[1] != arg_237[0] && arg_74[1] == arg_277[1] && arg_74[1] == arg_139[1] && arg_74[1] == arg_96[1] && arg_74[1] == arg_131[1] && arg_74[1] == arg_229[1] && arg_74[1] != arg_15[0] && arg_74[1] != arg_101[0] && arg_74[1] != arg_184[0] && arg_74[1] == arg_262[1] && arg_74[1] != arg_41[0] && arg_74[1] == arg_93[1] && arg_74[1] != arg_18[0] && arg_74[1] == arg_214[1] && arg_74[1] != arg_119[0] && arg_74[1] != arg_214[0] && arg_74[1] != arg_139[0] && arg_74[1] != arg_307[0] && arg_74[1] == arg_149[1] && arg_74[1] != arg_134[0] && arg_74[1] == arg_219[1] && arg_152[1] != arg_297[0] && arg_152[1] != arg_173[0] && arg_152[1] != arg_199[0] && arg_152[1] != arg_300[0] && arg_152[1] == arg_259[1] && arg_152[1] != arg_229[0] && arg_152[1] == arg_254[1] && arg_152[1] != arg_26[0] && arg_152[1] != arg_104[0] && arg_152[1] != arg_176[0] && arg_152[1] == arg_122[1] && arg_152[1] == arg_101[1] && arg_152[1] == arg_297[1] && arg_152[1] == arg_134[1] && arg_152[1] == arg_119[1] && arg_152[1] == arg_26[1] && arg_152[1] == arg_23[1] && arg_152[1] != arg_160[0] && arg_152[1] != arg_292[0] && arg_152[1] == arg_237[1] && arg_152[1] != arg_181[0] && arg_152[1] != arg_191[0] && arg_152[1] == arg_199[1] && arg_152[1] != arg_71[0] && arg_152[1] == arg_269[1] && arg_152[1] == arg_53[1] && arg_152[1] != arg_157[0] && arg_152[1] == arg_292[1] && arg_152[1] == arg_289[1] && arg_152[1] == arg_300[1] && arg_152[1] != arg_289[0] && arg_152[1] == arg_33[1] && arg_152[1] != arg_111[0] && arg_152[1] == arg_272[1] && arg_152[1] != arg_96[0] && arg_152[1] != arg_36[0] && arg_152[1] != arg_259[0] && arg_152[1] != arg_254[0] && arg_152[1] == arg_64[1] && arg_152[1] != arg_280[0] && arg_152[1] == arg_307[1] && arg_152[1] == arg_111[1] && arg_152[1] != arg_64[0] && arg_152[1] != arg_74[0] && arg_152[1] == arg_232[1] && arg_152[1] == arg_44[1] && arg_152[1] != arg_240[0] && arg_152[1] != arg_194[0] && arg_152[1] != arg_149[0] && arg_152[1] != arg_53[0] && arg_152[1] == arg_36[1] && arg_152[1] != arg_310[0] && arg_152[1] != arg_33[0] && arg_152[1] == arg_280[1] && arg_152[1] == arg_79[1] && arg_152[1] == arg_191[1] && arg_152[1] == arg_194[1] && arg_152[1] != arg_131[0] && arg_152[1] == arg_222[1] && arg_152[1] != arg_211[0] && arg_152[1] != arg_251[0] && arg_152[1] == arg_202[1] && arg_152[1] != arg_272[0] && arg_152[1] == arg_251[1] && arg_152[1] == arg_318[1] && arg_152[1] == arg_211[1] && arg_152[1] != arg_277[0] && arg_152[1] != arg_82[0] && arg_152[1] != arg_222[0] && arg_152[1] == arg_184[1] && arg_152[1] == arg_310[1] && arg_152[1] == arg_315[1] && arg_152[1] != arg_23[0] && arg_152[1] == arg_41[1] && arg_152[1] == arg_56[1] && arg_152[1] == arg_71[1] && arg_152[1] == arg_157[1] && arg_152[1] != arg_232[0] && arg_152[1] == arg_15[1] && arg_152[1] != arg_262[0] && arg_152[1] != arg_269[0] && arg_152[1] == arg_114[1] && arg_152[1] != arg_56[0] && arg_152[1] != arg_219[0] && arg_152[1] == arg_18[1] && arg_152[1] != arg_93[0] && arg_152[1] != arg_202[0] && arg_152[1] != arg_315[0] && arg_152[1] == arg_240[1] && arg_152[1] == arg_176[1] && arg_152[1] == arg_181[1] && arg_152[1] != arg_114[0] && arg_152[1] != arg_122[0] && arg_152[1] != arg_142[0] && arg_152[1] == arg_142[1] && arg_152[1] != arg_79[0] && arg_152[1] != arg_152[0] && arg_152[1] == arg_173[1] && arg_152[1] != arg_237[0] && arg_152[1] == arg_277[1] && arg_152[1] == arg_139[1] && arg_152[1] == arg_96[1] && arg_152[1] == arg_131[1] && arg_152[1] == arg_229[1] && arg_152[1] != arg_15[0] && arg_152[1] != arg_101[0] && arg_152[1] != arg_184[0] && arg_152[1] == arg_262[1] && arg_152[1] != arg_41[0] && arg_152[1] == arg_93[1] && arg_152[1] != arg_18[0] && arg_152[1] == arg_214[1] && arg_152[1] != arg_119[0] && arg_152[1] != arg_214[0] && arg_152[1] != arg_139[0] && arg_152[1] != arg_307[0] && arg_152[1] == arg_149[1] && arg_152[1] != arg_134[0] && arg_152[1] == arg_219[1] && arg_297[0] == arg_173[0] && arg_297[0] == arg_199[0] && arg_297[0] == arg_300[0] && arg_297[0] != arg_259[1] && arg_297[0] == arg_229[0] && arg_297[0] != arg_254[1] && arg_297[0] == arg_26[0] && arg_297[0] == arg_104[0] && arg_297[0] == arg_176[0] && arg_297[0] != arg_122[1] && arg_297[0] != arg_101[1] && arg_297[0] != arg_297[1] && arg_297[0] != arg_134[1] && arg_297[0] != arg_119[1] && arg_297[0] != arg_26[1] && arg_297[0] != arg_23[1] && arg_297[0] == arg_160[0] && arg_297[0] == arg_292[0] && arg_297[0] != arg_237[1] && arg_297[0] == arg_181[0] && arg_297[0] == arg_191[0] && arg_297[0] != arg_199[1] && arg_297[0] == arg_71[0] && arg_297[0] != arg_269[1] && arg_297[0] != arg_53[1] && arg_297[0] == arg_157[0] && arg_297[0] != arg_292[1] && arg_297[0] != arg_289[1] && arg_297[0] != arg_300[1] && arg_297[0] == arg_289[0] && arg_297[0] != arg_33[1] && arg_297[0] == arg_111[0] && arg_297[0] != arg_272[1] && arg_297[0] == arg_96[0] && arg_297[0] == arg_36[0] && arg_297[0] == arg_259[0] && arg_297[0] == arg_254[0] && arg_297[0] != arg_64[1] && arg_297[0] == arg_280[0] && arg_297[0] != arg_307[1] && arg_297[0] != arg_111[1] && arg_297[0] == arg_64[0] && arg_297[0] == arg_74[0] && arg_297[0] != arg_232[1] && arg_297[0] != arg_44[1] && arg_297[0] == arg_240[0] && arg_297[0] == arg_194[0] && arg_297[0] == arg_149[0] && arg_297[0] == arg_53[0] && arg_297[0] != arg_36[1] && arg_297[0] == arg_310[0] && arg_297[0] == arg_33[0] && arg_297[0] != arg_280[1] && arg_297[0] != arg_79[1] && arg_297[0] != arg_191[1] && arg_297[0] != arg_194[1] && arg_297[0] == arg_131[0] && arg_297[0] != arg_222[1] && arg_297[0] == arg_211[0] && arg_297[0] == arg_251[0] && arg_297[0] != arg_202[1] && arg_297[0] == arg_272[0] && arg_297[0] != arg_251[1] && arg_297[0] != arg_318[1] && arg_297[0] != arg_211[1] && arg_297[0] == arg_277[0] && arg_297[0] == arg_82[0] && arg_297[0] == arg_222[0] && arg_297[0] != arg_184[1] && arg_297[0] != arg_310[1] && arg_297[0] != arg_315[1] && arg_297[0] == arg_23[0] && arg_297[0] != arg_41[1] && arg_297[0] != arg_56[1] && arg_297[0] != arg_71[1] && arg_297[0] != arg_157[1] && arg_297[0] == arg_232[0] && arg_297[0] != arg_15[1] && arg_297[0] == arg_262[0] && arg_297[0] == arg_269[0] && arg_297[0] != arg_114[1] && arg_297[0] == arg_56[0] && arg_297[0] == arg_219[0] && arg_297[0] != arg_18[1] && arg_297[0] == arg_93[0] && arg_297[0] == arg_202[0] && arg_297[0] == arg_315[0] && arg_297[0] != arg_240[1] && arg_297[0] != arg_176[1] && arg_297[0] != arg_181[1] && arg_297[0] == arg_114[0] && arg_297[0] == arg_122[0] && arg_297[0] == arg_142[0] && arg_297[0] != arg_142[1] && arg_297[0] == arg_79[0] && arg_297[0] == arg_152[0] && arg_297[0] != arg_173[1] && arg_297[0] == arg_237[0] && arg_297[0] != arg_277[1] && arg_297[0] != arg_139[1] && arg_297[0] != arg_96[1] && arg_297[0] != arg_131[1] && arg_297[0] != arg_229[1] && arg_297[0] == arg_15[0] && arg_297[0] == arg_101[0] && arg_297[0] == arg_184[0] && arg_297[0] != arg_262[1] && arg_297[0] == arg_41[0] && arg_297[0] != arg_93[1] && arg_297[0] == arg_18[0] && arg_297[0] != arg_214[1] && arg_297[0] == arg_119[0] && arg_297[0] == arg_214[0] && arg_297[0] == arg_139[0] && arg_297[0] == arg_307[0] && arg_297[0] != arg_149[1] && arg_297[0] == arg_134[0] && arg_297[0] != arg_219[1] && arg_173[0] == arg_199[0] && arg_173[0] == arg_300[0] && arg_173[0] != arg_259[1] && arg_173[0] == arg_229[0] && arg_173[0] != arg_254[1] && arg_173[0] == arg_26[0] && arg_173[0] == arg_104[0] && arg_173[0] == arg_176[0] && arg_173[0] != arg_122[1] && arg_173[0] != arg_101[1] && arg_173[0] != arg_297[1] && arg_173[0] != arg_134[1] && arg_173[0] != arg_119[1] && arg_173[0] != arg_26[1] && arg_173[0] != arg_23[1] && arg_173[0] == arg_160[0] && arg_173[0] == arg_292[0] && arg_173[0] != arg_237[1] && arg_173[0] == arg_181[0] && arg_173[0] == arg_191[0] && arg_173[0] != arg_199[1] && arg_173[0] == arg_71[0] && arg_173[0] != arg_269[1] && arg_173[0] != arg_53[1] && arg_173[0] == arg_157[0] && arg_173[0] != arg_292[1] && arg_173[0] != arg_289[1] && arg_173[0] != arg_300[1] && arg_173[0] == arg_289[0] && arg_173[0] != arg_33[1] && arg_173[0] == arg_111[0] && arg_173[0] != arg_272[1] && arg_173[0] == arg_96[0] && arg_173[0] == arg_36[0] && arg_173[0] == arg_259[0] && arg_173[0] == arg_254[0] && arg_173[0] != arg_64[1] && arg_173[0] == arg_280[0] && arg_173[0] != arg_307[1] && arg_173[0] != arg_111[1] && arg_173[0] == arg_64[0] && arg_173[0] == arg_74[0] && arg_173[0] != arg_232[1] && arg_173[0] != arg_44[1] && arg_173[0] == arg_240[0] && arg_173[0] == arg_194[0] && arg_173[0] == arg_149[0] && arg_173[0] == arg_53[0] && arg_173[0] != arg_36[1] && arg_173[0] == arg_310[0] && arg_173[0] == arg_33[0] && arg_173[0] != arg_280[1] && arg_173[0] != arg_79[1] && arg_173[0] != arg_191[1] && arg_173[0] != arg_194[1] && arg_173[0] == arg_131[0] && arg_173[0] != arg_222[1] && arg_173[0] == arg_211[0] && arg_173[0] == arg_251[0] && arg_173[0] != arg_202[1] && arg_173[0] == arg_272[0] && arg_173[0] != arg_251[1] && arg_173[0] != arg_318[1] && arg_173[0] != arg_211[1] && arg_173[0] == arg_277[0] && arg_173[0] == arg_82[0] && arg_173[0] == arg_222[0] && arg_173[0] != arg_184[1] && arg_173[0] != arg_310[1] && arg_173[0] != arg_315[1] && arg_173[0] == arg_23[0] && arg_173[0] != arg_41[1] && arg_173[0] != arg_56[1] && arg_173[0] != arg_71[1] && arg_173[0] != arg_157[1] && arg_173[0] == arg_232[0] && arg_173[0] != arg_15[1] && arg_173[0] == arg_262[0] && arg_173[0] == arg_269[0] && arg_173[0] != arg_114[1] && arg_173[0] == arg_56[0] && arg_173[0] == arg_219[0] && arg_173[0] != arg_18[1] && arg_173[0] == arg_93[0] && arg_173[0] == arg_202[0] && arg_173[0] == arg_315[0] && arg_173[0] != arg_240[1] && arg_173[0] != arg_176[1] && arg_173[0] != arg_181[1] && arg_173[0] == arg_114[0] && arg_173[0] == arg_122[0] && arg_173[0] == arg_142[0] && arg_173[0] != arg_142[1] && arg_173[0] == arg_79[0] && arg_173[0] == arg_152[0] && arg_173[0] != arg_173[1] && arg_173[0] == arg_237[0] && arg_173[0] != arg_277[1] && arg_173[0] != arg_139[1] && arg_173[0] != arg_96[1] && arg_173[0] != arg_131[1] && arg_173[0] != arg_229[1] && arg_173[0] == arg_15[0] && arg_173[0] == arg_101[0] && arg_173[0] == arg_184[0] && arg_173[0] != arg_262[1] && arg_173[0] == arg_41[0] && arg_173[0] != arg_93[1] && arg_173[0] == arg_18[0] && arg_173[0] != arg_214[1] && arg_173[0] == arg_119[0] && arg_173[0] == arg_214[0] && arg_173[0] == arg_139[0] && arg_173[0] == arg_307[0] && arg_173[0] != arg_149[1] && arg_173[0] == arg_134[0] && arg_173[0] != arg_219[1] && arg_199[0] == arg_300[0] && arg_199[0] != arg_259[1] && arg_199[0] == arg_229[0] && arg_199[0] != arg_254[1] && arg_199[0] == arg_26[0] && arg_199[0] == arg_104[0] && arg_199[0] == arg_176[0] && arg_199[0] != arg_122[1] && arg_199[0] != arg_101[1] && arg_199[0] != arg_297[1] && arg_199[0] != arg_134[1] && arg_199[0] != arg_119[1] && arg_199[0] != arg_26[1] && arg_199[0] != arg_23[1] && arg_199[0] == arg_160[0] && arg_199[0] == arg_292[0] && arg_199[0] != arg_237[1] && arg_199[0] == arg_181[0] && arg_199[0] == arg_191[0] && arg_199[0] != arg_199[1] && arg_199[0] == arg_71[0] && arg_199[0] != arg_269[1] && arg_199[0] != arg_53[1] && arg_199[0] == arg_157[0] && arg_199[0] != arg_292[1] && arg_199[0] != arg_289[1] && arg_199[0] != arg_300[1] && arg_199[0] == arg_289[0] && arg_199[0] != arg_33[1] && arg_199[0] == arg_111[0] && arg_199[0] != arg_272[1] && arg_199[0] == arg_96[0] && arg_199[0] == arg_36[0] && arg_199[0] == arg_259[0] && arg_199[0] == arg_254[0] && arg_199[0] != arg_64[1] && arg_199[0] == arg_280[0] && arg_199[0] != arg_307[1] && arg_199[0] != arg_111[1] && arg_199[0] == arg_64[0] && arg_199[0] == arg_74[0] && arg_199[0] != arg_232[1] && arg_199[0] != arg_44[1] && arg_199[0] == arg_240[0] && arg_199[0] == arg_194[0] && arg_199[0] == arg_149[0] && arg_199[0] == arg_53[0] && arg_199[0] != arg_36[1] && arg_199[0] == arg_310[0] && arg_199[0] == arg_33[0] && arg_199[0] != arg_280[1] && arg_199[0] != arg_79[1] && arg_199[0] != arg_191[1] && arg_199[0] != arg_194[1] && arg_199[0] == arg_131[0] && arg_199[0] != arg_222[1] && arg_199[0] == arg_211[0] && arg_199[0] == arg_251[0] && arg_199[0] != arg_202[1] && arg_199[0] == arg_272[0] && arg_199[0] != arg_251[1] && arg_199[0] != arg_318[1] && arg_199[0] != arg_211[1] && arg_199[0] == arg_277[0] && arg_199[0] == arg_82[0] && arg_199[0] == arg_222[0] && arg_199[0] != arg_184[1] && arg_199[0] != arg_310[1] && arg_199[0] != arg_315[1] && arg_199[0] == arg_23[0] && arg_199[0] != arg_41[1] && arg_199[0] != arg_56[1] && arg_199[0] != arg_71[1] && arg_199[0] != arg_157[1] && arg_199[0] == arg_232[0] && arg_199[0] != arg_15[1] && arg_199[0] == arg_262[0] && arg_199[0] == arg_269[0] && arg_199[0] != arg_114[1] && arg_199[0] == arg_56[0] && arg_199[0] == arg_219[0] && arg_199[0] != arg_18[1] && arg_199[0] == arg_93[0] && arg_199[0] == arg_202[0] && arg_199[0] == arg_315[0] && arg_199[0] != arg_240[1] && arg_199[0] != arg_176[1] && arg_199[0] != arg_181[1] && arg_199[0] == arg_114[0] && arg_199[0] == arg_122[0] && arg_199[0] == arg_142[0] && arg_199[0] != arg_142[1] && arg_199[0] == arg_79[0] && arg_199[0] == arg_152[0] && arg_199[0] != arg_173[1] && arg_199[0] == arg_237[0] && arg_199[0] != arg_277[1] && arg_199[0] != arg_139[1] && arg_199[0] != arg_96[1] && arg_199[0] != arg_131[1] && arg_199[0] != arg_229[1] && arg_199[0] == arg_15[0] && arg_199[0] == arg_101[0] && arg_199[0] == arg_184[0] && arg_199[0] != arg_262[1] && arg_199[0] == arg_41[0] && arg_199[0] != arg_93[1] && arg_199[0] == arg_18[0] && arg_199[0] != arg_214[1] && arg_199[0] == arg_119[0] && arg_199[0] == arg_214[0] && arg_199[0] == arg_139[0] && arg_199[0] == arg_307[0] && arg_199[0] != arg_149[1] && arg_199[0] == arg_134[0] && arg_199[0] != arg_219[1] && arg_300[0] != arg_259[1] && arg_300[0] == arg_229[0] && arg_300[0] != arg_254[1] && arg_300[0] == arg_26[0] && arg_300[0] == arg_104[0] && arg_300[0] == arg_176[0] && arg_300[0] != arg_122[1] && arg_300[0] != arg_101[1] && arg_300[0] != arg_297[1] && arg_300[0] != arg_134[1] && arg_300[0] != arg_119[1] && arg_300[0] != arg_26[1] && arg_300[0] != arg_23[1] && arg_300[0] == arg_160[0] && arg_300[0] == arg_292[0] && arg_300[0] != arg_237[1] && arg_300[0] == arg_181[0] && arg_300[0] == arg_191[0] && arg_300[0] != arg_199[1] && arg_300[0] == arg_71[0] && arg_300[0] != arg_269[1] && arg_300[0] != arg_53[1] && arg_300[0] == arg_157[0] && arg_300[0] != arg_292[1] && arg_300[0] != arg_289[1] && arg_300[0] != arg_300[1] && arg_300[0] == arg_289[0] && arg_300[0] != arg_33[1] && arg_300[0] == arg_111[0] && arg_300[0] != arg_272[1] && arg_300[0] == arg_96[0] && arg_300[0] == arg_36[0] && arg_300[0] == arg_259[0] && arg_300[0] == arg_254[0] && arg_300[0] != arg_64[1] && arg_300[0] == arg_280[0] && arg_300[0] != arg_307[1] && arg_300[0] != arg_111[1] && arg_300[0] == arg_64[0] && arg_300[0] == arg_74[0] && arg_300[0] != arg_232[1] && arg_300[0] != arg_44[1] && arg_300[0] == arg_240[0] && arg_300[0] == arg_194[0] && arg_300[0] == arg_149[0] && arg_300[0] == arg_53[0] && arg_300[0] != arg_36[1] && arg_300[0] == arg_310[0] && arg_300[0] == arg_33[0] && arg_300[0] != arg_280[1] && arg_300[0] != arg_79[1] && arg_300[0] != arg_191[1] && arg_300[0] != arg_194[1] && arg_300[0] == arg_131[0] && arg_300[0] != arg_222[1] && arg_300[0] == arg_211[0] && arg_300[0] == arg_251[0] && arg_300[0] != arg_202[1] && arg_300[0] == arg_272[0] && arg_300[0] != arg_251[1] && arg_300[0] != arg_318[1] && arg_300[0] != arg_211[1] && arg_300[0] == arg_277[0] && arg_300[0] == arg_82[0] && arg_300[0] == arg_222[0] && arg_300[0] != arg_184[1] && arg_300[0] != arg_310[1] && arg_300[0] != arg_315[1] && arg_300[0] == arg_23[0] && arg_300[0] != arg_41[1] && arg_300[0] != arg_56[1] && arg_300[0] != arg_71[1] && arg_300[0] != arg_157[1] && arg_300[0] == arg_232[0] && arg_300[0] != arg_15[1] && arg_300[0] == arg_262[0] && arg_300[0] == arg_269[0] && arg_300[0] != arg_114[1] && arg_300[0] == arg_56[0] && arg_300[0] == arg_219[0] && arg_300[0] != arg_18[1] && arg_300[0] == arg_93[0] && arg_300[0] == arg_202[0] && arg_300[0] == arg_315[0] && arg_300[0] != arg_240[1] && arg_300[0] != arg_176[1] && arg_300[0] != arg_181[1] && arg_300[0] == arg_114[0] && arg_300[0] == arg_122[0] && arg_300[0] == arg_142[0] && arg_300[0] != arg_142[1] && arg_300[0] == arg_79[0] && arg_300[0] == arg_152[0] && arg_300[0] != arg_173[1] && arg_300[0] == arg_237[0] && arg_300[0] != arg_277[1] && arg_300[0] != arg_139[1] && arg_300[0] != arg_96[1] && arg_300[0] != arg_131[1] && arg_300[0] != arg_229[1] && arg_300[0] == arg_15[0] && arg_300[0] == arg_101[0] && arg_300[0] == arg_184[0] && arg_300[0] != arg_262[1] && arg_300[0] == arg_41[0] && arg_300[0] != arg_93[1] && arg_300[0] == arg_18[0] && arg_300[0] != arg_214[1] && arg_300[0] == arg_119[0] && arg_300[0] == arg_214[0] && arg_300[0] == arg_139[0] && arg_300[0] == arg_307[0] && arg_300[0] != arg_149[1] && arg_300[0] == arg_134[0] && arg_300[0] != arg_219[1] && arg_259[1] != arg_229[0] && arg_259[1] == arg_254[1] && arg_259[1] != arg_26[0] && arg_259[1] != arg_104[0] && arg_259[1] != arg_176[0] && arg_259[1] == arg_122[1] && arg_259[1] == arg_101[1] && arg_259[1] == arg_297[1] && arg_259[1] == arg_134[1] && arg_259[1] == arg_119[1] && arg_259[1] == arg_26[1] && arg_259[1] == arg_23[1] && arg_259[1] != arg_160[0] && arg_259[1] != arg_292[0] && arg_259[1] == arg_237[1] && arg_259[1] != arg_181[0] && arg_259[1] != arg_191[0] && arg_259[1] == arg_199[1] && arg_259[1] != arg_71[0] && arg_259[1] == arg_269[1] && arg_259[1] == arg_53[1] && arg_259[1] != arg_157[0] && arg_259[1] == arg_292[1] && arg_259[1] == arg_289[1] && arg_259[1] == arg_300[1] && arg_259[1] != arg_289[0] && arg_259[1] == arg_33[1] && arg_259[1] != arg_111[0] && arg_259[1] == arg_272[1] && arg_259[1] != arg_96[0] && arg_259[1] != arg_36[0] && arg_259[1] != arg_259[0] && arg_259[1] != arg_254[0] && arg_259[1] == arg_64[1] && arg_259[1] != arg_280[0] && arg_259[1] == arg_307[1] && arg_259[1] == arg_111[1] && arg_259[1] != arg_64[0] && arg_259[1] != arg_74[0] && arg_259[1] == arg_232[1] && arg_259[1] == arg_44[1] && arg_259[1] != arg_240[0] && arg_259[1] != arg_194[0] && arg_259[1] != arg_149[0] && arg_259[1] != arg_53[0] && arg_259[1] == arg_36[1] && arg_259[1] != arg_310[0] && arg_259[1] != arg_33[0] && arg_259[1] == arg_280[1] && arg_259[1] == arg_79[1] && arg_259[1] == arg_191[1] && arg_259[1] == arg_194[1] && arg_259[1] != arg_131[0] && arg_259[1] == arg_222[1] && arg_259[1] != arg_211[0] && arg_259[1] != arg_251[0] && arg_259[1] == arg_202[1] && arg_259[1] != arg_272[0] && arg_259[1] == arg_251[1] && arg_259[1] == arg_318[1] && arg_259[1] == arg_211[1] && arg_259[1] != arg_277[0] && arg_259[1] != arg_82[0] && arg_259[1] != arg_222[0] && arg_259[1] == arg_184[1] && arg_259[1] == arg_310[1] && arg_259[1] == arg_315[1] && arg_259[1] != arg_23[0] && arg_259[1] == arg_41[1] && arg_259[1] == arg_56[1] && arg_259[1] == arg_71[1] && arg_259[1] == arg_157[1] && arg_259[1] != arg_232[0] && arg_259[1] == arg_15[1] && arg_259[1] != arg_262[0] && arg_259[1] != arg_269[0] && arg_259[1] == arg_114[1] && arg_259[1] != arg_56[0] && arg_259[1] != arg_219[0] && arg_259[1] == arg_18[1] && arg_259[1] != arg_93[0] && arg_259[1] != arg_202[0] && arg_259[1] != arg_315[0] && arg_259[1] == arg_240[1] && arg_259[1] == arg_176[1] && arg_259[1] == arg_181[1] && arg_259[1] != arg_114[0] && arg_259[1] != arg_122[0] && arg_259[1] != arg_142[0] && arg_259[1] == arg_142[1] && arg_259[1] != arg_79[0] && arg_259[1] != arg_152[0] && arg_259[1] == arg_173[1] && arg_259[1] != arg_237[0] && arg_259[1] == arg_277[1] && arg_259[1] == arg_139[1] && arg_259[1] == arg_96[1] && arg_259[1] == arg_131[1] && arg_259[1] == arg_229[1] && arg_259[1] != arg_15[0] && arg_259[1] != arg_101[0] && arg_259[1] != arg_184[0] && arg_259[1] == arg_262[1] && arg_259[1] != arg_41[0] && arg_259[1] == arg_93[1] && arg_259[1] != arg_18[0] && arg_259[1] == arg_214[1] && arg_259[1] != arg_119[0] && arg_259[1] != arg_214[0] && arg_259[1] != arg_139[0] && arg_259[1] != arg_307[0] && arg_259[1] == arg_149[1] && arg_259[1] != arg_134[0] && arg_259[1] == arg_219[1] && arg_229[0] != arg_254[1] && arg_229[0] == arg_26[0] && arg_229[0] == arg_104[0] && arg_229[0] == arg_176[0] && arg_229[0] != arg_122[1] && arg_229[0] != arg_101[1] && arg_229[0] != arg_297[1] && arg_229[0] != arg_134[1] && arg_229[0] != arg_119[1] && arg_229[0] != arg_26[1] && arg_229[0] != arg_23[1] && arg_229[0] == arg_160[0] && arg_229[0] == arg_292[0] && arg_229[0] != arg_237[1] && arg_229[0] == arg_181[0] && arg_229[0] == arg_191[0] && arg_229[0] != arg_199[1] && arg_229[0] == arg_71[0] && arg_229[0] != arg_269[1] && arg_229[0] != arg_53[1] && arg_229[0] == arg_157[0] && arg_229[0] != arg_292[1] && arg_229[0] != arg_289[1] && arg_229[0] != arg_300[1] && arg_229[0] == arg_289[0] && arg_229[0] != arg_33[1] && arg_229[0] == arg_111[0] && arg_229[0] != arg_272[1] && arg_229[0] == arg_96[0] && arg_229[0] == arg_36[0] && arg_229[0] == arg_259[0] && arg_229[0] == arg_254[0] && arg_229[0] != arg_64[1] && arg_229[0] == arg_280[0] && arg_229[0] != arg_307[1] && arg_229[0] != arg_111[1] && arg_229[0] == arg_64[0] && arg_229[0] == arg_74[0] && arg_229[0] != arg_232[1] && arg_229[0] != arg_44[1] && arg_229[0] == arg_240[0] && arg_229[0] == arg_194[0] && arg_229[0] == arg_149[0] && arg_229[0] == arg_53[0] && arg_229[0] != arg_36[1] && arg_229[0] == arg_310[0] && arg_229[0] == arg_33[0] && arg_229[0] != arg_280[1] && arg_229[0] != arg_79[1] && arg_229[0] != arg_191[1] && arg_229[0] != arg_194[1] && arg_229[0] == arg_131[0] && arg_229[0] != arg_222[1] && arg_229[0] == arg_211[0] && arg_229[0] == arg_251[0] && arg_229[0] != arg_202[1] && arg_229[0] == arg_272[0] && arg_229[0] != arg_251[1] && arg_229[0] != arg_318[1] && arg_229[0] != arg_211[1] && arg_229[0] == arg_277[0] && arg_229[0] == arg_82[0] && arg_229[0] == arg_222[0] && arg_229[0] != arg_184[1] && arg_229[0] != arg_310[1] && arg_229[0] != arg_315[1] && arg_229[0] == arg_23[0] && arg_229[0] != arg_41[1] && arg_229[0] != arg_56[1] && arg_229[0] != arg_71[1] && arg_229[0] != arg_157[1] && arg_229[0] == arg_232[0] && arg_229[0] != arg_15[1] && arg_229[0] == arg_262[0] && arg_229[0] == arg_269[0] && arg_229[0] != arg_114[1] && arg_229[0] == arg_56[0] && arg_229[0] == arg_219[0] && arg_229[0] != arg_18[1] && arg_229[0] == arg_93[0] && arg_229[0] == arg_202[0] && arg_229[0] == arg_315[0] && arg_229[0] != arg_240[1] && arg_229[0] != arg_176[1] && arg_229[0] != arg_181[1] && arg_229[0] == arg_114[0] && arg_229[0] == arg_122[0] && arg_229[0] == arg_142[0] && arg_229[0] != arg_142[1] && arg_229[0] == arg_79[0] && arg_229[0] == arg_152[0] && arg_229[0] != arg_173[1] && arg_229[0] == arg_237[0] && arg_229[0] != arg_277[1] && arg_229[0] != arg_139[1] && arg_229[0] != arg_96[1] && arg_229[0] != arg_131[1] && arg_229[0] != arg_229[1] && arg_229[0] == arg_15[0] && arg_229[0] == arg_101[0] && arg_229[0] == arg_184[0] && arg_229[0] != arg_262[1] && arg_229[0] == arg_41[0] && arg_229[0] != arg_93[1] && arg_229[0] == arg_18[0] && arg_229[0] != arg_214[1] && arg_229[0] == arg_119[0] && arg_229[0] == arg_214[0] && arg_229[0] == arg_139[0] && arg_229[0] == arg_307[0] && arg_229[0] != arg_149[1] && arg_229[0] == arg_134[0] && arg_229[0] != arg_219[1] && arg_254[1] != arg_26[0] && arg_254[1] != arg_104[0] && arg_254[1] != arg_176[0] && arg_254[1] == arg_122[1] && arg_254[1] == arg_101[1] && arg_254[1] == arg_297[1] && arg_254[1] == arg_134[1] && arg_254[1] == arg_119[1] && arg_254[1] == arg_26[1] && arg_254[1] == arg_23[1] && arg_254[1] != arg_160[0] && arg_254[1] != arg_292[0] && arg_254[1] == arg_237[1] && arg_254[1] != arg_181[0] && arg_254[1] != arg_191[0] && arg_254[1] == arg_199[1] && arg_254[1] != arg_71[0] && arg_254[1] == arg_269[1] && arg_254[1] == arg_53[1] && arg_254[1] != arg_157[0] && arg_254[1] == arg_292[1] && arg_254[1] == arg_289[1] && arg_254[1] == arg_300[1] && arg_254[1] != arg_289[0] && arg_254[1] == arg_33[1] && arg_254[1] != arg_111[0] && arg_254[1] == arg_272[1] && arg_254[1] != arg_96[0] && arg_254[1] != arg_36[0] && arg_254[1] != arg_259[0] && arg_254[1] != arg_254[0] && arg_254[1] == arg_64[1] && arg_254[1] != arg_280[0] && arg_254[1] == arg_307[1] && arg_254[1] == arg_111[1] && arg_254[1] != arg_64[0] && arg_254[1] != arg_74[0] && arg_254[1] == arg_232[1] && arg_254[1] == arg_44[1] && arg_254[1] != arg_240[0] && arg_254[1] != arg_194[0] && arg_254[1] != arg_149[0] && arg_254[1] != arg_53[0] && arg_254[1] == arg_36[1] && arg_254[1] != arg_310[0] && arg_254[1] != arg_33[0] && arg_254[1] == arg_280[1] && arg_254[1] == arg_79[1] && arg_254[1] == arg_191[1] && arg_254[1] == arg_194[1] && arg_254[1] != arg_131[0] && arg_254[1] == arg_222[1] && arg_254[1] != arg_211[0] && arg_254[1] != arg_251[0] && arg_254[1] == arg_202[1] && arg_254[1] != arg_272[0] && arg_254[1] == arg_251[1] && arg_254[1] == arg_318[1] && arg_254[1] == arg_211[1] && arg_254[1] != arg_277[0] && arg_254[1] != arg_82[0] && arg_254[1] != arg_222[0] && arg_254[1] == arg_184[1] && arg_254[1] == arg_310[1] && arg_254[1] == arg_315[1] && arg_254[1] != arg_23[0] && arg_254[1] == arg_41[1] && arg_254[1] == arg_56[1] && arg_254[1] == arg_71[1] && arg_254[1] == arg_157[1] && arg_254[1] != arg_232[0] && arg_254[1] == arg_15[1] && arg_254[1] != arg_262[0] && arg_254[1] != arg_269[0] && arg_254[1] == arg_114[1] && arg_254[1] != arg_56[0] && arg_254[1] != arg_219[0] && arg_254[1] == arg_18[1] && arg_254[1] != arg_93[0] && arg_254[1] != arg_202[0] && arg_254[1] != arg_315[0] && arg_254[1] == arg_240[1] && arg_254[1] == arg_176[1] && arg_254[1] == arg_181[1] && arg_254[1] != arg_114[0] && arg_254[1] != arg_122[0] && arg_254[1] != arg_142[0] && arg_254[1] == arg_142[1] && arg_254[1] != arg_79[0] && arg_254[1] != arg_152[0] && arg_254[1] == arg_173[1] && arg_254[1] != arg_237[0] && arg_254[1] == arg_277[1] && arg_254[1] == arg_139[1] && arg_254[1] == arg_96[1] && arg_254[1] == arg_131[1] && arg_254[1] == arg_229[1] && arg_254[1] != arg_15[0] && arg_254[1] != arg_101[0] && arg_254[1] != arg_184[0] && arg_254[1] == arg_262[1] && arg_254[1] != arg_41[0] && arg_254[1] == arg_93[1] && arg_254[1] != arg_18[0] && arg_254[1] == arg_214[1] && arg_254[1] != arg_119[0] && arg_254[1] != arg_214[0] && arg_254[1] != arg_139[0] && arg_254[1] != arg_307[0] && arg_254[1] == arg_149[1] && arg_254[1] != arg_134[0] && arg_254[1] == arg_219[1] && arg_26[0] == arg_104[0] && arg_26[0] == arg_176[0] && arg_26[0] != arg_122[1] && arg_26[0] != arg_101[1] && arg_26[0] != arg_297[1] && arg_26[0] != arg_134[1] && arg_26[0] != arg_119[1] && arg_26[0] != arg_26[1] && arg_26[0] != arg_23[1] && arg_26[0] == arg_160[0] && arg_26[0] == arg_292[0] && arg_26[0] != arg_237[1] && arg_26[0] == arg_181[0] && arg_26[0] == arg_191[0] && arg_26[0] != arg_199[1] && arg_26[0] == arg_71[0] && arg_26[0] != arg_269[1] && arg_26[0] != arg_53[1] && arg_26[0] == arg_157[0] && arg_26[0] != arg_292[1] && arg_26[0] != arg_289[1] && arg_26[0] != arg_300[1] && arg_26[0] == arg_289[0] && arg_26[0] != arg_33[1] && arg_26[0] == arg_111[0] && arg_26[0] != arg_272[1] && arg_26[0] == arg_96[0] && arg_26[0] == arg_36[0] && arg_26[0] == arg_259[0] && arg_26[0] == arg_254[0] && arg_26[0] != arg_64[1] && arg_26[0] == arg_280[0] && arg_26[0] != arg_307[1] && arg_26[0] != arg_111[1] && arg_26[0] == arg_64[0] && arg_26[0] == arg_74[0] && arg_26[0] != arg_232[1] && arg_26[0] != arg_44[1] && arg_26[0] == arg_240[0] && arg_26[0] == arg_194[0] && arg_26[0] == arg_149[0] && arg_26[0] == arg_53[0] && arg_26[0] != arg_36[1] && arg_26[0] == arg_310[0] && arg_26[0] == arg_33[0] && arg_26[0] != arg_280[1] && arg_26[0] != arg_79[1] && arg_26[0] != arg_191[1] && arg_26[0] != arg_194[1] && arg_26[0] == arg_131[0] && arg_26[0] != arg_222[1] && arg_26[0] == arg_211[0] && arg_26[0] == arg_251[0] && arg_26[0] != arg_202[1] && arg_26[0] == arg_272[0] && arg_26[0] != arg_251[1] && arg_26[0] != arg_318[1] && arg_26[0] != arg_211[1] && arg_26[0] == arg_277[0] && arg_26[0] == arg_82[0] && arg_26[0] == arg_222[0] && arg_26[0] != arg_184[1] && arg_26[0] != arg_310[1] && arg_26[0] != arg_315[1] && arg_26[0] == arg_23[0] && arg_26[0] != arg_41[1] && arg_26[0] != arg_56[1] && arg_26[0] != arg_71[1] && arg_26[0] != arg_157[1] && arg_26[0] == arg_232[0] && arg_26[0] != arg_15[1] && arg_26[0] == arg_262[0] && arg_26[0] == arg_269[0] && arg_26[0] != arg_114[1] && arg_26[0] == arg_56[0] && arg_26[0] == arg_219[0] && arg_26[0] != arg_18[1] && arg_26[0] == arg_93[0] && arg_26[0] == arg_202[0] && arg_26[0] == arg_315[0] && arg_26[0] != arg_240[1] && arg_26[0] != arg_176[1] && arg_26[0] != arg_181[1] && arg_26[0] == arg_114[0] && arg_26[0] == arg_122[0] && arg_26[0] == arg_142[0] && arg_26[0] != arg_142[1] && arg_26[0] == arg_79[0] && arg_26[0] == arg_152[0] && arg_26[0] != arg_173[1] && arg_26[0] == arg_237[0] && arg_26[0] != arg_277[1] && arg_26[0] != arg_139[1] && arg_26[0] != arg_96[1] && arg_26[0] != arg_131[1] && arg_26[0] != arg_229[1] && arg_26[0] == arg_15[0] && arg_26[0] == arg_101[0] && arg_26[0] == arg_184[0] && arg_26[0] != arg_262[1] && arg_26[0] == arg_41[0] && arg_26[0] != arg_93[1] && arg_26[0] == arg_18[0] && arg_26[0] != arg_214[1] && arg_26[0] == arg_119[0] && arg_26[0] == arg_214[0] && arg_26[0] == arg_139[0] && arg_26[0] == arg_307[0] && arg_26[0] != arg_149[1] && arg_26[0] == arg_134[0] && arg_26[0] != arg_219[1] && arg_104[0] == arg_176[0] && arg_104[0] != arg_122[1] && arg_104[0] != arg_101[1] && arg_104[0] != arg_297[1] && arg_104[0] != arg_134[1] && arg_104[0] != arg_119[1] && arg_104[0] != arg_26[1] && arg_104[0] != arg_23[1] && arg_104[0] == arg_160[0] && arg_104[0] == arg_292[0] && arg_104[0] != arg_237[1] && arg_104[0] == arg_181[0] && arg_104[0] == arg_191[0] && arg_104[0] != arg_199[1] && arg_104[0] == arg_71[0] && arg_104[0] != arg_269[1] && arg_104[0] != arg_53[1] && arg_104[0] == arg_157[0] && arg_104[0] != arg_292[1] && arg_104[0] != arg_289[1] && arg_104[0] != arg_300[1] && arg_104[0] == arg_289[0] && arg_104[0] != arg_33[1] && arg_104[0] == arg_111[0] && arg_104[0] != arg_272[1] && arg_104[0] == arg_96[0] && arg_104[0] == arg_36[0] && arg_104[0] == arg_259[0] && arg_104[0] == arg_254[0] && arg_104[0] != arg_64[1] && arg_104[0] == arg_280[0] && arg_104[0] != arg_307[1] && arg_104[0] != arg_111[1] && arg_104[0] == arg_64[0] && arg_104[0] == arg_74[0] && arg_104[0] != arg_232[1] && arg_104[0] != arg_44[1] && arg_104[0] == arg_240[0] && arg_104[0] == arg_194[0] && arg_104[0] == arg_149[0] && arg_104[0] == arg_53[0] && arg_104[0] != arg_36[1] && arg_104[0] == arg_310[0] && arg_104[0] == arg_33[0] && arg_104[0] != arg_280[1] && arg_104[0] != arg_79[1] && arg_104[0] != arg_191[1] && arg_104[0] != arg_194[1] && arg_104[0] == arg_131[0] && arg_104[0] != arg_222[1] && arg_104[0] == arg_211[0] && arg_104[0] == arg_251[0] && arg_104[0] != arg_202[1] && arg_104[0] == arg_272[0] && arg_104[0] != arg_251[1] && arg_104[0] != arg_318[1] && arg_104[0] != arg_211[1] && arg_104[0] == arg_277[0] && arg_104[0] == arg_82[0] && arg_104[0] == arg_222[0] && arg_104[0] != arg_184[1] && arg_104[0] != arg_310[1] && arg_104[0] != arg_315[1] && arg_104[0] == arg_23[0] && arg_104[0] != arg_41[1] && arg_104[0] != arg_56[1] && arg_104[0] != arg_71[1] && arg_104[0] != arg_157[1] && arg_104[0] == arg_232[0] && arg_104[0] != arg_15[1] && arg_104[0] == arg_262[0] && arg_104[0] == arg_269[0] && arg_104[0] != arg_114[1] && arg_104[0] == arg_56[0] && arg_104[0] == arg_219[0] && arg_104[0] != arg_18[1] && arg_104[0] == arg_93[0] && arg_104[0] == arg_202[0] && arg_104[0] == arg_315[0] && arg_104[0] != arg_240[1] && arg_104[0] != arg_176[1] && arg_104[0] != arg_181[1] && arg_104[0] == arg_114[0] && arg_104[0] == arg_122[0] && arg_104[0] == arg_142[0] && arg_104[0] != arg_142[1] && arg_104[0] == arg_79[0] && arg_104[0] == arg_152[0] && arg_104[0] != arg_173[1] && arg_104[0] == arg_237[0] && arg_104[0] != arg_277[1] && arg_104[0] != arg_139[1] && arg_104[0] != arg_96[1] && arg_104[0] != arg_131[1] && arg_104[0] != arg_229[1] && arg_104[0] == arg_15[0] && arg_104[0] == arg_101[0] && arg_104[0] == arg_184[0] && arg_104[0] != arg_262[1] && arg_104[0] == arg_41[0] && arg_104[0] != arg_93[1] && arg_104[0] == arg_18[0] && arg_104[0] != arg_214[1] && arg_104[0] == arg_119[0] && arg_104[0] == arg_214[0] && arg_104[0] == arg_139[0] && arg_104[0] == arg_307[0] && arg_104[0] != arg_149[1] && arg_104[0] == arg_134[0] && arg_104[0] != arg_219[1] && arg_176[0] != arg_122[1] && arg_176[0] != arg_101[1] && arg_176[0] != arg_297[1] && arg_176[0] != arg_134[1] && arg_176[0] != arg_119[1] && arg_176[0] != arg_26[1] && arg_176[0] != arg_23[1] && arg_176[0] == arg_160[0] && arg_176[0] == arg_292[0] && arg_176[0] != arg_237[1] && arg_176[0] == arg_181[0] && arg_176[0] == arg_191[0] && arg_176[0] != arg_199[1] && arg_176[0] == arg_71[0] && arg_176[0] != arg_269[1] && arg_176[0] != arg_53[1] && arg_176[0] == arg_157[0] && arg_176[0] != arg_292[1] && arg_176[0] != arg_289[1] && arg_176[0] != arg_300[1] && arg_176[0] == arg_289[0] && arg_176[0] != arg_33[1] && arg_176[0] == arg_111[0] && arg_176[0] != arg_272[1] && arg_176[0] == arg_96[0] && arg_176[0] == arg_36[0] && arg_176[0] == arg_259[0] && arg_176[0] == arg_254[0] && arg_176[0] != arg_64[1] && arg_176[0] == arg_280[0] && arg_176[0] != arg_307[1] && arg_176[0] != arg_111[1] && arg_176[0] == arg_64[0] && arg_176[0] == arg_74[0] && arg_176[0] != arg_232[1] && arg_176[0] != arg_44[1] && arg_176[0] == arg_240[0] && arg_176[0] == arg_194[0] && arg_176[0] == arg_149[0] && arg_176[0] == arg_53[0] && arg_176[0] != arg_36[1] && arg_176[0] == arg_310[0] && arg_176[0] == arg_33[0] && arg_176[0] != arg_280[1] && arg_176[0] != arg_79[1] && arg_176[0] != arg_191[1] && arg_176[0] != arg_194[1] && arg_176[0] == arg_131[0] && arg_176[0] != arg_222[1] && arg_176[0] == arg_211[0] && arg_176[0] == arg_251[0] && arg_176[0] != arg_202[1] && arg_176[0] == arg_272[0] && arg_176[0] != arg_251[1] && arg_176[0] != arg_318[1] && arg_176[0] != arg_211[1] && arg_176[0] == arg_277[0] && arg_176[0] == arg_82[0] && arg_176[0] == arg_222[0] && arg_176[0] != arg_184[1] && arg_176[0] != arg_310[1] && arg_176[0] != arg_315[1] && arg_176[0] == arg_23[0] && arg_176[0] != arg_41[1] && arg_176[0] != arg_56[1] && arg_176[0] != arg_71[1] && arg_176[0] != arg_157[1] && arg_176[0] == arg_232[0] && arg_176[0] != arg_15[1] && arg_176[0] == arg_262[0] && arg_176[0] == arg_269[0] && arg_176[0] != arg_114[1] && arg_176[0] == arg_56[0] && arg_176[0] == arg_219[0] && arg_176[0] != arg_18[1] && arg_176[0] == arg_93[0] && arg_176[0] == arg_202[0] && arg_176[0] == arg_315[0] && arg_176[0] != arg_240[1] && arg_176[0] != arg_176[1] && arg_176[0] != arg_181[1] && arg_176[0] == arg_114[0] && arg_176[0] == arg_122[0] && arg_176[0] == arg_142[0] && arg_176[0] != arg_142[1] && arg_176[0] == arg_79[0] && arg_176[0] == arg_152[0] && arg_176[0] != arg_173[1] && arg_176[0] == arg_237[0] && arg_176[0] != arg_277[1] && arg_176[0] != arg_139[1] && arg_176[0] != arg_96[1] && arg_176[0] != arg_131[1] && arg_176[0] != arg_229[1] && arg_176[0] == arg_15[0] && arg_176[0] == arg_101[0] && arg_176[0] == arg_184[0] && arg_176[0] != arg_262[1] && arg_176[0] == arg_41[0] && arg_176[0] != arg_93[1] && arg_176[0] == arg_18[0] && arg_176[0] != arg_214[1] && arg_176[0] == arg_119[0] && arg_176[0] == arg_214[0] && arg_176[0] == arg_139[0] && arg_176[0] == arg_307[0] && arg_176[0] != arg_149[1] && arg_176[0] == arg_134[0] && arg_176[0] != arg_219[1] && arg_122[1] == arg_101[1] && arg_122[1] == arg_297[1] && arg_122[1] == arg_134[1] && arg_122[1] == arg_119[1] && arg_122[1] == arg_26[1] && arg_122[1] == arg_23[1] && arg_122[1] != arg_160[0] && arg_122[1] != arg_292[0] && arg_122[1] == arg_237[1] && arg_122[1] != arg_181[0] && arg_122[1] != arg_191[0] && arg_122[1] == arg_199[1] && arg_122[1] != arg_71[0] && arg_122[1] == arg_269[1] && arg_122[1] == arg_53[1] && arg_122[1] != arg_157[0] && arg_122[1] == arg_292[1] && arg_122[1] == arg_289[1] && arg_122[1] == arg_300[1] && arg_122[1] != arg_289[0] && arg_122[1] == arg_33[1] && arg_122[1] != arg_111[0] && arg_122[1] == arg_272[1] && arg_122[1] != arg_96[0] && arg_122[1] != arg_36[0] && arg_122[1] != arg_259[0] && arg_122[1] != arg_254[0] && arg_122[1] == arg_64[1] && arg_122[1] != arg_280[0] && arg_122[1] == arg_307[1] && arg_122[1] == arg_111[1] && arg_122[1] != arg_64[0] && arg_122[1] != arg_74[0] && arg_122[1] == arg_232[1] && arg_122[1] == arg_44[1] && arg_122[1] != arg_240[0] && arg_122[1] != arg_194[0] && arg_122[1] != arg_149[0] && arg_122[1] != arg_53[0] && arg_122[1] == arg_36[1] && arg_122[1] != arg_310[0] && arg_122[1] != arg_33[0] && arg_122[1] == arg_280[1] && arg_122[1] == arg_79[1] && arg_122[1] == arg_191[1] && arg_122[1] == arg_194[1] && arg_122[1] != arg_131[0] && arg_122[1] == arg_222[1] && arg_122[1] != arg_211[0] && arg_122[1] != arg_251[0] && arg_122[1] == arg_202[1] && arg_122[1] != arg_272[0] && arg_122[1] == arg_251[1] && arg_122[1] == arg_318[1] && arg_122[1] == arg_211[1] && arg_122[1] != arg_277[0] && arg_122[1] != arg_82[0] && arg_122[1] != arg_222[0] && arg_122[1] == arg_184[1] && arg_122[1] == arg_310[1] && arg_122[1] == arg_315[1] && arg_122[1] != arg_23[0] && arg_122[1] == arg_41[1] && arg_122[1] == arg_56[1] && arg_122[1] == arg_71[1] && arg_122[1] == arg_157[1] && arg_122[1] != arg_232[0] && arg_122[1] == arg_15[1] && arg_122[1] != arg_262[0] && arg_122[1] != arg_269[0] && arg_122[1] == arg_114[1] && arg_122[1] != arg_56[0] && arg_122[1] != arg_219[0] && arg_122[1] == arg_18[1] && arg_122[1] != arg_93[0] && arg_122[1] != arg_202[0] && arg_122[1] != arg_315[0] && arg_122[1] == arg_240[1] && arg_122[1] == arg_176[1] && arg_122[1] == arg_181[1] && arg_122[1] != arg_114[0] && arg_122[1] != arg_122[0] && arg_122[1] != arg_142[0] && arg_122[1] == arg_142[1] && arg_122[1] != arg_79[0] && arg_122[1] != arg_152[0] && arg_122[1] == arg_173[1] && arg_122[1] != arg_237[0] && arg_122[1] == arg_277[1] && arg_122[1] == arg_139[1] && arg_122[1] == arg_96[1] && arg_122[1] == arg_131[1] && arg_122[1] == arg_229[1] && arg_122[1] != arg_15[0] && arg_122[1] != arg_101[0] && arg_122[1] != arg_184[0] && arg_122[1] == arg_262[1] && arg_122[1] != arg_41[0] && arg_122[1] == arg_93[1] && arg_122[1] != arg_18[0] && arg_122[1] == arg_214[1] && arg_122[1] != arg_119[0] && arg_122[1] != arg_214[0] && arg_122[1] != arg_139[0] && arg_122[1] != arg_307[0] && arg_122[1] == arg_149[1] && arg_122[1] != arg_134[0] && arg_122[1] == arg_219[1] && arg_101[1] == arg_297[1] && arg_101[1] == arg_134[1] && arg_101[1] == arg_119[1] && arg_101[1] == arg_26[1] && arg_101[1] == arg_23[1] && arg_101[1] != arg_160[0] && arg_101[1] != arg_292[0] && arg_101[1] == arg_237[1] && arg_101[1] != arg_181[0] && arg_101[1] != arg_191[0] && arg_101[1] == arg_199[1] && arg_101[1] != arg_71[0] && arg_101[1] == arg_269[1] && arg_101[1] == arg_53[1] && arg_101[1] != arg_157[0] && arg_101[1] == arg_292[1] && arg_101[1] == arg_289[1] && arg_101[1] == arg_300[1] && arg_101[1] != arg_289[0] && arg_101[1] == arg_33[1] && arg_101[1] != arg_111[0] && arg_101[1] == arg_272[1] && arg_101[1] != arg_96[0] && arg_101[1] != arg_36[0] && arg_101[1] != arg_259[0] && arg_101[1] != arg_254[0] && arg_101[1] == arg_64[1] && arg_101[1] != arg_280[0] && arg_101[1] == arg_307[1] && arg_101[1] == arg_111[1] && arg_101[1] != arg_64[0] && arg_101[1] != arg_74[0] && arg_101[1] == arg_232[1] && arg_101[1] == arg_44[1] && arg_101[1] != arg_240[0] && arg_101[1] != arg_194[0] && arg_101[1] != arg_149[0] && arg_101[1] != arg_53[0] && arg_101[1] == arg_36[1] && arg_101[1] != arg_310[0] && arg_101[1] != arg_33[0] && arg_101[1] == arg_280[1] && arg_101[1] == arg_79[1] && arg_101[1] == arg_191[1] && arg_101[1] == arg_194[1] && arg_101[1] != arg_131[0] && arg_101[1] == arg_222[1] && arg_101[1] != arg_211[0] && arg_101[1] != arg_251[0] && arg_101[1] == arg_202[1] && arg_101[1] != arg_272[0] && arg_101[1] == arg_251[1] && arg_101[1] == arg_318[1] && arg_101[1] == arg_211[1] && arg_101[1] != arg_277[0] && arg_101[1] != arg_82[0] && arg_101[1] != arg_222[0] && arg_101[1] == arg_184[1] && arg_101[1] == arg_310[1] && arg_101[1] == arg_315[1] && arg_101[1] != arg_23[0] && arg_101[1] == arg_41[1] && arg_101[1] == arg_56[1] && arg_101[1] == arg_71[1] && arg_101[1] == arg_157[1] && arg_101[1] != arg_232[0] && arg_101[1] == arg_15[1] && arg_101[1] != arg_262[0] && arg_101[1] != arg_269[0] && arg_101[1] == arg_114[1] && arg_101[1] != arg_56[0] && arg_101[1] != arg_219[0] && arg_101[1] == arg_18[1] && arg_101[1] != arg_93[0] && arg_101[1] != arg_202[0] && arg_101[1] != arg_315[0] && arg_101[1] == arg_240[1] && arg_101[1] == arg_176[1] && arg_101[1] == arg_181[1] && arg_101[1] != arg_114[0] && arg_101[1] != arg_122[0] && arg_101[1] != arg_142[0] && arg_101[1] == arg_142[1] && arg_101[1] != arg_79[0] && arg_101[1] != arg_152[0] && arg_101[1] == arg_173[1] && arg_101[1] != arg_237[0] && arg_101[1] == arg_277[1] && arg_101[1] == arg_139[1] && arg_101[1] == arg_96[1] && arg_101[1] == arg_131[1] && arg_101[1] == arg_229[1] && arg_101[1] != arg_15[0] && arg_101[1] != arg_101[0] && arg_101[1] != arg_184[0] && arg_101[1] == arg_262[1] && arg_101[1] != arg_41[0] && arg_101[1] == arg_93[1] && arg_101[1] != arg_18[0] && arg_101[1] == arg_214[1] && arg_101[1] != arg_119[0] && arg_101[1] != arg_214[0] && arg_101[1] != arg_139[0] && arg_101[1] != arg_307[0] && arg_101[1] == arg_149[1] && arg_101[1] != arg_134[0] && arg_101[1] == arg_219[1] && arg_297[1] == arg_134[1] && arg_297[1] == arg_119[1] && arg_297[1] == arg_26[1] && arg_297[1] == arg_23[1] && arg_297[1] != arg_160[0] && arg_297[1] != arg_292[0] && arg_297[1] == arg_237[1] && arg_297[1] != arg_181[0] && arg_297[1] != arg_191[0] && arg_297[1] == arg_199[1] && arg_297[1] != arg_71[0] && arg_297[1] == arg_269[1] && arg_297[1] == arg_53[1] && arg_297[1] != arg_157[0] && arg_297[1] == arg_292[1] && arg_297[1] == arg_289[1] && arg_297[1] == arg_300[1] && arg_297[1] != arg_289[0] && arg_297[1] == arg_33[1] && arg_297[1] != arg_111[0] && arg_297[1] == arg_272[1] && arg_297[1] != arg_96[0] && arg_297[1] != arg_36[0] && arg_297[1] != arg_259[0] && arg_297[1] != arg_254[0] && arg_297[1] == arg_64[1] && arg_297[1] != arg_280[0] && arg_297[1] == arg_307[1] && arg_297[1] == arg_111[1] && arg_297[1] != arg_64[0] && arg_297[1] != arg_74[0] && arg_297[1] == arg_232[1] && arg_297[1] == arg_44[1] && arg_297[1] != arg_240[0] && arg_297[1] != arg_194[0] && arg_297[1] != arg_149[0] && arg_297[1] != arg_53[0] && arg_297[1] == arg_36[1] && arg_297[1] != arg_310[0] && arg_297[1] != arg_33[0] && arg_297[1] == arg_280[1] && arg_297[1] == arg_79[1] && arg_297[1] == arg_191[1] && arg_297[1] == arg_194[1] && arg_297[1] != arg_131[0] && arg_297[1] == arg_222[1] && arg_297[1] != arg_211[0] && arg_297[1] != arg_251[0] && arg_297[1] == arg_202[1] && arg_297[1] != arg_272[0] && arg_297[1] == arg_251[1] && arg_297[1] == arg_318[1] && arg_297[1] == arg_211[1] && arg_297[1] != arg_277[0] && arg_297[1] != arg_82[0] && arg_297[1] != arg_222[0] && arg_297[1] == arg_184[1] && arg_297[1] == arg_310[1] && arg_297[1] == arg_315[1] && arg_297[1] != arg_23[0] && arg_297[1] == arg_41[1] && arg_297[1] == arg_56[1] && arg_297[1] == arg_71[1] && arg_297[1] == arg_157[1] && arg_297[1] != arg_232[0] && arg_297[1] == arg_15[1] && arg_297[1] != arg_262[0] && arg_297[1] != arg_269[0] && arg_297[1] == arg_114[1] && arg_297[1] != arg_56[0] && arg_297[1] != arg_219[0] && arg_297[1] == arg_18[1] && arg_297[1] != arg_93[0] && arg_297[1] != arg_202[0] && arg_297[1] != arg_315[0] && arg_297[1] == arg_240[1] && arg_297[1] == arg_176[1] && arg_297[1] == arg_181[1] && arg_297[1] != arg_114[0] && arg_297[1] != arg_122[0] && arg_297[1] != arg_142[0] && arg_297[1] == arg_142[1] && arg_297[1] != arg_79[0] && arg_297[1] != arg_152[0] && arg_297[1] == arg_173[1] && arg_297[1] != arg_237[0] && arg_297[1] == arg_277[1] && arg_297[1] == arg_139[1] && arg_297[1] == arg_96[1] && arg_297[1] == arg_131[1] && arg_297[1] == arg_229[1] && arg_297[1] != arg_15[0] && arg_297[1] != arg_101[0] && arg_297[1] != arg_184[0] && arg_297[1] == arg_262[1] && arg_297[1] != arg_41[0] && arg_297[1] == arg_93[1] && arg_297[1] != arg_18[0] && arg_297[1] == arg_214[1] && arg_297[1] != arg_119[0] && arg_297[1] != arg_214[0] && arg_297[1] != arg_139[0] && arg_297[1] != arg_307[0] && arg_297[1] == arg_149[1] && arg_297[1] != arg_134[0] && arg_297[1] == arg_219[1] && arg_134[1] == arg_119[1] && arg_134[1] == arg_26[1] && arg_134[1] == arg_23[1] && arg_134[1] != arg_160[0] && arg_134[1] != arg_292[0] && arg_134[1] == arg_237[1] && arg_134[1] != arg_181[0] && arg_134[1] != arg_191[0] && arg_134[1] == arg_199[1] && arg_134[1] != arg_71[0] && arg_134[1] == arg_269[1] && arg_134[1] == arg_53[1] && arg_134[1] != arg_157[0] && arg_134[1] == arg_292[1] && arg_134[1] == arg_289[1] && arg_134[1] == arg_300[1] && arg_134[1] != arg_289[0] && arg_134[1] == arg_33[1] && arg_134[1] != arg_111[0] && arg_134[1] == arg_272[1] && arg_134[1] != arg_96[0] && arg_134[1] != arg_36[0] && arg_134[1] != arg_259[0] && arg_134[1] != arg_254[0] && arg_134[1] == arg_64[1] && arg_134[1] != arg_280[0] && arg_134[1] == arg_307[1] && arg_134[1] == arg_111[1] && arg_134[1] != arg_64[0] && arg_134[1] != arg_74[0] && arg_134[1] == arg_232[1] && arg_134[1] == arg_44[1] && arg_134[1] != arg_240[0] && arg_134[1] != arg_194[0] && arg_134[1] != arg_149[0] && arg_134[1] != arg_53[0] && arg_134[1] == arg_36[1] && arg_134[1] != arg_310[0] && arg_134[1] != arg_33[0] && arg_134[1] == arg_280[1] && arg_134[1] == arg_79[1] && arg_134[1] == arg_191[1] && arg_134[1] == arg_194[1] && arg_134[1] != arg_131[0] && arg_134[1] == arg_222[1] && arg_134[1] != arg_211[0] && arg_134[1] != arg_251[0] && arg_134[1] == arg_202[1] && arg_134[1] != arg_272[0] && arg_134[1] == arg_251[1] && arg_134[1] == arg_318[1] && arg_134[1] == arg_211[1] && arg_134[1] != arg_277[0] && arg_134[1] != arg_82[0] && arg_134[1] != arg_222[0] && arg_134[1] == arg_184[1] && arg_134[1] == arg_310[1] && arg_134[1] == arg_315[1] && arg_134[1] != arg_23[0] && arg_134[1] == arg_41[1] && arg_134[1] == arg_56[1] && arg_134[1] == arg_71[1] && arg_134[1] == arg_157[1] && arg_134[1] != arg_232[0] && arg_134[1] == arg_15[1] && arg_134[1] != arg_262[0] && arg_134[1] != arg_269[0] && arg_134[1] == arg_114[1] && arg_134[1] != arg_56[0] && arg_134[1] != arg_219[0] && arg_134[1] == arg_18[1] && arg_134[1] != arg_93[0] && arg_134[1] != arg_202[0] && arg_134[1] != arg_315[0] && arg_134[1] == arg_240[1] && arg_134[1] == arg_176[1] && arg_134[1] == arg_181[1] && arg_134[1] != arg_114[0] && arg_134[1] != arg_122[0] && arg_134[1] != arg_142[0] && arg_134[1] == arg_142[1] && arg_134[1] != arg_79[0] && arg_134[1] != arg_152[0] && arg_134[1] == arg_173[1] && arg_134[1] != arg_237[0] && arg_134[1] == arg_277[1] && arg_134[1] == arg_139[1] && arg_134[1] == arg_96[1] && arg_134[1] == arg_131[1] && arg_134[1] == arg_229[1] && arg_134[1] != arg_15[0] && arg_134[1] != arg_101[0] && arg_134[1] != arg_184[0] && arg_134[1] == arg_262[1] && arg_134[1] != arg_41[0] && arg_134[1] == arg_93[1] && arg_134[1] != arg_18[0] && arg_134[1] == arg_214[1] && arg_134[1] != arg_119[0] && arg_134[1] != arg_214[0] && arg_134[1] != arg_139[0] && arg_134[1] != arg_307[0] && arg_134[1] == arg_149[1] && arg_134[1] != arg_134[0] && arg_134[1] == arg_219[1] && arg_119[1] == arg_26[1] && arg_119[1] == arg_23[1] && arg_119[1] != arg_160[0] && arg_119[1] != arg_292[0] && arg_119[1] == arg_237[1] && arg_119[1] != arg_181[0] && arg_119[1] != arg_191[0] && arg_119[1] == arg_199[1] && arg_119[1] != arg_71[0] && arg_119[1] == arg_269[1] && arg_119[1] == arg_53[1] && arg_119[1] != arg_157[0] && arg_119[1] == arg_292[1] && arg_119[1] == arg_289[1] && arg_119[1] == arg_300[1] && arg_119[1] != arg_289[0] && arg_119[1] == arg_33[1] && arg_119[1] != arg_111[0] && arg_119[1] == arg_272[1] && arg_119[1] != arg_96[0] && arg_119[1] != arg_36[0] && arg_119[1] != arg_259[0] && arg_119[1] != arg_254[0] && arg_119[1] == arg_64[1] && arg_119[1] != arg_280[0] && arg_119[1] == arg_307[1] && arg_119[1] == arg_111[1] && arg_119[1] != arg_64[0] && arg_119[1] != arg_74[0] && arg_119[1] == arg_232[1] && arg_119[1] == arg_44[1] && arg_119[1] != arg_240[0] && arg_119[1] != arg_194[0] && arg_119[1] != arg_149[0] && arg_119[1] != arg_53[0] && arg_119[1] == arg_36[1] && arg_119[1] != arg_310[0] && arg_119[1] != arg_33[0] && arg_119[1] == arg_280[1] && arg_119[1] == arg_79[1] && arg_119[1] == arg_191[1] && arg_119[1] == arg_194[1] && arg_119[1] != arg_131[0] && arg_119[1] == arg_222[1] && arg_119[1] != arg_211[0] && arg_119[1] != arg_251[0] && arg_119[1] == arg_202[1] && arg_119[1] != arg_272[0] && arg_119[1] == arg_251[1] && arg_119[1] == arg_318[1] && arg_119[1] == arg_211[1] && arg_119[1] != arg_277[0] && arg_119[1] != arg_82[0] && arg_119[1] != arg_222[0] && arg_119[1] == arg_184[1] && arg_119[1] == arg_310[1] && arg_119[1] == arg_315[1] && arg_119[1] != arg_23[0] && arg_119[1] == arg_41[1] && arg_119[1] == arg_56[1] && arg_119[1] == arg_71[1] && arg_119[1] == arg_157[1] && arg_119[1] != arg_232[0] && arg_119[1] == arg_15[1] && arg_119[1] != arg_262[0] && arg_119[1] != arg_269[0] && arg_119[1] == arg_114[1] && arg_119[1] != arg_56[0] && arg_119[1] != arg_219[0] && arg_119[1] == arg_18[1] && arg_119[1] != arg_93[0] && arg_119[1] != arg_202[0] && arg_119[1] != arg_315[0] && arg_119[1] == arg_240[1] && arg_119[1] == arg_176[1] && arg_119[1] == arg_181[1] && arg_119[1] != arg_114[0] && arg_119[1] != arg_122[0] && arg_119[1] != arg_142[0] && arg_119[1] == arg_142[1] && arg_119[1] != arg_79[0] && arg_119[1] != arg_152[0] && arg_119[1] == arg_173[1] && arg_119[1] != arg_237[0] && arg_119[1] == arg_277[1] && arg_119[1] == arg_139[1] && arg_119[1] == arg_96[1] && arg_119[1] == arg_131[1] && arg_119[1] == arg_229[1] && arg_119[1] != arg_15[0] && arg_119[1] != arg_101[0] && arg_119[1] != arg_184[0] && arg_119[1] == arg_262[1] && arg_119[1] != arg_41[0] && arg_119[1] == arg_93[1] && arg_119[1] != arg_18[0] && arg_119[1] == arg_214[1] && arg_119[1] != arg_119[0] && arg_119[1] != arg_214[0] && arg_119[1] != arg_139[0] && arg_119[1] != arg_307[0] && arg_119[1] == arg_149[1] && arg_119[1] != arg_134[0] && arg_119[1] == arg_219[1] && arg_26[1] == arg_23[1] && arg_26[1] != arg_160[0] && arg_26[1] != arg_292[0] && arg_26[1] == arg_237[1] && arg_26[1] != arg_181[0] && arg_26[1] != arg_191[0] && arg_26[1] == arg_199[1] && arg_26[1] != arg_71[0] && arg_26[1] == arg_269[1] && arg_26[1] == arg_53[1] && arg_26[1] != arg_157[0] && arg_26[1] == arg_292[1] && arg_26[1] == arg_289[1] && arg_26[1] == arg_300[1] && arg_26[1] != arg_289[0] && arg_26[1] == arg_33[1] && arg_26[1] != arg_111[0] && arg_26[1] == arg_272[1] && arg_26[1] != arg_96[0] && arg_26[1] != arg_36[0] && arg_26[1] != arg_259[0] && arg_26[1] != arg_254[0] && arg_26[1] == arg_64[1] && arg_26[1] != arg_280[0] && arg_26[1] == arg_307[1] && arg_26[1] == arg_111[1] && arg_26[1] != arg_64[0] && arg_26[1] != arg_74[0] && arg_26[1] == arg_232[1] && arg_26[1] == arg_44[1] && arg_26[1] != arg_240[0] && arg_26[1] != arg_194[0] && arg_26[1] != arg_149[0] && arg_26[1] != arg_53[0] && arg_26[1] == arg_36[1] && arg_26[1] != arg_310[0] && arg_26[1] != arg_33[0] && arg_26[1] == arg_280[1] && arg_26[1] == arg_79[1] && arg_26[1] == arg_191[1] && arg_26[1] == arg_194[1] && arg_26[1] != arg_131[0] && arg_26[1] == arg_222[1] && arg_26[1] != arg_211[0] && arg_26[1] != arg_251[0] && arg_26[1] == arg_202[1] && arg_26[1] != arg_272[0] && arg_26[1] == arg_251[1] && arg_26[1] == arg_318[1] && arg_26[1] == arg_211[1] && arg_26[1] != arg_277[0] && arg_26[1] != arg_82[0] && arg_26[1] != arg_222[0] && arg_26[1] == arg_184[1] && arg_26[1] == arg_310[1] && arg_26[1] == arg_315[1] && arg_26[1] != arg_23[0] && arg_26[1] == arg_41[1] && arg_26[1] == arg_56[1] && arg_26[1] == arg_71[1] && arg_26[1] == arg_157[1] && arg_26[1] != arg_232[0] && arg_26[1] == arg_15[1] && arg_26[1] != arg_262[0] && arg_26[1] != arg_269[0] && arg_26[1] == arg_114[1] && arg_26[1] != arg_56[0] && arg_26[1] != arg_219[0] && arg_26[1] == arg_18[1] && arg_26[1] != arg_93[0] && arg_26[1] != arg_202[0] && arg_26[1] != arg_315[0] && arg_26[1] == arg_240[1] && arg_26[1] == arg_176[1] && arg_26[1] == arg_181[1] && arg_26[1] != arg_114[0] && arg_26[1] != arg_122[0] && arg_26[1] != arg_142[0] && arg_26[1] == arg_142[1] && arg_26[1] != arg_79[0] && arg_26[1] != arg_152[0] && arg_26[1] == arg_173[1] && arg_26[1] != arg_237[0] && arg_26[1] == arg_277[1] && arg_26[1] == arg_139[1] && arg_26[1] == arg_96[1] && arg_26[1] == arg_131[1] && arg_26[1] == arg_229[1] && arg_26[1] != arg_15[0] && arg_26[1] != arg_101[0] && arg_26[1] != arg_184[0] && arg_26[1] == arg_262[1] && arg_26[1] != arg_41[0] && arg_26[1] == arg_93[1] && arg_26[1] != arg_18[0] && arg_26[1] == arg_214[1] && arg_26[1] != arg_119[0] && arg_26[1] != arg_214[0] && arg_26[1] != arg_139[0] && arg_26[1] != arg_307[0] && arg_26[1] == arg_149[1] && arg_26[1] != arg_134[0] && arg_26[1] == arg_219[1] && arg_23[1] != arg_160[0] && arg_23[1] != arg_292[0] && arg_23[1] == arg_237[1] && arg_23[1] != arg_181[0] && arg_23[1] != arg_191[0] && arg_23[1] == arg_199[1] && arg_23[1] != arg_71[0] && arg_23[1] == arg_269[1] && arg_23[1] == arg_53[1] && arg_23[1] != arg_157[0] && arg_23[1] == arg_292[1] && arg_23[1] == arg_289[1] && arg_23[1] == arg_300[1] && arg_23[1] != arg_289[0] && arg_23[1] == arg_33[1] && arg_23[1] != arg_111[0] && arg_23[1] == arg_272[1] && arg_23[1] != arg_96[0] && arg_23[1] != arg_36[0] && arg_23[1] != arg_259[0] && arg_23[1] != arg_254[0] && arg_23[1] == arg_64[1] && arg_23[1] != arg_280[0] && arg_23[1] == arg_307[1] && arg_23[1] == arg_111[1] && arg_23[1] != arg_64[0] && arg_23[1] != arg_74[0] && arg_23[1] == arg_232[1] && arg_23[1] == arg_44[1] && arg_23[1] != arg_240[0] && arg_23[1] != arg_194[0] && arg_23[1] != arg_149[0] && arg_23[1] != arg_53[0] && arg_23[1] == arg_36[1] && arg_23[1] != arg_310[0] && arg_23[1] != arg_33[0] && arg_23[1] == arg_280[1] && arg_23[1] == arg_79[1] && arg_23[1] == arg_191[1] && arg_23[1] == arg_194[1] && arg_23[1] != arg_131[0] && arg_23[1] == arg_222[1] && arg_23[1] != arg_211[0] && arg_23[1] != arg_251[0] && arg_23[1] == arg_202[1] && arg_23[1] != arg_272[0] && arg_23[1] == arg_251[1] && arg_23[1] == arg_318[1] && arg_23[1] == arg_211[1] && arg_23[1] != arg_277[0] && arg_23[1] != arg_82[0] && arg_23[1] != arg_222[0] && arg_23[1] == arg_184[1] && arg_23[1] == arg_310[1] && arg_23[1] == arg_315[1] && arg_23[1] != arg_23[0] && arg_23[1] == arg_41[1] && arg_23[1] == arg_56[1] && arg_23[1] == arg_71[1] && arg_23[1] == arg_157[1] && arg_23[1] != arg_232[0] && arg_23[1] == arg_15[1] && arg_23[1] != arg_262[0] && arg_23[1] != arg_269[0] && arg_23[1] == arg_114[1] && arg_23[1] != arg_56[0] && arg_23[1] != arg_219[0] && arg_23[1] == arg_18[1] && arg_23[1] != arg_93[0] && arg_23[1] != arg_202[0] && arg_23[1] != arg_315[0] && arg_23[1] == arg_240[1] && arg_23[1] == arg_176[1] && arg_23[1] == arg_181[1] && arg_23[1] != arg_114[0] && arg_23[1] != arg_122[0] && arg_23[1] != arg_142[0] && arg_23[1] == arg_142[1] && arg_23[1] != arg_79[0] && arg_23[1] != arg_152[0] && arg_23[1] == arg_173[1] && arg_23[1] != arg_237[0] && arg_23[1] == arg_277[1] && arg_23[1] == arg_139[1] && arg_23[1] == arg_96[1] && arg_23[1] == arg_131[1] && arg_23[1] == arg_229[1] && arg_23[1] != arg_15[0] && arg_23[1] != arg_101[0] && arg_23[1] != arg_184[0] && arg_23[1] == arg_262[1] && arg_23[1] != arg_41[0] && arg_23[1] == arg_93[1] && arg_23[1] != arg_18[0] && arg_23[1] == arg_214[1] && arg_23[1] != arg_119[0] && arg_23[1] != arg_214[0] && arg_23[1] != arg_139[0] && arg_23[1] != arg_307[0] && arg_23[1] == arg_149[1] && arg_23[1] != arg_134[0] && arg_23[1] == arg_219[1] && arg_160[0] == arg_292[0] && arg_160[0] != arg_237[1] && arg_160[0] == arg_181[0] && arg_160[0] == arg_191[0] && arg_160[0] != arg_199[1] && arg_160[0] == arg_71[0] && arg_160[0] != arg_269[1] && arg_160[0] != arg_53[1] && arg_160[0] == arg_157[0] && arg_160[0] != arg_292[1] && arg_160[0] != arg_289[1] && arg_160[0] != arg_300[1] && arg_160[0] == arg_289[0] && arg_160[0] != arg_33[1] && arg_160[0] == arg_111[0] && arg_160[0] != arg_272[1] && arg_160[0] == arg_96[0] && arg_160[0] == arg_36[0] && arg_160[0] == arg_259[0] && arg_160[0] == arg_254[0] && arg_160[0] != arg_64[1] && arg_160[0] == arg_280[0] && arg_160[0] != arg_307[1] && arg_160[0] != arg_111[1] && arg_160[0] == arg_64[0] && arg_160[0] == arg_74[0] && arg_160[0] != arg_232[1] && arg_160[0] != arg_44[1] && arg_160[0] == arg_240[0] && arg_160[0] == arg_194[0] && arg_160[0] == arg_149[0] && arg_160[0] == arg_53[0] && arg_160[0] != arg_36[1] && arg_160[0] == arg_310[0] && arg_160[0] == arg_33[0] && arg_160[0] != arg_280[1] && arg_160[0] != arg_79[1] && arg_160[0] != arg_191[1] && arg_160[0] != arg_194[1] && arg_160[0] == arg_131[0] && arg_160[0] != arg_222[1] && arg_160[0] == arg_211[0] && arg_160[0] == arg_251[0] && arg_160[0] != arg_202[1] && arg_160[0] == arg_272[0] && arg_160[0] != arg_251[1] && arg_160[0] != arg_318[1] && arg_160[0] != arg_211[1] && arg_160[0] == arg_277[0] && arg_160[0] == arg_82[0] && arg_160[0] == arg_222[0] && arg_160[0] != arg_184[1] && arg_160[0] != arg_310[1] && arg_160[0] != arg_315[1] && arg_160[0] == arg_23[0] && arg_160[0] != arg_41[1] && arg_160[0] != arg_56[1] && arg_160[0] != arg_71[1] && arg_160[0] != arg_157[1] && arg_160[0] == arg_232[0] && arg_160[0] != arg_15[1] && arg_160[0] == arg_262[0] && arg_160[0] == arg_269[0] && arg_160[0] != arg_114[1] && arg_160[0] == arg_56[0] && arg_160[0] == arg_219[0] && arg_160[0] != arg_18[1] && arg_160[0] == arg_93[0] && arg_160[0] == arg_202[0] && arg_160[0] == arg_315[0] && arg_160[0] != arg_240[1] && arg_160[0] != arg_176[1] && arg_160[0] != arg_181[1] && arg_160[0] == arg_114[0] && arg_160[0] == arg_122[0] && arg_160[0] == arg_142[0] && arg_160[0] != arg_142[1] && arg_160[0] == arg_79[0] && arg_160[0] == arg_152[0] && arg_160[0] != arg_173[1] && arg_160[0] == arg_237[0] && arg_160[0] != arg_277[1] && arg_160[0] != arg_139[1] && arg_160[0] != arg_96[1] && arg_160[0] != arg_131[1] && arg_160[0] != arg_229[1] && arg_160[0] == arg_15[0] && arg_160[0] == arg_101[0] && arg_160[0] == arg_184[0] && arg_160[0] != arg_262[1] && arg_160[0] == arg_41[0] && arg_160[0] != arg_93[1] && arg_160[0] == arg_18[0] && arg_160[0] != arg_214[1] && arg_160[0] == arg_119[0] && arg_160[0] == arg_214[0] && arg_160[0] == arg_139[0] && arg_160[0] == arg_307[0] && arg_160[0] != arg_149[1] && arg_160[0] == arg_134[0] && arg_160[0] != arg_219[1] && arg_292[0] != arg_237[1] && arg_292[0] == arg_181[0] && arg_292[0] == arg_191[0] && arg_292[0] != arg_199[1] && arg_292[0] == arg_71[0] && arg_292[0] != arg_269[1] && arg_292[0] != arg_53[1] && arg_292[0] == arg_157[0] && arg_292[0] != arg_292[1] && arg_292[0] != arg_289[1] && arg_292[0] != arg_300[1] && arg_292[0] == arg_289[0] && arg_292[0] != arg_33[1] && arg_292[0] == arg_111[0] && arg_292[0] != arg_272[1] && arg_292[0] == arg_96[0] && arg_292[0] == arg_36[0] && arg_292[0] == arg_259[0] && arg_292[0] == arg_254[0] && arg_292[0] != arg_64[1] && arg_292[0] == arg_280[0] && arg_292[0] != arg_307[1] && arg_292[0] != arg_111[1] && arg_292[0] == arg_64[0] && arg_292[0] == arg_74[0] && arg_292[0] != arg_232[1] && arg_292[0] != arg_44[1] && arg_292[0] == arg_240[0] && arg_292[0] == arg_194[0] && arg_292[0] == arg_149[0] && arg_292[0] == arg_53[0] && arg_292[0] != arg_36[1] && arg_292[0] == arg_310[0] && arg_292[0] == arg_33[0] && arg_292[0] != arg_280[1] && arg_292[0] != arg_79[1] && arg_292[0] != arg_191[1] && arg_292[0] != arg_194[1] && arg_292[0] == arg_131[0] && arg_292[0] != arg_222[1] && arg_292[0] == arg_211[0] && arg_292[0] == arg_251[0] && arg_292[0] != arg_202[1] && arg_292[0] == arg_272[0] && arg_292[0] != arg_251[1] && arg_292[0] != arg_318[1] && arg_292[0] != arg_211[1] && arg_292[0] == arg_277[0] && arg_292[0] == arg_82[0] && arg_292[0] == arg_222[0] && arg_292[0] != arg_184[1] && arg_292[0] != arg_310[1] && arg_292[0] != arg_315[1] && arg_292[0] == arg_23[0] && arg_292[0] != arg_41[1] && arg_292[0] != arg_56[1] && arg_292[0] != arg_71[1] && arg_292[0] != arg_157[1] && arg_292[0] == arg_232[0] && arg_292[0] != arg_15[1] && arg_292[0] == arg_262[0] && arg_292[0] == arg_269[0] && arg_292[0] != arg_114[1] && arg_292[0] == arg_56[0] && arg_292[0] == arg_219[0] && arg_292[0] != arg_18[1] && arg_292[0] == arg_93[0] && arg_292[0] == arg_202[0] && arg_292[0] == arg_315[0] && arg_292[0] != arg_240[1] && arg_292[0] != arg_176[1] && arg_292[0] != arg_181[1] && arg_292[0] == arg_114[0] && arg_292[0] == arg_122[0] && arg_292[0] == arg_142[0] && arg_292[0] != arg_142[1] && arg_292[0] == arg_79[0] && arg_292[0] == arg_152[0] && arg_292[0] != arg_173[1] && arg_292[0] == arg_237[0] && arg_292[0] != arg_277[1] && arg_292[0] != arg_139[1] && arg_292[0] != arg_96[1] && arg_292[0] != arg_131[1] && arg_292[0] != arg_229[1] && arg_292[0] == arg_15[0] && arg_292[0] == arg_101[0] && arg_292[0] == arg_184[0] && arg_292[0] != arg_262[1] && arg_292[0] == arg_41[0] && arg_292[0] != arg_93[1] && arg_292[0] == arg_18[0] && arg_292[0] != arg_214[1] && arg_292[0] == arg_119[0] && arg_292[0] == arg_214[0] && arg_292[0] == arg_139[0] && arg_292[0] == arg_307[0] && arg_292[0] != arg_149[1] && arg_292[0] == arg_134[0] && arg_292[0] != arg_219[1] && arg_237[1] != arg_181[0] && arg_237[1] != arg_191[0] && arg_237[1] == arg_199[1] && arg_237[1] != arg_71[0] && arg_237[1] == arg_269[1] && arg_237[1] == arg_53[1] && arg_237[1] != arg_157[0] && arg_237[1] == arg_292[1] && arg_237[1] == arg_289[1] && arg_237[1] == arg_300[1] && arg_237[1] != arg_289[0] && arg_237[1] == arg_33[1] && arg_237[1] != arg_111[0] && arg_237[1] == arg_272[1] && arg_237[1] != arg_96[0] && arg_237[1] != arg_36[0] && arg_237[1] != arg_259[0] && arg_237[1] != arg_254[0] && arg_237[1] == arg_64[1] && arg_237[1] != arg_280[0] && arg_237[1] == arg_307[1] && arg_237[1] == arg_111[1] && arg_237[1] != arg_64[0] && arg_237[1] != arg_74[0] && arg_237[1] == arg_232[1] && arg_237[1] == arg_44[1] && arg_237[1] != arg_240[0] && arg_237[1] != arg_194[0] && arg_237[1] != arg_149[0] && arg_237[1] != arg_53[0] && arg_237[1] == arg_36[1] && arg_237[1] != arg_310[0] && arg_237[1] != arg_33[0] && arg_237[1] == arg_280[1] && arg_237[1] == arg_79[1] && arg_237[1] == arg_191[1] && arg_237[1] == arg_194[1] && arg_237[1] != arg_131[0] && arg_237[1] == arg_222[1] && arg_237[1] != arg_211[0] && arg_237[1] != arg_251[0] && arg_237[1] == arg_202[1] && arg_237[1] != arg_272[0] && arg_237[1] == arg_251[1] && arg_237[1] == arg_318[1] && arg_237[1] == arg_211[1] && arg_237[1] != arg_277[0] && arg_237[1] != arg_82[0] && arg_237[1] != arg_222[0] && arg_237[1] == arg_184[1] && arg_237[1] == arg_310[1] && arg_237[1] == arg_315[1] && arg_237[1] != arg_23[0] && arg_237[1] == arg_41[1] && arg_237[1] == arg_56[1] && arg_237[1] == arg_71[1] && arg_237[1] == arg_157[1] && arg_237[1] != arg_232[0] && arg_237[1] == arg_15[1] && arg_237[1] != arg_262[0] && arg_237[1] != arg_269[0] && arg_237[1] == arg_114[1] && arg_237[1] != arg_56[0] && arg_237[1] != arg_219[0] && arg_237[1] == arg_18[1] && arg_237[1] != arg_93[0] && arg_237[1] != arg_202[0] && arg_237[1] != arg_315[0] && arg_237[1] == arg_240[1] && arg_237[1] == arg_176[1] && arg_237[1] == arg_181[1] && arg_237[1] != arg_114[0] && arg_237[1] != arg_122[0] && arg_237[1] != arg_142[0] && arg_237[1] == arg_142[1] && arg_237[1] != arg_79[0] && arg_237[1] != arg_152[0] && arg_237[1] == arg_173[1] && arg_237[1] != arg_237[0] && arg_237[1] == arg_277[1] && arg_237[1] == arg_139[1] && arg_237[1] == arg_96[1] && arg_237[1] == arg_131[1] && arg_237[1] == arg_229[1] && arg_237[1] != arg_15[0] && arg_237[1] != arg_101[0] && arg_237[1] != arg_184[0] && arg_237[1] == arg_262[1] && arg_237[1] != arg_41[0] && arg_237[1] == arg_93[1] && arg_237[1] != arg_18[0] && arg_237[1] == arg_214[1] && arg_237[1] != arg_119[0] && arg_237[1] != arg_214[0] && arg_237[1] != arg_139[0] && arg_237[1] != arg_307[0] && arg_237[1] == arg_149[1] && arg_237[1] != arg_134[0] && arg_237[1] == arg_219[1] && arg_181[0] == arg_191[0] && arg_181[0] != arg_199[1] && arg_181[0] == arg_71[0] && arg_181[0] != arg_269[1] && arg_181[0] != arg_53[1] && arg_181[0] == arg_157[0] && arg_181[0] != arg_292[1] && arg_181[0] != arg_289[1] && arg_181[0] != arg_300[1] && arg_181[0] == arg_289[0] && arg_181[0] != arg_33[1] && arg_181[0] == arg_111[0] && arg_181[0] != arg_272[1] && arg_181[0] == arg_96[0] && arg_181[0] == arg_36[0] && arg_181[0] == arg_259[0] && arg_181[0] == arg_254[0] && arg_181[0] != arg_64[1] && arg_181[0] == arg_280[0] && arg_181[0] != arg_307[1] && arg_181[0] != arg_111[1] && arg_181[0] == arg_64[0] && arg_181[0] == arg_74[0] && arg_181[0] != arg_232[1] && arg_181[0] != arg_44[1] && arg_181[0] == arg_240[0] && arg_181[0] == arg_194[0] && arg_181[0] == arg_149[0] && arg_181[0] == arg_53[0] && arg_181[0] != arg_36[1] && arg_181[0] == arg_310[0] && arg_181[0] == arg_33[0] && arg_181[0] != arg_280[1] && arg_181[0] != arg_79[1] && arg_181[0] != arg_191[1] && arg_181[0] != arg_194[1] && arg_181[0] == arg_131[0] && arg_181[0] != arg_222[1] && arg_181[0] == arg_211[0] && arg_181[0] == arg_251[0] && arg_181[0] != arg_202[1] && arg_181[0] == arg_272[0] && arg_181[0] != arg_251[1] && arg_181[0] != arg_318[1] && arg_181[0] != arg_211[1] && arg_181[0] == arg_277[0] && arg_181[0] == arg_82[0] && arg_181[0] == arg_222[0] && arg_181[0] != arg_184[1] && arg_181[0] != arg_310[1] && arg_181[0] != arg_315[1] && arg_181[0] == arg_23[0] && arg_181[0] != arg_41[1] && arg_181[0] != arg_56[1] && arg_181[0] != arg_71[1] && arg_181[0] != arg_157[1] && arg_181[0] == arg_232[0] && arg_181[0] != arg_15[1] && arg_181[0] == arg_262[0] && arg_181[0] == arg_269[0] && arg_181[0] != arg_114[1] && arg_181[0] == arg_56[0] && arg_181[0] == arg_219[0] && arg_181[0] != arg_18[1] && arg_181[0] == arg_93[0] && arg_181[0] == arg_202[0] && arg_181[0] == arg_315[0] && arg_181[0] != arg_240[1] && arg_181[0] != arg_176[1] && arg_181[0] != arg_181[1] && arg_181[0] == arg_114[0] && arg_181[0] == arg_122[0] && arg_181[0] == arg_142[0] && arg_181[0] != arg_142[1] && arg_181[0] == arg_79[0] && arg_181[0] == arg_152[0] && arg_181[0] != arg_173[1] && arg_181[0] == arg_237[0] && arg_181[0] != arg_277[1] && arg_181[0] != arg_139[1] && arg_181[0] != arg_96[1] && arg_181[0] != arg_131[1] && arg_181[0] != arg_229[1] && arg_181[0] == arg_15[0] && arg_181[0] == arg_101[0] && arg_181[0] == arg_184[0] && arg_181[0] != arg_262[1] && arg_181[0] == arg_41[0] && arg_181[0] != arg_93[1] && arg_181[0] == arg_18[0] && arg_181[0] != arg_214[1] && arg_181[0] == arg_119[0] && arg_181[0] == arg_214[0] && arg_181[0] == arg_139[0] && arg_181[0] == arg_307[0] && arg_181[0] != arg_149[1] && arg_181[0] == arg_134[0] && arg_181[0] != arg_219[1] && arg_191[0] != arg_199[1] && arg_191[0] == arg_71[0] && arg_191[0] != arg_269[1] && arg_191[0] != arg_53[1] && arg_191[0] == arg_157[0] && arg_191[0] != arg_292[1] && arg_191[0] != arg_289[1] && arg_191[0] != arg_300[1] && arg_191[0] == arg_289[0] && arg_191[0] != arg_33[1] && arg_191[0] == arg_111[0] && arg_191[0] != arg_272[1] && arg_191[0] == arg_96[0] && arg_191[0] == arg_36[0] && arg_191[0] == arg_259[0] && arg_191[0] == arg_254[0] && arg_191[0] != arg_64[1] && arg_191[0] == arg_280[0] && arg_191[0] != arg_307[1] && arg_191[0] != arg_111[1] && arg_191[0] == arg_64[0] && arg_191[0] == arg_74[0] && arg_191[0] != arg_232[1] && arg_191[0] != arg_44[1] && arg_191[0] == arg_240[0] && arg_191[0] == arg_194[0] && arg_191[0] == arg_149[0] && arg_191[0] == arg_53[0] && arg_191[0] != arg_36[1] && arg_191[0] == arg_310[0] && arg_191[0] == arg_33[0] && arg_191[0] != arg_280[1] && arg_191[0] != arg_79[1] && arg_191[0] != arg_191[1] && arg_191[0] != arg_194[1] && arg_191[0] == arg_131[0] && arg_191[0] != arg_222[1] && arg_191[0] == arg_211[0] && arg_191[0] == arg_251[0] && arg_191[0] != arg_202[1] && arg_191[0] == arg_272[0] && arg_191[0] != arg_251[1] && arg_191[0] != arg_318[1] && arg_191[0] != arg_211[1] && arg_191[0] == arg_277[0] && arg_191[0] == arg_82[0] && arg_191[0] == arg_222[0] && arg_191[0] != arg_184[1] && arg_191[0] != arg_310[1] && arg_191[0] != arg_315[1] && arg_191[0] == arg_23[0] && arg_191[0] != arg_41[1] && arg_191[0] != arg_56[1] && arg_191[0] != arg_71[1] && arg_191[0] != arg_157[1] && arg_191[0] == arg_232[0] && arg_191[0] != arg_15[1] && arg_191[0] == arg_262[0] && arg_191[0] == arg_269[0] && arg_191[0] != arg_114[1] && arg_191[0] == arg_56[0] && arg_191[0] == arg_219[0] && arg_191[0] != arg_18[1] && arg_191[0] == arg_93[0] && arg_191[0] == arg_202[0] && arg_191[0] == arg_315[0] && arg_191[0] != arg_240[1] && arg_191[0] != arg_176[1] && arg_191[0] != arg_181[1] && arg_191[0] == arg_114[0] && arg_191[0] == arg_122[0] && arg_191[0] == arg_142[0] && arg_191[0] != arg_142[1] && arg_191[0] == arg_79[0] && arg_191[0] == arg_152[0] && arg_191[0] != arg_173[1] && arg_191[0] == arg_237[0] && arg_191[0] != arg_277[1] && arg_191[0] != arg_139[1] && arg_191[0] != arg_96[1] && arg_191[0] != arg_131[1] && arg_191[0] != arg_229[1] && arg_191[0] == arg_15[0] && arg_191[0] == arg_101[0] && arg_191[0] == arg_184[0] && arg_191[0] != arg_262[1] && arg_191[0] == arg_41[0] && arg_191[0] != arg_93[1] && arg_191[0] == arg_18[0] && arg_191[0] != arg_214[1] && arg_191[0] == arg_119[0] && arg_191[0] == arg_214[0] && arg_191[0] == arg_139[0] && arg_191[0] == arg_307[0] && arg_191[0] != arg_149[1] && arg_191[0] == arg_134[0] && arg_191[0] != arg_219[1] && arg_199[1] != arg_71[0] && arg_199[1] == arg_269[1] && arg_199[1] == arg_53[1] && arg_199[1] != arg_157[0] && arg_199[1] == arg_292[1] && arg_199[1] == arg_289[1] && arg_199[1] == arg_300[1] && arg_199[1] != arg_289[0] && arg_199[1] == arg_33[1] && arg_199[1] != arg_111[0] && arg_199[1] == arg_272[1] && arg_199[1] != arg_96[0] && arg_199[1] != arg_36[0] && arg_199[1] != arg_259[0] && arg_199[1] != arg_254[0] && arg_199[1] == arg_64[1] && arg_199[1] != arg_280[0] && arg_199[1] == arg_307[1] && arg_199[1] == arg_111[1] && arg_199[1] != arg_64[0] && arg_199[1] != arg_74[0] && arg_199[1] == arg_232[1] && arg_199[1] == arg_44[1] && arg_199[1] != arg_240[0] && arg_199[1] != arg_194[0] && arg_199[1] != arg_149[0] && arg_199[1] != arg_53[0] && arg_199[1] == arg_36[1] && arg_199[1] != arg_310[0] && arg_199[1] != arg_33[0] && arg_199[1] == arg_280[1] && arg_199[1] == arg_79[1] && arg_199[1] == arg_191[1] && arg_199[1] == arg_194[1] && arg_199[1] != arg_131[0] && arg_199[1] == arg_222[1] && arg_199[1] != arg_211[0] && arg_199[1] != arg_251[0] && arg_199[1] == arg_202[1] && arg_199[1] != arg_272[0] && arg_199[1] == arg_251[1] && arg_199[1] == arg_318[1] && arg_199[1] == arg_211[1] && arg_199[1] != arg_277[0] && arg_199[1] != arg_82[0] && arg_199[1] != arg_222[0] && arg_199[1] == arg_184[1] && arg_199[1] == arg_310[1] && arg_199[1] == arg_315[1] && arg_199[1] != arg_23[0] && arg_199[1] == arg_41[1] && arg_199[1] == arg_56[1] && arg_199[1] == arg_71[1] && arg_199[1] == arg_157[1] && arg_199[1] != arg_232[0] && arg_199[1] == arg_15[1] && arg_199[1] != arg_262[0] && arg_199[1] != arg_269[0] && arg_199[1] == arg_114[1] && arg_199[1] != arg_56[0] && arg_199[1] != arg_219[0] && arg_199[1] == arg_18[1] && arg_199[1] != arg_93[0] && arg_199[1] != arg_202[0] && arg_199[1] != arg_315[0] && arg_199[1] == arg_240[1] && arg_199[1] == arg_176[1] && arg_199[1] == arg_181[1] && arg_199[1] != arg_114[0] && arg_199[1] != arg_122[0] && arg_199[1] != arg_142[0] && arg_199[1] == arg_142[1] && arg_199[1] != arg_79[0] && arg_199[1] != arg_152[0] && arg_199[1] == arg_173[1] && arg_199[1] != arg_237[0] && arg_199[1] == arg_277[1] && arg_199[1] == arg_139[1] && arg_199[1] == arg_96[1] && arg_199[1] == arg_131[1] && arg_199[1] == arg_229[1] && arg_199[1] != arg_15[0] && arg_199[1] != arg_101[0] && arg_199[1] != arg_184[0] && arg_199[1] == arg_262[1] && arg_199[1] != arg_41[0] && arg_199[1] == arg_93[1] && arg_199[1] != arg_18[0] && arg_199[1] == arg_214[1] && arg_199[1] != arg_119[0] && arg_199[1] != arg_214[0] && arg_199[1] != arg_139[0] && arg_199[1] != arg_307[0] && arg_199[1] == arg_149[1] && arg_199[1] != arg_134[0] && arg_199[1] == arg_219[1] && arg_71[0] != arg_269[1] && arg_71[0] != arg_53[1] && arg_71[0] == arg_157[0] && arg_71[0] != arg_292[1] && arg_71[0] != arg_289[1] && arg_71[0] != arg_300[1] && arg_71[0] == arg_289[0] && arg_71[0] != arg_33[1] && arg_71[0] == arg_111[0] && arg_71[0] != arg_272[1] && arg_71[0] == arg_96[0] && arg_71[0] == arg_36[0] && arg_71[0] == arg_259[0] && arg_71[0] == arg_254[0] && arg_71[0] != arg_64[1] && arg_71[0] == arg_280[0] && arg_71[0] != arg_307[1] && arg_71[0] != arg_111[1] && arg_71[0] == arg_64[0] && arg_71[0] == arg_74[0] && arg_71[0] != arg_232[1] && arg_71[0] != arg_44[1] && arg_71[0] == arg_240[0] && arg_71[0] == arg_194[0] && arg_71[0] == arg_149[0] && arg_71[0] == arg_53[0] && arg_71[0] != arg_36[1] && arg_71[0] == arg_310[0] && arg_71[0] == arg_33[0] && arg_71[0] != arg_280[1] && arg_71[0] != arg_79[1] && arg_71[0] != arg_191[1] && arg_71[0] != arg_194[1] && arg_71[0] == arg_131[0] && arg_71[0] != arg_222[1] && arg_71[0] == arg_211[0] && arg_71[0] == arg_251[0] && arg_71[0] != arg_202[1] && arg_71[0] == arg_272[0] && arg_71[0] != arg_251[1] && arg_71[0] != arg_318[1] && arg_71[0] != arg_211[1] && arg_71[0] == arg_277[0] && arg_71[0] == arg_82[0] && arg_71[0] == arg_222[0] && arg_71[0] != arg_184[1] && arg_71[0] != arg_310[1] && arg_71[0] != arg_315[1] && arg_71[0] == arg_23[0] && arg_71[0] != arg_41[1] && arg_71[0] != arg_56[1] && arg_71[0] != arg_71[1] && arg_71[0] != arg_157[1] && arg_71[0] == arg_232[0] && arg_71[0] != arg_15[1] && arg_71[0] == arg_262[0] && arg_71[0] == arg_269[0] && arg_71[0] != arg_114[1] && arg_71[0] == arg_56[0] && arg_71[0] == arg_219[0] && arg_71[0] != arg_18[1] && arg_71[0] == arg_93[0] && arg_71[0] == arg_202[0] && arg_71[0] == arg_315[0] && arg_71[0] != arg_240[1] && arg_71[0] != arg_176[1] && arg_71[0] != arg_181[1] && arg_71[0] == arg_114[0] && arg_71[0] == arg_122[0] && arg_71[0] == arg_142[0] && arg_71[0] != arg_142[1] && arg_71[0] == arg_79[0] && arg_71[0] == arg_152[0] && arg_71[0] != arg_173[1] && arg_71[0] == arg_237[0] && arg_71[0] != arg_277[1] && arg_71[0] != arg_139[1] && arg_71[0] != arg_96[1] && arg_71[0] != arg_131[1] && arg_71[0] != arg_229[1] && arg_71[0] == arg_15[0] && arg_71[0] == arg_101[0] && arg_71[0] == arg_184[0] && arg_71[0] != arg_262[1] && arg_71[0] == arg_41[0] && arg_71[0] != arg_93[1] && arg_71[0] == arg_18[0] && arg_71[0] != arg_214[1] && arg_71[0] == arg_119[0] && arg_71[0] == arg_214[0] && arg_71[0] == arg_139[0] && arg_71[0] == arg_307[0] && arg_71[0] != arg_149[1] && arg_71[0] == arg_134[0] && arg_71[0] != arg_219[1] && arg_269[1] == arg_53[1] && arg_269[1] != arg_157[0] && arg_269[1] == arg_292[1] && arg_269[1] == arg_289[1] && arg_269[1] == arg_300[1] && arg_269[1] != arg_289[0] && arg_269[1] == arg_33[1] && arg_269[1] != arg_111[0] && arg_269[1] == arg_272[1] && arg_269[1] != arg_96[0] && arg_269[1] != arg_36[0] && arg_269[1] != arg_259[0] && arg_269[1] != arg_254[0] && arg_269[1] == arg_64[1] && arg_269[1] != arg_280[0] && arg_269[1] == arg_307[1] && arg_269[1] == arg_111[1] && arg_269[1] != arg_64[0] && arg_269[1] != arg_74[0] && arg_269[1] == arg_232[1] && arg_269[1] == arg_44[1] && arg_269[1] != arg_240[0] && arg_269[1] != arg_194[0] && arg_269[1] != arg_149[0] && arg_269[1] != arg_53[0] && arg_269[1] == arg_36[1] && arg_269[1] != arg_310[0] && arg_269[1] != arg_33[0] && arg_269[1] == arg_280[1] && arg_269[1] == arg_79[1] && arg_269[1] == arg_191[1] && arg_269[1] == arg_194[1] && arg_269[1] != arg_131[0] && arg_269[1] == arg_222[1] && arg_269[1] != arg_211[0] && arg_269[1] != arg_251[0] && arg_269[1] == arg_202[1] && arg_269[1] != arg_272[0] && arg_269[1] == arg_251[1] && arg_269[1] == arg_318[1] && arg_269[1] == arg_211[1] && arg_269[1] != arg_277[0] && arg_269[1] != arg_82[0] && arg_269[1] != arg_222[0] && arg_269[1] == arg_184[1] && arg_269[1] == arg_310[1] && arg_269[1] == arg_315[1] && arg_269[1] != arg_23[0] && arg_269[1] == arg_41[1] && arg_269[1] == arg_56[1] && arg_269[1] == arg_71[1] && arg_269[1] == arg_157[1] && arg_269[1] != arg_232[0] && arg_269[1] == arg_15[1] && arg_269[1] != arg_262[0] && arg_269[1] != arg_269[0] && arg_269[1] == arg_114[1] && arg_269[1] != arg_56[0] && arg_269[1] != arg_219[0] && arg_269[1] == arg_18[1] && arg_269[1] != arg_93[0] && arg_269[1] != arg_202[0] && arg_269[1] != arg_315[0] && arg_269[1] == arg_240[1] && arg_269[1] == arg_176[1] && arg_269[1] == arg_181[1] && arg_269[1] != arg_114[0] && arg_269[1] != arg_122[0] && arg_269[1] != arg_142[0] && arg_269[1] == arg_142[1] && arg_269[1] != arg_79[0] && arg_269[1] != arg_152[0] && arg_269[1] == arg_173[1] && arg_269[1] != arg_237[0] && arg_269[1] == arg_277[1] && arg_269[1] == arg_139[1] && arg_269[1] == arg_96[1] && arg_269[1] == arg_131[1] && arg_269[1] == arg_229[1] && arg_269[1] != arg_15[0] && arg_269[1] != arg_101[0] && arg_269[1] != arg_184[0] && arg_269[1] == arg_262[1] && arg_269[1] != arg_41[0] && arg_269[1] == arg_93[1] && arg_269[1] != arg_18[0] && arg_269[1] == arg_214[1] && arg_269[1] != arg_119[0] && arg_269[1] != arg_214[0] && arg_269[1] != arg_139[0] && arg_269[1] != arg_307[0] && arg_269[1] == arg_149[1] && arg_269[1] != arg_134[0] && arg_269[1] == arg_219[1] && arg_53[1] != arg_157[0] && arg_53[1] == arg_292[1] && arg_53[1] == arg_289[1] && arg_53[1] == arg_300[1] && arg_53[1] != arg_289[0] && arg_53[1] == arg_33[1] && arg_53[1] != arg_111[0] && arg_53[1] == arg_272[1] && arg_53[1] != arg_96[0] && arg_53[1] != arg_36[0] && arg_53[1] != arg_259[0] && arg_53[1] != arg_254[0] && arg_53[1] == arg_64[1] && arg_53[1] != arg_280[0] && arg_53[1] == arg_307[1] && arg_53[1] == arg_111[1] && arg_53[1] != arg_64[0] && arg_53[1] != arg_74[0] && arg_53[1] == arg_232[1] && arg_53[1] == arg_44[1] && arg_53[1] != arg_240[0] && arg_53[1] != arg_194[0] && arg_53[1] != arg_149[0] && arg_53[1] != arg_53[0] && arg_53[1] == arg_36[1] && arg_53[1] != arg_310[0] && arg_53[1] != arg_33[0] && arg_53[1] == arg_280[1] && arg_53[1] == arg_79[1] && arg_53[1] == arg_191[1] && arg_53[1] == arg_194[1] && arg_53[1] != arg_131[0] && arg_53[1] == arg_222[1] && arg_53[1] != arg_211[0] && arg_53[1] != arg_251[0] && arg_53[1] == arg_202[1] && arg_53[1] != arg_272[0] && arg_53[1] == arg_251[1] && arg_53[1] == arg_318[1] && arg_53[1] == arg_211[1] && arg_53[1] != arg_277[0] && arg_53[1] != arg_82[0] && arg_53[1] != arg_222[0] && arg_53[1] == arg_184[1] && arg_53[1] == arg_310[1] && arg_53[1] == arg_315[1] && arg_53[1] != arg_23[0] && arg_53[1] == arg_41[1] && arg_53[1] == arg_56[1] && arg_53[1] == arg_71[1] && arg_53[1] == arg_157[1] && arg_53[1] != arg_232[0] && arg_53[1] == arg_15[1] && arg_53[1] != arg_262[0] && arg_53[1] != arg_269[0] && arg_53[1] == arg_114[1] && arg_53[1] != arg_56[0] && arg_53[1] != arg_219[0] && arg_53[1] == arg_18[1] && arg_53[1] != arg_93[0] && arg_53[1] != arg_202[0] && arg_53[1] != arg_315[0] && arg_53[1] == arg_240[1] && arg_53[1] == arg_176[1] && arg_53[1] == arg_181[1] && arg_53[1] != arg_114[0] && arg_53[1] != arg_122[0] && arg_53[1] != arg_142[0] && arg_53[1] == arg_142[1] && arg_53[1] != arg_79[0] && arg_53[1] != arg_152[0] && arg_53[1] == arg_173[1] && arg_53[1] != arg_237[0] && arg_53[1] == arg_277[1] && arg_53[1] == arg_139[1] && arg_53[1] == arg_96[1] && arg_53[1] == arg_131[1] && arg_53[1] == arg_229[1] && arg_53[1] != arg_15[0] && arg_53[1] != arg_101[0] && arg_53[1] != arg_184[0] && arg_53[1] == arg_262[1] && arg_53[1] != arg_41[0] && arg_53[1] == arg_93[1] && arg_53[1] != arg_18[0] && arg_53[1] == arg_214[1] && arg_53[1] != arg_119[0] && arg_53[1] != arg_214[0] && arg_53[1] != arg_139[0] && arg_53[1] != arg_307[0] && arg_53[1] == arg_149[1] && arg_53[1] != arg_134[0] && arg_53[1] == arg_219[1] && arg_157[0] != arg_292[1] && arg_157[0] != arg_289[1] && arg_157[0] != arg_300[1] && arg_157[0] == arg_289[0] && arg_157[0] != arg_33[1] && arg_157[0] == arg_111[0] && arg_157[0] != arg_272[1] && arg_157[0] == arg_96[0] && arg_157[0] == arg_36[0] && arg_157[0] == arg_259[0] && arg_157[0] == arg_254[0] && arg_157[0] != arg_64[1] && arg_157[0] == arg_280[0] && arg_157[0] != arg_307[1] && arg_157[0] != arg_111[1] && arg_157[0] == arg_64[0] && arg_157[0] == arg_74[0] && arg_157[0] != arg_232[1] && arg_157[0] != arg_44[1] && arg_157[0] == arg_240[0] && arg_157[0] == arg_194[0] && arg_157[0] == arg_149[0] && arg_157[0] == arg_53[0] && arg_157[0] != arg_36[1] && arg_157[0] == arg_310[0] && arg_157[0] == arg_33[0] && arg_157[0] != arg_280[1] && arg_157[0] != arg_79[1] && arg_157[0] != arg_191[1] && arg_157[0] != arg_194[1] && arg_157[0] == arg_131[0] && arg_157[0] != arg_222[1] && arg_157[0] == arg_211[0] && arg_157[0] == arg_251[0] && arg_157[0] != arg_202[1] && arg_157[0] == arg_272[0] && arg_157[0] != arg_251[1] && arg_157[0] != arg_318[1] && arg_157[0] != arg_211[1] && arg_157[0] == arg_277[0] && arg_157[0] == arg_82[0] && arg_157[0] == arg_222[0] && arg_157[0] != arg_184[1] && arg_157[0] != arg_310[1] && arg_157[0] != arg_315[1] && arg_157[0] == arg_23[0] && arg_157[0] != arg_41[1] && arg_157[0] != arg_56[1] && arg_157[0] != arg_71[1] && arg_157[0] != arg_157[1] && arg_157[0] == arg_232[0] && arg_157[0] != arg_15[1] && arg_157[0] == arg_262[0] && arg_157[0] == arg_269[0] && arg_157[0] != arg_114[1] && arg_157[0] == arg_56[0] && arg_157[0] == arg_219[0] && arg_157[0] != arg_18[1] && arg_157[0] == arg_93[0] && arg_157[0] == arg_202[0] && arg_157[0] == arg_315[0] && arg_157[0] != arg_240[1] && arg_157[0] != arg_176[1] && arg_157[0] != arg_181[1] && arg_157[0] == arg_114[0] && arg_157[0] == arg_122[0] && arg_157[0] == arg_142[0] && arg_157[0] != arg_142[1] && arg_157[0] == arg_79[0] && arg_157[0] == arg_152[0] && arg_157[0] != arg_173[1] && arg_157[0] == arg_237[0] && arg_157[0] != arg_277[1] && arg_157[0] != arg_139[1] && arg_157[0] != arg_96[1] && arg_157[0] != arg_131[1] && arg_157[0] != arg_229[1] && arg_157[0] == arg_15[0] && arg_157[0] == arg_101[0] && arg_157[0] == arg_184[0] && arg_157[0] != arg_262[1] && arg_157[0] == arg_41[0] && arg_157[0] != arg_93[1] && arg_157[0] == arg_18[0] && arg_157[0] != arg_214[1] && arg_157[0] == arg_119[0] && arg_157[0] == arg_214[0] && arg_157[0] == arg_139[0] && arg_157[0] == arg_307[0] && arg_157[0] != arg_149[1] && arg_157[0] == arg_134[0] && arg_157[0] != arg_219[1] && arg_292[1] == arg_289[1] && arg_292[1] == arg_300[1] && arg_292[1] != arg_289[0] && arg_292[1] == arg_33[1] && arg_292[1] != arg_111[0] && arg_292[1] == arg_272[1] && arg_292[1] != arg_96[0] && arg_292[1] != arg_36[0] && arg_292[1] != arg_259[0] && arg_292[1] != arg_254[0] && arg_292[1] == arg_64[1] && arg_292[1] != arg_280[0] && arg_292[1] == arg_307[1] && arg_292[1] == arg_111[1] && arg_292[1] != arg_64[0] && arg_292[1] != arg_74[0] && arg_292[1] == arg_232[1] && arg_292[1] == arg_44[1] && arg_292[1] != arg_240[0] && arg_292[1] != arg_194[0] && arg_292[1] != arg_149[0] && arg_292[1] != arg_53[0] && arg_292[1] == arg_36[1] && arg_292[1] != arg_310[0] && arg_292[1] != arg_33[0] && arg_292[1] == arg_280[1] && arg_292[1] == arg_79[1] && arg_292[1] == arg_191[1] && arg_292[1] == arg_194[1] && arg_292[1] != arg_131[0] && arg_292[1] == arg_222[1] && arg_292[1] != arg_211[0] && arg_292[1] != arg_251[0] && arg_292[1] == arg_202[1] && arg_292[1] != arg_272[0] && arg_292[1] == arg_251[1] && arg_292[1] == arg_318[1] && arg_292[1] == arg_211[1] && arg_292[1] != arg_277[0] && arg_292[1] != arg_82[0] && arg_292[1] != arg_222[0] && arg_292[1] == arg_184[1] && arg_292[1] == arg_310[1] && arg_292[1] == arg_315[1] && arg_292[1] != arg_23[0] && arg_292[1] == arg_41[1] && arg_292[1] == arg_56[1] && arg_292[1] == arg_71[1] && arg_292[1] == arg_157[1] && arg_292[1] != arg_232[0] && arg_292[1] == arg_15[1] && arg_292[1] != arg_262[0] && arg_292[1] != arg_269[0] && arg_292[1] == arg_114[1] && arg_292[1] != arg_56[0] && arg_292[1] != arg_219[0] && arg_292[1] == arg_18[1] && arg_292[1] != arg_93[0] && arg_292[1] != arg_202[0] && arg_292[1] != arg_315[0] && arg_292[1] == arg_240[1] && arg_292[1] == arg_176[1] && arg_292[1] == arg_181[1] && arg_292[1] != arg_114[0] && arg_292[1] != arg_122[0] && arg_292[1] != arg_142[0] && arg_292[1] == arg_142[1] && arg_292[1] != arg_79[0] && arg_292[1] != arg_152[0] && arg_292[1] == arg_173[1] && arg_292[1] != arg_237[0] && arg_292[1] == arg_277[1] && arg_292[1] == arg_139[1] && arg_292[1] == arg_96[1] && arg_292[1] == arg_131[1] && arg_292[1] == arg_229[1] && arg_292[1] != arg_15[0] && arg_292[1] != arg_101[0] && arg_292[1] != arg_184[0] && arg_292[1] == arg_262[1] && arg_292[1] != arg_41[0] && arg_292[1] == arg_93[1] && arg_292[1] != arg_18[0] && arg_292[1] == arg_214[1] && arg_292[1] != arg_119[0] && arg_292[1] != arg_214[0] && arg_292[1] != arg_139[0] && arg_292[1] != arg_307[0] && arg_292[1] == arg_149[1] && arg_292[1] != arg_134[0] && arg_292[1] == arg_219[1] && arg_289[1] == arg_300[1] && arg_289[1] != arg_289[0] && arg_289[1] == arg_33[1] && arg_289[1] != arg_111[0] && arg_289[1] == arg_272[1] && arg_289[1] != arg_96[0] && arg_289[1] != arg_36[0] && arg_289[1] != arg_259[0] && arg_289[1] != arg_254[0] && arg_289[1] == arg_64[1] && arg_289[1] != arg_280[0] && arg_289[1] == arg_307[1] && arg_289[1] == arg_111[1] && arg_289[1] != arg_64[0] && arg_289[1] != arg_74[0] && arg_289[1] == arg_232[1] && arg_289[1] == arg_44[1] && arg_289[1] != arg_240[0] && arg_289[1] != arg_194[0] && arg_289[1] != arg_149[0] && arg_289[1] != arg_53[0] && arg_289[1] == arg_36[1] && arg_289[1] != arg_310[0] && arg_289[1] != arg_33[0] && arg_289[1] == arg_280[1] && arg_289[1] == arg_79[1] && arg_289[1] == arg_191[1] && arg_289[1] == arg_194[1] && arg_289[1] != arg_131[0] && arg_289[1] == arg_222[1] && arg_289[1] != arg_211[0] && arg_289[1] != arg_251[0] && arg_289[1] == arg_202[1] && arg_289[1] != arg_272[0] && arg_289[1] == arg_251[1] && arg_289[1] == arg_318[1] && arg_289[1] == arg_211[1] && arg_289[1] != arg_277[0] && arg_289[1] != arg_82[0] && arg_289[1] != arg_222[0] && arg_289[1] == arg_184[1] && arg_289[1] == arg_310[1] && arg_289[1] == arg_315[1] && arg_289[1] != arg_23[0] && arg_289[1] == arg_41[1] && arg_289[1] == arg_56[1] && arg_289[1] == arg_71[1] && arg_289[1] == arg_157[1] && arg_289[1] != arg_232[0] && arg_289[1] == arg_15[1] && arg_289[1] != arg_262[0] && arg_289[1] != arg_269[0] && arg_289[1] == arg_114[1] && arg_289[1] != arg_56[0] && arg_289[1] != arg_219[0] && arg_289[1] == arg_18[1] && arg_289[1] != arg_93[0] && arg_289[1] != arg_202[0] && arg_289[1] != arg_315[0] && arg_289[1] == arg_240[1] && arg_289[1] == arg_176[1] && arg_289[1] == arg_181[1] && arg_289[1] != arg_114[0] && arg_289[1] != arg_122[0] && arg_289[1] != arg_142[0] && arg_289[1] == arg_142[1] && arg_289[1] != arg_79[0] && arg_289[1] != arg_152[0] && arg_289[1] == arg_173[1] && arg_289[1] != arg_237[0] && arg_289[1] == arg_277[1] && arg_289[1] == arg_139[1] && arg_289[1] == arg_96[1] && arg_289[1] == arg_131[1] && arg_289[1] == arg_229[1] && arg_289[1] != arg_15[0] && arg_289[1] != arg_101[0] && arg_289[1] != arg_184[0] && arg_289[1] == arg_262[1] && arg_289[1] != arg_41[0] && arg_289[1] == arg_93[1] && arg_289[1] != arg_18[0] && arg_289[1] == arg_214[1] && arg_289[1] != arg_119[0] && arg_289[1] != arg_214[0] && arg_289[1] != arg_139[0] && arg_289[1] != arg_307[0] && arg_289[1] == arg_149[1] && arg_289[1] != arg_134[0] && arg_289[1] == arg_219[1] && arg_300[1] != arg_289[0] && arg_300[1] == arg_33[1] && arg_300[1] != arg_111[0] && arg_300[1] == arg_272[1] && arg_300[1] != arg_96[0] && arg_300[1] != arg_36[0] && arg_300[1] != arg_259[0] && arg_300[1] != arg_254[0] && arg_300[1] == arg_64[1] && arg_300[1] != arg_280[0] && arg_300[1] == arg_307[1] && arg_300[1] == arg_111[1] && arg_300[1] != arg_64[0] && arg_300[1] != arg_74[0] && arg_300[1] == arg_232[1] && arg_300[1] == arg_44[1] && arg_300[1] != arg_240[0] && arg_300[1] != arg_194[0] && arg_300[1] != arg_149[0] && arg_300[1] != arg_53[0] && arg_300[1] == arg_36[1] && arg_300[1] != arg_310[0] && arg_300[1] != arg_33[0] && arg_300[1] == arg_280[1] && arg_300[1] == arg_79[1] && arg_300[1] == arg_191[1] && arg_300[1] == arg_194[1] && arg_300[1] != arg_131[0] && arg_300[1] == arg_222[1] && arg_300[1] != arg_211[0] && arg_300[1] != arg_251[0] && arg_300[1] == arg_202[1] && arg_300[1] != arg_272[0] && arg_300[1] == arg_251[1] && arg_300[1] == arg_318[1] && arg_300[1] == arg_211[1] && arg_300[1] != arg_277[0] && arg_300[1] != arg_82[0] && arg_300[1] != arg_222[0] && arg_300[1] == arg_184[1] && arg_300[1] == arg_310[1] && arg_300[1] == arg_315[1] && arg_300[1] != arg_23[0] && arg_300[1] == arg_41[1] && arg_300[1] == arg_56[1] && arg_300[1] == arg_71[1] && arg_300[1] == arg_157[1] && arg_300[1] != arg_232[0] && arg_300[1] == arg_15[1] && arg_300[1] != arg_262[0] && arg_300[1] != arg_269[0] && arg_300[1] == arg_114[1] && arg_300[1] != arg_56[0] && arg_300[1] != arg_219[0] && arg_300[1] == arg_18[1] && arg_300[1] != arg_93[0] && arg_300[1] != arg_202[0] && arg_300[1] != arg_315[0] && arg_300[1] == arg_240[1] && arg_300[1] == arg_176[1] && arg_300[1] == arg_181[1] && arg_300[1] != arg_114[0] && arg_300[1] != arg_122[0] && arg_300[1] != arg_142[0] && arg_300[1] == arg_142[1] && arg_300[1] != arg_79[0] && arg_300[1] != arg_152[0] && arg_300[1] == arg_173[1] && arg_300[1] != arg_237[0] && arg_300[1] == arg_277[1] && arg_300[1] == arg_139[1] && arg_300[1] == arg_96[1] && arg_300[1] == arg_131[1] && arg_300[1] == arg_229[1] && arg_300[1] != arg_15[0] && arg_300[1] != arg_101[0] && arg_300[1] != arg_184[0] && arg_300[1] == arg_262[1] && arg_300[1] != arg_41[0] && arg_300[1] == arg_93[1] && arg_300[1] != arg_18[0] && arg_300[1] == arg_214[1] && arg_300[1] != arg_119[0] && arg_300[1] != arg_214[0] && arg_300[1] != arg_139[0] && arg_300[1] != arg_307[0] && arg_300[1] == arg_149[1] && arg_300[1] != arg_134[0] && arg_300[1] == arg_219[1] && arg_289[0] != arg_33[1] && arg_289[0] == arg_111[0] && arg_289[0] != arg_272[1] && arg_289[0] == arg_96[0] && arg_289[0] == arg_36[0] && arg_289[0] == arg_259[0] && arg_289[0] == arg_254[0] && arg_289[0] != arg_64[1] && arg_289[0] == arg_280[0] && arg_289[0] != arg_307[1] && arg_289[0] != arg_111[1] && arg_289[0] == arg_64[0] && arg_289[0] == arg_74[0] && arg_289[0] != arg_232[1] && arg_289[0] != arg_44[1] && arg_289[0] == arg_240[0] && arg_289[0] == arg_194[0] && arg_289[0] == arg_149[0] && arg_289[0] == arg_53[0] && arg_289[0] != arg_36[1] && arg_289[0] == arg_310[0] && arg_289[0] == arg_33[0] && arg_289[0] != arg_280[1] && arg_289[0] != arg_79[1] && arg_289[0] != arg_191[1] && arg_289[0] != arg_194[1] && arg_289[0] == arg_131[0] && arg_289[0] != arg_222[1] && arg_289[0] == arg_211[0] && arg_289[0] == arg_251[0] && arg_289[0] != arg_202[1] && arg_289[0] == arg_272[0] && arg_289[0] != arg_251[1] && arg_289[0] != arg_318[1] && arg_289[0] != arg_211[1] && arg_289[0] == arg_277[0] && arg_289[0] == arg_82[0] && arg_289[0] == arg_222[0] && arg_289[0] != arg_184[1] && arg_289[0] != arg_310[1] && arg_289[0] != arg_315[1] && arg_289[0] == arg_23[0] && arg_289[0] != arg_41[1] && arg_289[0] != arg_56[1] && arg_289[0] != arg_71[1] && arg_289[0] != arg_157[1] && arg_289[0] == arg_232[0] && arg_289[0] != arg_15[1] && arg_289[0] == arg_262[0] && arg_289[0] == arg_269[0] && arg_289[0] != arg_114[1] && arg_289[0] == arg_56[0] && arg_289[0] == arg_219[0] && arg_289[0] != arg_18[1] && arg_289[0] == arg_93[0] && arg_289[0] == arg_202[0] && arg_289[0] == arg_315[0] && arg_289[0] != arg_240[1] && arg_289[0] != arg_176[1] && arg_289[0] != arg_181[1] && arg_289[0] == arg_114[0] && arg_289[0] == arg_122[0] && arg_289[0] == arg_142[0] && arg_289[0] != arg_142[1] && arg_289[0] == arg_79[0] && arg_289[0] == arg_152[0] && arg_289[0] != arg_173[1] && arg_289[0] == arg_237[0] && arg_289[0] != arg_277[1] && arg_289[0] != arg_139[1] && arg_289[0] != arg_96[1] && arg_289[0] != arg_131[1] && arg_289[0] != arg_229[1] && arg_289[0] == arg_15[0] && arg_289[0] == arg_101[0] && arg_289[0] == arg_184[0] && arg_289[0] != arg_262[1] && arg_289[0] == arg_41[0] && arg_289[0] != arg_93[1] && arg_289[0] == arg_18[0] && arg_289[0] != arg_214[1] && arg_289[0] == arg_119[0] && arg_289[0] == arg_214[0] && arg_289[0] == arg_139[0] && arg_289[0] == arg_307[0] && arg_289[0] != arg_149[1] && arg_289[0] == arg_134[0] && arg_289[0] != arg_219[1] && arg_33[1] != arg_111[0] && arg_33[1] == arg_272[1] && arg_33[1] != arg_96[0] && arg_33[1] != arg_36[0] && arg_33[1] != arg_259[0] && arg_33[1] != arg_254[0] && arg_33[1] == arg_64[1] && arg_33[1] != arg_280[0] && arg_33[1] == arg_307[1] && arg_33[1] == arg_111[1] && arg_33[1] != arg_64[0] && arg_33[1] != arg_74[0] && arg_33[1] == arg_232[1] && arg_33[1] == arg_44[1] && arg_33[1] != arg_240[0] && arg_33[1] != arg_194[0] && arg_33[1] != arg_149[0] && arg_33[1] != arg_53[0] && arg_33[1] == arg_36[1] && arg_33[1] != arg_310[0] && arg_33[1] != arg_33[0] && arg_33[1] == arg_280[1] && arg_33[1] == arg_79[1] && arg_33[1] == arg_191[1] && arg_33[1] == arg_194[1] && arg_33[1] != arg_131[0] && arg_33[1] == arg_222[1] && arg_33[1] != arg_211[0] && arg_33[1] != arg_251[0] && arg_33[1] == arg_202[1] && arg_33[1] != arg_272[0] && arg_33[1] == arg_251[1] && arg_33[1] == arg_318[1] && arg_33[1] == arg_211[1] && arg_33[1] != arg_277[0] && arg_33[1] != arg_82[0] && arg_33[1] != arg_222[0] && arg_33[1] == arg_184[1] && arg_33[1] == arg_310[1] && arg_33[1] == arg_315[1] && arg_33[1] != arg_23[0] && arg_33[1] == arg_41[1] && arg_33[1] == arg_56[1] && arg_33[1] == arg_71[1] && arg_33[1] == arg_157[1] && arg_33[1] != arg_232[0] && arg_33[1] == arg_15[1] && arg_33[1] != arg_262[0] && arg_33[1] != arg_269[0] && arg_33[1] == arg_114[1] && arg_33[1] != arg_56[0] && arg_33[1] != arg_219[0] && arg_33[1] == arg_18[1] && arg_33[1] != arg_93[0] && arg_33[1] != arg_202[0] && arg_33[1] != arg_315[0] && arg_33[1] == arg_240[1] && arg_33[1] == arg_176[1] && arg_33[1] == arg_181[1] && arg_33[1] != arg_114[0] && arg_33[1] != arg_122[0] && arg_33[1] != arg_142[0] && arg_33[1] == arg_142[1] && arg_33[1] != arg_79[0] && arg_33[1] != arg_152[0] && arg_33[1] == arg_173[1] && arg_33[1] != arg_237[0] && arg_33[1] == arg_277[1] && arg_33[1] == arg_139[1] && arg_33[1] == arg_96[1] && arg_33[1] == arg_131[1] && arg_33[1] == arg_229[1] && arg_33[1] != arg_15[0] && arg_33[1] != arg_101[0] && arg_33[1] != arg_184[0] && arg_33[1] == arg_262[1] && arg_33[1] != arg_41[0] && arg_33[1] == arg_93[1] && arg_33[1] != arg_18[0] && arg_33[1] == arg_214[1] && arg_33[1] != arg_119[0] && arg_33[1] != arg_214[0] && arg_33[1] != arg_139[0] && arg_33[1] != arg_307[0] && arg_33[1] == arg_149[1] && arg_33[1] != arg_134[0] && arg_33[1] == arg_219[1] && arg_111[0] != arg_272[1] && arg_111[0] == arg_96[0] && arg_111[0] == arg_36[0] && arg_111[0] == arg_259[0] && arg_111[0] == arg_254[0] && arg_111[0] != arg_64[1] && arg_111[0] == arg_280[0] && arg_111[0] != arg_307[1] && arg_111[0] != arg_111[1] && arg_111[0] == arg_64[0] && arg_111[0] == arg_74[0] && arg_111[0] != arg_232[1] && arg_111[0] != arg_44[1] && arg_111[0] == arg_240[0] && arg_111[0] == arg_194[0] && arg_111[0] == arg_149[0] && arg_111[0] == arg_53[0] && arg_111[0] != arg_36[1] && arg_111[0] == arg_310[0] && arg_111[0] == arg_33[0] && arg_111[0] != arg_280[1] && arg_111[0] != arg_79[1] && arg_111[0] != arg_191[1] && arg_111[0] != arg_194[1] && arg_111[0] == arg_131[0] && arg_111[0] != arg_222[1] && arg_111[0] == arg_211[0] && arg_111[0] == arg_251[0] && arg_111[0] != arg_202[1] && arg_111[0] == arg_272[0] && arg_111[0] != arg_251[1] && arg_111[0] != arg_318[1] && arg_111[0] != arg_211[1] && arg_111[0] == arg_277[0] && arg_111[0] == arg_82[0] && arg_111[0] == arg_222[0] && arg_111[0] != arg_184[1] && arg_111[0] != arg_310[1] && arg_111[0] != arg_315[1] && arg_111[0] == arg_23[0] && arg_111[0] != arg_41[1] && arg_111[0] != arg_56[1] && arg_111[0] != arg_71[1] && arg_111[0] != arg_157[1] && arg_111[0] == arg_232[0] && arg_111[0] != arg_15[1] && arg_111[0] == arg_262[0] && arg_111[0] == arg_269[0] && arg_111[0] != arg_114[1] && arg_111[0] == arg_56[0] && arg_111[0] == arg_219[0] && arg_111[0] != arg_18[1] && arg_111[0] == arg_93[0] && arg_111[0] == arg_202[0] && arg_111[0] == arg_315[0] && arg_111[0] != arg_240[1] && arg_111[0] != arg_176[1] && arg_111[0] != arg_181[1] && arg_111[0] == arg_114[0] && arg_111[0] == arg_122[0] && arg_111[0] == arg_142[0] && arg_111[0] != arg_142[1] && arg_111[0] == arg_79[0] && arg_111[0] == arg_152[0] && arg_111[0] != arg_173[1] && arg_111[0] == arg_237[0] && arg_111[0] != arg_277[1] && arg_111[0] != arg_139[1] && arg_111[0] != arg_96[1] && arg_111[0] != arg_131[1] && arg_111[0] != arg_229[1] && arg_111[0] == arg_15[0] && arg_111[0] == arg_101[0] && arg_111[0] == arg_184[0] && arg_111[0] != arg_262[1] && arg_111[0] == arg_41[0] && arg_111[0] != arg_93[1] && arg_111[0] == arg_18[0] && arg_111[0] != arg_214[1] && arg_111[0] == arg_119[0] && arg_111[0] == arg_214[0] && arg_111[0] == arg_139[0] && arg_111[0] == arg_307[0] && arg_111[0] != arg_149[1] && arg_111[0] == arg_134[0] && arg_111[0] != arg_219[1] && arg_272[1] != arg_96[0] && arg_272[1] != arg_36[0] && arg_272[1] != arg_259[0] && arg_272[1] != arg_254[0] && arg_272[1] == arg_64[1] && arg_272[1] != arg_280[0] && arg_272[1] == arg_307[1] && arg_272[1] == arg_111[1] && arg_272[1] != arg_64[0] && arg_272[1] != arg_74[0] && arg_272[1] == arg_232[1] && arg_272[1] == arg_44[1] && arg_272[1] != arg_240[0] && arg_272[1] != arg_194[0] && arg_272[1] != arg_149[0] && arg_272[1] != arg_53[0] && arg_272[1] == arg_36[1] && arg_272[1] != arg_310[0] && arg_272[1] != arg_33[0] && arg_272[1] == arg_280[1] && arg_272[1] == arg_79[1] && arg_272[1] == arg_191[1] && arg_272[1] == arg_194[1] && arg_272[1] != arg_131[0] && arg_272[1] == arg_222[1] && arg_272[1] != arg_211[0] && arg_272[1] != arg_251[0] && arg_272[1] == arg_202[1] && arg_272[1] != arg_272[0] && arg_272[1] == arg_251[1] && arg_272[1] == arg_318[1] && arg_272[1] == arg_211[1] && arg_272[1] != arg_277[0] && arg_272[1] != arg_82[0] && arg_272[1] != arg_222[0] && arg_272[1] == arg_184[1] && arg_272[1] == arg_310[1] && arg_272[1] == arg_315[1] && arg_272[1] != arg_23[0] && arg_272[1] == arg_41[1] && arg_272[1] == arg_56[1] && arg_272[1] == arg_71[1] && arg_272[1] == arg_157[1] && arg_272[1] != arg_232[0] && arg_272[1] == arg_15[1] && arg_272[1] != arg_262[0] && arg_272[1] != arg_269[0] && arg_272[1] == arg_114[1] && arg_272[1] != arg_56[0] && arg_272[1] != arg_219[0] && arg_272[1] == arg_18[1] && arg_272[1] != arg_93[0] && arg_272[1] != arg_202[0] && arg_272[1] != arg_315[0] && arg_272[1] == arg_240[1] && arg_272[1] == arg_176[1] && arg_272[1] == arg_181[1] && arg_272[1] != arg_114[0] && arg_272[1] != arg_122[0] && arg_272[1] != arg_142[0] && arg_272[1] == arg_142[1] && arg_272[1] != arg_79[0] && arg_272[1] != arg_152[0] && arg_272[1] == arg_173[1] && arg_272[1] != arg_237[0] && arg_272[1] == arg_277[1] && arg_272[1] == arg_139[1] && arg_272[1] == arg_96[1] && arg_272[1] == arg_131[1] && arg_272[1] == arg_229[1] && arg_272[1] != arg_15[0] && arg_272[1] != arg_101[0] && arg_272[1] != arg_184[0] && arg_272[1] == arg_262[1] && arg_272[1] != arg_41[0] && arg_272[1] == arg_93[1] && arg_272[1] != arg_18[0] && arg_272[1] == arg_214[1] && arg_272[1] != arg_119[0] && arg_272[1] != arg_214[0] && arg_272[1] != arg_139[0] && arg_272[1] != arg_307[0] && arg_272[1] == arg_149[1] && arg_272[1] != arg_134[0] && arg_272[1] == arg_219[1] && arg_96[0] == arg_36[0] && arg_96[0] == arg_259[0] && arg_96[0] == arg_254[0] && arg_96[0] != arg_64[1] && arg_96[0] == arg_280[0] && arg_96[0] != arg_307[1] && arg_96[0] != arg_111[1] && arg_96[0] == arg_64[0] && arg_96[0] == arg_74[0] && arg_96[0] != arg_232[1] && arg_96[0] != arg_44[1] && arg_96[0] == arg_240[0] && arg_96[0] == arg_194[0] && arg_96[0] == arg_149[0] && arg_96[0] == arg_53[0] && arg_96[0] != arg_36[1] && arg_96[0] == arg_310[0] && arg_96[0] == arg_33[0] && arg_96[0] != arg_280[1] && arg_96[0] != arg_79[1] && arg_96[0] != arg_191[1] && arg_96[0] != arg_194[1] && arg_96[0] == arg_131[0] && arg_96[0] != arg_222[1] && arg_96[0] == arg_211[0] && arg_96[0] == arg_251[0] && arg_96[0] != arg_202[1] && arg_96[0] == arg_272[0] && arg_96[0] != arg_251[1] && arg_96[0] != arg_318[1] && arg_96[0] != arg_211[1] && arg_96[0] == arg_277[0] && arg_96[0] == arg_82[0] && arg_96[0] == arg_222[0] && arg_96[0] != arg_184[1] && arg_96[0] != arg_310[1] && arg_96[0] != arg_315[1] && arg_96[0] == arg_23[0] && arg_96[0] != arg_41[1] && arg_96[0] != arg_56[1] && arg_96[0] != arg_71[1] && arg_96[0] != arg_157[1] && arg_96[0] == arg_232[0] && arg_96[0] != arg_15[1] && arg_96[0] == arg_262[0] && arg_96[0] == arg_269[0] && arg_96[0] != arg_114[1] && arg_96[0] == arg_56[0] && arg_96[0] == arg_219[0] && arg_96[0] != arg_18[1] && arg_96[0] == arg_93[0] && arg_96[0] == arg_202[0] && arg_96[0] == arg_315[0] && arg_96[0] != arg_240[1] && arg_96[0] != arg_176[1] && arg_96[0] != arg_181[1] && arg_96[0] == arg_114[0] && arg_96[0] == arg_122[0] && arg_96[0] == arg_142[0] && arg_96[0] != arg_142[1] && arg_96[0] == arg_79[0] && arg_96[0] == arg_152[0] && arg_96[0] != arg_173[1] && arg_96[0] == arg_237[0] && arg_96[0] != arg_277[1] && arg_96[0] != arg_139[1] && arg_96[0] != arg_96[1] && arg_96[0] != arg_131[1] && arg_96[0] != arg_229[1] && arg_96[0] == arg_15[0] && arg_96[0] == arg_101[0] && arg_96[0] == arg_184[0] && arg_96[0] != arg_262[1] && arg_96[0] == arg_41[0] && arg_96[0] != arg_93[1] && arg_96[0] == arg_18[0] && arg_96[0] != arg_214[1] && arg_96[0] == arg_119[0] && arg_96[0] == arg_214[0] && arg_96[0] == arg_139[0] && arg_96[0] == arg_307[0] && arg_96[0] != arg_149[1] && arg_96[0] == arg_134[0] && arg_96[0] != arg_219[1] && arg_36[0] == arg_259[0] && arg_36[0] == arg_254[0] && arg_36[0] != arg_64[1] && arg_36[0] == arg_280[0] && arg_36[0] != arg_307[1] && arg_36[0] != arg_111[1] && arg_36[0] == arg_64[0] && arg_36[0] == arg_74[0] && arg_36[0] != arg_232[1] && arg_36[0] != arg_44[1] && arg_36[0] == arg_240[0] && arg_36[0] == arg_194[0] && arg_36[0] == arg_149[0] && arg_36[0] == arg_53[0] && arg_36[0] != arg_36[1] && arg_36[0] == arg_310[0] && arg_36[0] == arg_33[0] && arg_36[0] != arg_280[1] && arg_36[0] != arg_79[1] && arg_36[0] != arg_191[1] && arg_36[0] != arg_194[1] && arg_36[0] == arg_131[0] && arg_36[0] != arg_222[1] && arg_36[0] == arg_211[0] && arg_36[0] == arg_251[0] && arg_36[0] != arg_202[1] && arg_36[0] == arg_272[0] && arg_36[0] != arg_251[1] && arg_36[0] != arg_318[1] && arg_36[0] != arg_211[1] && arg_36[0] == arg_277[0] && arg_36[0] == arg_82[0] && arg_36[0] == arg_222[0] && arg_36[0] != arg_184[1] && arg_36[0] != arg_310[1] && arg_36[0] != arg_315[1] && arg_36[0] == arg_23[0] && arg_36[0] != arg_41[1] && arg_36[0] != arg_56[1] && arg_36[0] != arg_71[1] && arg_36[0] != arg_157[1] && arg_36[0] == arg_232[0] && arg_36[0] != arg_15[1] && arg_36[0] == arg_262[0] && arg_36[0] == arg_269[0] && arg_36[0] != arg_114[1] && arg_36[0] == arg_56[0] && arg_36[0] == arg_219[0] && arg_36[0] != arg_18[1] && arg_36[0] == arg_93[0] && arg_36[0] == arg_202[0] && arg_36[0] == arg_315[0] && arg_36[0] != arg_240[1] && arg_36[0] != arg_176[1] && arg_36[0] != arg_181[1] && arg_36[0] == arg_114[0] && arg_36[0] == arg_122[0] && arg_36[0] == arg_142[0] && arg_36[0] != arg_142[1] && arg_36[0] == arg_79[0] && arg_36[0] == arg_152[0] && arg_36[0] != arg_173[1] && arg_36[0] == arg_237[0] && arg_36[0] != arg_277[1] && arg_36[0] != arg_139[1] && arg_36[0] != arg_96[1] && arg_36[0] != arg_131[1] && arg_36[0] != arg_229[1] && arg_36[0] == arg_15[0] && arg_36[0] == arg_101[0] && arg_36[0] == arg_184[0] && arg_36[0] != arg_262[1] && arg_36[0] == arg_41[0] && arg_36[0] != arg_93[1] && arg_36[0] == arg_18[0] && arg_36[0] != arg_214[1] && arg_36[0] == arg_119[0] && arg_36[0] == arg_214[0] && arg_36[0] == arg_139[0] && arg_36[0] == arg_307[0] && arg_36[0] != arg_149[1] && arg_36[0] == arg_134[0] && arg_36[0] != arg_219[1] && arg_259[0] == arg_254[0] && arg_259[0] != arg_64[1] && arg_259[0] == arg_280[0] && arg_259[0] != arg_307[1] && arg_259[0] != arg_111[1] && arg_259[0] == arg_64[0] && arg_259[0] == arg_74[0] && arg_259[0] != arg_232[1] && arg_259[0] != arg_44[1] && arg_259[0] == arg_240[0] && arg_259[0] == arg_194[0] && arg_259[0] == arg_149[0] && arg_259[0] == arg_53[0] && arg_259[0] != arg_36[1] && arg_259[0] == arg_310[0] && arg_259[0] == arg_33[0] && arg_259[0] != arg_280[1] && arg_259[0] != arg_79[1] && arg_259[0] != arg_191[1] && arg_259[0] != arg_194[1] && arg_259[0] == arg_131[0] && arg_259[0] != arg_222[1] && arg_259[0] == arg_211[0] && arg_259[0] == arg_251[0] && arg_259[0] != arg_202[1] && arg_259[0] == arg_272[0] && arg_259[0] != arg_251[1] && arg_259[0] != arg_318[1] && arg_259[0] != arg_211[1] && arg_259[0] == arg_277[0] && arg_259[0] == arg_82[0] && arg_259[0] == arg_222[0] && arg_259[0] != arg_184[1] && arg_259[0] != arg_310[1] && arg_259[0] != arg_315[1] && arg_259[0] == arg_23[0] && arg_259[0] != arg_41[1] && arg_259[0] != arg_56[1] && arg_259[0] != arg_71[1] && arg_259[0] != arg_157[1] && arg_259[0] == arg_232[0] && arg_259[0] != arg_15[1] && arg_259[0] == arg_262[0] && arg_259[0] == arg_269[0] && arg_259[0] != arg_114[1] && arg_259[0] == arg_56[0] && arg_259[0] == arg_219[0] && arg_259[0] != arg_18[1] && arg_259[0] == arg_93[0] && arg_259[0] == arg_202[0] && arg_259[0] == arg_315[0] && arg_259[0] != arg_240[1] && arg_259[0] != arg_176[1] && arg_259[0] != arg_181[1] && arg_259[0] == arg_114[0] && arg_259[0] == arg_122[0] && arg_259[0] == arg_142[0] && arg_259[0] != arg_142[1] && arg_259[0] == arg_79[0] && arg_259[0] == arg_152[0] && arg_259[0] != arg_173[1] && arg_259[0] == arg_237[0] && arg_259[0] != arg_277[1] && arg_259[0] != arg_139[1] && arg_259[0] != arg_96[1] && arg_259[0] != arg_131[1] && arg_259[0] != arg_229[1] && arg_259[0] == arg_15[0] && arg_259[0] == arg_101[0] && arg_259[0] == arg_184[0] && arg_259[0] != arg_262[1] && arg_259[0] == arg_41[0] && arg_259[0] != arg_93[1] && arg_259[0] == arg_18[0] && arg_259[0] != arg_214[1] && arg_259[0] == arg_119[0] && arg_259[0] == arg_214[0] && arg_259[0] == arg_139[0] && arg_259[0] == arg_307[0] && arg_259[0] != arg_149[1] && arg_259[0] == arg_134[0] && arg_259[0] != arg_219[1] && arg_254[0] != arg_64[1] && arg_254[0] == arg_280[0] && arg_254[0] != arg_307[1] && arg_254[0] != arg_111[1] && arg_254[0] == arg_64[0] && arg_254[0] == arg_74[0] && arg_254[0] != arg_232[1] && arg_254[0] != arg_44[1] && arg_254[0] == arg_240[0] && arg_254[0] == arg_194[0] && arg_254[0] == arg_149[0] && arg_254[0] == arg_53[0] && arg_254[0] != arg_36[1] && arg_254[0] == arg_310[0] && arg_254[0] == arg_33[0] && arg_254[0] != arg_280[1] && arg_254[0] != arg_79[1] && arg_254[0] != arg_191[1] && arg_254[0] != arg_194[1] && arg_254[0] == arg_131[0] && arg_254[0] != arg_222[1] && arg_254[0] == arg_211[0] && arg_254[0] == arg_251[0] && arg_254[0] != arg_202[1] && arg_254[0] == arg_272[0] && arg_254[0] != arg_251[1] && arg_254[0] != arg_318[1] && arg_254[0] != arg_211[1] && arg_254[0] == arg_277[0] && arg_254[0] == arg_82[0] && arg_254[0] == arg_222[0] && arg_254[0] != arg_184[1] && arg_254[0] != arg_310[1] && arg_254[0] != arg_315[1] && arg_254[0] == arg_23[0] && arg_254[0] != arg_41[1] && arg_254[0] != arg_56[1] && arg_254[0] != arg_71[1] && arg_254[0] != arg_157[1] && arg_254[0] == arg_232[0] && arg_254[0] != arg_15[1] && arg_254[0] == arg_262[0] && arg_254[0] == arg_269[0] && arg_254[0] != arg_114[1] && arg_254[0] == arg_56[0] && arg_254[0] == arg_219[0] && arg_254[0] != arg_18[1] && arg_254[0] == arg_93[0] && arg_254[0] == arg_202[0] && arg_254[0] == arg_315[0] && arg_254[0] != arg_240[1] && arg_254[0] != arg_176[1] && arg_254[0] != arg_181[1] && arg_254[0] == arg_114[0] && arg_254[0] == arg_122[0] && arg_254[0] == arg_142[0] && arg_254[0] != arg_142[1] && arg_254[0] == arg_79[0] && arg_254[0] == arg_152[0] && arg_254[0] != arg_173[1] && arg_254[0] == arg_237[0] && arg_254[0] != arg_277[1] && arg_254[0] != arg_139[1] && arg_254[0] != arg_96[1] && arg_254[0] != arg_131[1] && arg_254[0] != arg_229[1] && arg_254[0] == arg_15[0] && arg_254[0] == arg_101[0] && arg_254[0] == arg_184[0] && arg_254[0] != arg_262[1] && arg_254[0] == arg_41[0] && arg_254[0] != arg_93[1] && arg_254[0] == arg_18[0] && arg_254[0] != arg_214[1] && arg_254[0] == arg_119[0] && arg_254[0] == arg_214[0] && arg_254[0] == arg_139[0] && arg_254[0] == arg_307[0] && arg_254[0] != arg_149[1] && arg_254[0] == arg_134[0] && arg_254[0] != arg_219[1] && arg_64[1] != arg_280[0] && arg_64[1] == arg_307[1] && arg_64[1] == arg_111[1] && arg_64[1] != arg_64[0] && arg_64[1] != arg_74[0] && arg_64[1] == arg_232[1] && arg_64[1] == arg_44[1] && arg_64[1] != arg_240[0] && arg_64[1] != arg_194[0] && arg_64[1] != arg_149[0] && arg_64[1] != arg_53[0] && arg_64[1] == arg_36[1] && arg_64[1] != arg_310[0] && arg_64[1] != arg_33[0] && arg_64[1] == arg_280[1] && arg_64[1] == arg_79[1] && arg_64[1] == arg_191[1] && arg_64[1] == arg_194[1] && arg_64[1] != arg_131[0] && arg_64[1] == arg_222[1] && arg_64[1] != arg_211[0] && arg_64[1] != arg_251[0] && arg_64[1] == arg_202[1] && arg_64[1] != arg_272[0] && arg_64[1] == arg_251[1] && arg_64[1] == arg_318[1] && arg_64[1] == arg_211[1] && arg_64[1] != arg_277[0] && arg_64[1] != arg_82[0] && arg_64[1] != arg_222[0] && arg_64[1] == arg_184[1] && arg_64[1] == arg_310[1] && arg_64[1] == arg_315[1] && arg_64[1] != arg_23[0] && arg_64[1] == arg_41[1] && arg_64[1] == arg_56[1] && arg_64[1] == arg_71[1] && arg_64[1] == arg_157[1] && arg_64[1] != arg_232[0] && arg_64[1] == arg_15[1] && arg_64[1] != arg_262[0] && arg_64[1] != arg_269[0] && arg_64[1] == arg_114[1] && arg_64[1] != arg_56[0] && arg_64[1] != arg_219[0] && arg_64[1] == arg_18[1] && arg_64[1] != arg_93[0] && arg_64[1] != arg_202[0] && arg_64[1] != arg_315[0] && arg_64[1] == arg_240[1] && arg_64[1] == arg_176[1] && arg_64[1] == arg_181[1] && arg_64[1] != arg_114[0] && arg_64[1] != arg_122[0] && arg_64[1] != arg_142[0] && arg_64[1] == arg_142[1] && arg_64[1] != arg_79[0] && arg_64[1] != arg_152[0] && arg_64[1] == arg_173[1] && arg_64[1] != arg_237[0] && arg_64[1] == arg_277[1] && arg_64[1] == arg_139[1] && arg_64[1] == arg_96[1] && arg_64[1] == arg_131[1] && arg_64[1] == arg_229[1] && arg_64[1] != arg_15[0] && arg_64[1] != arg_101[0] && arg_64[1] != arg_184[0] && arg_64[1] == arg_262[1] && arg_64[1] != arg_41[0] && arg_64[1] == arg_93[1] && arg_64[1] != arg_18[0] && arg_64[1] == arg_214[1] && arg_64[1] != arg_119[0] && arg_64[1] != arg_214[0] && arg_64[1] != arg_139[0] && arg_64[1] != arg_307[0] && arg_64[1] == arg_149[1] && arg_64[1] != arg_134[0] && arg_64[1] == arg_219[1] && arg_280[0] != arg_307[1] && arg_280[0] != arg_111[1] && arg_280[0] == arg_64[0] && arg_280[0] == arg_74[0] && arg_280[0] != arg_232[1] && arg_280[0] != arg_44[1] && arg_280[0] == arg_240[0] && arg_280[0] == arg_194[0] && arg_280[0] == arg_149[0] && arg_280[0] == arg_53[0] && arg_280[0] != arg_36[1] && arg_280[0] == arg_310[0] && arg_280[0] == arg_33[0] && arg_280[0] != arg_280[1] && arg_280[0] != arg_79[1] && arg_280[0] != arg_191[1] && arg_280[0] != arg_194[1] && arg_280[0] == arg_131[0] && arg_280[0] != arg_222[1] && arg_280[0] == arg_211[0] && arg_280[0] == arg_251[0] && arg_280[0] != arg_202[1] && arg_280[0] == arg_272[0] && arg_280[0] != arg_251[1] && arg_280[0] != arg_318[1] && arg_280[0] != arg_211[1] && arg_280[0] == arg_277[0] && arg_280[0] == arg_82[0] && arg_280[0] == arg_222[0] && arg_280[0] != arg_184[1] && arg_280[0] != arg_310[1] && arg_280[0] != arg_315[1] && arg_280[0] == arg_23[0] && arg_280[0] != arg_41[1] && arg_280[0] != arg_56[1] && arg_280[0] != arg_71[1] && arg_280[0] != arg_157[1] && arg_280[0] == arg_232[0] && arg_280[0] != arg_15[1] && arg_280[0] == arg_262[0] && arg_280[0] == arg_269[0] && arg_280[0] != arg_114[1] && arg_280[0] == arg_56[0] && arg_280[0] == arg_219[0] && arg_280[0] != arg_18[1] && arg_280[0] == arg_93[0] && arg_280[0] == arg_202[0] && arg_280[0] == arg_315[0] && arg_280[0] != arg_240[1] && arg_280[0] != arg_176[1] && arg_280[0] != arg_181[1] && arg_280[0] == arg_114[0] && arg_280[0] == arg_122[0] && arg_280[0] == arg_142[0] && arg_280[0] != arg_142[1] && arg_280[0] == arg_79[0] && arg_280[0] == arg_152[0] && arg_280[0] != arg_173[1] && arg_280[0] == arg_237[0] && arg_280[0] != arg_277[1] && arg_280[0] != arg_139[1] && arg_280[0] != arg_96[1] && arg_280[0] != arg_131[1] && arg_280[0] != arg_229[1] && arg_280[0] == arg_15[0] && arg_280[0] == arg_101[0] && arg_280[0] == arg_184[0] && arg_280[0] != arg_262[1] && arg_280[0] == arg_41[0] && arg_280[0] != arg_93[1] && arg_280[0] == arg_18[0] && arg_280[0] != arg_214[1] && arg_280[0] == arg_119[0] && arg_280[0] == arg_214[0] && arg_280[0] == arg_139[0] && arg_280[0] == arg_307[0] && arg_280[0] != arg_149[1] && arg_280[0] == arg_134[0] && arg_280[0] != arg_219[1] && arg_307[1] == arg_111[1] && arg_307[1] != arg_64[0] && arg_307[1] != arg_74[0] && arg_307[1] == arg_232[1] && arg_307[1] == arg_44[1] && arg_307[1] != arg_240[0] && arg_307[1] != arg_194[0] && arg_307[1] != arg_149[0] && arg_307[1] != arg_53[0] && arg_307[1] == arg_36[1] && arg_307[1] != arg_310[0] && arg_307[1] != arg_33[0] && arg_307[1] == arg_280[1] && arg_307[1] == arg_79[1] && arg_307[1] == arg_191[1] && arg_307[1] == arg_194[1] && arg_307[1] != arg_131[0] && arg_307[1] == arg_222[1] && arg_307[1] != arg_211[0] && arg_307[1] != arg_251[0] && arg_307[1] == arg_202[1] && arg_307[1] != arg_272[0] && arg_307[1] == arg_251[1] && arg_307[1] == arg_318[1] && arg_307[1] == arg_211[1] && arg_307[1] != arg_277[0] && arg_307[1] != arg_82[0] && arg_307[1] != arg_222[0] && arg_307[1] == arg_184[1] && arg_307[1] == arg_310[1] && arg_307[1] == arg_315[1] && arg_307[1] != arg_23[0] && arg_307[1] == arg_41[1] && arg_307[1] == arg_56[1] && arg_307[1] == arg_71[1] && arg_307[1] == arg_157[1] && arg_307[1] != arg_232[0] && arg_307[1] == arg_15[1] && arg_307[1] != arg_262[0] && arg_307[1] != arg_269[0] && arg_307[1] == arg_114[1] && arg_307[1] != arg_56[0] && arg_307[1] != arg_219[0] && arg_307[1] == arg_18[1] && arg_307[1] != arg_93[0] && arg_307[1] != arg_202[0] && arg_307[1] != arg_315[0] && arg_307[1] == arg_240[1] && arg_307[1] == arg_176[1] && arg_307[1] == arg_181[1] && arg_307[1] != arg_114[0] && arg_307[1] != arg_122[0] && arg_307[1] != arg_142[0] && arg_307[1] == arg_142[1] && arg_307[1] != arg_79[0] && arg_307[1] != arg_152[0] && arg_307[1] == arg_173[1] && arg_307[1] != arg_237[0] && arg_307[1] == arg_277[1] && arg_307[1] == arg_139[1] && arg_307[1] == arg_96[1] && arg_307[1] == arg_131[1] && arg_307[1] == arg_229[1] && arg_307[1] != arg_15[0] && arg_307[1] != arg_101[0] && arg_307[1] != arg_184[0] && arg_307[1] == arg_262[1] && arg_307[1] != arg_41[0] && arg_307[1] == arg_93[1] && arg_307[1] != arg_18[0] && arg_307[1] == arg_214[1] && arg_307[1] != arg_119[0] && arg_307[1] != arg_214[0] && arg_307[1] != arg_139[0] && arg_307[1] != arg_307[0] && arg_307[1] == arg_149[1] && arg_307[1] != arg_134[0] && arg_307[1] == arg_219[1] && arg_111[1] != arg_64[0] && arg_111[1] != arg_74[0] && arg_111[1] == arg_232[1] && arg_111[1] == arg_44[1] && arg_111[1] != arg_240[0] && arg_111[1] != arg_194[0] && arg_111[1] != arg_149[0] && arg_111[1] != arg_53[0] && arg_111[1] == arg_36[1] && arg_111[1] != arg_310[0] && arg_111[1] != arg_33[0] && arg_111[1] == arg_280[1] && arg_111[1] == arg_79[1] && arg_111[1] == arg_191[1] && arg_111[1] == arg_194[1] && arg_111[1] != arg_131[0] && arg_111[1] == arg_222[1] && arg_111[1] != arg_211[0] && arg_111[1] != arg_251[0] && arg_111[1] == arg_202[1] && arg_111[1] != arg_272[0] && arg_111[1] == arg_251[1] && arg_111[1] == arg_318[1] && arg_111[1] == arg_211[1] && arg_111[1] != arg_277[0] && arg_111[1] != arg_82[0] && arg_111[1] != arg_222[0] && arg_111[1] == arg_184[1] && arg_111[1] == arg_310[1] && arg_111[1] == arg_315[1] && arg_111[1] != arg_23[0] && arg_111[1] == arg_41[1] && arg_111[1] == arg_56[1] && arg_111[1] == arg_71[1] && arg_111[1] == arg_157[1] && arg_111[1] != arg_232[0] && arg_111[1] == arg_15[1] && arg_111[1] != arg_262[0] && arg_111[1] != arg_269[0] && arg_111[1] == arg_114[1] && arg_111[1] != arg_56[0] && arg_111[1] != arg_219[0] && arg_111[1] == arg_18[1] && arg_111[1] != arg_93[0] && arg_111[1] != arg_202[0] && arg_111[1] != arg_315[0] && arg_111[1] == arg_240[1] && arg_111[1] == arg_176[1] && arg_111[1] == arg_181[1] && arg_111[1] != arg_114[0] && arg_111[1] != arg_122[0] && arg_111[1] != arg_142[0] && arg_111[1] == arg_142[1] && arg_111[1] != arg_79[0] && arg_111[1] != arg_152[0] && arg_111[1] == arg_173[1] && arg_111[1] != arg_237[0] && arg_111[1] == arg_277[1] && arg_111[1] == arg_139[1] && arg_111[1] == arg_96[1] && arg_111[1] == arg_131[1] && arg_111[1] == arg_229[1] && arg_111[1] != arg_15[0] && arg_111[1] != arg_101[0] && arg_111[1] != arg_184[0] && arg_111[1] == arg_262[1] && arg_111[1] != arg_41[0] && arg_111[1] == arg_93[1] && arg_111[1] != arg_18[0] && arg_111[1] == arg_214[1] && arg_111[1] != arg_119[0] && arg_111[1] != arg_214[0] && arg_111[1] != arg_139[0] && arg_111[1] != arg_307[0] && arg_111[1] == arg_149[1] && arg_111[1] != arg_134[0] && arg_111[1] == arg_219[1] && arg_64[0] == arg_74[0] && arg_64[0] != arg_232[1] && arg_64[0] != arg_44[1] && arg_64[0] == arg_240[0] && arg_64[0] == arg_194[0] && arg_64[0] == arg_149[0] && arg_64[0] == arg_53[0] && arg_64[0] != arg_36[1] && arg_64[0] == arg_310[0] && arg_64[0] == arg_33[0] && arg_64[0] != arg_280[1] && arg_64[0] != arg_79[1] && arg_64[0] != arg_191[1] && arg_64[0] != arg_194[1] && arg_64[0] == arg_131[0] && arg_64[0] != arg_222[1] && arg_64[0] == arg_211[0] && arg_64[0] == arg_251[0] && arg_64[0] != arg_202[1] && arg_64[0] == arg_272[0] && arg_64[0] != arg_251[1] && arg_64[0] != arg_318[1] && arg_64[0] != arg_211[1] && arg_64[0] == arg_277[0] && arg_64[0] == arg_82[0] && arg_64[0] == arg_222[0] && arg_64[0] != arg_184[1] && arg_64[0] != arg_310[1] && arg_64[0] != arg_315[1] && arg_64[0] == arg_23[0] && arg_64[0] != arg_41[1] && arg_64[0] != arg_56[1] && arg_64[0] != arg_71[1] && arg_64[0] != arg_157[1] && arg_64[0] == arg_232[0] && arg_64[0] != arg_15[1] && arg_64[0] == arg_262[0] && arg_64[0] == arg_269[0] && arg_64[0] != arg_114[1] && arg_64[0] == arg_56[0] && arg_64[0] == arg_219[0] && arg_64[0] != arg_18[1] && arg_64[0] == arg_93[0] && arg_64[0] == arg_202[0] && arg_64[0] == arg_315[0] && arg_64[0] != arg_240[1] && arg_64[0] != arg_176[1] && arg_64[0] != arg_181[1] && arg_64[0] == arg_114[0] && arg_64[0] == arg_122[0] && arg_64[0] == arg_142[0] && arg_64[0] != arg_142[1] && arg_64[0] == arg_79[0] && arg_64[0] == arg_152[0] && arg_64[0] != arg_173[1] && arg_64[0] == arg_237[0] && arg_64[0] != arg_277[1] && arg_64[0] != arg_139[1] && arg_64[0] != arg_96[1] && arg_64[0] != arg_131[1] && arg_64[0] != arg_229[1] && arg_64[0] == arg_15[0] && arg_64[0] == arg_101[0] && arg_64[0] == arg_184[0] && arg_64[0] != arg_262[1] && arg_64[0] == arg_41[0] && arg_64[0] != arg_93[1] && arg_64[0] == arg_18[0] && arg_64[0] != arg_214[1] && arg_64[0] == arg_119[0] && arg_64[0] == arg_214[0] && arg_64[0] == arg_139[0] && arg_64[0] == arg_307[0] && arg_64[0] != arg_149[1] && arg_64[0] == arg_134[0] && arg_64[0] != arg_219[1] && arg_74[0] != arg_232[1] && arg_74[0] != arg_44[1] && arg_74[0] == arg_240[0] && arg_74[0] == arg_194[0] && arg_74[0] == arg_149[0] && arg_74[0] == arg_53[0] && arg_74[0] != arg_36[1] && arg_74[0] == arg_310[0] && arg_74[0] == arg_33[0] && arg_74[0] != arg_280[1] && arg_74[0] != arg_79[1] && arg_74[0] != arg_191[1] && arg_74[0] != arg_194[1] && arg_74[0] == arg_131[0] && arg_74[0] != arg_222[1] && arg_74[0] == arg_211[0] && arg_74[0] == arg_251[0] && arg_74[0] != arg_202[1] && arg_74[0] == arg_272[0] && arg_74[0] != arg_251[1] && arg_74[0] != arg_318[1] && arg_74[0] != arg_211[1] && arg_74[0] == arg_277[0] && arg_74[0] == arg_82[0] && arg_74[0] == arg_222[0] && arg_74[0] != arg_184[1] && arg_74[0] != arg_310[1] && arg_74[0] != arg_315[1] && arg_74[0] == arg_23[0] && arg_74[0] != arg_41[1] && arg_74[0] != arg_56[1] && arg_74[0] != arg_71[1] && arg_74[0] != arg_157[1] && arg_74[0] == arg_232[0] && arg_74[0] != arg_15[1] && arg_74[0] == arg_262[0] && arg_74[0] == arg_269[0] && arg_74[0] != arg_114[1] && arg_74[0] == arg_56[0] && arg_74[0] == arg_219[0] && arg_74[0] != arg_18[1] && arg_74[0] == arg_93[0] && arg_74[0] == arg_202[0] && arg_74[0] == arg_315[0] && arg_74[0] != arg_240[1] && arg_74[0] != arg_176[1] && arg_74[0] != arg_181[1] && arg_74[0] == arg_114[0] && arg_74[0] == arg_122[0] && arg_74[0] == arg_142[0] && arg_74[0] != arg_142[1] && arg_74[0] == arg_79[0] && arg_74[0] == arg_152[0] && arg_74[0] != arg_173[1] && arg_74[0] == arg_237[0] && arg_74[0] != arg_277[1] && arg_74[0] != arg_139[1] && arg_74[0] != arg_96[1] && arg_74[0] != arg_131[1] && arg_74[0] != arg_229[1] && arg_74[0] == arg_15[0] && arg_74[0] == arg_101[0] && arg_74[0] == arg_184[0] && arg_74[0] != arg_262[1] && arg_74[0] == arg_41[0] && arg_74[0] != arg_93[1] && arg_74[0] == arg_18[0] && arg_74[0] != arg_214[1] && arg_74[0] == arg_119[0] && arg_74[0] == arg_214[0] && arg_74[0] == arg_139[0] && arg_74[0] == arg_307[0] && arg_74[0] != arg_149[1] && arg_74[0] == arg_134[0] && arg_74[0] != arg_219[1] && arg_232[1] == arg_44[1] && arg_232[1] != arg_240[0] && arg_232[1] != arg_194[0] && arg_232[1] != arg_149[0] && arg_232[1] != arg_53[0] && arg_232[1] == arg_36[1] && arg_232[1] != arg_310[0] && arg_232[1] != arg_33[0] && arg_232[1] == arg_280[1] && arg_232[1] == arg_79[1] && arg_232[1] == arg_191[1] && arg_232[1] == arg_194[1] && arg_232[1] != arg_131[0] && arg_232[1] == arg_222[1] && arg_232[1] != arg_211[0] && arg_232[1] != arg_251[0] && arg_232[1] == arg_202[1] && arg_232[1] != arg_272[0] && arg_232[1] == arg_251[1] && arg_232[1] == arg_318[1] && arg_232[1] == arg_211[1] && arg_232[1] != arg_277[0] && arg_232[1] != arg_82[0] && arg_232[1] != arg_222[0] && arg_232[1] == arg_184[1] && arg_232[1] == arg_310[1] && arg_232[1] == arg_315[1] && arg_232[1] != arg_23[0] && arg_232[1] == arg_41[1] && arg_232[1] == arg_56[1] && arg_232[1] == arg_71[1] && arg_232[1] == arg_157[1] && arg_232[1] != arg_232[0] && arg_232[1] == arg_15[1] && arg_232[1] != arg_262[0] && arg_232[1] != arg_269[0] && arg_232[1] == arg_114[1] && arg_232[1] != arg_56[0] && arg_232[1] != arg_219[0] && arg_232[1] == arg_18[1] && arg_232[1] != arg_93[0] && arg_232[1] != arg_202[0] && arg_232[1] != arg_315[0] && arg_232[1] == arg_240[1] && arg_232[1] == arg_176[1] && arg_232[1] == arg_181[1] && arg_232[1] != arg_114[0] && arg_232[1] != arg_122[0] && arg_232[1] != arg_142[0] && arg_232[1] == arg_142[1] && arg_232[1] != arg_79[0] && arg_232[1] != arg_152[0] && arg_232[1] == arg_173[1] && arg_232[1] != arg_237[0] && arg_232[1] == arg_277[1] && arg_232[1] == arg_139[1] && arg_232[1] == arg_96[1] && arg_232[1] == arg_131[1] && arg_232[1] == arg_229[1] && arg_232[1] != arg_15[0] && arg_232[1] != arg_101[0] && arg_232[1] != arg_184[0] && arg_232[1] == arg_262[1] && arg_232[1] != arg_41[0] && arg_232[1] == arg_93[1] && arg_232[1] != arg_18[0] && arg_232[1] == arg_214[1] && arg_232[1] != arg_119[0] && arg_232[1] != arg_214[0] && arg_232[1] != arg_139[0] && arg_232[1] != arg_307[0] && arg_232[1] == arg_149[1] && arg_232[1] != arg_134[0] && arg_232[1] == arg_219[1] && arg_44[1] != arg_240[0] && arg_44[1] != arg_194[0] && arg_44[1] != arg_149[0] && arg_44[1] != arg_53[0] && arg_44[1] == arg_36[1] && arg_44[1] != arg_310[0] && arg_44[1] != arg_33[0] && arg_44[1] == arg_280[1] && arg_44[1] == arg_79[1] && arg_44[1] == arg_191[1] && arg_44[1] == arg_194[1] && arg_44[1] != arg_131[0] && arg_44[1] == arg_222[1] && arg_44[1] != arg_211[0] && arg_44[1] != arg_251[0] && arg_44[1] == arg_202[1] && arg_44[1] != arg_272[0] && arg_44[1] == arg_251[1] && arg_44[1] == arg_318[1] && arg_44[1] == arg_211[1] && arg_44[1] != arg_277[0] && arg_44[1] != arg_82[0] && arg_44[1] != arg_222[0] && arg_44[1] == arg_184[1] && arg_44[1] == arg_310[1] && arg_44[1] == arg_315[1] && arg_44[1] != arg_23[0] && arg_44[1] == arg_41[1] && arg_44[1] == arg_56[1] && arg_44[1] == arg_71[1] && arg_44[1] == arg_157[1] && arg_44[1] != arg_232[0] && arg_44[1] == arg_15[1] && arg_44[1] != arg_262[0] && arg_44[1] != arg_269[0] && arg_44[1] == arg_114[1] && arg_44[1] != arg_56[0] && arg_44[1] != arg_219[0] && arg_44[1] == arg_18[1] && arg_44[1] != arg_93[0] && arg_44[1] != arg_202[0] && arg_44[1] != arg_315[0] && arg_44[1] == arg_240[1] && arg_44[1] == arg_176[1] && arg_44[1] == arg_181[1] && arg_44[1] != arg_114[0] && arg_44[1] != arg_122[0] && arg_44[1] != arg_142[0] && arg_44[1] == arg_142[1] && arg_44[1] != arg_79[0] && arg_44[1] != arg_152[0] && arg_44[1] == arg_173[1] && arg_44[1] != arg_237[0] && arg_44[1] == arg_277[1] && arg_44[1] == arg_139[1] && arg_44[1] == arg_96[1] && arg_44[1] == arg_131[1] && arg_44[1] == arg_229[1] && arg_44[1] != arg_15[0] && arg_44[1] != arg_101[0] && arg_44[1] != arg_184[0] && arg_44[1] == arg_262[1] && arg_44[1] != arg_41[0] && arg_44[1] == arg_93[1] && arg_44[1] != arg_18[0] && arg_44[1] == arg_214[1] && arg_44[1] != arg_119[0] && arg_44[1] != arg_214[0] && arg_44[1] != arg_139[0] && arg_44[1] != arg_307[0] && arg_44[1] == arg_149[1] && arg_44[1] != arg_134[0] && arg_44[1] == arg_219[1] && arg_240[0] == arg_194[0] && arg_240[0] == arg_149[0] && arg_240[0] == arg_53[0] && arg_240[0] != arg_36[1] && arg_240[0] == arg_310[0] && arg_240[0] == arg_33[0] && arg_240[0] != arg_280[1] && arg_240[0] != arg_79[1] && arg_240[0] != arg_191[1] && arg_240[0] != arg_194[1] && arg_240[0] == arg_131[0] && arg_240[0] != arg_222[1] && arg_240[0] == arg_211[0] && arg_240[0] == arg_251[0] && arg_240[0] != arg_202[1] && arg_240[0] == arg_272[0] && arg_240[0] != arg_251[1] && arg_240[0] != arg_318[1] && arg_240[0] != arg_211[1] && arg_240[0] == arg_277[0] && arg_240[0] == arg_82[0] && arg_240[0] == arg_222[0] && arg_240[0] != arg_184[1] && arg_240[0] != arg_310[1] && arg_240[0] != arg_315[1] && arg_240[0] == arg_23[0] && arg_240[0] != arg_41[1] && arg_240[0] != arg_56[1] && arg_240[0] != arg_71[1] && arg_240[0] != arg_157[1] && arg_240[0] == arg_232[0] && arg_240[0] != arg_15[1] && arg_240[0] == arg_262[0] && arg_240[0] == arg_269[0] && arg_240[0] != arg_114[1] && arg_240[0] == arg_56[0] && arg_240[0] == arg_219[0] && arg_240[0] != arg_18[1] && arg_240[0] == arg_93[0] && arg_240[0] == arg_202[0] && arg_240[0] == arg_315[0] && arg_240[0] != arg_240[1] && arg_240[0] != arg_176[1] && arg_240[0] != arg_181[1] && arg_240[0] == arg_114[0] && arg_240[0] == arg_122[0] && arg_240[0] == arg_142[0] && arg_240[0] != arg_142[1] && arg_240[0] == arg_79[0] && arg_240[0] == arg_152[0] && arg_240[0] != arg_173[1] && arg_240[0] == arg_237[0] && arg_240[0] != arg_277[1] && arg_240[0] != arg_139[1] && arg_240[0] != arg_96[1] && arg_240[0] != arg_131[1] && arg_240[0] != arg_229[1] && arg_240[0] == arg_15[0] && arg_240[0] == arg_101[0] && arg_240[0] == arg_184[0] && arg_240[0] != arg_262[1] && arg_240[0] == arg_41[0] && arg_240[0] != arg_93[1] && arg_240[0] == arg_18[0] && arg_240[0] != arg_214[1] && arg_240[0] == arg_119[0] && arg_240[0] == arg_214[0] && arg_240[0] == arg_139[0] && arg_240[0] == arg_307[0] && arg_240[0] != arg_149[1] && arg_240[0] == arg_134[0] && arg_240[0] != arg_219[1] && arg_194[0] == arg_149[0] && arg_194[0] == arg_53[0] && arg_194[0] != arg_36[1] && arg_194[0] == arg_310[0] && arg_194[0] == arg_33[0] && arg_194[0] != arg_280[1] && arg_194[0] != arg_79[1] && arg_194[0] != arg_191[1] && arg_194[0] != arg_194[1] && arg_194[0] == arg_131[0] && arg_194[0] != arg_222[1] && arg_194[0] == arg_211[0] && arg_194[0] == arg_251[0] && arg_194[0] != arg_202[1] && arg_194[0] == arg_272[0] && arg_194[0] != arg_251[1] && arg_194[0] != arg_318[1] && arg_194[0] != arg_211[1] && arg_194[0] == arg_277[0] && arg_194[0] == arg_82[0] && arg_194[0] == arg_222[0] && arg_194[0] != arg_184[1] && arg_194[0] != arg_310[1] && arg_194[0] != arg_315[1] && arg_194[0] == arg_23[0] && arg_194[0] != arg_41[1] && arg_194[0] != arg_56[1] && arg_194[0] != arg_71[1] && arg_194[0] != arg_157[1] && arg_194[0] == arg_232[0] && arg_194[0] != arg_15[1] && arg_194[0] == arg_262[0] && arg_194[0] == arg_269[0] && arg_194[0] != arg_114[1] && arg_194[0] == arg_56[0] && arg_194[0] == arg_219[0] && arg_194[0] != arg_18[1] && arg_194[0] == arg_93[0] && arg_194[0] == arg_202[0] && arg_194[0] == arg_315[0] && arg_194[0] != arg_240[1] && arg_194[0] != arg_176[1] && arg_194[0] != arg_181[1] && arg_194[0] == arg_114[0] && arg_194[0] == arg_122[0] && arg_194[0] == arg_142[0] && arg_194[0] != arg_142[1] && arg_194[0] == arg_79[0] && arg_194[0] == arg_152[0] && arg_194[0] != arg_173[1] && arg_194[0] == arg_237[0] && arg_194[0] != arg_277[1] && arg_194[0] != arg_139[1] && arg_194[0] != arg_96[1] && arg_194[0] != arg_131[1] && arg_194[0] != arg_229[1] && arg_194[0] == arg_15[0] && arg_194[0] == arg_101[0] && arg_194[0] == arg_184[0] && arg_194[0] != arg_262[1] && arg_194[0] == arg_41[0] && arg_194[0] != arg_93[1] && arg_194[0] == arg_18[0] && arg_194[0] != arg_214[1] && arg_194[0] == arg_119[0] && arg_194[0] == arg_214[0] && arg_194[0] == arg_139[0] && arg_194[0] == arg_307[0] && arg_194[0] != arg_149[1] && arg_194[0] == arg_134[0] && arg_194[0] != arg_219[1] && arg_149[0] == arg_53[0] && arg_149[0] != arg_36[1] && arg_149[0] == arg_310[0] && arg_149[0] == arg_33[0] && arg_149[0] != arg_280[1] && arg_149[0] != arg_79[1] && arg_149[0] != arg_191[1] && arg_149[0] != arg_194[1] && arg_149[0] == arg_131[0] && arg_149[0] != arg_222[1] && arg_149[0] == arg_211[0] && arg_149[0] == arg_251[0] && arg_149[0] != arg_202[1] && arg_149[0] == arg_272[0] && arg_149[0] != arg_251[1] && arg_149[0] != arg_318[1] && arg_149[0] != arg_211[1] && arg_149[0] == arg_277[0] && arg_149[0] == arg_82[0] && arg_149[0] == arg_222[0] && arg_149[0] != arg_184[1] && arg_149[0] != arg_310[1] && arg_149[0] != arg_315[1] && arg_149[0] == arg_23[0] && arg_149[0] != arg_41[1] && arg_149[0] != arg_56[1] && arg_149[0] != arg_71[1] && arg_149[0] != arg_157[1] && arg_149[0] == arg_232[0] && arg_149[0] != arg_15[1] && arg_149[0] == arg_262[0] && arg_149[0] == arg_269[0] && arg_149[0] != arg_114[1] && arg_149[0] == arg_56[0] && arg_149[0] == arg_219[0] && arg_149[0] != arg_18[1] && arg_149[0] == arg_93[0] && arg_149[0] == arg_202[0] && arg_149[0] == arg_315[0] && arg_149[0] != arg_240[1] && arg_149[0] != arg_176[1] && arg_149[0] != arg_181[1] && arg_149[0] == arg_114[0] && arg_149[0] == arg_122[0] && arg_149[0] == arg_142[0] && arg_149[0] != arg_142[1] && arg_149[0] == arg_79[0] && arg_149[0] == arg_152[0] && arg_149[0] != arg_173[1] && arg_149[0] == arg_237[0] && arg_149[0] != arg_277[1] && arg_149[0] != arg_139[1] && arg_149[0] != arg_96[1] && arg_149[0] != arg_131[1] && arg_149[0] != arg_229[1] && arg_149[0] == arg_15[0] && arg_149[0] == arg_101[0] && arg_149[0] == arg_184[0] && arg_149[0] != arg_262[1] && arg_149[0] == arg_41[0] && arg_149[0] != arg_93[1] && arg_149[0] == arg_18[0] && arg_149[0] != arg_214[1] && arg_149[0] == arg_119[0] && arg_149[0] == arg_214[0] && arg_149[0] == arg_139[0] && arg_149[0] == arg_307[0] && arg_149[0] != arg_149[1] && arg_149[0] == arg_134[0] && arg_149[0] != arg_219[1] && arg_53[0] != arg_36[1] && arg_53[0] == arg_310[0] && arg_53[0] == arg_33[0] && arg_53[0] != arg_280[1] && arg_53[0] != arg_79[1] && arg_53[0] != arg_191[1] && arg_53[0] != arg_194[1] && arg_53[0] == arg_131[0] && arg_53[0] != arg_222[1] && arg_53[0] == arg_211[0] && arg_53[0] == arg_251[0] && arg_53[0] != arg_202[1] && arg_53[0] == arg_272[0] && arg_53[0] != arg_251[1] && arg_53[0] != arg_318[1] && arg_53[0] != arg_211[1] && arg_53[0] == arg_277[0] && arg_53[0] == arg_82[0] && arg_53[0] == arg_222[0] && arg_53[0] != arg_184[1] && arg_53[0] != arg_310[1] && arg_53[0] != arg_315[1] && arg_53[0] == arg_23[0] && arg_53[0] != arg_41[1] && arg_53[0] != arg_56[1] && arg_53[0] != arg_71[1] && arg_53[0] != arg_157[1] && arg_53[0] == arg_232[0] && arg_53[0] != arg_15[1] && arg_53[0] == arg_262[0] && arg_53[0] == arg_269[0] && arg_53[0] != arg_114[1] && arg_53[0] == arg_56[0] && arg_53[0] == arg_219[0] && arg_53[0] != arg_18[1] && arg_53[0] == arg_93[0] && arg_53[0] == arg_202[0] && arg_53[0] == arg_315[0] && arg_53[0] != arg_240[1] && arg_53[0] != arg_176[1] && arg_53[0] != arg_181[1] && arg_53[0] == arg_114[0] && arg_53[0] == arg_122[0] && arg_53[0] == arg_142[0] && arg_53[0] != arg_142[1] && arg_53[0] == arg_79[0] && arg_53[0] == arg_152[0] && arg_53[0] != arg_173[1] && arg_53[0] == arg_237[0] && arg_53[0] != arg_277[1] && arg_53[0] != arg_139[1] && arg_53[0] != arg_96[1] && arg_53[0] != arg_131[1] && arg_53[0] != arg_229[1] && arg_53[0] == arg_15[0] && arg_53[0] == arg_101[0] && arg_53[0] == arg_184[0] && arg_53[0] != arg_262[1] && arg_53[0] == arg_41[0] && arg_53[0] != arg_93[1] && arg_53[0] == arg_18[0] && arg_53[0] != arg_214[1] && arg_53[0] == arg_119[0] && arg_53[0] == arg_214[0] && arg_53[0] == arg_139[0] && arg_53[0] == arg_307[0] && arg_53[0] != arg_149[1] && arg_53[0] == arg_134[0] && arg_53[0] != arg_219[1] && arg_36[1] != arg_310[0] && arg_36[1] != arg_33[0] && arg_36[1] == arg_280[1] && arg_36[1] == arg_79[1] && arg_36[1] == arg_191[1] && arg_36[1] == arg_194[1] && arg_36[1] != arg_131[0] && arg_36[1] == arg_222[1] && arg_36[1] != arg_211[0] && arg_36[1] != arg_251[0] && arg_36[1] == arg_202[1] && arg_36[1] != arg_272[0] && arg_36[1] == arg_251[1] && arg_36[1] == arg_318[1] && arg_36[1] == arg_211[1] && arg_36[1] != arg_277[0] && arg_36[1] != arg_82[0] && arg_36[1] != arg_222[0] && arg_36[1] == arg_184[1] && arg_36[1] == arg_310[1] && arg_36[1] == arg_315[1] && arg_36[1] != arg_23[0] && arg_36[1] == arg_41[1] && arg_36[1] == arg_56[1] && arg_36[1] == arg_71[1] && arg_36[1] == arg_157[1] && arg_36[1] != arg_232[0] && arg_36[1] == arg_15[1] && arg_36[1] != arg_262[0] && arg_36[1] != arg_269[0] && arg_36[1] == arg_114[1] && arg_36[1] != arg_56[0] && arg_36[1] != arg_219[0] && arg_36[1] == arg_18[1] && arg_36[1] != arg_93[0] && arg_36[1] != arg_202[0] && arg_36[1] != arg_315[0] && arg_36[1] == arg_240[1] && arg_36[1] == arg_176[1] && arg_36[1] == arg_181[1] && arg_36[1] != arg_114[0] && arg_36[1] != arg_122[0] && arg_36[1] != arg_142[0] && arg_36[1] == arg_142[1] && arg_36[1] != arg_79[0] && arg_36[1] != arg_152[0] && arg_36[1] == arg_173[1] && arg_36[1] != arg_237[0] && arg_36[1] == arg_277[1] && arg_36[1] == arg_139[1] && arg_36[1] == arg_96[1] && arg_36[1] == arg_131[1] && arg_36[1] == arg_229[1] && arg_36[1] != arg_15[0] && arg_36[1] != arg_101[0] && arg_36[1] != arg_184[0] && arg_36[1] == arg_262[1] && arg_36[1] != arg_41[0] && arg_36[1] == arg_93[1] && arg_36[1] != arg_18[0] && arg_36[1] == arg_214[1] && arg_36[1] != arg_119[0] && arg_36[1] != arg_214[0] && arg_36[1] != arg_139[0] && arg_36[1] != arg_307[0] && arg_36[1] == arg_149[1] && arg_36[1] != arg_134[0] && arg_36[1] == arg_219[1] && arg_310[0] == arg_33[0] && arg_310[0] != arg_280[1] && arg_310[0] != arg_79[1] && arg_310[0] != arg_191[1] && arg_310[0] != arg_194[1] && arg_310[0] == arg_131[0] && arg_310[0] != arg_222[1] && arg_310[0] == arg_211[0] && arg_310[0] == arg_251[0] && arg_310[0] != arg_202[1] && arg_310[0] == arg_272[0] && arg_310[0] != arg_251[1] && arg_310[0] != arg_318[1] && arg_310[0] != arg_211[1] && arg_310[0] == arg_277[0] && arg_310[0] == arg_82[0] && arg_310[0] == arg_222[0] && arg_310[0] != arg_184[1] && arg_310[0] != arg_310[1] && arg_310[0] != arg_315[1] && arg_310[0] == arg_23[0] && arg_310[0] != arg_41[1] && arg_310[0] != arg_56[1] && arg_310[0] != arg_71[1] && arg_310[0] != arg_157[1] && arg_310[0] == arg_232[0] && arg_310[0] != arg_15[1] && arg_310[0] == arg_262[0] && arg_310[0] == arg_269[0] && arg_310[0] != arg_114[1] && arg_310[0] == arg_56[0] && arg_310[0] == arg_219[0] && arg_310[0] != arg_18[1] && arg_310[0] == arg_93[0] && arg_310[0] == arg_202[0] && arg_310[0] == arg_315[0] && arg_310[0] != arg_240[1] && arg_310[0] != arg_176[1] && arg_310[0] != arg_181[1] && arg_310[0] == arg_114[0] && arg_310[0] == arg_122[0] && arg_310[0] == arg_142[0] && arg_310[0] != arg_142[1] && arg_310[0] == arg_79[0] && arg_310[0] == arg_152[0] && arg_310[0] != arg_173[1] && arg_310[0] == arg_237[0] && arg_310[0] != arg_277[1] && arg_310[0] != arg_139[1] && arg_310[0] != arg_96[1] && arg_310[0] != arg_131[1] && arg_310[0] != arg_229[1] && arg_310[0] == arg_15[0] && arg_310[0] == arg_101[0] && arg_310[0] == arg_184[0] && arg_310[0] != arg_262[1] && arg_310[0] == arg_41[0] && arg_310[0] != arg_93[1] && arg_310[0] == arg_18[0] && arg_310[0] != arg_214[1] && arg_310[0] == arg_119[0] && arg_310[0] == arg_214[0] && arg_310[0] == arg_139[0] && arg_310[0] == arg_307[0] && arg_310[0] != arg_149[1] && arg_310[0] == arg_134[0] && arg_310[0] != arg_219[1] && arg_33[0] != arg_280[1] && arg_33[0] != arg_79[1] && arg_33[0] != arg_191[1] && arg_33[0] != arg_194[1] && arg_33[0] == arg_131[0] && arg_33[0] != arg_222[1] && arg_33[0] == arg_211[0] && arg_33[0] == arg_251[0] && arg_33[0] != arg_202[1] && arg_33[0] == arg_272[0] && arg_33[0] != arg_251[1] && arg_33[0] != arg_318[1] && arg_33[0] != arg_211[1] && arg_33[0] == arg_277[0] && arg_33[0] == arg_82[0] && arg_33[0] == arg_222[0] && arg_33[0] != arg_184[1] && arg_33[0] != arg_310[1] && arg_33[0] != arg_315[1] && arg_33[0] == arg_23[0] && arg_33[0] != arg_41[1] && arg_33[0] != arg_56[1] && arg_33[0] != arg_71[1] && arg_33[0] != arg_157[1] && arg_33[0] == arg_232[0] && arg_33[0] != arg_15[1] && arg_33[0] == arg_262[0] && arg_33[0] == arg_269[0] && arg_33[0] != arg_114[1] && arg_33[0] == arg_56[0] && arg_33[0] == arg_219[0] && arg_33[0] != arg_18[1] && arg_33[0] == arg_93[0] && arg_33[0] == arg_202[0] && arg_33[0] == arg_315[0] && arg_33[0] != arg_240[1] && arg_33[0] != arg_176[1] && arg_33[0] != arg_181[1] && arg_33[0] == arg_114[0] && arg_33[0] == arg_122[0] && arg_33[0] == arg_142[0] && arg_33[0] != arg_142[1] && arg_33[0] == arg_79[0] && arg_33[0] == arg_152[0] && arg_33[0] != arg_173[1] && arg_33[0] == arg_237[0] && arg_33[0] != arg_277[1] && arg_33[0] != arg_139[1] && arg_33[0] != arg_96[1] && arg_33[0] != arg_131[1] && arg_33[0] != arg_229[1] && arg_33[0] == arg_15[0] && arg_33[0] == arg_101[0] && arg_33[0] == arg_184[0] && arg_33[0] != arg_262[1] && arg_33[0] == arg_41[0] && arg_33[0] != arg_93[1] && arg_33[0] == arg_18[0] && arg_33[0] != arg_214[1] && arg_33[0] == arg_119[0] && arg_33[0] == arg_214[0] && arg_33[0] == arg_139[0] && arg_33[0] == arg_307[0] && arg_33[0] != arg_149[1] && arg_33[0] == arg_134[0] && arg_33[0] != arg_219[1] && arg_280[1] == arg_79[1] && arg_280[1] == arg_191[1] && arg_280[1] == arg_194[1] && arg_280[1] != arg_131[0] && arg_280[1] == arg_222[1] && arg_280[1] != arg_211[0] && arg_280[1] != arg_251[0] && arg_280[1] == arg_202[1] && arg_280[1] != arg_272[0] && arg_280[1] == arg_251[1] && arg_280[1] == arg_318[1] && arg_280[1] == arg_211[1] && arg_280[1] != arg_277[0] && arg_280[1] != arg_82[0] && arg_280[1] != arg_222[0] && arg_280[1] == arg_184[1] && arg_280[1] == arg_310[1] && arg_280[1] == arg_315[1] && arg_280[1] != arg_23[0] && arg_280[1] == arg_41[1] && arg_280[1] == arg_56[1] && arg_280[1] == arg_71[1] && arg_280[1] == arg_157[1] && arg_280[1] != arg_232[0] && arg_280[1] == arg_15[1] && arg_280[1] != arg_262[0] && arg_280[1] != arg_269[0] && arg_280[1] == arg_114[1] && arg_280[1] != arg_56[0] && arg_280[1] != arg_219[0] && arg_280[1] == arg_18[1] && arg_280[1] != arg_93[0] && arg_280[1] != arg_202[0] && arg_280[1] != arg_315[0] && arg_280[1] == arg_240[1] && arg_280[1] == arg_176[1] && arg_280[1] == arg_181[1] && arg_280[1] != arg_114[0] && arg_280[1] != arg_122[0] && arg_280[1] != arg_142[0] && arg_280[1] == arg_142[1] && arg_280[1] != arg_79[0] && arg_280[1] != arg_152[0] && arg_280[1] == arg_173[1] && arg_280[1] != arg_237[0] && arg_280[1] == arg_277[1] && arg_280[1] == arg_139[1] && arg_280[1] == arg_96[1] && arg_280[1] == arg_131[1] && arg_280[1] == arg_229[1] && arg_280[1] != arg_15[0] && arg_280[1] != arg_101[0] && arg_280[1] != arg_184[0] && arg_280[1] == arg_262[1] && arg_280[1] != arg_41[0] && arg_280[1] == arg_93[1] && arg_280[1] != arg_18[0] && arg_280[1] == arg_214[1] && arg_280[1] != arg_119[0] && arg_280[1] != arg_214[0] && arg_280[1] != arg_139[0] && arg_280[1] != arg_307[0] && arg_280[1] == arg_149[1] && arg_280[1] != arg_134[0] && arg_280[1] == arg_219[1] && arg_79[1] == arg_191[1] && arg_79[1] == arg_194[1] && arg_79[1] != arg_131[0] && arg_79[1] == arg_222[1] && arg_79[1] != arg_211[0] && arg_79[1] != arg_251[0] && arg_79[1] == arg_202[1] && arg_79[1] != arg_272[0] && arg_79[1] == arg_251[1] && arg_79[1] == arg_318[1] && arg_79[1] == arg_211[1] && arg_79[1] != arg_277[0] && arg_79[1] != arg_82[0] && arg_79[1] != arg_222[0] && arg_79[1] == arg_184[1] && arg_79[1] == arg_310[1] && arg_79[1] == arg_315[1] && arg_79[1] != arg_23[0] && arg_79[1] == arg_41[1] && arg_79[1] == arg_56[1] && arg_79[1] == arg_71[1] && arg_79[1] == arg_157[1] && arg_79[1] != arg_232[0] && arg_79[1] == arg_15[1] && arg_79[1] != arg_262[0] && arg_79[1] != arg_269[0] && arg_79[1] == arg_114[1] && arg_79[1] != arg_56[0] && arg_79[1] != arg_219[0] && arg_79[1] == arg_18[1] && arg_79[1] != arg_93[0] && arg_79[1] != arg_202[0] && arg_79[1] != arg_315[0] && arg_79[1] == arg_240[1] && arg_79[1] == arg_176[1] && arg_79[1] == arg_181[1] && arg_79[1] != arg_114[0] && arg_79[1] != arg_122[0] && arg_79[1] != arg_142[0] && arg_79[1] == arg_142[1] && arg_79[1] != arg_79[0] && arg_79[1] != arg_152[0] && arg_79[1] == arg_173[1] && arg_79[1] != arg_237[0] && arg_79[1] == arg_277[1] && arg_79[1] == arg_139[1] && arg_79[1] == arg_96[1] && arg_79[1] == arg_131[1] && arg_79[1] == arg_229[1] && arg_79[1] != arg_15[0] && arg_79[1] != arg_101[0] && arg_79[1] != arg_184[0] && arg_79[1] == arg_262[1] && arg_79[1] != arg_41[0] && arg_79[1] == arg_93[1] && arg_79[1] != arg_18[0] && arg_79[1] == arg_214[1] && arg_79[1] != arg_119[0] && arg_79[1] != arg_214[0] && arg_79[1] != arg_139[0] && arg_79[1] != arg_307[0] && arg_79[1] == arg_149[1] && arg_79[1] != arg_134[0] && arg_79[1] == arg_219[1] && arg_191[1] == arg_194[1] && arg_191[1] != arg_131[0] && arg_191[1] == arg_222[1] && arg_191[1] != arg_211[0] && arg_191[1] != arg_251[0] && arg_191[1] == arg_202[1] && arg_191[1] != arg_272[0] && arg_191[1] == arg_251[1] && arg_191[1] == arg_318[1] && arg_191[1] == arg_211[1] && arg_191[1] != arg_277[0] && arg_191[1] != arg_82[0] && arg_191[1] != arg_222[0] && arg_191[1] == arg_184[1] && arg_191[1] == arg_310[1] && arg_191[1] == arg_315[1] && arg_191[1] != arg_23[0] && arg_191[1] == arg_41[1] && arg_191[1] == arg_56[1] && arg_191[1] == arg_71[1] && arg_191[1] == arg_157[1] && arg_191[1] != arg_232[0] && arg_191[1] == arg_15[1] && arg_191[1] != arg_262[0] && arg_191[1] != arg_269[0] && arg_191[1] == arg_114[1] && arg_191[1] != arg_56[0] && arg_191[1] != arg_219[0] && arg_191[1] == arg_18[1] && arg_191[1] != arg_93[0] && arg_191[1] != arg_202[0] && arg_191[1] != arg_315[0] && arg_191[1] == arg_240[1] && arg_191[1] == arg_176[1] && arg_191[1] == arg_181[1] && arg_191[1] != arg_114[0] && arg_191[1] != arg_122[0] && arg_191[1] != arg_142[0] && arg_191[1] == arg_142[1] && arg_191[1] != arg_79[0] && arg_191[1] != arg_152[0] && arg_191[1] == arg_173[1] && arg_191[1] != arg_237[0] && arg_191[1] == arg_277[1] && arg_191[1] == arg_139[1] && arg_191[1] == arg_96[1] && arg_191[1] == arg_131[1] && arg_191[1] == arg_229[1] && arg_191[1] != arg_15[0] && arg_191[1] != arg_101[0] && arg_191[1] != arg_184[0] && arg_191[1] == arg_262[1] && arg_191[1] != arg_41[0] && arg_191[1] == arg_93[1] && arg_191[1] != arg_18[0] && arg_191[1] == arg_214[1] && arg_191[1] != arg_119[0] && arg_191[1] != arg_214[0] && arg_191[1] != arg_139[0] && arg_191[1] != arg_307[0] && arg_191[1] == arg_149[1] && arg_191[1] != arg_134[0] && arg_191[1] == arg_219[1] && arg_194[1] != arg_131[0] && arg_194[1] == arg_222[1] && arg_194[1] != arg_211[0] && arg_194[1] != arg_251[0] && arg_194[1] == arg_202[1] && arg_194[1] != arg_272[0] && arg_194[1] == arg_251[1] && arg_194[1] == arg_318[1] && arg_194[1] == arg_211[1] && arg_194[1] != arg_277[0] && arg_194[1] != arg_82[0] && arg_194[1] != arg_222[0] && arg_194[1] == arg_184[1] && arg_194[1] == arg_310[1] && arg_194[1] == arg_315[1] && arg_194[1] != arg_23[0] && arg_194[1] == arg_41[1] && arg_194[1] == arg_56[1] && arg_194[1] == arg_71[1] && arg_194[1] == arg_157[1] && arg_194[1] != arg_232[0] && arg_194[1] == arg_15[1] && arg_194[1] != arg_262[0] && arg_194[1] != arg_269[0] && arg_194[1] == arg_114[1] && arg_194[1] != arg_56[0] && arg_194[1] != arg_219[0] && arg_194[1] == arg_18[1] && arg_194[1] != arg_93[0] && arg_194[1] != arg_202[0] && arg_194[1] != arg_315[0] && arg_194[1] == arg_240[1] && arg_194[1] == arg_176[1] && arg_194[1] == arg_181[1] && arg_194[1] != arg_114[0] && arg_194[1] != arg_122[0] && arg_194[1] != arg_142[0] && arg_194[1] == arg_142[1] && arg_194[1] != arg_79[0] && arg_194[1] != arg_152[0] && arg_194[1] == arg_173[1] && arg_194[1] != arg_237[0] && arg_194[1] == arg_277[1] && arg_194[1] == arg_139[1] && arg_194[1] == arg_96[1] && arg_194[1] == arg_131[1] && arg_194[1] == arg_229[1] && arg_194[1] != arg_15[0] && arg_194[1] != arg_101[0] && arg_194[1] != arg_184[0] && arg_194[1] == arg_262[1] && arg_194[1] != arg_41[0] && arg_194[1] == arg_93[1] && arg_194[1] != arg_18[0] && arg_194[1] == arg_214[1] && arg_194[1] != arg_119[0] && arg_194[1] != arg_214[0] && arg_194[1] != arg_139[0] && arg_194[1] != arg_307[0] && arg_194[1] == arg_149[1] && arg_194[1] != arg_134[0] && arg_194[1] == arg_219[1] && arg_131[0] != arg_222[1] && arg_131[0] == arg_211[0] && arg_131[0] == arg_251[0] && arg_131[0] != arg_202[1] && arg_131[0] == arg_272[0] && arg_131[0] != arg_251[1] && arg_131[0] != arg_318[1] && arg_131[0] != arg_211[1] && arg_131[0] == arg_277[0] && arg_131[0] == arg_82[0] && arg_131[0] == arg_222[0] && arg_131[0] != arg_184[1] && arg_131[0] != arg_310[1] && arg_131[0] != arg_315[1] && arg_131[0] == arg_23[0] && arg_131[0] != arg_41[1] && arg_131[0] != arg_56[1] && arg_131[0] != arg_71[1] && arg_131[0] != arg_157[1] && arg_131[0] == arg_232[0] && arg_131[0] != arg_15[1] && arg_131[0] == arg_262[0] && arg_131[0] == arg_269[0] && arg_131[0] != arg_114[1] && arg_131[0] == arg_56[0] && arg_131[0] == arg_219[0] && arg_131[0] != arg_18[1] && arg_131[0] == arg_93[0] && arg_131[0] == arg_202[0] && arg_131[0] == arg_315[0] && arg_131[0] != arg_240[1] && arg_131[0] != arg_176[1] && arg_131[0] != arg_181[1] && arg_131[0] == arg_114[0] && arg_131[0] == arg_122[0] && arg_131[0] == arg_142[0] && arg_131[0] != arg_142[1] && arg_131[0] == arg_79[0] && arg_131[0] == arg_152[0] && arg_131[0] != arg_173[1] && arg_131[0] == arg_237[0] && arg_131[0] != arg_277[1] && arg_131[0] != arg_139[1] && arg_131[0] != arg_96[1] && arg_131[0] != arg_131[1] && arg_131[0] != arg_229[1] && arg_131[0] == arg_15[0] && arg_131[0] == arg_101[0] && arg_131[0] == arg_184[0] && arg_131[0] != arg_262[1] && arg_131[0] == arg_41[0] && arg_131[0] != arg_93[1] && arg_131[0] == arg_18[0] && arg_131[0] != arg_214[1] && arg_131[0] == arg_119[0] && arg_131[0] == arg_214[0] && arg_131[0] == arg_139[0] && arg_131[0] == arg_307[0] && arg_131[0] != arg_149[1] && arg_131[0] == arg_134[0] && arg_131[0] != arg_219[1] && arg_222[1] != arg_211[0] && arg_222[1] != arg_251[0] && arg_222[1] == arg_202[1] && arg_222[1] != arg_272[0] && arg_222[1] == arg_251[1] && arg_222[1] == arg_318[1] && arg_222[1] == arg_211[1] && arg_222[1] != arg_277[0] && arg_222[1] != arg_82[0] && arg_222[1] != arg_222[0] && arg_222[1] == arg_184[1] && arg_222[1] == arg_310[1] && arg_222[1] == arg_315[1] && arg_222[1] != arg_23[0] && arg_222[1] == arg_41[1] && arg_222[1] == arg_56[1] && arg_222[1] == arg_71[1] && arg_222[1] == arg_157[1] && arg_222[1] != arg_232[0] && arg_222[1] == arg_15[1] && arg_222[1] != arg_262[0] && arg_222[1] != arg_269[0] && arg_222[1] == arg_114[1] && arg_222[1] != arg_56[0] && arg_222[1] != arg_219[0] && arg_222[1] == arg_18[1] && arg_222[1] != arg_93[0] && arg_222[1] != arg_202[0] && arg_222[1] != arg_315[0] && arg_222[1] == arg_240[1] && arg_222[1] == arg_176[1] && arg_222[1] == arg_181[1] && arg_222[1] != arg_114[0] && arg_222[1] != arg_122[0] && arg_222[1] != arg_142[0] && arg_222[1] == arg_142[1] && arg_222[1] != arg_79[0] && arg_222[1] != arg_152[0] && arg_222[1] == arg_173[1] && arg_222[1] != arg_237[0] && arg_222[1] == arg_277[1] && arg_222[1] == arg_139[1] && arg_222[1] == arg_96[1] && arg_222[1] == arg_131[1] && arg_222[1] == arg_229[1] && arg_222[1] != arg_15[0] && arg_222[1] != arg_101[0] && arg_222[1] != arg_184[0] && arg_222[1] == arg_262[1] && arg_222[1] != arg_41[0] && arg_222[1] == arg_93[1] && arg_222[1] != arg_18[0] && arg_222[1] == arg_214[1] && arg_222[1] != arg_119[0] && arg_222[1] != arg_214[0] && arg_222[1] != arg_139[0] && arg_222[1] != arg_307[0] && arg_222[1] == arg_149[1] && arg_222[1] != arg_134[0] && arg_222[1] == arg_219[1] && arg_211[0] == arg_251[0] && arg_211[0] != arg_202[1] && arg_211[0] == arg_272[0] && arg_211[0] != arg_251[1] && arg_211[0] != arg_318[1] && arg_211[0] != arg_211[1] && arg_211[0] == arg_277[0] && arg_211[0] == arg_82[0] && arg_211[0] == arg_222[0] && arg_211[0] != arg_184[1] && arg_211[0] != arg_310[1] && arg_211[0] != arg_315[1] && arg_211[0] == arg_23[0] && arg_211[0] != arg_41[1] && arg_211[0] != arg_56[1] && arg_211[0] != arg_71[1] && arg_211[0] != arg_157[1] && arg_211[0] == arg_232[0] && arg_211[0] != arg_15[1] && arg_211[0] == arg_262[0] && arg_211[0] == arg_269[0] && arg_211[0] != arg_114[1] && arg_211[0] == arg_56[0] && arg_211[0] == arg_219[0] && arg_211[0] != arg_18[1] && arg_211[0] == arg_93[0] && arg_211[0] == arg_202[0] && arg_211[0] == arg_315[0] && arg_211[0] != arg_240[1] && arg_211[0] != arg_176[1] && arg_211[0] != arg_181[1] && arg_211[0] == arg_114[0] && arg_211[0] == arg_122[0] && arg_211[0] == arg_142[0] && arg_211[0] != arg_142[1] && arg_211[0] == arg_79[0] && arg_211[0] == arg_152[0] && arg_211[0] != arg_173[1] && arg_211[0] == arg_237[0] && arg_211[0] != arg_277[1] && arg_211[0] != arg_139[1] && arg_211[0] != arg_96[1] && arg_211[0] != arg_131[1] && arg_211[0] != arg_229[1] && arg_211[0] == arg_15[0] && arg_211[0] == arg_101[0] && arg_211[0] == arg_184[0] && arg_211[0] != arg_262[1] && arg_211[0] == arg_41[0] && arg_211[0] != arg_93[1] && arg_211[0] == arg_18[0] && arg_211[0] != arg_214[1] && arg_211[0] == arg_119[0] && arg_211[0] == arg_214[0] && arg_211[0] == arg_139[0] && arg_211[0] == arg_307[0] && arg_211[0] != arg_149[1] && arg_211[0] == arg_134[0] && arg_211[0] != arg_219[1] && arg_251[0] != arg_202[1] && arg_251[0] == arg_272[0] && arg_251[0] != arg_251[1] && arg_251[0] != arg_318[1] && arg_251[0] != arg_211[1] && arg_251[0] == arg_277[0] && arg_251[0] == arg_82[0] && arg_251[0] == arg_222[0] && arg_251[0] != arg_184[1] && arg_251[0] != arg_310[1] && arg_251[0] != arg_315[1] && arg_251[0] == arg_23[0] && arg_251[0] != arg_41[1] && arg_251[0] != arg_56[1] && arg_251[0] != arg_71[1] && arg_251[0] != arg_157[1] && arg_251[0] == arg_232[0] && arg_251[0] != arg_15[1] && arg_251[0] == arg_262[0] && arg_251[0] == arg_269[0] && arg_251[0] != arg_114[1] && arg_251[0] == arg_56[0] && arg_251[0] == arg_219[0] && arg_251[0] != arg_18[1] && arg_251[0] == arg_93[0] && arg_251[0] == arg_202[0] && arg_251[0] == arg_315[0] && arg_251[0] != arg_240[1] && arg_251[0] != arg_176[1] && arg_251[0] != arg_181[1] && arg_251[0] == arg_114[0] && arg_251[0] == arg_122[0] && arg_251[0] == arg_142[0] && arg_251[0] != arg_142[1] && arg_251[0] == arg_79[0] && arg_251[0] == arg_152[0] && arg_251[0] != arg_173[1] && arg_251[0] == arg_237[0] && arg_251[0] != arg_277[1] && arg_251[0] != arg_139[1] && arg_251[0] != arg_96[1] && arg_251[0] != arg_131[1] && arg_251[0] != arg_229[1] && arg_251[0] == arg_15[0] && arg_251[0] == arg_101[0] && arg_251[0] == arg_184[0] && arg_251[0] != arg_262[1] && arg_251[0] == arg_41[0] && arg_251[0] != arg_93[1] && arg_251[0] == arg_18[0] && arg_251[0] != arg_214[1] && arg_251[0] == arg_119[0] && arg_251[0] == arg_214[0] && arg_251[0] == arg_139[0] && arg_251[0] == arg_307[0] && arg_251[0] != arg_149[1] && arg_251[0] == arg_134[0] && arg_251[0] != arg_219[1] && arg_202[1] != arg_272[0] && arg_202[1] == arg_251[1] && arg_202[1] == arg_318[1] && arg_202[1] == arg_211[1] && arg_202[1] != arg_277[0] && arg_202[1] != arg_82[0] && arg_202[1] != arg_222[0] && arg_202[1] == arg_184[1] && arg_202[1] == arg_310[1] && arg_202[1] == arg_315[1] && arg_202[1] != arg_23[0] && arg_202[1] == arg_41[1] && arg_202[1] == arg_56[1] && arg_202[1] == arg_71[1] && arg_202[1] == arg_157[1] && arg_202[1] != arg_232[0] && arg_202[1] == arg_15[1] && arg_202[1] != arg_262[0] && arg_202[1] != arg_269[0] && arg_202[1] == arg_114[1] && arg_202[1] != arg_56[0] && arg_202[1] != arg_219[0] && arg_202[1] == arg_18[1] && arg_202[1] != arg_93[0] && arg_202[1] != arg_202[0] && arg_202[1] != arg_315[0] && arg_202[1] == arg_240[1] && arg_202[1] == arg_176[1] && arg_202[1] == arg_181[1] && arg_202[1] != arg_114[0] && arg_202[1] != arg_122[0] && arg_202[1] != arg_142[0] && arg_202[1] == arg_142[1] && arg_202[1] != arg_79[0] && arg_202[1] != arg_152[0] && arg_202[1] == arg_173[1] && arg_202[1] != arg_237[0] && arg_202[1] == arg_277[1] && arg_202[1] == arg_139[1] && arg_202[1] == arg_96[1] && arg_202[1] == arg_131[1] && arg_202[1] == arg_229[1] && arg_202[1] != arg_15[0] && arg_202[1] != arg_101[0] && arg_202[1] != arg_184[0] && arg_202[1] == arg_262[1] && arg_202[1] != arg_41[0] && arg_202[1] == arg_93[1] && arg_202[1] != arg_18[0] && arg_202[1] == arg_214[1] && arg_202[1] != arg_119[0] && arg_202[1] != arg_214[0] && arg_202[1] != arg_139[0] && arg_202[1] != arg_307[0] && arg_202[1] == arg_149[1] && arg_202[1] != arg_134[0] && arg_202[1] == arg_219[1] && arg_272[0] != arg_251[1] && arg_272[0] != arg_318[1] && arg_272[0] != arg_211[1] && arg_272[0] == arg_277[0] && arg_272[0] == arg_82[0] && arg_272[0] == arg_222[0] && arg_272[0] != arg_184[1] && arg_272[0] != arg_310[1] && arg_272[0] != arg_315[1] && arg_272[0] == arg_23[0] && arg_272[0] != arg_41[1] && arg_272[0] != arg_56[1] && arg_272[0] != arg_71[1] && arg_272[0] != arg_157[1] && arg_272[0] == arg_232[0] && arg_272[0] != arg_15[1] && arg_272[0] == arg_262[0] && arg_272[0] == arg_269[0] && arg_272[0] != arg_114[1] && arg_272[0] == arg_56[0] && arg_272[0] == arg_219[0] && arg_272[0] != arg_18[1] && arg_272[0] == arg_93[0] && arg_272[0] == arg_202[0] && arg_272[0] == arg_315[0] && arg_272[0] != arg_240[1] && arg_272[0] != arg_176[1] && arg_272[0] != arg_181[1] && arg_272[0] == arg_114[0] && arg_272[0] == arg_122[0] && arg_272[0] == arg_142[0] && arg_272[0] != arg_142[1] && arg_272[0] == arg_79[0] && arg_272[0] == arg_152[0] && arg_272[0] != arg_173[1] && arg_272[0] == arg_237[0] && arg_272[0] != arg_277[1] && arg_272[0] != arg_139[1] && arg_272[0] != arg_96[1] && arg_272[0] != arg_131[1] && arg_272[0] != arg_229[1] && arg_272[0] == arg_15[0] && arg_272[0] == arg_101[0] && arg_272[0] == arg_184[0] && arg_272[0] != arg_262[1] && arg_272[0] == arg_41[0] && arg_272[0] != arg_93[1] && arg_272[0] == arg_18[0] && arg_272[0] != arg_214[1] && arg_272[0] == arg_119[0] && arg_272[0] == arg_214[0] && arg_272[0] == arg_139[0] && arg_272[0] == arg_307[0] && arg_272[0] != arg_149[1] && arg_272[0] == arg_134[0] && arg_272[0] != arg_219[1] && arg_251[1] == arg_318[1] && arg_251[1] == arg_211[1] && arg_251[1] != arg_277[0] && arg_251[1] != arg_82[0] && arg_251[1] != arg_222[0] && arg_251[1] == arg_184[1] && arg_251[1] == arg_310[1] && arg_251[1] == arg_315[1] && arg_251[1] != arg_23[0] && arg_251[1] == arg_41[1] && arg_251[1] == arg_56[1] && arg_251[1] == arg_71[1] && arg_251[1] == arg_157[1] && arg_251[1] != arg_232[0] && arg_251[1] == arg_15[1] && arg_251[1] != arg_262[0] && arg_251[1] != arg_269[0] && arg_251[1] == arg_114[1] && arg_251[1] != arg_56[0] && arg_251[1] != arg_219[0] && arg_251[1] == arg_18[1] && arg_251[1] != arg_93[0] && arg_251[1] != arg_202[0] && arg_251[1] != arg_315[0] && arg_251[1] == arg_240[1] && arg_251[1] == arg_176[1] && arg_251[1] == arg_181[1] && arg_251[1] != arg_114[0] && arg_251[1] != arg_122[0] && arg_251[1] != arg_142[0] && arg_251[1] == arg_142[1] && arg_251[1] != arg_79[0] && arg_251[1] != arg_152[0] && arg_251[1] == arg_173[1] && arg_251[1] != arg_237[0] && arg_251[1] == arg_277[1] && arg_251[1] == arg_139[1] && arg_251[1] == arg_96[1] && arg_251[1] == arg_131[1] && arg_251[1] == arg_229[1] && arg_251[1] != arg_15[0] && arg_251[1] != arg_101[0] && arg_251[1] != arg_184[0] && arg_251[1] == arg_262[1] && arg_251[1] != arg_41[0] && arg_251[1] == arg_93[1] && arg_251[1] != arg_18[0] && arg_251[1] == arg_214[1] && arg_251[1] != arg_119[0] && arg_251[1] != arg_214[0] && arg_251[1] != arg_139[0] && arg_251[1] != arg_307[0] && arg_251[1] == arg_149[1] && arg_251[1] != arg_134[0] && arg_251[1] == arg_219[1] && arg_318[1] == arg_211[1] && arg_318[1] != arg_277[0] && arg_318[1] != arg_82[0] && arg_318[1] != arg_222[0] && arg_318[1] == arg_184[1] && arg_318[1] == arg_310[1] && arg_318[1] == arg_315[1] && arg_318[1] != arg_23[0] && arg_318[1] == arg_41[1] && arg_318[1] == arg_56[1] && arg_318[1] == arg_71[1] && arg_318[1] == arg_157[1] && arg_318[1] != arg_232[0] && arg_318[1] == arg_15[1] && arg_318[1] != arg_262[0] && arg_318[1] != arg_269[0] && arg_318[1] == arg_114[1] && arg_318[1] != arg_56[0] && arg_318[1] != arg_219[0] && arg_318[1] == arg_18[1] && arg_318[1] != arg_93[0] && arg_318[1] != arg_202[0] && arg_318[1] != arg_315[0] && arg_318[1] == arg_240[1] && arg_318[1] == arg_176[1] && arg_318[1] == arg_181[1] && arg_318[1] != arg_114[0] && arg_318[1] != arg_122[0] && arg_318[1] != arg_142[0] && arg_318[1] == arg_142[1] && arg_318[1] != arg_79[0] && arg_318[1] != arg_152[0] && arg_318[1] == arg_173[1] && arg_318[1] != arg_237[0] && arg_318[1] == arg_277[1] && arg_318[1] == arg_139[1] && arg_318[1] == arg_96[1] && arg_318[1] == arg_131[1] && arg_318[1] == arg_229[1] && arg_318[1] != arg_15[0] && arg_318[1] != arg_101[0] && arg_318[1] != arg_184[0] && arg_318[1] == arg_262[1] && arg_318[1] != arg_41[0] && arg_318[1] == arg_93[1] && arg_318[1] != arg_18[0] && arg_318[1] == arg_214[1] && arg_318[1] != arg_119[0] && arg_318[1] != arg_214[0] && arg_318[1] != arg_139[0] && arg_318[1] != arg_307[0] && arg_318[1] == arg_149[1] && arg_318[1] != arg_134[0] && arg_318[1] == arg_219[1] && arg_211[1] != arg_277[0] && arg_211[1] != arg_82[0] && arg_211[1] != arg_222[0] && arg_211[1] == arg_184[1] && arg_211[1] == arg_310[1] && arg_211[1] == arg_315[1] && arg_211[1] != arg_23[0] && arg_211[1] == arg_41[1] && arg_211[1] == arg_56[1] && arg_211[1] == arg_71[1] && arg_211[1] == arg_157[1] && arg_211[1] != arg_232[0] && arg_211[1] == arg_15[1] && arg_211[1] != arg_262[0] && arg_211[1] != arg_269[0] && arg_211[1] == arg_114[1] && arg_211[1] != arg_56[0] && arg_211[1] != arg_219[0] && arg_211[1] == arg_18[1] && arg_211[1] != arg_93[0] && arg_211[1] != arg_202[0] && arg_211[1] != arg_315[0] && arg_211[1] == arg_240[1] && arg_211[1] == arg_176[1] && arg_211[1] == arg_181[1] && arg_211[1] != arg_114[0] && arg_211[1] != arg_122[0] && arg_211[1] != arg_142[0] && arg_211[1] == arg_142[1] && arg_211[1] != arg_79[0] && arg_211[1] != arg_152[0] && arg_211[1] == arg_173[1] && arg_211[1] != arg_237[0] && arg_211[1] == arg_277[1] && arg_211[1] == arg_139[1] && arg_211[1] == arg_96[1] && arg_211[1] == arg_131[1] && arg_211[1] == arg_229[1] && arg_211[1] != arg_15[0] && arg_211[1] != arg_101[0] && arg_211[1] != arg_184[0] && arg_211[1] == arg_262[1] && arg_211[1] != arg_41[0] && arg_211[1] == arg_93[1] && arg_211[1] != arg_18[0] && arg_211[1] == arg_214[1] && arg_211[1] != arg_119[0] && arg_211[1] != arg_214[0] && arg_211[1] != arg_139[0] && arg_211[1] != arg_307[0] && arg_211[1] == arg_149[1] && arg_211[1] != arg_134[0] && arg_211[1] == arg_219[1] && arg_277[0] == arg_82[0] && arg_277[0] == arg_222[0] && arg_277[0] != arg_184[1] && arg_277[0] != arg_310[1] && arg_277[0] != arg_315[1] && arg_277[0] == arg_23[0] && arg_277[0] != arg_41[1] && arg_277[0] != arg_56[1] && arg_277[0] != arg_71[1] && arg_277[0] != arg_157[1] && arg_277[0] == arg_232[0] && arg_277[0] != arg_15[1] && arg_277[0] == arg_262[0] && arg_277[0] == arg_269[0] && arg_277[0] != arg_114[1] && arg_277[0] == arg_56[0] && arg_277[0] == arg_219[0] && arg_277[0] != arg_18[1] && arg_277[0] == arg_93[0] && arg_277[0] == arg_202[0] && arg_277[0] == arg_315[0] && arg_277[0] != arg_240[1] && arg_277[0] != arg_176[1] && arg_277[0] != arg_181[1] && arg_277[0] == arg_114[0] && arg_277[0] == arg_122[0] && arg_277[0] == arg_142[0] && arg_277[0] != arg_142[1] && arg_277[0] == arg_79[0] && arg_277[0] == arg_152[0] && arg_277[0] != arg_173[1] && arg_277[0] == arg_237[0] && arg_277[0] != arg_277[1] && arg_277[0] != arg_139[1] && arg_277[0] != arg_96[1] && arg_277[0] != arg_131[1] && arg_277[0] != arg_229[1] && arg_277[0] == arg_15[0] && arg_277[0] == arg_101[0] && arg_277[0] == arg_184[0] && arg_277[0] != arg_262[1] && arg_277[0] == arg_41[0] && arg_277[0] != arg_93[1] && arg_277[0] == arg_18[0] && arg_277[0] != arg_214[1] && arg_277[0] == arg_119[0] && arg_277[0] == arg_214[0] && arg_277[0] == arg_139[0] && arg_277[0] == arg_307[0] && arg_277[0] != arg_149[1] && arg_277[0] == arg_134[0] && arg_277[0] != arg_219[1] && arg_82[0] == arg_222[0] && arg_82[0] != arg_184[1] && arg_82[0] != arg_310[1] && arg_82[0] != arg_315[1] && arg_82[0] == arg_23[0] && arg_82[0] != arg_41[1] && arg_82[0] != arg_56[1] && arg_82[0] != arg_71[1] && arg_82[0] != arg_157[1] && arg_82[0] == arg_232[0] && arg_82[0] != arg_15[1] && arg_82[0] == arg_262[0] && arg_82[0] == arg_269[0] && arg_82[0] != arg_114[1] && arg_82[0] == arg_56[0] && arg_82[0] == arg_219[0] && arg_82[0] != arg_18[1] && arg_82[0] == arg_93[0] && arg_82[0] == arg_202[0] && arg_82[0] == arg_315[0] && arg_82[0] != arg_240[1] && arg_82[0] != arg_176[1] && arg_82[0] != arg_181[1] && arg_82[0] == arg_114[0] && arg_82[0] == arg_122[0] && arg_82[0] == arg_142[0] && arg_82[0] != arg_142[1] && arg_82[0] == arg_79[0] && arg_82[0] == arg_152[0] && arg_82[0] != arg_173[1] && arg_82[0] == arg_237[0] && arg_82[0] != arg_277[1] && arg_82[0] != arg_139[1] && arg_82[0] != arg_96[1] && arg_82[0] != arg_131[1] && arg_82[0] != arg_229[1] && arg_82[0] == arg_15[0] && arg_82[0] == arg_101[0] && arg_82[0] == arg_184[0] && arg_82[0] != arg_262[1] && arg_82[0] == arg_41[0] && arg_82[0] != arg_93[1] && arg_82[0] == arg_18[0] && arg_82[0] != arg_214[1] && arg_82[0] == arg_119[0] && arg_82[0] == arg_214[0] && arg_82[0] == arg_139[0] && arg_82[0] == arg_307[0] && arg_82[0] != arg_149[1] && arg_82[0] == arg_134[0] && arg_82[0] != arg_219[1] && arg_222[0] != arg_184[1] && arg_222[0] != arg_310[1] && arg_222[0] != arg_315[1] && arg_222[0] == arg_23[0] && arg_222[0] != arg_41[1] && arg_222[0] != arg_56[1] && arg_222[0] != arg_71[1] && arg_222[0] != arg_157[1] && arg_222[0] == arg_232[0] && arg_222[0] != arg_15[1] && arg_222[0] == arg_262[0] && arg_222[0] == arg_269[0] && arg_222[0] != arg_114[1] && arg_222[0] == arg_56[0] && arg_222[0] == arg_219[0] && arg_222[0] != arg_18[1] && arg_222[0] == arg_93[0] && arg_222[0] == arg_202[0] && arg_222[0] == arg_315[0] && arg_222[0] != arg_240[1] && arg_222[0] != arg_176[1] && arg_222[0] != arg_181[1] && arg_222[0] == arg_114[0] && arg_222[0] == arg_122[0] && arg_222[0] == arg_142[0] && arg_222[0] != arg_142[1] && arg_222[0] == arg_79[0] && arg_222[0] == arg_152[0] && arg_222[0] != arg_173[1] && arg_222[0] == arg_237[0] && arg_222[0] != arg_277[1] && arg_222[0] != arg_139[1] && arg_222[0] != arg_96[1] && arg_222[0] != arg_131[1] && arg_222[0] != arg_229[1] && arg_222[0] == arg_15[0] && arg_222[0] == arg_101[0] && arg_222[0] == arg_184[0] && arg_222[0] != arg_262[1] && arg_222[0] == arg_41[0] && arg_222[0] != arg_93[1] && arg_222[0] == arg_18[0] && arg_222[0] != arg_214[1] && arg_222[0] == arg_119[0] && arg_222[0] == arg_214[0] && arg_222[0] == arg_139[0] && arg_222[0] == arg_307[0] && arg_222[0] != arg_149[1] && arg_222[0] == arg_134[0] && arg_222[0] != arg_219[1] && arg_184[1] == arg_310[1] && arg_184[1] == arg_315[1] && arg_184[1] != arg_23[0] && arg_184[1] == arg_41[1] && arg_184[1] == arg_56[1] && arg_184[1] == arg_71[1] && arg_184[1] == arg_157[1] && arg_184[1] != arg_232[0] && arg_184[1] == arg_15[1] && arg_184[1] != arg_262[0] && arg_184[1] != arg_269[0] && arg_184[1] == arg_114[1] && arg_184[1] != arg_56[0] && arg_184[1] != arg_219[0] && arg_184[1] == arg_18[1] && arg_184[1] != arg_93[0] && arg_184[1] != arg_202[0] && arg_184[1] != arg_315[0] && arg_184[1] == arg_240[1] && arg_184[1] == arg_176[1] && arg_184[1] == arg_181[1] && arg_184[1] != arg_114[0] && arg_184[1] != arg_122[0] && arg_184[1] != arg_142[0] && arg_184[1] == arg_142[1] && arg_184[1] != arg_79[0] && arg_184[1] != arg_152[0] && arg_184[1] == arg_173[1] && arg_184[1] != arg_237[0] && arg_184[1] == arg_277[1] && arg_184[1] == arg_139[1] && arg_184[1] == arg_96[1] && arg_184[1] == arg_131[1] && arg_184[1] == arg_229[1] && arg_184[1] != arg_15[0] && arg_184[1] != arg_101[0] && arg_184[1] != arg_184[0] && arg_184[1] == arg_262[1] && arg_184[1] != arg_41[0] && arg_184[1] == arg_93[1] && arg_184[1] != arg_18[0] && arg_184[1] == arg_214[1] && arg_184[1] != arg_119[0] && arg_184[1] != arg_214[0] && arg_184[1] != arg_139[0] && arg_184[1] != arg_307[0] && arg_184[1] == arg_149[1] && arg_184[1] != arg_134[0] && arg_184[1] == arg_219[1] && arg_310[1] == arg_315[1] && arg_310[1] != arg_23[0] && arg_310[1] == arg_41[1] && arg_310[1] == arg_56[1] && arg_310[1] == arg_71[1] && arg_310[1] == arg_157[1] && arg_310[1] != arg_232[0] && arg_310[1] == arg_15[1] && arg_310[1] != arg_262[0] && arg_310[1] != arg_269[0] && arg_310[1] == arg_114[1] && arg_310[1] != arg_56[0] && arg_310[1] != arg_219[0] && arg_310[1] == arg_18[1] && arg_310[1] != arg_93[0] && arg_310[1] != arg_202[0] && arg_310[1] != arg_315[0] && arg_310[1] == arg_240[1] && arg_310[1] == arg_176[1] && arg_310[1] == arg_181[1] && arg_310[1] != arg_114[0] && arg_310[1] != arg_122[0] && arg_310[1] != arg_142[0] && arg_310[1] == arg_142[1] && arg_310[1] != arg_79[0] && arg_310[1] != arg_152[0] && arg_310[1] == arg_173[1] && arg_310[1] != arg_237[0] && arg_310[1] == arg_277[1] && arg_310[1] == arg_139[1] && arg_310[1] == arg_96[1] && arg_310[1] == arg_131[1] && arg_310[1] == arg_229[1] && arg_310[1] != arg_15[0] && arg_310[1] != arg_101[0] && arg_310[1] != arg_184[0] && arg_310[1] == arg_262[1] && arg_310[1] != arg_41[0] && arg_310[1] == arg_93[1] && arg_310[1] != arg_18[0] && arg_310[1] == arg_214[1] && arg_310[1] != arg_119[0] && arg_310[1] != arg_214[0] && arg_310[1] != arg_139[0] && arg_310[1] != arg_307[0] && arg_310[1] == arg_149[1] && arg_310[1] != arg_134[0] && arg_310[1] == arg_219[1] && arg_315[1] != arg_23[0] && arg_315[1] == arg_41[1] && arg_315[1] == arg_56[1] && arg_315[1] == arg_71[1] && arg_315[1] == arg_157[1] && arg_315[1] != arg_232[0] && arg_315[1] == arg_15[1] && arg_315[1] != arg_262[0] && arg_315[1] != arg_269[0] && arg_315[1] == arg_114[1] && arg_315[1] != arg_56[0] && arg_315[1] != arg_219[0] && arg_315[1] == arg_18[1] && arg_315[1] != arg_93[0] && arg_315[1] != arg_202[0] && arg_315[1] != arg_315[0] && arg_315[1] == arg_240[1] && arg_315[1] == arg_176[1] && arg_315[1] == arg_181[1] && arg_315[1] != arg_114[0] && arg_315[1] != arg_122[0] && arg_315[1] != arg_142[0] && arg_315[1] == arg_142[1] && arg_315[1] != arg_79[0] && arg_315[1] != arg_152[0] && arg_315[1] == arg_173[1] && arg_315[1] != arg_237[0] && arg_315[1] == arg_277[1] && arg_315[1] == arg_139[1] && arg_315[1] == arg_96[1] && arg_315[1] == arg_131[1] && arg_315[1] == arg_229[1] && arg_315[1] != arg_15[0] && arg_315[1] != arg_101[0] && arg_315[1] != arg_184[0] && arg_315[1] == arg_262[1] && arg_315[1] != arg_41[0] && arg_315[1] == arg_93[1] && arg_315[1] != arg_18[0] && arg_315[1] == arg_214[1] && arg_315[1] != arg_119[0] && arg_315[1] != arg_214[0] && arg_315[1] != arg_139[0] && arg_315[1] != arg_307[0] && arg_315[1] == arg_149[1] && arg_315[1] != arg_134[0] && arg_315[1] == arg_219[1] && arg_23[0] != arg_41[1] && arg_23[0] != arg_56[1] && arg_23[0] != arg_71[1] && arg_23[0] != arg_157[1] && arg_23[0] == arg_232[0] && arg_23[0] != arg_15[1] && arg_23[0] == arg_262[0] && arg_23[0] == arg_269[0] && arg_23[0] != arg_114[1] && arg_23[0] == arg_56[0] && arg_23[0] == arg_219[0] && arg_23[0] != arg_18[1] && arg_23[0] == arg_93[0] && arg_23[0] == arg_202[0] && arg_23[0] == arg_315[0] && arg_23[0] != arg_240[1] && arg_23[0] != arg_176[1] && arg_23[0] != arg_181[1] && arg_23[0] == arg_114[0] && arg_23[0] == arg_122[0] && arg_23[0] == arg_142[0] && arg_23[0] != arg_142[1] && arg_23[0] == arg_79[0] && arg_23[0] == arg_152[0] && arg_23[0] != arg_173[1] && arg_23[0] == arg_237[0] && arg_23[0] != arg_277[1] && arg_23[0] != arg_139[1] && arg_23[0] != arg_96[1] && arg_23[0] != arg_131[1] && arg_23[0] != arg_229[1] && arg_23[0] == arg_15[0] && arg_23[0] == arg_101[0] && arg_23[0] == arg_184[0] && arg_23[0] != arg_262[1] && arg_23[0] == arg_41[0] && arg_23[0] != arg_93[1] && arg_23[0] == arg_18[0] && arg_23[0] != arg_214[1] && arg_23[0] == arg_119[0] && arg_23[0] == arg_214[0] && arg_23[0] == arg_139[0] && arg_23[0] == arg_307[0] && arg_23[0] != arg_149[1] && arg_23[0] == arg_134[0] && arg_23[0] != arg_219[1] && arg_41[1] == arg_56[1] && arg_41[1] == arg_71[1] && arg_41[1] == arg_157[1] && arg_41[1] != arg_232[0] && arg_41[1] == arg_15[1] && arg_41[1] != arg_262[0] && arg_41[1] != arg_269[0] && arg_41[1] == arg_114[1] && arg_41[1] != arg_56[0] && arg_41[1] != arg_219[0] && arg_41[1] == arg_18[1] && arg_41[1] != arg_93[0] && arg_41[1] != arg_202[0] && arg_41[1] != arg_315[0] && arg_41[1] == arg_240[1] && arg_41[1] == arg_176[1] && arg_41[1] == arg_181[1] && arg_41[1] != arg_114[0] && arg_41[1] != arg_122[0] && arg_41[1] != arg_142[0] && arg_41[1] == arg_142[1] && arg_41[1] != arg_79[0] && arg_41[1] != arg_152[0] && arg_41[1] == arg_173[1] && arg_41[1] != arg_237[0] && arg_41[1] == arg_277[1] && arg_41[1] == arg_139[1] && arg_41[1] == arg_96[1] && arg_41[1] == arg_131[1] && arg_41[1] == arg_229[1] && arg_41[1] != arg_15[0] && arg_41[1] != arg_101[0] && arg_41[1] != arg_184[0] && arg_41[1] == arg_262[1] && arg_41[1] != arg_41[0] && arg_41[1] == arg_93[1] && arg_41[1] != arg_18[0] && arg_41[1] == arg_214[1] && arg_41[1] != arg_119[0] && arg_41[1] != arg_214[0] && arg_41[1] != arg_139[0] && arg_41[1] != arg_307[0] && arg_41[1] == arg_149[1] && arg_41[1] != arg_134[0] && arg_41[1] == arg_219[1] && arg_56[1] == arg_71[1] && arg_56[1] == arg_157[1] && arg_56[1] != arg_232[0] && arg_56[1] == arg_15[1] && arg_56[1] != arg_262[0] && arg_56[1] != arg_269[0] && arg_56[1] == arg_114[1] && arg_56[1] != arg_56[0] && arg_56[1] != arg_219[0] && arg_56[1] == arg_18[1] && arg_56[1] != arg_93[0] && arg_56[1] != arg_202[0] && arg_56[1] != arg_315[0] && arg_56[1] == arg_240[1] && arg_56[1] == arg_176[1] && arg_56[1] == arg_181[1] && arg_56[1] != arg_114[0] && arg_56[1] != arg_122[0] && arg_56[1] != arg_142[0] && arg_56[1] == arg_142[1] && arg_56[1] != arg_79[0] && arg_56[1] != arg_152[0] && arg_56[1] == arg_173[1] && arg_56[1] != arg_237[0] && arg_56[1] == arg_277[1] && arg_56[1] == arg_139[1] && arg_56[1] == arg_96[1] && arg_56[1] == arg_131[1] && arg_56[1] == arg_229[1] && arg_56[1] != arg_15[0] && arg_56[1] != arg_101[0] && arg_56[1] != arg_184[0] && arg_56[1] == arg_262[1] && arg_56[1] != arg_41[0] && arg_56[1] == arg_93[1] && arg_56[1] != arg_18[0] && arg_56[1] == arg_214[1] && arg_56[1] != arg_119[0] && arg_56[1] != arg_214[0] && arg_56[1] != arg_139[0] && arg_56[1] != arg_307[0] && arg_56[1] == arg_149[1] && arg_56[1] != arg_134[0] && arg_56[1] == arg_219[1] && arg_71[1] == arg_157[1] && arg_71[1] != arg_232[0] && arg_71[1] == arg_15[1] && arg_71[1] != arg_262[0] && arg_71[1] != arg_269[0] && arg_71[1] == arg_114[1] && arg_71[1] != arg_56[0] && arg_71[1] != arg_219[0] && arg_71[1] == arg_18[1] && arg_71[1] != arg_93[0] && arg_71[1] != arg_202[0] && arg_71[1] != arg_315[0] && arg_71[1] == arg_240[1] && arg_71[1] == arg_176[1] && arg_71[1] == arg_181[1] && arg_71[1] != arg_114[0] && arg_71[1] != arg_122[0] && arg_71[1] != arg_142[0] && arg_71[1] == arg_142[1] && arg_71[1] != arg_79[0] && arg_71[1] != arg_152[0] && arg_71[1] == arg_173[1] && arg_71[1] != arg_237[0] && arg_71[1] == arg_277[1] && arg_71[1] == arg_139[1] && arg_71[1] == arg_96[1] && arg_71[1] == arg_131[1] && arg_71[1] == arg_229[1] && arg_71[1] != arg_15[0] && arg_71[1] != arg_101[0] && arg_71[1] != arg_184[0] && arg_71[1] == arg_262[1] && arg_71[1] != arg_41[0] && arg_71[1] == arg_93[1] && arg_71[1] != arg_18[0] && arg_71[1] == arg_214[1] && arg_71[1] != arg_119[0] && arg_71[1] != arg_214[0] && arg_71[1] != arg_139[0] && arg_71[1] != arg_307[0] && arg_71[1] == arg_149[1] && arg_71[1] != arg_134[0] && arg_71[1] == arg_219[1] && arg_157[1] != arg_232[0] && arg_157[1] == arg_15[1] && arg_157[1] != arg_262[0] && arg_157[1] != arg_269[0] && arg_157[1] == arg_114[1] && arg_157[1] != arg_56[0] && arg_157[1] != arg_219[0] && arg_157[1] == arg_18[1] && arg_157[1] != arg_93[0] && arg_157[1] != arg_202[0] && arg_157[1] != arg_315[0] && arg_157[1] == arg_240[1] && arg_157[1] == arg_176[1] && arg_157[1] == arg_181[1] && arg_157[1] != arg_114[0] && arg_157[1] != arg_122[0] && arg_157[1] != arg_142[0] && arg_157[1] == arg_142[1] && arg_157[1] != arg_79[0] && arg_157[1] != arg_152[0] && arg_157[1] == arg_173[1] && arg_157[1] != arg_237[0] && arg_157[1] == arg_277[1] && arg_157[1] == arg_139[1] && arg_157[1] == arg_96[1] && arg_157[1] == arg_131[1] && arg_157[1] == arg_229[1] && arg_157[1] != arg_15[0] && arg_157[1] != arg_101[0] && arg_157[1] != arg_184[0] && arg_157[1] == arg_262[1] && arg_157[1] != arg_41[0] && arg_157[1] == arg_93[1] && arg_157[1] != arg_18[0] && arg_157[1] == arg_214[1] && arg_157[1] != arg_119[0] && arg_157[1] != arg_214[0] && arg_157[1] != arg_139[0] && arg_157[1] != arg_307[0] && arg_157[1] == arg_149[1] && arg_157[1] != arg_134[0] && arg_157[1] == arg_219[1] && arg_232[0] != arg_15[1] && arg_232[0] == arg_262[0] && arg_232[0] == arg_269[0] && arg_232[0] != arg_114[1] && arg_232[0] == arg_56[0] && arg_232[0] == arg_219[0] && arg_232[0] != arg_18[1] && arg_232[0] == arg_93[0] && arg_232[0] == arg_202[0] && arg_232[0] == arg_315[0] && arg_232[0] != arg_240[1] && arg_232[0] != arg_176[1] && arg_232[0] != arg_181[1] && arg_232[0] == arg_114[0] && arg_232[0] == arg_122[0] && arg_232[0] == arg_142[0] && arg_232[0] != arg_142[1] && arg_232[0] == arg_79[0] && arg_232[0] == arg_152[0] && arg_232[0] != arg_173[1] && arg_232[0] == arg_237[0] && arg_232[0] != arg_277[1] && arg_232[0] != arg_139[1] && arg_232[0] != arg_96[1] && arg_232[0] != arg_131[1] && arg_232[0] != arg_229[1] && arg_232[0] == arg_15[0] && arg_232[0] == arg_101[0] && arg_232[0] == arg_184[0] && arg_232[0] != arg_262[1] && arg_232[0] == arg_41[0] && arg_232[0] != arg_93[1] && arg_232[0] == arg_18[0] && arg_232[0] != arg_214[1] && arg_232[0] == arg_119[0] && arg_232[0] == arg_214[0] && arg_232[0] == arg_139[0] && arg_232[0] == arg_307[0] && arg_232[0] != arg_149[1] && arg_232[0] == arg_134[0] && arg_232[0] != arg_219[1] && arg_15[1] != arg_262[0] && arg_15[1] != arg_269[0] && arg_15[1] == arg_114[1] && arg_15[1] != arg_56[0] && arg_15[1] != arg_219[0] && arg_15[1] == arg_18[1] && arg_15[1] != arg_93[0] && arg_15[1] != arg_202[0] && arg_15[1] != arg_315[0] && arg_15[1] == arg_240[1] && arg_15[1] == arg_176[1] && arg_15[1] == arg_181[1] && arg_15[1] != arg_114[0] && arg_15[1] != arg_122[0] && arg_15[1] != arg_142[0] && arg_15[1] == arg_142[1] && arg_15[1] != arg_79[0] && arg_15[1] != arg_152[0] && arg_15[1] == arg_173[1] && arg_15[1] != arg_237[0] && arg_15[1] == arg_277[1] && arg_15[1] == arg_139[1] && arg_15[1] == arg_96[1] && arg_15[1] == arg_131[1] && arg_15[1] == arg_229[1] && arg_15[1] != arg_15[0] && arg_15[1] != arg_101[0] && arg_15[1] != arg_184[0] && arg_15[1] == arg_262[1] && arg_15[1] != arg_41[0] && arg_15[1] == arg_93[1] && arg_15[1] != arg_18[0] && arg_15[1] == arg_214[1] && arg_15[1] != arg_119[0] && arg_15[1] != arg_214[0] && arg_15[1] != arg_139[0] && arg_15[1] != arg_307[0] && arg_15[1] == arg_149[1] && arg_15[1] != arg_134[0] && arg_15[1] == arg_219[1] && arg_262[0] == arg_269[0] && arg_262[0] != arg_114[1] && arg_262[0] == arg_56[0] && arg_262[0] == arg_219[0] && arg_262[0] != arg_18[1] && arg_262[0] == arg_93[0] && arg_262[0] == arg_202[0] && arg_262[0] == arg_315[0] && arg_262[0] != arg_240[1] && arg_262[0] != arg_176[1] && arg_262[0] != arg_181[1] && arg_262[0] == arg_114[0] && arg_262[0] == arg_122[0] && arg_262[0] == arg_142[0] && arg_262[0] != arg_142[1] && arg_262[0] == arg_79[0] && arg_262[0] == arg_152[0] && arg_262[0] != arg_173[1] && arg_262[0] == arg_237[0] && arg_262[0] != arg_277[1] && arg_262[0] != arg_139[1] && arg_262[0] != arg_96[1] && arg_262[0] != arg_131[1] && arg_262[0] != arg_229[1] && arg_262[0] == arg_15[0] && arg_262[0] == arg_101[0] && arg_262[0] == arg_184[0] && arg_262[0] != arg_262[1] && arg_262[0] == arg_41[0] && arg_262[0] != arg_93[1] && arg_262[0] == arg_18[0] && arg_262[0] != arg_214[1] && arg_262[0] == arg_119[0] && arg_262[0] == arg_214[0] && arg_262[0] == arg_139[0] && arg_262[0] == arg_307[0] && arg_262[0] != arg_149[1] && arg_262[0] == arg_134[0] && arg_262[0] != arg_219[1] && arg_269[0] != arg_114[1] && arg_269[0] == arg_56[0] && arg_269[0] == arg_219[0] && arg_269[0] != arg_18[1] && arg_269[0] == arg_93[0] && arg_269[0] == arg_202[0] && arg_269[0] == arg_315[0] && arg_269[0] != arg_240[1] && arg_269[0] != arg_176[1] && arg_269[0] != arg_181[1] && arg_269[0] == arg_114[0] && arg_269[0] == arg_122[0] && arg_269[0] == arg_142[0] && arg_269[0] != arg_142[1] && arg_269[0] == arg_79[0] && arg_269[0] == arg_152[0] && arg_269[0] != arg_173[1] && arg_269[0] == arg_237[0] && arg_269[0] != arg_277[1] && arg_269[0] != arg_139[1] && arg_269[0] != arg_96[1] && arg_269[0] != arg_131[1] && arg_269[0] != arg_229[1] && arg_269[0] == arg_15[0] && arg_269[0] == arg_101[0] && arg_269[0] == arg_184[0] && arg_269[0] != arg_262[1] && arg_269[0] == arg_41[0] && arg_269[0] != arg_93[1] && arg_269[0] == arg_18[0] && arg_269[0] != arg_214[1] && arg_269[0] == arg_119[0] && arg_269[0] == arg_214[0] && arg_269[0] == arg_139[0] && arg_269[0] == arg_307[0] && arg_269[0] != arg_149[1] && arg_269[0] == arg_134[0] && arg_269[0] != arg_219[1] && arg_114[1] != arg_56[0] && arg_114[1] != arg_219[0] && arg_114[1] == arg_18[1] && arg_114[1] != arg_93[0] && arg_114[1] != arg_202[0] && arg_114[1] != arg_315[0] && arg_114[1] == arg_240[1] && arg_114[1] == arg_176[1] && arg_114[1] == arg_181[1] && arg_114[1] != arg_114[0] && arg_114[1] != arg_122[0] && arg_114[1] != arg_142[0] && arg_114[1] == arg_142[1] && arg_114[1] != arg_79[0] && arg_114[1] != arg_152[0] && arg_114[1] == arg_173[1] && arg_114[1] != arg_237[0] && arg_114[1] == arg_277[1] && arg_114[1] == arg_139[1] && arg_114[1] == arg_96[1] && arg_114[1] == arg_131[1] && arg_114[1] == arg_229[1] && arg_114[1] != arg_15[0] && arg_114[1] != arg_101[0] && arg_114[1] != arg_184[0] && arg_114[1] == arg_262[1] && arg_114[1] != arg_41[0] && arg_114[1] == arg_93[1] && arg_114[1] != arg_18[0] && arg_114[1] == arg_214[1] && arg_114[1] != arg_119[0] && arg_114[1] != arg_214[0] && arg_114[1] != arg_139[0] && arg_114[1] != arg_307[0] && arg_114[1] == arg_149[1] && arg_114[1] != arg_134[0] && arg_114[1] == arg_219[1] && arg_56[0] == arg_219[0] && arg_56[0] != arg_18[1] && arg_56[0] == arg_93[0] && arg_56[0] == arg_202[0] && arg_56[0] == arg_315[0] && arg_56[0] != arg_240[1] && arg_56[0] != arg_176[1] && arg_56[0] != arg_181[1] && arg_56[0] == arg_114[0] && arg_56[0] == arg_122[0] && arg_56[0] == arg_142[0] && arg_56[0] != arg_142[1] && arg_56[0] == arg_79[0] && arg_56[0] == arg_152[0] && arg_56[0] != arg_173[1] && arg_56[0] == arg_237[0] && arg_56[0] != arg_277[1] && arg_56[0] != arg_139[1] && arg_56[0] != arg_96[1] && arg_56[0] != arg_131[1] && arg_56[0] != arg_229[1] && arg_56[0] == arg_15[0] && arg_56[0] == arg_101[0] && arg_56[0] == arg_184[0] && arg_56[0] != arg_262[1] && arg_56[0] == arg_41[0] && arg_56[0] != arg_93[1] && arg_56[0] == arg_18[0] && arg_56[0] != arg_214[1] && arg_56[0] == arg_119[0] && arg_56[0] == arg_214[0] && arg_56[0] == arg_139[0] && arg_56[0] == arg_307[0] && arg_56[0] != arg_149[1] && arg_56[0] == arg_134[0] && arg_56[0] != arg_219[1] && arg_219[0] != arg_18[1] && arg_219[0] == arg_93[0] && arg_219[0] == arg_202[0] && arg_219[0] == arg_315[0] && arg_219[0] != arg_240[1] && arg_219[0] != arg_176[1] && arg_219[0] != arg_181[1] && arg_219[0] == arg_114[0] && arg_219[0] == arg_122[0] && arg_219[0] == arg_142[0] && arg_219[0] != arg_142[1] && arg_219[0] == arg_79[0] && arg_219[0] == arg_152[0] && arg_219[0] != arg_173[1] && arg_219[0] == arg_237[0] && arg_219[0] != arg_277[1] && arg_219[0] != arg_139[1] && arg_219[0] != arg_96[1] && arg_219[0] != arg_131[1] && arg_219[0] != arg_229[1] && arg_219[0] == arg_15[0] && arg_219[0] == arg_101[0] && arg_219[0] == arg_184[0] && arg_219[0] != arg_262[1] && arg_219[0] == arg_41[0] && arg_219[0] != arg_93[1] && arg_219[0] == arg_18[0] && arg_219[0] != arg_214[1] && arg_219[0] == arg_119[0] && arg_219[0] == arg_214[0] && arg_219[0] == arg_139[0] && arg_219[0] == arg_307[0] && arg_219[0] != arg_149[1] && arg_219[0] == arg_134[0] && arg_219[0] != arg_219[1] && arg_18[1] != arg_93[0] && arg_18[1] != arg_202[0] && arg_18[1] != arg_315[0] && arg_18[1] == arg_240[1] && arg_18[1] == arg_176[1] && arg_18[1] == arg_181[1] && arg_18[1] != arg_114[0] && arg_18[1] != arg_122[0] && arg_18[1] != arg_142[0] && arg_18[1] == arg_142[1] && arg_18[1] != arg_79[0] && arg_18[1] != arg_152[0] && arg_18[1] == arg_173[1] && arg_18[1] != arg_237[0] && arg_18[1] == arg_277[1] && arg_18[1] == arg_139[1] && arg_18[1] == arg_96[1] && arg_18[1] == arg_131[1] && arg_18[1] == arg_229[1] && arg_18[1] != arg_15[0] && arg_18[1] != arg_101[0] && arg_18[1] != arg_184[0] && arg_18[1] == arg_262[1] && arg_18[1] != arg_41[0] && arg_18[1] == arg_93[1] && arg_18[1] != arg_18[0] && arg_18[1] == arg_214[1] && arg_18[1] != arg_119[0] && arg_18[1] != arg_214[0] && arg_18[1] != arg_139[0] && arg_18[1] != arg_307[0] && arg_18[1] == arg_149[1] && arg_18[1] != arg_134[0] && arg_18[1] == arg_219[1] && arg_93[0] == arg_202[0] && arg_93[0] == arg_315[0] && arg_93[0] != arg_240[1] && arg_93[0] != arg_176[1] && arg_93[0] != arg_181[1] && arg_93[0] == arg_114[0] && arg_93[0] == arg_122[0] && arg_93[0] == arg_142[0] && arg_93[0] != arg_142[1] && arg_93[0] == arg_79[0] && arg_93[0] == arg_152[0] && arg_93[0] != arg_173[1] && arg_93[0] == arg_237[0] && arg_93[0] != arg_277[1] && arg_93[0] != arg_139[1] && arg_93[0] != arg_96[1] && arg_93[0] != arg_131[1] && arg_93[0] != arg_229[1] && arg_93[0] == arg_15[0] && arg_93[0] == arg_101[0] && arg_93[0] == arg_184[0] && arg_93[0] != arg_262[1] && arg_93[0] == arg_41[0] && arg_93[0] != arg_93[1] && arg_93[0] == arg_18[0] && arg_93[0] != arg_214[1] && arg_93[0] == arg_119[0] && arg_93[0] == arg_214[0] && arg_93[0] == arg_139[0] && arg_93[0] == arg_307[0] && arg_93[0] != arg_149[1] && arg_93[0] == arg_134[0] && arg_93[0] != arg_219[1] && arg_202[0] == arg_315[0] && arg_202[0] != arg_240[1] && arg_202[0] != arg_176[1] && arg_202[0] != arg_181[1] && arg_202[0] == arg_114[0] && arg_202[0] == arg_122[0] && arg_202[0] == arg_142[0] && arg_202[0] != arg_142[1] && arg_202[0] == arg_79[0] && arg_202[0] == arg_152[0] && arg_202[0] != arg_173[1] && arg_202[0] == arg_237[0] && arg_202[0] != arg_277[1] && arg_202[0] != arg_139[1] && arg_202[0] != arg_96[1] && arg_202[0] != arg_131[1] && arg_202[0] != arg_229[1] && arg_202[0] == arg_15[0] && arg_202[0] == arg_101[0] && arg_202[0] == arg_184[0] && arg_202[0] != arg_262[1] && arg_202[0] == arg_41[0] && arg_202[0] != arg_93[1] && arg_202[0] == arg_18[0] && arg_202[0] != arg_214[1] && arg_202[0] == arg_119[0] && arg_202[0] == arg_214[0] && arg_202[0] == arg_139[0] && arg_202[0] == arg_307[0] && arg_202[0] != arg_149[1] && arg_202[0] == arg_134[0] && arg_202[0] != arg_219[1] && arg_315[0] != arg_240[1] && arg_315[0] != arg_176[1] && arg_315[0] != arg_181[1] && arg_315[0] == arg_114[0] && arg_315[0] == arg_122[0] && arg_315[0] == arg_142[0] && arg_315[0] != arg_142[1] && arg_315[0] == arg_79[0] && arg_315[0] == arg_152[0] && arg_315[0] != arg_173[1] && arg_315[0] == arg_237[0] && arg_315[0] != arg_277[1] && arg_315[0] != arg_139[1] && arg_315[0] != arg_96[1] && arg_315[0] != arg_131[1] && arg_315[0] != arg_229[1] && arg_315[0] == arg_15[0] && arg_315[0] == arg_101[0] && arg_315[0] == arg_184[0] && arg_315[0] != arg_262[1] && arg_315[0] == arg_41[0] && arg_315[0] != arg_93[1] && arg_315[0] == arg_18[0] && arg_315[0] != arg_214[1] && arg_315[0] == arg_119[0] && arg_315[0] == arg_214[0] && arg_315[0] == arg_139[0] && arg_315[0] == arg_307[0] && arg_315[0] != arg_149[1] && arg_315[0] == arg_134[0] && arg_315[0] != arg_219[1] && arg_240[1] == arg_176[1] && arg_240[1] == arg_181[1] && arg_240[1] != arg_114[0] && arg_240[1] != arg_122[0] && arg_240[1] != arg_142[0] && arg_240[1] == arg_142[1] && arg_240[1] != arg_79[0] && arg_240[1] != arg_152[0] && arg_240[1] == arg_173[1] && arg_240[1] != arg_237[0] && arg_240[1] == arg_277[1] && arg_240[1] == arg_139[1] && arg_240[1] == arg_96[1] && arg_240[1] == arg_131[1] && arg_240[1] == arg_229[1] && arg_240[1] != arg_15[0] && arg_240[1] != arg_101[0] && arg_240[1] != arg_184[0] && arg_240[1] == arg_262[1] && arg_240[1] != arg_41[0] && arg_240[1] == arg_93[1] && arg_240[1] != arg_18[0] && arg_240[1] == arg_214[1] && arg_240[1] != arg_119[0] && arg_240[1] != arg_214[0] && arg_240[1] != arg_139[0] && arg_240[1] != arg_307[0] && arg_240[1] == arg_149[1] && arg_240[1] != arg_134[0] && arg_240[1] == arg_219[1] && arg_176[1] == arg_181[1] && arg_176[1] != arg_114[0] && arg_176[1] != arg_122[0] && arg_176[1] != arg_142[0] && arg_176[1] == arg_142[1] && arg_176[1] != arg_79[0] && arg_176[1] != arg_152[0] && arg_176[1] == arg_173[1] && arg_176[1] != arg_237[0] && arg_176[1] == arg_277[1] && arg_176[1] == arg_139[1] && arg_176[1] == arg_96[1] && arg_176[1] == arg_131[1] && arg_176[1] == arg_229[1] && arg_176[1] != arg_15[0] && arg_176[1] != arg_101[0] && arg_176[1] != arg_184[0] && arg_176[1] == arg_262[1] && arg_176[1] != arg_41[0] && arg_176[1] == arg_93[1] && arg_176[1] != arg_18[0] && arg_176[1] == arg_214[1] && arg_176[1] != arg_119[0] && arg_176[1] != arg_214[0] && arg_176[1] != arg_139[0] && arg_176[1] != arg_307[0] && arg_176[1] == arg_149[1] && arg_176[1] != arg_134[0] && arg_176[1] == arg_219[1] && arg_181[1] != arg_114[0] && arg_181[1] != arg_122[0] && arg_181[1] != arg_142[0] && arg_181[1] == arg_142[1] && arg_181[1] != arg_79[0] && arg_181[1] != arg_152[0] && arg_181[1] == arg_173[1] && arg_181[1] != arg_237[0] && arg_181[1] == arg_277[1] && arg_181[1] == arg_139[1] && arg_181[1] == arg_96[1] && arg_181[1] == arg_131[1] && arg_181[1] == arg_229[1] && arg_181[1] != arg_15[0] && arg_181[1] != arg_101[0] && arg_181[1] != arg_184[0] && arg_181[1] == arg_262[1] && arg_181[1] != arg_41[0] && arg_181[1] == arg_93[1] && arg_181[1] != arg_18[0] && arg_181[1] == arg_214[1] && arg_181[1] != arg_119[0] && arg_181[1] != arg_214[0] && arg_181[1] != arg_139[0] && arg_181[1] != arg_307[0] && arg_181[1] == arg_149[1] && arg_181[1] != arg_134[0] && arg_181[1] == arg_219[1] && arg_114[0] == arg_122[0] && arg_114[0] == arg_142[0] && arg_114[0] != arg_142[1] && arg_114[0] == arg_79[0] && arg_114[0] == arg_152[0] && arg_114[0] != arg_173[1] && arg_114[0] == arg_237[0] && arg_114[0] != arg_277[1] && arg_114[0] != arg_139[1] && arg_114[0] != arg_96[1] && arg_114[0] != arg_131[1] && arg_114[0] != arg_229[1] && arg_114[0] == arg_15[0] && arg_114[0] == arg_101[0] && arg_114[0] == arg_184[0] && arg_114[0] != arg_262[1] && arg_114[0] == arg_41[0] && arg_114[0] != arg_93[1] && arg_114[0] == arg_18[0] && arg_114[0] != arg_214[1] && arg_114[0] == arg_119[0] && arg_114[0] == arg_214[0] && arg_114[0] == arg_139[0] && arg_114[0] == arg_307[0] && arg_114[0] != arg_149[1] && arg_114[0] == arg_134[0] && arg_114[0] != arg_219[1] && arg_122[0] == arg_142[0] && arg_122[0] != arg_142[1] && arg_122[0] == arg_79[0] && arg_122[0] == arg_152[0] && arg_122[0] != arg_173[1] && arg_122[0] == arg_237[0] && arg_122[0] != arg_277[1] && arg_122[0] != arg_139[1] && arg_122[0] != arg_96[1] && arg_122[0] != arg_131[1] && arg_122[0] != arg_229[1] && arg_122[0] == arg_15[0] && arg_122[0] == arg_101[0] && arg_122[0] == arg_184[0] && arg_122[0] != arg_262[1] && arg_122[0] == arg_41[0] && arg_122[0] != arg_93[1] && arg_122[0] == arg_18[0] && arg_122[0] != arg_214[1] && arg_122[0] == arg_119[0] && arg_122[0] == arg_214[0] && arg_122[0] == arg_139[0] && arg_122[0] == arg_307[0] && arg_122[0] != arg_149[1] && arg_122[0] == arg_134[0] && arg_122[0] != arg_219[1] && arg_142[0] != arg_142[1] && arg_142[0] == arg_79[0] && arg_142[0] == arg_152[0] && arg_142[0] != arg_173[1] && arg_142[0] == arg_237[0] && arg_142[0] != arg_277[1] && arg_142[0] != arg_139[1] && arg_142[0] != arg_96[1] && arg_142[0] != arg_131[1] && arg_142[0] != arg_229[1] && arg_142[0] == arg_15[0] && arg_142[0] == arg_101[0] && arg_142[0] == arg_184[0] && arg_142[0] != arg_262[1] && arg_142[0] == arg_41[0] && arg_142[0] != arg_93[1] && arg_142[0] == arg_18[0] && arg_142[0] != arg_214[1] && arg_142[0] == arg_119[0] && arg_142[0] == arg_214[0] && arg_142[0] == arg_139[0] && arg_142[0] == arg_307[0] && arg_142[0] != arg_149[1] && arg_142[0] == arg_134[0] && arg_142[0] != arg_219[1] && arg_142[1] != arg_79[0] && arg_142[1] != arg_152[0] && arg_142[1] == arg_173[1] && arg_142[1] != arg_237[0] && arg_142[1] == arg_277[1] && arg_142[1] == arg_139[1] && arg_142[1] == arg_96[1] && arg_142[1] == arg_131[1] && arg_142[1] == arg_229[1] && arg_142[1] != arg_15[0] && arg_142[1] != arg_101[0] && arg_142[1] != arg_184[0] && arg_142[1] == arg_262[1] && arg_142[1] != arg_41[0] && arg_142[1] == arg_93[1] && arg_142[1] != arg_18[0] && arg_142[1] == arg_214[1] && arg_142[1] != arg_119[0] && arg_142[1] != arg_214[0] && arg_142[1] != arg_139[0] && arg_142[1] != arg_307[0] && arg_142[1] == arg_149[1] && arg_142[1] != arg_134[0] && arg_142[1] == arg_219[1] && arg_79[0] == arg_152[0] && arg_79[0] != arg_173[1] && arg_79[0] == arg_237[0] && arg_79[0] != arg_277[1] && arg_79[0] != arg_139[1] && arg_79[0] != arg_96[1] && arg_79[0] != arg_131[1] && arg_79[0] != arg_229[1] && arg_79[0] == arg_15[0] && arg_79[0] == arg_101[0] && arg_79[0] == arg_184[0] && arg_79[0] != arg_262[1] && arg_79[0] == arg_41[0] && arg_79[0] != arg_93[1] && arg_79[0] == arg_18[0] && arg_79[0] != arg_214[1] && arg_79[0] == arg_119[0] && arg_79[0] == arg_214[0] && arg_79[0] == arg_139[0] && arg_79[0] == arg_307[0] && arg_79[0] != arg_149[1] && arg_79[0] == arg_134[0] && arg_79[0] != arg_219[1] && arg_152[0] != arg_173[1] && arg_152[0] == arg_237[0] && arg_152[0] != arg_277[1] && arg_152[0] != arg_139[1] && arg_152[0] != arg_96[1] && arg_152[0] != arg_131[1] && arg_152[0] != arg_229[1] && arg_152[0] == arg_15[0] && arg_152[0] == arg_101[0] && arg_152[0] == arg_184[0] && arg_152[0] != arg_262[1] && arg_152[0] == arg_41[0] && arg_152[0] != arg_93[1] && arg_152[0] == arg_18[0] && arg_152[0] != arg_214[1] && arg_152[0] == arg_119[0] && arg_152[0] == arg_214[0] && arg_152[0] == arg_139[0] && arg_152[0] == arg_307[0] && arg_152[0] != arg_149[1] && arg_152[0] == arg_134[0] && arg_152[0] != arg_219[1] && arg_173[1] != arg_237[0] && arg_173[1] == arg_277[1] && arg_173[1] == arg_139[1] && arg_173[1] == arg_96[1] && arg_173[1] == arg_131[1] && arg_173[1] == arg_229[1] && arg_173[1] != arg_15[0] && arg_173[1] != arg_101[0] && arg_173[1] != arg_184[0] && arg_173[1] == arg_262[1] && arg_173[1] != arg_41[0] && arg_173[1] == arg_93[1] && arg_173[1] != arg_18[0] && arg_173[1] == arg_214[1] && arg_173[1] != arg_119[0] && arg_173[1] != arg_214[0] && arg_173[1] != arg_139[0] && arg_173[1] != arg_307[0] && arg_173[1] == arg_149[1] && arg_173[1] != arg_134[0] && arg_173[1] == arg_219[1] && arg_237[0] != arg_277[1] && arg_237[0] != arg_139[1] && arg_237[0] != arg_96[1] && arg_237[0] != arg_131[1] && arg_237[0] != arg_229[1] && arg_237[0] == arg_15[0] && arg_237[0] == arg_101[0] && arg_237[0] == arg_184[0] && arg_237[0] != arg_262[1] && arg_237[0] == arg_41[0] && arg_237[0] != arg_93[1] && arg_237[0] == arg_18[0] && arg_237[0] != arg_214[1] && arg_237[0] == arg_119[0] && arg_237[0] == arg_214[0] && arg_237[0] == arg_139[0] && arg_237[0] == arg_307[0] && arg_237[0] != arg_149[1] && arg_237[0] == arg_134[0] && arg_237[0] != arg_219[1] && arg_277[1] == arg_139[1] && arg_277[1] == arg_96[1] && arg_277[1] == arg_131[1] && arg_277[1] == arg_229[1] && arg_277[1] != arg_15[0] && arg_277[1] != arg_101[0] && arg_277[1] != arg_184[0] && arg_277[1] == arg_262[1] && arg_277[1] != arg_41[0] && arg_277[1] == arg_93[1] && arg_277[1] != arg_18[0] && arg_277[1] == arg_214[1] && arg_277[1] != arg_119[0] && arg_277[1] != arg_214[0] && arg_277[1] != arg_139[0] && arg_277[1] != arg_307[0] && arg_277[1] == arg_149[1] && arg_277[1] != arg_134[0] && arg_277[1] == arg_219[1] && arg_139[1] == arg_96[1] && arg_139[1] == arg_131[1] && arg_139[1] == arg_229[1] && arg_139[1] != arg_15[0] && arg_139[1] != arg_101[0] && arg_139[1] != arg_184[0] && arg_139[1] == arg_262[1] && arg_139[1] != arg_41[0] && arg_139[1] == arg_93[1] && arg_139[1] != arg_18[0] && arg_139[1] == arg_214[1] && arg_139[1] != arg_119[0] && arg_139[1] != arg_214[0] && arg_139[1] != arg_139[0] && arg_139[1] != arg_307[0] && arg_139[1] == arg_149[1] && arg_139[1] != arg_134[0] && arg_139[1] == arg_219[1] && arg_96[1] == arg_131[1] && arg_96[1] == arg_229[1] && arg_96[1] != arg_15[0] && arg_96[1] != arg_101[0] && arg_96[1] != arg_184[0] && arg_96[1] == arg_262[1] && arg_96[1] != arg_41[0] && arg_96[1] == arg_93[1] && arg_96[1] != arg_18[0] && arg_96[1] == arg_214[1] && arg_96[1] != arg_119[0] && arg_96[1] != arg_214[0] && arg_96[1] != arg_139[0] && arg_96[1] != arg_307[0] && arg_96[1] == arg_149[1] && arg_96[1] != arg_134[0] && arg_96[1] == arg_219[1] && arg_131[1] == arg_229[1] && arg_131[1] != arg_15[0] && arg_131[1] != arg_101[0] && arg_131[1] != arg_184[0] && arg_131[1] == arg_262[1] && arg_131[1] != arg_41[0] && arg_131[1] == arg_93[1] && arg_131[1] != arg_18[0] && arg_131[1] == arg_214[1] && arg_131[1] != arg_119[0] && arg_131[1] != arg_214[0] && arg_131[1] != arg_139[0] && arg_131[1] != arg_307[0] && arg_131[1] == arg_149[1] && arg_131[1] != arg_134[0] && arg_131[1] == arg_219[1] && arg_229[1] != arg_15[0] && arg_229[1] != arg_101[0] && arg_229[1] != arg_184[0] && arg_229[1] == arg_262[1] && arg_229[1] != arg_41[0] && arg_229[1] == arg_93[1] && arg_229[1] != arg_18[0] && arg_229[1] == arg_214[1] && arg_229[1] != arg_119[0] && arg_229[1] != arg_214[0] && arg_229[1] != arg_139[0] && arg_229[1] != arg_307[0] && arg_229[1] == arg_149[1] && arg_229[1] != arg_134[0] && arg_229[1] == arg_219[1] && arg_15[0] == arg_101[0] && arg_15[0] == arg_184[0] && arg_15[0] != arg_262[1] && arg_15[0] == arg_41[0] && arg_15[0] != arg_93[1] && arg_15[0] == arg_18[0] && arg_15[0] != arg_214[1] && arg_15[0] == arg_119[0] && arg_15[0] == arg_214[0] && arg_15[0] == arg_139[0] && arg_15[0] == arg_307[0] && arg_15[0] != arg_149[1] && arg_15[0] == arg_134[0] && arg_15[0] != arg_219[1] && arg_101[0] == arg_184[0] && arg_101[0] != arg_262[1] && arg_101[0] == arg_41[0] && arg_101[0] != arg_93[1] && arg_101[0] == arg_18[0] && arg_101[0] != arg_214[1] && arg_101[0] == arg_119[0] && arg_101[0] == arg_214[0] && arg_101[0] == arg_139[0] && arg_101[0] == arg_307[0] && arg_101[0] != arg_149[1] && arg_101[0] == arg_134[0] && arg_101[0] != arg_219[1] && arg_184[0] != arg_262[1] && arg_184[0] == arg_41[0] && arg_184[0] != arg_93[1] && arg_184[0] == arg_18[0] && arg_184[0] != arg_214[1] && arg_184[0] == arg_119[0] && arg_184[0] == arg_214[0] && arg_184[0] == arg_139[0] && arg_184[0] == arg_307[0] && arg_184[0] != arg_149[1] && arg_184[0] == arg_134[0] && arg_184[0] != arg_219[1] && arg_262[1] != arg_41[0] && arg_262[1] == arg_93[1] && arg_262[1] != arg_18[0] && arg_262[1] == arg_214[1] && arg_262[1] != arg_119[0] && arg_262[1] != arg_214[0] && arg_262[1] != arg_139[0] && arg_262[1] != arg_307[0] && arg_262[1] == arg_149[1] && arg_262[1] != arg_134[0] && arg_262[1] == arg_219[1] && arg_41[0] != arg_93[1] && arg_41[0] == arg_18[0] && arg_41[0] != arg_214[1] && arg_41[0] == arg_119[0] && arg_41[0] == arg_214[0] && arg_41[0] == arg_139[0] && arg_41[0] == arg_307[0] && arg_41[0] != arg_149[1] && arg_41[0] == arg_134[0] && arg_41[0] != arg_219[1] && arg_93[1] != arg_18[0] && arg_93[1] == arg_214[1] && arg_93[1] != arg_119[0] && arg_93[1] != arg_214[0] && arg_93[1] != arg_139[0] && arg_93[1] != arg_307[0] && arg_93[1] == arg_149[1] && arg_93[1] != arg_134[0] && arg_93[1] == arg_219[1] && arg_18[0] != arg_214[1] && arg_18[0] == arg_119[0] && arg_18[0] == arg_214[0] && arg_18[0] == arg_139[0] && arg_18[0] == arg_307[0] && arg_18[0] != arg_149[1] && arg_18[0] == arg_134[0] && arg_18[0] != arg_219[1] && arg_214[1] != arg_119[0] && arg_214[1] != arg_214[0] && arg_214[1] != arg_139[0] && arg_214[1] != arg_307[0] && arg_214[1] == arg_149[1] && arg_214[1] != arg_134[0] && arg_214[1] == arg_219[1] && arg_119[0] == arg_214[0] && arg_119[0] == arg_139[0] && arg_119[0] == arg_307[0] && arg_119[0] != arg_149[1] && arg_119[0] == arg_134[0] && arg_119[0] != arg_219[1] && arg_214[0] == arg_139[0] && arg_214[0] == arg_307[0] && arg_214[0] != arg_149[1] && arg_214[0] == arg_134[0] && arg_214[0] != arg_219[1] && arg_139[0] == arg_307[0] && arg_139[0] != arg_149[1] && arg_139[0] == arg_134[0] && arg_139[0] != arg_219[1] && arg_307[0] != arg_149[1] && arg_307[0] == arg_134[0] && arg_307[0] != arg_219[1] && arg_149[1] != arg_134[0] && arg_149[1] == arg_219[1] && arg_134[0] != arg_219[1] {
let rhs_inst_19 = pos.ins().irsub_imm(arg_2, 18446744073709551614_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_19);

}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1404(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_3 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_3[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_4 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_4[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_5) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_6 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_6[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_7 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_3 == 0 {
if rhs_2 == -1 {
match pos.func.dfg.value_def(arg_4[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_8) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_9 = arg;
let rhs_7 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_9) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_10 = arg;
let rhs_8 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_10) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_11 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_11[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_12 = arg;
let rhs_9 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_9 == 0 {
if rhs_8 == -1 {
if rhs_7 == 12 {
if rhs_6 == 16 {
match pos.func.dfg.value_def(arg_3[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_13 = arg;
let rhs_14 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_13) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_14 = arg;
let rhs_15 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_14) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_15 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_15[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_16 = arg;
let rhs_16 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_16) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_17 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_17[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_18 = arg;
let rhs_17 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_17 == 0 {
if rhs_16 == -1 {
match pos.func.dfg.value_def(arg_15[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_19 = arg;
let rhs_20 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_19) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_20 = arg;
let rhs_21 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_20) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_21 = arg;
let rhs_22 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_21) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_22 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_22[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_23 = arg;
let rhs_23 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_23 == 0 {
if rhs_22 == -1 {
if rhs_21 == 12 {
if rhs_20 == 16 {
if rhs_15 == 5 {
if rhs_14 == 8 {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_24 = arg;
let rhs_30 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_24) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_25 = arg;
let rhs_31 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_25) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_26 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_26[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_27 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_27[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_28 = arg;
let rhs_32 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_28) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_29 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_29[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_30 = arg;
let rhs_33 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_33 == 0 {
if rhs_32 == -1 {
match pos.func.dfg.value_def(arg_27[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_31 = arg;
let rhs_36 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_31) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_32 = arg;
let rhs_37 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_32) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_33 = arg;
let rhs_38 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_33) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_34 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_34[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_35 = arg;
let rhs_39 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_39 == 0 {
if rhs_38 == -1 {
if rhs_37 == 12 {
if rhs_36 == 16 {
match pos.func.dfg.value_def(arg_26[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_36 = arg;
let rhs_44 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_36) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_37 = arg;
let rhs_45 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_37) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_38 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_38[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_39 = arg;
let rhs_46 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_39) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_40 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_40[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_41 = arg;
let rhs_47 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_47 == 0 {
if rhs_46 == -1 {
match pos.func.dfg.value_def(arg_38[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_42 = arg;
let rhs_50 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_42) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_43 = arg;
let rhs_51 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_43) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_44 = arg;
let rhs_52 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_44) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_45 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_45[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_46 = arg;
let rhs_53 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_53 == 0 {
if rhs_52 == -1 {
if rhs_51 == 12 {
if rhs_50 == 16 {
if rhs_45 == 5 {
if rhs_44 == 8 {
if rhs_31 == 2 {
if rhs_30 == 4 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_47 = arg;
let rhs_62 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_47) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_48 = arg;
let rhs_63 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_48) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_49 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_49[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_50 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_50[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_51 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_51[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_52 = arg;
let rhs_64 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_52) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_53 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_53[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_54 = arg;
let rhs_65 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_65 == 0 {
if rhs_64 == -1 {
match pos.func.dfg.value_def(arg_51[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_55 = arg;
let rhs_68 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_55) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_56 = arg;
let rhs_69 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_56) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_57 = arg;
let rhs_70 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_57) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_58 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_58[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_59 = arg;
let rhs_71 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_71 == 0 {
if rhs_70 == -1 {
if rhs_69 == 12 {
if rhs_68 == 16 {
match pos.func.dfg.value_def(arg_50[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_60 = arg;
let rhs_76 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_60) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_61 = arg;
let rhs_77 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_61) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_62 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_62[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_63 = arg;
let rhs_78 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_63) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_64 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_64[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_65 = arg;
let rhs_79 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_79 == 0 {
if rhs_78 == -1 {
match pos.func.dfg.value_def(arg_62[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_66 = arg;
let rhs_82 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_66) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_67 = arg;
let rhs_83 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_67) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_68 = arg;
let rhs_84 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_68) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_69 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_69[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_70 = arg;
let rhs_85 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_85 == 0 {
if rhs_84 == -1 {
if rhs_83 == 12 {
if rhs_82 == 16 {
if rhs_77 == 5 {
if rhs_76 == 8 {
match pos.func.dfg.value_def(arg_49[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_71 = arg;
let rhs_92 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_71) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_72 = arg;
let rhs_93 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_72) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_73 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_73[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_74 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_74[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_75 = arg;
let rhs_94 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_75) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_76 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_76[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_77 = arg;
let rhs_95 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_95 == 0 {
if rhs_94 == -1 {
match pos.func.dfg.value_def(arg_74[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_78 = arg;
let rhs_98 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_78) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_79 = arg;
let rhs_99 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_79) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_80 = arg;
let rhs_100 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_80) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_81 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_81[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_82 = arg;
let rhs_101 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_101 == 0 {
if rhs_100 == -1 {
if rhs_99 == 12 {
if rhs_98 == 16 {
match pos.func.dfg.value_def(arg_73[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_83 = arg;
let rhs_106 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_83) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_84 = arg;
let rhs_107 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_84) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_85 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_85[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_86 = arg;
let rhs_108 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_86) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_87 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_87[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_88 = arg;
let rhs_109 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_109 == 0 {
if rhs_108 == -1 {
match pos.func.dfg.value_def(arg_85[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_89 = arg;
let rhs_112 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_89) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_90 = arg;
let rhs_113 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_90) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_91 = arg;
let rhs_114 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_91) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_92 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_92[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_93 = arg;
let rhs_115 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_115 == 0 {
if rhs_114 == -1 {
if rhs_113 == 12 {
if rhs_112 == 16 {
if rhs_107 == 5 {
if rhs_106 == 8 {
if rhs_93 == 2 {
if rhs_92 == 4 {
if rhs_63 == 1 {
if rhs_62 == 2 {
if rhs_1 == 1 {
if arg_76[0] == arg_6[0] && arg_76[0] == arg_77 && arg_76[0] == arg_88 && arg_76[0] == arg_81[0] && arg_76[0] == arg_30 && arg_76[0] == arg_70 && arg_76[0] == arg_92[0] && arg_76[0] == arg_17[0] && arg_76[0] == arg_23 && arg_76[0] == arg_40[0] && arg_76[0] == arg_46 && arg_76[0] == arg_59 && arg_76[0] == arg_82 && arg_76[0] == arg_53[0] && arg_76[0] == arg_29[0] && arg_76[0] == arg_12 && arg_76[0] == arg_18 && arg_76[0] == arg_11[0] && arg_76[0] == arg_35 && arg_76[0] == arg_22[0] && arg_76[0] == arg_45[0] && arg_76[0] == arg_58[0] && arg_76[0] == arg_69[0] && arg_76[0] == arg_65 && arg_76[0] == arg_7 && arg_76[0] == arg_64[0] && arg_76[0] == arg_93 && arg_76[0] == arg_34[0] && arg_76[0] == arg_54 && arg_76[0] == arg_87[0] && arg_76[0] == arg_41 && arg_6[0] == arg_77 && arg_6[0] == arg_88 && arg_6[0] == arg_81[0] && arg_6[0] == arg_30 && arg_6[0] == arg_70 && arg_6[0] == arg_92[0] && arg_6[0] == arg_17[0] && arg_6[0] == arg_23 && arg_6[0] == arg_40[0] && arg_6[0] == arg_46 && arg_6[0] == arg_59 && arg_6[0] == arg_82 && arg_6[0] == arg_53[0] && arg_6[0] == arg_29[0] && arg_6[0] == arg_12 && arg_6[0] == arg_18 && arg_6[0] == arg_11[0] && arg_6[0] == arg_35 && arg_6[0] == arg_22[0] && arg_6[0] == arg_45[0] && arg_6[0] == arg_58[0] && arg_6[0] == arg_69[0] && arg_6[0] == arg_65 && arg_6[0] == arg_7 && arg_6[0] == arg_64[0] && arg_6[0] == arg_93 && arg_6[0] == arg_34[0] && arg_6[0] == arg_54 && arg_6[0] == arg_87[0] && arg_6[0] == arg_41 && arg_77 == arg_88 && arg_77 == arg_81[0] && arg_77 == arg_30 && arg_77 == arg_70 && arg_77 == arg_92[0] && arg_77 == arg_17[0] && arg_77 == arg_23 && arg_77 == arg_40[0] && arg_77 == arg_46 && arg_77 == arg_59 && arg_77 == arg_82 && arg_77 == arg_53[0] && arg_77 == arg_29[0] && arg_77 == arg_12 && arg_77 == arg_18 && arg_77 == arg_11[0] && arg_77 == arg_35 && arg_77 == arg_22[0] && arg_77 == arg_45[0] && arg_77 == arg_58[0] && arg_77 == arg_69[0] && arg_77 == arg_65 && arg_77 == arg_7 && arg_77 == arg_64[0] && arg_77 == arg_93 && arg_77 == arg_34[0] && arg_77 == arg_54 && arg_77 == arg_87[0] && arg_77 == arg_41 && arg_88 == arg_81[0] && arg_88 == arg_30 && arg_88 == arg_70 && arg_88 == arg_92[0] && arg_88 == arg_17[0] && arg_88 == arg_23 && arg_88 == arg_40[0] && arg_88 == arg_46 && arg_88 == arg_59 && arg_88 == arg_82 && arg_88 == arg_53[0] && arg_88 == arg_29[0] && arg_88 == arg_12 && arg_88 == arg_18 && arg_88 == arg_11[0] && arg_88 == arg_35 && arg_88 == arg_22[0] && arg_88 == arg_45[0] && arg_88 == arg_58[0] && arg_88 == arg_69[0] && arg_88 == arg_65 && arg_88 == arg_7 && arg_88 == arg_64[0] && arg_88 == arg_93 && arg_88 == arg_34[0] && arg_88 == arg_54 && arg_88 == arg_87[0] && arg_88 == arg_41 && arg_81[0] == arg_30 && arg_81[0] == arg_70 && arg_81[0] == arg_92[0] && arg_81[0] == arg_17[0] && arg_81[0] == arg_23 && arg_81[0] == arg_40[0] && arg_81[0] == arg_46 && arg_81[0] == arg_59 && arg_81[0] == arg_82 && arg_81[0] == arg_53[0] && arg_81[0] == arg_29[0] && arg_81[0] == arg_12 && arg_81[0] == arg_18 && arg_81[0] == arg_11[0] && arg_81[0] == arg_35 && arg_81[0] == arg_22[0] && arg_81[0] == arg_45[0] && arg_81[0] == arg_58[0] && arg_81[0] == arg_69[0] && arg_81[0] == arg_65 && arg_81[0] == arg_7 && arg_81[0] == arg_64[0] && arg_81[0] == arg_93 && arg_81[0] == arg_34[0] && arg_81[0] == arg_54 && arg_81[0] == arg_87[0] && arg_81[0] == arg_41 && arg_30 == arg_70 && arg_30 == arg_92[0] && arg_30 == arg_17[0] && arg_30 == arg_23 && arg_30 == arg_40[0] && arg_30 == arg_46 && arg_30 == arg_59 && arg_30 == arg_82 && arg_30 == arg_53[0] && arg_30 == arg_29[0] && arg_30 == arg_12 && arg_30 == arg_18 && arg_30 == arg_11[0] && arg_30 == arg_35 && arg_30 == arg_22[0] && arg_30 == arg_45[0] && arg_30 == arg_58[0] && arg_30 == arg_69[0] && arg_30 == arg_65 && arg_30 == arg_7 && arg_30 == arg_64[0] && arg_30 == arg_93 && arg_30 == arg_34[0] && arg_30 == arg_54 && arg_30 == arg_87[0] && arg_30 == arg_41 && arg_70 == arg_92[0] && arg_70 == arg_17[0] && arg_70 == arg_23 && arg_70 == arg_40[0] && arg_70 == arg_46 && arg_70 == arg_59 && arg_70 == arg_82 && arg_70 == arg_53[0] && arg_70 == arg_29[0] && arg_70 == arg_12 && arg_70 == arg_18 && arg_70 == arg_11[0] && arg_70 == arg_35 && arg_70 == arg_22[0] && arg_70 == arg_45[0] && arg_70 == arg_58[0] && arg_70 == arg_69[0] && arg_70 == arg_65 && arg_70 == arg_7 && arg_70 == arg_64[0] && arg_70 == arg_93 && arg_70 == arg_34[0] && arg_70 == arg_54 && arg_70 == arg_87[0] && arg_70 == arg_41 && arg_92[0] == arg_17[0] && arg_92[0] == arg_23 && arg_92[0] == arg_40[0] && arg_92[0] == arg_46 && arg_92[0] == arg_59 && arg_92[0] == arg_82 && arg_92[0] == arg_53[0] && arg_92[0] == arg_29[0] && arg_92[0] == arg_12 && arg_92[0] == arg_18 && arg_92[0] == arg_11[0] && arg_92[0] == arg_35 && arg_92[0] == arg_22[0] && arg_92[0] == arg_45[0] && arg_92[0] == arg_58[0] && arg_92[0] == arg_69[0] && arg_92[0] == arg_65 && arg_92[0] == arg_7 && arg_92[0] == arg_64[0] && arg_92[0] == arg_93 && arg_92[0] == arg_34[0] && arg_92[0] == arg_54 && arg_92[0] == arg_87[0] && arg_92[0] == arg_41 && arg_17[0] == arg_23 && arg_17[0] == arg_40[0] && arg_17[0] == arg_46 && arg_17[0] == arg_59 && arg_17[0] == arg_82 && arg_17[0] == arg_53[0] && arg_17[0] == arg_29[0] && arg_17[0] == arg_12 && arg_17[0] == arg_18 && arg_17[0] == arg_11[0] && arg_17[0] == arg_35 && arg_17[0] == arg_22[0] && arg_17[0] == arg_45[0] && arg_17[0] == arg_58[0] && arg_17[0] == arg_69[0] && arg_17[0] == arg_65 && arg_17[0] == arg_7 && arg_17[0] == arg_64[0] && arg_17[0] == arg_93 && arg_17[0] == arg_34[0] && arg_17[0] == arg_54 && arg_17[0] == arg_87[0] && arg_17[0] == arg_41 && arg_23 == arg_40[0] && arg_23 == arg_46 && arg_23 == arg_59 && arg_23 == arg_82 && arg_23 == arg_53[0] && arg_23 == arg_29[0] && arg_23 == arg_12 && arg_23 == arg_18 && arg_23 == arg_11[0] && arg_23 == arg_35 && arg_23 == arg_22[0] && arg_23 == arg_45[0] && arg_23 == arg_58[0] && arg_23 == arg_69[0] && arg_23 == arg_65 && arg_23 == arg_7 && arg_23 == arg_64[0] && arg_23 == arg_93 && arg_23 == arg_34[0] && arg_23 == arg_54 && arg_23 == arg_87[0] && arg_23 == arg_41 && arg_40[0] == arg_46 && arg_40[0] == arg_59 && arg_40[0] == arg_82 && arg_40[0] == arg_53[0] && arg_40[0] == arg_29[0] && arg_40[0] == arg_12 && arg_40[0] == arg_18 && arg_40[0] == arg_11[0] && arg_40[0] == arg_35 && arg_40[0] == arg_22[0] && arg_40[0] == arg_45[0] && arg_40[0] == arg_58[0] && arg_40[0] == arg_69[0] && arg_40[0] == arg_65 && arg_40[0] == arg_7 && arg_40[0] == arg_64[0] && arg_40[0] == arg_93 && arg_40[0] == arg_34[0] && arg_40[0] == arg_54 && arg_40[0] == arg_87[0] && arg_40[0] == arg_41 && arg_46 == arg_59 && arg_46 == arg_82 && arg_46 == arg_53[0] && arg_46 == arg_29[0] && arg_46 == arg_12 && arg_46 == arg_18 && arg_46 == arg_11[0] && arg_46 == arg_35 && arg_46 == arg_22[0] && arg_46 == arg_45[0] && arg_46 == arg_58[0] && arg_46 == arg_69[0] && arg_46 == arg_65 && arg_46 == arg_7 && arg_46 == arg_64[0] && arg_46 == arg_93 && arg_46 == arg_34[0] && arg_46 == arg_54 && arg_46 == arg_87[0] && arg_46 == arg_41 && arg_59 == arg_82 && arg_59 == arg_53[0] && arg_59 == arg_29[0] && arg_59 == arg_12 && arg_59 == arg_18 && arg_59 == arg_11[0] && arg_59 == arg_35 && arg_59 == arg_22[0] && arg_59 == arg_45[0] && arg_59 == arg_58[0] && arg_59 == arg_69[0] && arg_59 == arg_65 && arg_59 == arg_7 && arg_59 == arg_64[0] && arg_59 == arg_93 && arg_59 == arg_34[0] && arg_59 == arg_54 && arg_59 == arg_87[0] && arg_59 == arg_41 && arg_82 == arg_53[0] && arg_82 == arg_29[0] && arg_82 == arg_12 && arg_82 == arg_18 && arg_82 == arg_11[0] && arg_82 == arg_35 && arg_82 == arg_22[0] && arg_82 == arg_45[0] && arg_82 == arg_58[0] && arg_82 == arg_69[0] && arg_82 == arg_65 && arg_82 == arg_7 && arg_82 == arg_64[0] && arg_82 == arg_93 && arg_82 == arg_34[0] && arg_82 == arg_54 && arg_82 == arg_87[0] && arg_82 == arg_41 && arg_53[0] == arg_29[0] && arg_53[0] == arg_12 && arg_53[0] == arg_18 && arg_53[0] == arg_11[0] && arg_53[0] == arg_35 && arg_53[0] == arg_22[0] && arg_53[0] == arg_45[0] && arg_53[0] == arg_58[0] && arg_53[0] == arg_69[0] && arg_53[0] == arg_65 && arg_53[0] == arg_7 && arg_53[0] == arg_64[0] && arg_53[0] == arg_93 && arg_53[0] == arg_34[0] && arg_53[0] == arg_54 && arg_53[0] == arg_87[0] && arg_53[0] == arg_41 && arg_29[0] == arg_12 && arg_29[0] == arg_18 && arg_29[0] == arg_11[0] && arg_29[0] == arg_35 && arg_29[0] == arg_22[0] && arg_29[0] == arg_45[0] && arg_29[0] == arg_58[0] && arg_29[0] == arg_69[0] && arg_29[0] == arg_65 && arg_29[0] == arg_7 && arg_29[0] == arg_64[0] && arg_29[0] == arg_93 && arg_29[0] == arg_34[0] && arg_29[0] == arg_54 && arg_29[0] == arg_87[0] && arg_29[0] == arg_41 && arg_12 == arg_18 && arg_12 == arg_11[0] && arg_12 == arg_35 && arg_12 == arg_22[0] && arg_12 == arg_45[0] && arg_12 == arg_58[0] && arg_12 == arg_69[0] && arg_12 == arg_65 && arg_12 == arg_7 && arg_12 == arg_64[0] && arg_12 == arg_93 && arg_12 == arg_34[0] && arg_12 == arg_54 && arg_12 == arg_87[0] && arg_12 == arg_41 && arg_18 == arg_11[0] && arg_18 == arg_35 && arg_18 == arg_22[0] && arg_18 == arg_45[0] && arg_18 == arg_58[0] && arg_18 == arg_69[0] && arg_18 == arg_65 && arg_18 == arg_7 && arg_18 == arg_64[0] && arg_18 == arg_93 && arg_18 == arg_34[0] && arg_18 == arg_54 && arg_18 == arg_87[0] && arg_18 == arg_41 && arg_11[0] == arg_35 && arg_11[0] == arg_22[0] && arg_11[0] == arg_45[0] && arg_11[0] == arg_58[0] && arg_11[0] == arg_69[0] && arg_11[0] == arg_65 && arg_11[0] == arg_7 && arg_11[0] == arg_64[0] && arg_11[0] == arg_93 && arg_11[0] == arg_34[0] && arg_11[0] == arg_54 && arg_11[0] == arg_87[0] && arg_11[0] == arg_41 && arg_35 == arg_22[0] && arg_35 == arg_45[0] && arg_35 == arg_58[0] && arg_35 == arg_69[0] && arg_35 == arg_65 && arg_35 == arg_7 && arg_35 == arg_64[0] && arg_35 == arg_93 && arg_35 == arg_34[0] && arg_35 == arg_54 && arg_35 == arg_87[0] && arg_35 == arg_41 && arg_22[0] == arg_45[0] && arg_22[0] == arg_58[0] && arg_22[0] == arg_69[0] && arg_22[0] == arg_65 && arg_22[0] == arg_7 && arg_22[0] == arg_64[0] && arg_22[0] == arg_93 && arg_22[0] == arg_34[0] && arg_22[0] == arg_54 && arg_22[0] == arg_87[0] && arg_22[0] == arg_41 && arg_45[0] == arg_58[0] && arg_45[0] == arg_69[0] && arg_45[0] == arg_65 && arg_45[0] == arg_7 && arg_45[0] == arg_64[0] && arg_45[0] == arg_93 && arg_45[0] == arg_34[0] && arg_45[0] == arg_54 && arg_45[0] == arg_87[0] && arg_45[0] == arg_41 && arg_58[0] == arg_69[0] && arg_58[0] == arg_65 && arg_58[0] == arg_7 && arg_58[0] == arg_64[0] && arg_58[0] == arg_93 && arg_58[0] == arg_34[0] && arg_58[0] == arg_54 && arg_58[0] == arg_87[0] && arg_58[0] == arg_41 && arg_69[0] == arg_65 && arg_69[0] == arg_7 && arg_69[0] == arg_64[0] && arg_69[0] == arg_93 && arg_69[0] == arg_34[0] && arg_69[0] == arg_54 && arg_69[0] == arg_87[0] && arg_69[0] == arg_41 && arg_65 == arg_7 && arg_65 == arg_64[0] && arg_65 == arg_93 && arg_65 == arg_34[0] && arg_65 == arg_54 && arg_65 == arg_87[0] && arg_65 == arg_41 && arg_7 == arg_64[0] && arg_7 == arg_93 && arg_7 == arg_34[0] && arg_7 == arg_54 && arg_7 == arg_87[0] && arg_7 == arg_41 && arg_64[0] == arg_93 && arg_64[0] == arg_34[0] && arg_64[0] == arg_54 && arg_64[0] == arg_87[0] && arg_64[0] == arg_41 && arg_93 == arg_34[0] && arg_93 == arg_54 && arg_93 == arg_87[0] && arg_93 == arg_41 && arg_34[0] == arg_54 && arg_34[0] == arg_87[0] && arg_34[0] == arg_41 && arg_54 == arg_87[0] && arg_54 == arg_41 && arg_87[0] == arg_41 {
let rhs_inst_18 = pos.ins().iconst(I32, 3221225607_u64 as i64);
let rhs_inst_19 = pos.ins().sshr(rhs_inst_18, arg_48);
let rhs_inst_20 = pos.ins().bor_imm(rhs_inst_19, 1073741822_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_20);

}
}
}
}
}
}
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1405(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_2 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_2) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_3 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_3[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_3 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_4) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_5 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_5[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_6) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_7 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_7[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_8) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_9 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_9[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_10 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_10) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_11 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_11[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_12 = arg;
let rhs_7 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_12) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_13 = arg;
let rhs_8 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_13) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_14 = arg;
let rhs_9 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_14) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_15 = arg;
let rhs_10 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_15) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_16 = arg;
let rhs_11 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_11 == 7 {
if rhs_10 == 3 {
if rhs_9 == 4294967295 {
if rhs_8 == -1 {
if rhs_7 == 1 {
match pos.func.dfg.value_def(arg_11[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_17 = arg;
let rhs_17 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_17) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_18 = arg;
let rhs_18 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_18) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_19 = arg;
let rhs_19 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_19) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_20 = arg;
let rhs_20 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_20 == 7 {
if rhs_19 == 3 {
if rhs_18 == 4294967295 {
if rhs_17 == -1 {
if rhs_6 == 2 {
match pos.func.dfg.value_def(arg_9[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_21 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_21[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_22 = arg;
let rhs_26 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_22) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_23 = arg;
let rhs_27 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_23) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_24 = arg;
let rhs_28 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_24) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_25 = arg;
let rhs_29 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_25) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_26 = arg;
let rhs_30 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_30 == 7 {
if rhs_29 == 3 {
if rhs_28 == 4294967295 {
if rhs_27 == -1 {
if rhs_26 == 1 {
match pos.func.dfg.value_def(arg_21[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_27 = arg;
let rhs_36 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_27) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_28 = arg;
let rhs_37 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_28) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_29 = arg;
let rhs_38 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_29) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_30 = arg;
let rhs_39 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_39 == 7 {
if rhs_38 == 3 {
if rhs_37 == 4294967295 {
if rhs_36 == -1 {
if rhs_5 == 4 {
match pos.func.dfg.value_def(arg_7[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_31 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_31[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_32 = arg;
let rhs_45 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_32) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_33 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_33[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_34 = arg;
let rhs_46 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_34) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_35 = arg;
let rhs_47 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_35) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_36 = arg;
let rhs_48 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_36) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_37 = arg;
let rhs_49 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_37) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_38 = arg;
let rhs_50 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_50 == 7 {
if rhs_49 == 3 {
if rhs_48 == 4294967295 {
if rhs_47 == -1 {
if rhs_46 == 1 {
match pos.func.dfg.value_def(arg_33[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_39 = arg;
let rhs_56 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_39) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_40 = arg;
let rhs_57 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_40) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_41 = arg;
let rhs_58 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_41) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_42 = arg;
let rhs_59 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_59 == 7 {
if rhs_58 == 3 {
if rhs_57 == 4294967295 {
if rhs_56 == -1 {
if rhs_45 == 2 {
match pos.func.dfg.value_def(arg_31[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_43 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_43[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_44 = arg;
let rhs_65 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_44) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_45 = arg;
let rhs_66 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_45) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_46 = arg;
let rhs_67 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_46) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_47 = arg;
let rhs_68 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_47) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_48 = arg;
let rhs_69 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_69 == 7 {
if rhs_68 == 3 {
if rhs_67 == 4294967295 {
if rhs_66 == -1 {
if rhs_65 == 1 {
match pos.func.dfg.value_def(arg_43[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_49 = arg;
let rhs_75 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_49) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_50 = arg;
let rhs_76 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_50) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_51 = arg;
let rhs_77 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_51) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_52 = arg;
let rhs_78 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_78 == 7 {
if rhs_77 == 3 {
if rhs_76 == 4294967295 {
if rhs_75 == -1 {
if rhs_4 == 8 {
match pos.func.dfg.value_def(arg_5[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_53 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_53[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_54 = arg;
let rhs_84 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_54) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_55 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_55[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_56 = arg;
let rhs_85 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_56) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_57 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_57[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_58 = arg;
let rhs_86 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_58) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_59 = arg;
let rhs_87 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_59) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_60 = arg;
let rhs_88 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_60) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_61 = arg;
let rhs_89 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_61) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_62 = arg;
let rhs_90 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_90 == 7 {
if rhs_89 == 3 {
if rhs_88 == 4294967295 {
if rhs_87 == -1 {
if rhs_86 == 1 {
match pos.func.dfg.value_def(arg_57[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_63 = arg;
let rhs_96 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_63) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_64 = arg;
let rhs_97 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_64) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_65 = arg;
let rhs_98 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_65) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_66 = arg;
let rhs_99 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_99 == 7 {
if rhs_98 == 3 {
if rhs_97 == 4294967295 {
if rhs_96 == -1 {
if rhs_85 == 2 {
match pos.func.dfg.value_def(arg_55[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_67 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_67[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_68 = arg;
let rhs_105 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_68) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_69 = arg;
let rhs_106 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_69) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_70 = arg;
let rhs_107 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_70) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_71 = arg;
let rhs_108 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_71) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_72 = arg;
let rhs_109 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_109 == 7 {
if rhs_108 == 3 {
if rhs_107 == 4294967295 {
if rhs_106 == -1 {
if rhs_105 == 1 {
match pos.func.dfg.value_def(arg_67[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_73 = arg;
let rhs_115 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_73) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_74 = arg;
let rhs_116 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_74) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_75 = arg;
let rhs_117 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_75) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_76 = arg;
let rhs_118 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_118 == 7 {
if rhs_117 == 3 {
if rhs_116 == 4294967295 {
if rhs_115 == -1 {
if rhs_84 == 4 {
match pos.func.dfg.value_def(arg_53[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_77 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_77[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_78 = arg;
let rhs_124 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_78) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_79 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_79[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_80 = arg;
let rhs_125 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_80) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_81 = arg;
let rhs_126 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_81) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_82 = arg;
let rhs_127 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_82) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_83 = arg;
let rhs_128 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_83) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_84 = arg;
let rhs_129 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_129 == 7 {
if rhs_128 == 3 {
if rhs_127 == 4294967295 {
if rhs_126 == -1 {
if rhs_125 == 1 {
match pos.func.dfg.value_def(arg_79[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_85 = arg;
let rhs_135 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_85) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_86 = arg;
let rhs_136 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_86) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_87 = arg;
let rhs_137 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_87) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_88 = arg;
let rhs_138 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_138 == 7 {
if rhs_137 == 3 {
if rhs_136 == 4294967295 {
if rhs_135 == -1 {
if rhs_124 == 2 {
match pos.func.dfg.value_def(arg_77[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_89 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_89[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_90 = arg;
let rhs_144 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_90) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_91 = arg;
let rhs_145 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_91) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_92 = arg;
let rhs_146 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_92) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_93 = arg;
let rhs_147 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_93) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_94 = arg;
let rhs_148 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_148 == 7 {
if rhs_147 == 3 {
if rhs_146 == 4294967295 {
if rhs_145 == -1 {
if rhs_144 == 1 {
match pos.func.dfg.value_def(arg_89[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_95 = arg;
let rhs_154 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_95) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_96 = arg;
let rhs_155 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_96) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_97 = arg;
let rhs_156 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_97) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_98 = arg;
let rhs_157 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_157 == 7 {
if rhs_156 == 3 {
if rhs_155 == 4294967295 {
if rhs_154 == -1 {
if rhs_3 == 16 {
match pos.func.dfg.value_def(arg_3[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_99 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_99[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_100 = arg;
let rhs_163 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_100) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_101 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_101[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_102 = arg;
let rhs_164 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_102) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_103 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_103[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_104 = arg;
let rhs_165 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_104) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_105 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_105[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_106 = arg;
let rhs_166 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_106) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_107 = arg;
let rhs_167 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_107) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_108 = arg;
let rhs_168 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_108) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_109 = arg;
let rhs_169 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_109) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_110 = arg;
let rhs_170 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_170 == 7 {
if rhs_169 == 3 {
if rhs_168 == 4294967295 {
if rhs_167 == -1 {
if rhs_166 == 1 {
match pos.func.dfg.value_def(arg_105[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_111 = arg;
let rhs_176 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_111) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_112 = arg;
let rhs_177 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_112) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_113 = arg;
let rhs_178 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_113) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_114 = arg;
let rhs_179 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_179 == 7 {
if rhs_178 == 3 {
if rhs_177 == 4294967295 {
if rhs_176 == -1 {
if rhs_165 == 2 {
match pos.func.dfg.value_def(arg_103[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_115 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_115[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_116 = arg;
let rhs_185 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_116) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_117 = arg;
let rhs_186 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_117) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_118 = arg;
let rhs_187 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_118) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_119 = arg;
let rhs_188 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_119) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_120 = arg;
let rhs_189 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_189 == 7 {
if rhs_188 == 3 {
if rhs_187 == 4294967295 {
if rhs_186 == -1 {
if rhs_185 == 1 {
match pos.func.dfg.value_def(arg_115[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_121 = arg;
let rhs_195 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_121) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_122 = arg;
let rhs_196 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_122) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_123 = arg;
let rhs_197 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_123) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_124 = arg;
let rhs_198 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_198 == 7 {
if rhs_197 == 3 {
if rhs_196 == 4294967295 {
if rhs_195 == -1 {
if rhs_164 == 4 {
match pos.func.dfg.value_def(arg_101[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_125 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_125[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_126 = arg;
let rhs_204 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_126) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_127 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_127[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_128 = arg;
let rhs_205 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_128) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_129 = arg;
let rhs_206 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_129) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_130 = arg;
let rhs_207 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_130) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_131 = arg;
let rhs_208 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_131) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_132 = arg;
let rhs_209 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_209 == 7 {
if rhs_208 == 3 {
if rhs_207 == 4294967295 {
if rhs_206 == -1 {
if rhs_205 == 1 {
match pos.func.dfg.value_def(arg_127[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_133 = arg;
let rhs_215 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_133) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_134 = arg;
let rhs_216 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_134) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_135 = arg;
let rhs_217 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_135) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_136 = arg;
let rhs_218 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_218 == 7 {
if rhs_217 == 3 {
if rhs_216 == 4294967295 {
if rhs_215 == -1 {
if rhs_204 == 2 {
match pos.func.dfg.value_def(arg_125[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_137 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_137[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_138 = arg;
let rhs_224 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_138) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_139 = arg;
let rhs_225 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_139) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_140 = arg;
let rhs_226 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_140) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_141 = arg;
let rhs_227 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_141) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_142 = arg;
let rhs_228 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_228 == 7 {
if rhs_227 == 3 {
if rhs_226 == 4294967295 {
if rhs_225 == -1 {
if rhs_224 == 1 {
match pos.func.dfg.value_def(arg_137[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_143 = arg;
let rhs_234 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_143) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_144 = arg;
let rhs_235 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_144) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_145 = arg;
let rhs_236 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_145) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_146 = arg;
let rhs_237 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_237 == 7 {
if rhs_236 == 3 {
if rhs_235 == 4294967295 {
if rhs_234 == -1 {
if rhs_163 == 8 {
match pos.func.dfg.value_def(arg_99[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_147 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_147[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_148 = arg;
let rhs_243 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_148) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_149 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_149[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_150 = arg;
let rhs_244 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_150) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_151 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_151[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_152 = arg;
let rhs_245 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_152) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_153 = arg;
let rhs_246 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_153) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_154 = arg;
let rhs_247 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_154) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_155 = arg;
let rhs_248 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_155) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_156 = arg;
let rhs_249 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_249 == 7 {
if rhs_248 == 3 {
if rhs_247 == 4294967295 {
if rhs_246 == -1 {
if rhs_245 == 1 {
match pos.func.dfg.value_def(arg_151[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_157 = arg;
let rhs_255 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_157) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_158 = arg;
let rhs_256 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_158) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_159 = arg;
let rhs_257 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_159) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_160 = arg;
let rhs_258 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_258 == 7 {
if rhs_257 == 3 {
if rhs_256 == 4294967295 {
if rhs_255 == -1 {
if rhs_244 == 2 {
match pos.func.dfg.value_def(arg_149[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_161 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_161[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_162 = arg;
let rhs_264 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_162) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_163 = arg;
let rhs_265 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_163) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_164 = arg;
let rhs_266 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_164) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_165 = arg;
let rhs_267 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_165) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_166 = arg;
let rhs_268 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_268 == 7 {
if rhs_267 == 3 {
if rhs_266 == 4294967295 {
if rhs_265 == -1 {
if rhs_264 == 1 {
match pos.func.dfg.value_def(arg_161[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_167 = arg;
let rhs_274 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_167) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_168 = arg;
let rhs_275 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_168) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_169 = arg;
let rhs_276 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_169) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_170 = arg;
let rhs_277 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_277 == 7 {
if rhs_276 == 3 {
if rhs_275 == 4294967295 {
if rhs_274 == -1 {
if rhs_243 == 4 {
match pos.func.dfg.value_def(arg_147[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_171 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_171[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_172 = arg;
let rhs_283 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_172) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_173 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_173[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_174 = arg;
let rhs_284 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_174) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_175 = arg;
let rhs_285 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_175) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_176 = arg;
let rhs_286 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_176) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_177 = arg;
let rhs_287 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_177) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_178 = arg;
let rhs_288 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_288 == 7 {
if rhs_287 == 3 {
if rhs_286 == 4294967295 {
if rhs_285 == -1 {
if rhs_284 == 1 {
match pos.func.dfg.value_def(arg_173[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_179 = arg;
let rhs_294 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_179) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_180 = arg;
let rhs_295 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_180) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_181 = arg;
let rhs_296 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_181) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_182 = arg;
let rhs_297 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_297 == 7 {
if rhs_296 == 3 {
if rhs_295 == 4294967295 {
if rhs_294 == -1 {
if rhs_283 == 2 {
match pos.func.dfg.value_def(arg_171[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_183 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_183[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_184 = arg;
let rhs_303 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_184) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_185 = arg;
let rhs_304 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_185) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_186 = arg;
let rhs_305 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_186) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_187 = arg;
let rhs_306 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_187) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_188 = arg;
let rhs_307 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_307 == 7 {
if rhs_306 == 3 {
if rhs_305 == 4294967295 {
if rhs_304 == -1 {
if rhs_303 == 1 {
match pos.func.dfg.value_def(arg_183[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_189 = arg;
let rhs_313 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_189) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_190 = arg;
let rhs_314 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_190) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_191 = arg;
let rhs_315 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_191) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_192 = arg;
let rhs_316 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_316 == 7 {
if rhs_315 == 3 {
if rhs_314 == 4294967295 {
if rhs_313 == -1 {
if rhs_2 == 32 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_193 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_193[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_194 = arg;
let rhs_322 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_194) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_195 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_195[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_196 = arg;
let rhs_323 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_196) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_197 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_197[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_198 = arg;
let rhs_324 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_198) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_199 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_199[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_200 = arg;
let rhs_325 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_200) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_201 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_201[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_202 = arg;
let rhs_326 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_202) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_203 = arg;
let rhs_327 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_203) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_204 = arg;
let rhs_328 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_204) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_205 = arg;
let rhs_329 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_205) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_206 = arg;
let rhs_330 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_330 == 7 {
if rhs_329 == 3 {
if rhs_328 == 4294967295 {
if rhs_327 == -1 {
if rhs_326 == 1 {
match pos.func.dfg.value_def(arg_201[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_207 = arg;
let rhs_336 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_207) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_208 = arg;
let rhs_337 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_208) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_209 = arg;
let rhs_338 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_209) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_210 = arg;
let rhs_339 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_339 == 7 {
if rhs_338 == 3 {
if rhs_337 == 4294967295 {
if rhs_336 == -1 {
if rhs_325 == 2 {
match pos.func.dfg.value_def(arg_199[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_211 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_211[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_212 = arg;
let rhs_345 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_212) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_213 = arg;
let rhs_346 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_213) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_214 = arg;
let rhs_347 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_214) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_215 = arg;
let rhs_348 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_215) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_216 = arg;
let rhs_349 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_349 == 7 {
if rhs_348 == 3 {
if rhs_347 == 4294967295 {
if rhs_346 == -1 {
if rhs_345 == 1 {
match pos.func.dfg.value_def(arg_211[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_217 = arg;
let rhs_355 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_217) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_218 = arg;
let rhs_356 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_218) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_219 = arg;
let rhs_357 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_219) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_220 = arg;
let rhs_358 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_358 == 7 {
if rhs_357 == 3 {
if rhs_356 == 4294967295 {
if rhs_355 == -1 {
if rhs_324 == 4 {
match pos.func.dfg.value_def(arg_197[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_221 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_221[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_222 = arg;
let rhs_364 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_222) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_223 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_223[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_224 = arg;
let rhs_365 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_224) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_225 = arg;
let rhs_366 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_225) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_226 = arg;
let rhs_367 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_226) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_227 = arg;
let rhs_368 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_227) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_228 = arg;
let rhs_369 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_369 == 7 {
if rhs_368 == 3 {
if rhs_367 == 4294967295 {
if rhs_366 == -1 {
if rhs_365 == 1 {
match pos.func.dfg.value_def(arg_223[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_229 = arg;
let rhs_375 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_229) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_230 = arg;
let rhs_376 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_230) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_231 = arg;
let rhs_377 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_231) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_232 = arg;
let rhs_378 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_378 == 7 {
if rhs_377 == 3 {
if rhs_376 == 4294967295 {
if rhs_375 == -1 {
if rhs_364 == 2 {
match pos.func.dfg.value_def(arg_221[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_233 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_233[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_234 = arg;
let rhs_384 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_234) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_235 = arg;
let rhs_385 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_235) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_236 = arg;
let rhs_386 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_236) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_237 = arg;
let rhs_387 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_237) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_238 = arg;
let rhs_388 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_388 == 7 {
if rhs_387 == 3 {
if rhs_386 == 4294967295 {
if rhs_385 == -1 {
if rhs_384 == 1 {
match pos.func.dfg.value_def(arg_233[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_239 = arg;
let rhs_394 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_239) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_240 = arg;
let rhs_395 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_240) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_241 = arg;
let rhs_396 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_241) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_242 = arg;
let rhs_397 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_397 == 7 {
if rhs_396 == 3 {
if rhs_395 == 4294967295 {
if rhs_394 == -1 {
if rhs_323 == 8 {
match pos.func.dfg.value_def(arg_195[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_243 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_243[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_244 = arg;
let rhs_403 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_244) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_245 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_245[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_246 = arg;
let rhs_404 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_246) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_247 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_247[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_248 = arg;
let rhs_405 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_248) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_249 = arg;
let rhs_406 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_249) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_250 = arg;
let rhs_407 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_250) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_251 = arg;
let rhs_408 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_251) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_252 = arg;
let rhs_409 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_409 == 7 {
if rhs_408 == 3 {
if rhs_407 == 4294967295 {
if rhs_406 == -1 {
if rhs_405 == 1 {
match pos.func.dfg.value_def(arg_247[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_253 = arg;
let rhs_415 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_253) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_254 = arg;
let rhs_416 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_254) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_255 = arg;
let rhs_417 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_255) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_256 = arg;
let rhs_418 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_418 == 7 {
if rhs_417 == 3 {
if rhs_416 == 4294967295 {
if rhs_415 == -1 {
if rhs_404 == 2 {
match pos.func.dfg.value_def(arg_245[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_257 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_257[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_258 = arg;
let rhs_424 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_258) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_259 = arg;
let rhs_425 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_259) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_260 = arg;
let rhs_426 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_260) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_261 = arg;
let rhs_427 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_261) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_262 = arg;
let rhs_428 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_428 == 7 {
if rhs_427 == 3 {
if rhs_426 == 4294967295 {
if rhs_425 == -1 {
if rhs_424 == 1 {
match pos.func.dfg.value_def(arg_257[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_263 = arg;
let rhs_434 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_263) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_264 = arg;
let rhs_435 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_264) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_265 = arg;
let rhs_436 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_265) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_266 = arg;
let rhs_437 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_437 == 7 {
if rhs_436 == 3 {
if rhs_435 == 4294967295 {
if rhs_434 == -1 {
if rhs_403 == 4 {
match pos.func.dfg.value_def(arg_243[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_267 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_267[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_268 = arg;
let rhs_443 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_268) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_269 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_269[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_270 = arg;
let rhs_444 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_270) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_271 = arg;
let rhs_445 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_271) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_272 = arg;
let rhs_446 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_272) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_273 = arg;
let rhs_447 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_273) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_274 = arg;
let rhs_448 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_448 == 7 {
if rhs_447 == 3 {
if rhs_446 == 4294967295 {
if rhs_445 == -1 {
if rhs_444 == 1 {
match pos.func.dfg.value_def(arg_269[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_275 = arg;
let rhs_454 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_275) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_276 = arg;
let rhs_455 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_276) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_277 = arg;
let rhs_456 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_277) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_278 = arg;
let rhs_457 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_457 == 7 {
if rhs_456 == 3 {
if rhs_455 == 4294967295 {
if rhs_454 == -1 {
if rhs_443 == 2 {
match pos.func.dfg.value_def(arg_267[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_279 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_279[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_280 = arg;
let rhs_463 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_280) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_281 = arg;
let rhs_464 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_281) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_282 = arg;
let rhs_465 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_282) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_283 = arg;
let rhs_466 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_283) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_284 = arg;
let rhs_467 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_467 == 7 {
if rhs_466 == 3 {
if rhs_465 == 4294967295 {
if rhs_464 == -1 {
if rhs_463 == 1 {
match pos.func.dfg.value_def(arg_279[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_285 = arg;
let rhs_473 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_285) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_286 = arg;
let rhs_474 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_286) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_287 = arg;
let rhs_475 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_287) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_288 = arg;
let rhs_476 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_476 == 7 {
if rhs_475 == 3 {
if rhs_474 == 4294967295 {
if rhs_473 == -1 {
if rhs_322 == 16 {
match pos.func.dfg.value_def(arg_193[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_289 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_289[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_290 = arg;
let rhs_482 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_290) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_291 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_291[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_292 = arg;
let rhs_483 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_292) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_293 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_293[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_294 = arg;
let rhs_484 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_294) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_295 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_295[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_296 = arg;
let rhs_485 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_296) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_297 = arg;
let rhs_486 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_297) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_298 = arg;
let rhs_487 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_298) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_299 = arg;
let rhs_488 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_299) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_300 = arg;
let rhs_489 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_489 == 7 {
if rhs_488 == 3 {
if rhs_487 == 4294967295 {
if rhs_486 == -1 {
if rhs_485 == 1 {
match pos.func.dfg.value_def(arg_295[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_301 = arg;
let rhs_495 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_301) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_302 = arg;
let rhs_496 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_302) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_303 = arg;
let rhs_497 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_303) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_304 = arg;
let rhs_498 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_498 == 7 {
if rhs_497 == 3 {
if rhs_496 == 4294967295 {
if rhs_495 == -1 {
if rhs_484 == 2 {
match pos.func.dfg.value_def(arg_293[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_305 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_305[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_306 = arg;
let rhs_504 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_306) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_307 = arg;
let rhs_505 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_307) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_308 = arg;
let rhs_506 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_308) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_309 = arg;
let rhs_507 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_309) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_310 = arg;
let rhs_508 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_508 == 7 {
if rhs_507 == 3 {
if rhs_506 == 4294967295 {
if rhs_505 == -1 {
if rhs_504 == 1 {
match pos.func.dfg.value_def(arg_305[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_311 = arg;
let rhs_514 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_311) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_312 = arg;
let rhs_515 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_312) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_313 = arg;
let rhs_516 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_313) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_314 = arg;
let rhs_517 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_517 == 7 {
if rhs_516 == 3 {
if rhs_515 == 4294967295 {
if rhs_514 == -1 {
if rhs_483 == 4 {
match pos.func.dfg.value_def(arg_291[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_315 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_315[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_316 = arg;
let rhs_523 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_316) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_317 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_317[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_318 = arg;
let rhs_524 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_318) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_319 = arg;
let rhs_525 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_319) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_320 = arg;
let rhs_526 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_320) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_321 = arg;
let rhs_527 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_321) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_322 = arg;
let rhs_528 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_528 == 7 {
if rhs_527 == 3 {
if rhs_526 == 4294967295 {
if rhs_525 == -1 {
if rhs_524 == 1 {
match pos.func.dfg.value_def(arg_317[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_323 = arg;
let rhs_534 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_323) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_324 = arg;
let rhs_535 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_324) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_325 = arg;
let rhs_536 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_325) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_326 = arg;
let rhs_537 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_537 == 7 {
if rhs_536 == 3 {
if rhs_535 == 4294967295 {
if rhs_534 == -1 {
if rhs_523 == 2 {
match pos.func.dfg.value_def(arg_315[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_327 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_327[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_328 = arg;
let rhs_543 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_328) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_329 = arg;
let rhs_544 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_329) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_330 = arg;
let rhs_545 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_330) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_331 = arg;
let rhs_546 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_331) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_332 = arg;
let rhs_547 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_547 == 7 {
if rhs_546 == 3 {
if rhs_545 == 4294967295 {
if rhs_544 == -1 {
if rhs_543 == 1 {
match pos.func.dfg.value_def(arg_327[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_333 = arg;
let rhs_553 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_333) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_334 = arg;
let rhs_554 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_334) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_335 = arg;
let rhs_555 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_335) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_336 = arg;
let rhs_556 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_556 == 7 {
if rhs_555 == 3 {
if rhs_554 == 4294967295 {
if rhs_553 == -1 {
if rhs_482 == 8 {
match pos.func.dfg.value_def(arg_289[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_337 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_337[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_338 = arg;
let rhs_562 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_338) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_339 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_339[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_340 = arg;
let rhs_563 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_340) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_341 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_341[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_342 = arg;
let rhs_564 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_342) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_343 = arg;
let rhs_565 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_343) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_344 = arg;
let rhs_566 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_344) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_345 = arg;
let rhs_567 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_345) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_346 = arg;
let rhs_568 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_568 == 7 {
if rhs_567 == 3 {
if rhs_566 == 4294967295 {
if rhs_565 == -1 {
if rhs_564 == 1 {
match pos.func.dfg.value_def(arg_341[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_347 = arg;
let rhs_574 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_347) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_348 = arg;
let rhs_575 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_348) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_349 = arg;
let rhs_576 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_349) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_350 = arg;
let rhs_577 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_577 == 7 {
if rhs_576 == 3 {
if rhs_575 == 4294967295 {
if rhs_574 == -1 {
if rhs_563 == 2 {
match pos.func.dfg.value_def(arg_339[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_351 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_351[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_352 = arg;
let rhs_583 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_352) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_353 = arg;
let rhs_584 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_353) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_354 = arg;
let rhs_585 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_354) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_355 = arg;
let rhs_586 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_355) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_356 = arg;
let rhs_587 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_587 == 7 {
if rhs_586 == 3 {
if rhs_585 == 4294967295 {
if rhs_584 == -1 {
if rhs_583 == 1 {
match pos.func.dfg.value_def(arg_351[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_357 = arg;
let rhs_593 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_357) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_358 = arg;
let rhs_594 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_358) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_359 = arg;
let rhs_595 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_359) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_360 = arg;
let rhs_596 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_596 == 7 {
if rhs_595 == 3 {
if rhs_594 == 4294967295 {
if rhs_593 == -1 {
if rhs_562 == 4 {
match pos.func.dfg.value_def(arg_337[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_361 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_361[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_362 = arg;
let rhs_602 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_362) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_363 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_363[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_364 = arg;
let rhs_603 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_364) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_365 = arg;
let rhs_604 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_365) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_366 = arg;
let rhs_605 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_366) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_367 = arg;
let rhs_606 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_367) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_368 = arg;
let rhs_607 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_607 == 7 {
if rhs_606 == 3 {
if rhs_605 == 4294967295 {
if rhs_604 == -1 {
if rhs_603 == 1 {
match pos.func.dfg.value_def(arg_363[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_369 = arg;
let rhs_613 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_369) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_370 = arg;
let rhs_614 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_370) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_371 = arg;
let rhs_615 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_371) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_372 = arg;
let rhs_616 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_616 == 7 {
if rhs_615 == 3 {
if rhs_614 == 4294967295 {
if rhs_613 == -1 {
if rhs_602 == 2 {
match pos.func.dfg.value_def(arg_361[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_373 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_373[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_374 = arg;
let rhs_622 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_374) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_375 = arg;
let rhs_623 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_375) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_376 = arg;
let rhs_624 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_376) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_377 = arg;
let rhs_625 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_377) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_378 = arg;
let rhs_626 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_626 == 7 {
if rhs_625 == 3 {
if rhs_624 == 4294967295 {
if rhs_623 == -1 {
if rhs_622 == 1 {
match pos.func.dfg.value_def(arg_373[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_379 = arg;
let rhs_632 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_379) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_380 = arg;
let rhs_633 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_380) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_381 = arg;
let rhs_634 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_381) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_382 = arg;
let rhs_635 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
if rhs_635 == 7 {
if rhs_634 == 3 {
if rhs_633 == 4294967295 {
if rhs_632 == -1 {
if rhs_1 == 1 {
if arg_52 == arg_166 && arg_52 == arg_372 && arg_52 == arg_62 && arg_52 == arg_232 && arg_52 == arg_20 && arg_52 == arg_72 && arg_52 == arg_88 && arg_52 == arg_16 && arg_52 == arg_98 && arg_52 == arg_132 && arg_52 == arg_160 && arg_52 == arg_262 && arg_52 == arg_326 && arg_52 == arg_192 && arg_52 == arg_26 && arg_52 == arg_66 && arg_52 == arg_114 && arg_52 == arg_278 && arg_52 == arg_382 && arg_52 == arg_242 && arg_52 == arg_48 && arg_52 == arg_84 && arg_52 == arg_142 && arg_52 == arg_336 && arg_52 == arg_228 && arg_52 == arg_220 && arg_52 == arg_120 && arg_52 == arg_252 && arg_52 == arg_350 && arg_52 == arg_314 && arg_52 == arg_346 && arg_52 == arg_124 && arg_52 == arg_94 && arg_52 == arg_210 && arg_52 == arg_288 && arg_52 == arg_136 && arg_52 == arg_38 && arg_52 == arg_256 && arg_52 == arg_284 && arg_52 == arg_322 && arg_52 == arg_156 && arg_52 == arg_146 && arg_52 == arg_170 && arg_52 == arg_182 && arg_52 == arg_188 && arg_52 == arg_206 && arg_52 == arg_356 && arg_52 == arg_304 && arg_52 == arg_300 && arg_52 == arg_266 && arg_52 == arg_238 && arg_52 == arg_30 && arg_52 == arg_360 && arg_52 == arg_332 && arg_52 == arg_110 && arg_52 == arg_274 && arg_52 == arg_368 && arg_52 == arg_310 && arg_52 == arg_42 && arg_52 == arg_378 && arg_52 == arg_178 && arg_52 == arg_216 && arg_52 == arg_76 && arg_166 == arg_372 && arg_166 == arg_62 && arg_166 == arg_232 && arg_166 == arg_20 && arg_166 == arg_72 && arg_166 == arg_88 && arg_166 == arg_16 && arg_166 == arg_98 && arg_166 == arg_132 && arg_166 == arg_160 && arg_166 == arg_262 && arg_166 == arg_326 && arg_166 == arg_192 && arg_166 == arg_26 && arg_166 == arg_66 && arg_166 == arg_114 && arg_166 == arg_278 && arg_166 == arg_382 && arg_166 == arg_242 && arg_166 == arg_48 && arg_166 == arg_84 && arg_166 == arg_142 && arg_166 == arg_336 && arg_166 == arg_228 && arg_166 == arg_220 && arg_166 == arg_120 && arg_166 == arg_252 && arg_166 == arg_350 && arg_166 == arg_314 && arg_166 == arg_346 && arg_166 == arg_124 && arg_166 == arg_94 && arg_166 == arg_210 && arg_166 == arg_288 && arg_166 == arg_136 && arg_166 == arg_38 && arg_166 == arg_256 && arg_166 == arg_284 && arg_166 == arg_322 && arg_166 == arg_156 && arg_166 == arg_146 && arg_166 == arg_170 && arg_166 == arg_182 && arg_166 == arg_188 && arg_166 == arg_206 && arg_166 == arg_356 && arg_166 == arg_304 && arg_166 == arg_300 && arg_166 == arg_266 && arg_166 == arg_238 && arg_166 == arg_30 && arg_166 == arg_360 && arg_166 == arg_332 && arg_166 == arg_110 && arg_166 == arg_274 && arg_166 == arg_368 && arg_166 == arg_310 && arg_166 == arg_42 && arg_166 == arg_378 && arg_166 == arg_178 && arg_166 == arg_216 && arg_166 == arg_76 && arg_372 == arg_62 && arg_372 == arg_232 && arg_372 == arg_20 && arg_372 == arg_72 && arg_372 == arg_88 && arg_372 == arg_16 && arg_372 == arg_98 && arg_372 == arg_132 && arg_372 == arg_160 && arg_372 == arg_262 && arg_372 == arg_326 && arg_372 == arg_192 && arg_372 == arg_26 && arg_372 == arg_66 && arg_372 == arg_114 && arg_372 == arg_278 && arg_372 == arg_382 && arg_372 == arg_242 && arg_372 == arg_48 && arg_372 == arg_84 && arg_372 == arg_142 && arg_372 == arg_336 && arg_372 == arg_228 && arg_372 == arg_220 && arg_372 == arg_120 && arg_372 == arg_252 && arg_372 == arg_350 && arg_372 == arg_314 && arg_372 == arg_346 && arg_372 == arg_124 && arg_372 == arg_94 && arg_372 == arg_210 && arg_372 == arg_288 && arg_372 == arg_136 && arg_372 == arg_38 && arg_372 == arg_256 && arg_372 == arg_284 && arg_372 == arg_322 && arg_372 == arg_156 && arg_372 == arg_146 && arg_372 == arg_170 && arg_372 == arg_182 && arg_372 == arg_188 && arg_372 == arg_206 && arg_372 == arg_356 && arg_372 == arg_304 && arg_372 == arg_300 && arg_372 == arg_266 && arg_372 == arg_238 && arg_372 == arg_30 && arg_372 == arg_360 && arg_372 == arg_332 && arg_372 == arg_110 && arg_372 == arg_274 && arg_372 == arg_368 && arg_372 == arg_310 && arg_372 == arg_42 && arg_372 == arg_378 && arg_372 == arg_178 && arg_372 == arg_216 && arg_372 == arg_76 && arg_62 == arg_232 && arg_62 == arg_20 && arg_62 == arg_72 && arg_62 == arg_88 && arg_62 == arg_16 && arg_62 == arg_98 && arg_62 == arg_132 && arg_62 == arg_160 && arg_62 == arg_262 && arg_62 == arg_326 && arg_62 == arg_192 && arg_62 == arg_26 && arg_62 == arg_66 && arg_62 == arg_114 && arg_62 == arg_278 && arg_62 == arg_382 && arg_62 == arg_242 && arg_62 == arg_48 && arg_62 == arg_84 && arg_62 == arg_142 && arg_62 == arg_336 && arg_62 == arg_228 && arg_62 == arg_220 && arg_62 == arg_120 && arg_62 == arg_252 && arg_62 == arg_350 && arg_62 == arg_314 && arg_62 == arg_346 && arg_62 == arg_124 && arg_62 == arg_94 && arg_62 == arg_210 && arg_62 == arg_288 && arg_62 == arg_136 && arg_62 == arg_38 && arg_62 == arg_256 && arg_62 == arg_284 && arg_62 == arg_322 && arg_62 == arg_156 && arg_62 == arg_146 && arg_62 == arg_170 && arg_62 == arg_182 && arg_62 == arg_188 && arg_62 == arg_206 && arg_62 == arg_356 && arg_62 == arg_304 && arg_62 == arg_300 && arg_62 == arg_266 && arg_62 == arg_238 && arg_62 == arg_30 && arg_62 == arg_360 && arg_62 == arg_332 && arg_62 == arg_110 && arg_62 == arg_274 && arg_62 == arg_368 && arg_62 == arg_310 && arg_62 == arg_42 && arg_62 == arg_378 && arg_62 == arg_178 && arg_62 == arg_216 && arg_62 == arg_76 && arg_232 == arg_20 && arg_232 == arg_72 && arg_232 == arg_88 && arg_232 == arg_16 && arg_232 == arg_98 && arg_232 == arg_132 && arg_232 == arg_160 && arg_232 == arg_262 && arg_232 == arg_326 && arg_232 == arg_192 && arg_232 == arg_26 && arg_232 == arg_66 && arg_232 == arg_114 && arg_232 == arg_278 && arg_232 == arg_382 && arg_232 == arg_242 && arg_232 == arg_48 && arg_232 == arg_84 && arg_232 == arg_142 && arg_232 == arg_336 && arg_232 == arg_228 && arg_232 == arg_220 && arg_232 == arg_120 && arg_232 == arg_252 && arg_232 == arg_350 && arg_232 == arg_314 && arg_232 == arg_346 && arg_232 == arg_124 && arg_232 == arg_94 && arg_232 == arg_210 && arg_232 == arg_288 && arg_232 == arg_136 && arg_232 == arg_38 && arg_232 == arg_256 && arg_232 == arg_284 && arg_232 == arg_322 && arg_232 == arg_156 && arg_232 == arg_146 && arg_232 == arg_170 && arg_232 == arg_182 && arg_232 == arg_188 && arg_232 == arg_206 && arg_232 == arg_356 && arg_232 == arg_304 && arg_232 == arg_300 && arg_232 == arg_266 && arg_232 == arg_238 && arg_232 == arg_30 && arg_232 == arg_360 && arg_232 == arg_332 && arg_232 == arg_110 && arg_232 == arg_274 && arg_232 == arg_368 && arg_232 == arg_310 && arg_232 == arg_42 && arg_232 == arg_378 && arg_232 == arg_178 && arg_232 == arg_216 && arg_232 == arg_76 && arg_20 == arg_72 && arg_20 == arg_88 && arg_20 == arg_16 && arg_20 == arg_98 && arg_20 == arg_132 && arg_20 == arg_160 && arg_20 == arg_262 && arg_20 == arg_326 && arg_20 == arg_192 && arg_20 == arg_26 && arg_20 == arg_66 && arg_20 == arg_114 && arg_20 == arg_278 && arg_20 == arg_382 && arg_20 == arg_242 && arg_20 == arg_48 && arg_20 == arg_84 && arg_20 == arg_142 && arg_20 == arg_336 && arg_20 == arg_228 && arg_20 == arg_220 && arg_20 == arg_120 && arg_20 == arg_252 && arg_20 == arg_350 && arg_20 == arg_314 && arg_20 == arg_346 && arg_20 == arg_124 && arg_20 == arg_94 && arg_20 == arg_210 && arg_20 == arg_288 && arg_20 == arg_136 && arg_20 == arg_38 && arg_20 == arg_256 && arg_20 == arg_284 && arg_20 == arg_322 && arg_20 == arg_156 && arg_20 == arg_146 && arg_20 == arg_170 && arg_20 == arg_182 && arg_20 == arg_188 && arg_20 == arg_206 && arg_20 == arg_356 && arg_20 == arg_304 && arg_20 == arg_300 && arg_20 == arg_266 && arg_20 == arg_238 && arg_20 == arg_30 && arg_20 == arg_360 && arg_20 == arg_332 && arg_20 == arg_110 && arg_20 == arg_274 && arg_20 == arg_368 && arg_20 == arg_310 && arg_20 == arg_42 && arg_20 == arg_378 && arg_20 == arg_178 && arg_20 == arg_216 && arg_20 == arg_76 && arg_72 == arg_88 && arg_72 == arg_16 && arg_72 == arg_98 && arg_72 == arg_132 && arg_72 == arg_160 && arg_72 == arg_262 && arg_72 == arg_326 && arg_72 == arg_192 && arg_72 == arg_26 && arg_72 == arg_66 && arg_72 == arg_114 && arg_72 == arg_278 && arg_72 == arg_382 && arg_72 == arg_242 && arg_72 == arg_48 && arg_72 == arg_84 && arg_72 == arg_142 && arg_72 == arg_336 && arg_72 == arg_228 && arg_72 == arg_220 && arg_72 == arg_120 && arg_72 == arg_252 && arg_72 == arg_350 && arg_72 == arg_314 && arg_72 == arg_346 && arg_72 == arg_124 && arg_72 == arg_94 && arg_72 == arg_210 && arg_72 == arg_288 && arg_72 == arg_136 && arg_72 == arg_38 && arg_72 == arg_256 && arg_72 == arg_284 && arg_72 == arg_322 && arg_72 == arg_156 && arg_72 == arg_146 && arg_72 == arg_170 && arg_72 == arg_182 && arg_72 == arg_188 && arg_72 == arg_206 && arg_72 == arg_356 && arg_72 == arg_304 && arg_72 == arg_300 && arg_72 == arg_266 && arg_72 == arg_238 && arg_72 == arg_30 && arg_72 == arg_360 && arg_72 == arg_332 && arg_72 == arg_110 && arg_72 == arg_274 && arg_72 == arg_368 && arg_72 == arg_310 && arg_72 == arg_42 && arg_72 == arg_378 && arg_72 == arg_178 && arg_72 == arg_216 && arg_72 == arg_76 && arg_88 == arg_16 && arg_88 == arg_98 && arg_88 == arg_132 && arg_88 == arg_160 && arg_88 == arg_262 && arg_88 == arg_326 && arg_88 == arg_192 && arg_88 == arg_26 && arg_88 == arg_66 && arg_88 == arg_114 && arg_88 == arg_278 && arg_88 == arg_382 && arg_88 == arg_242 && arg_88 == arg_48 && arg_88 == arg_84 && arg_88 == arg_142 && arg_88 == arg_336 && arg_88 == arg_228 && arg_88 == arg_220 && arg_88 == arg_120 && arg_88 == arg_252 && arg_88 == arg_350 && arg_88 == arg_314 && arg_88 == arg_346 && arg_88 == arg_124 && arg_88 == arg_94 && arg_88 == arg_210 && arg_88 == arg_288 && arg_88 == arg_136 && arg_88 == arg_38 && arg_88 == arg_256 && arg_88 == arg_284 && arg_88 == arg_322 && arg_88 == arg_156 && arg_88 == arg_146 && arg_88 == arg_170 && arg_88 == arg_182 && arg_88 == arg_188 && arg_88 == arg_206 && arg_88 == arg_356 && arg_88 == arg_304 && arg_88 == arg_300 && arg_88 == arg_266 && arg_88 == arg_238 && arg_88 == arg_30 && arg_88 == arg_360 && arg_88 == arg_332 && arg_88 == arg_110 && arg_88 == arg_274 && arg_88 == arg_368 && arg_88 == arg_310 && arg_88 == arg_42 && arg_88 == arg_378 && arg_88 == arg_178 && arg_88 == arg_216 && arg_88 == arg_76 && arg_16 == arg_98 && arg_16 == arg_132 && arg_16 == arg_160 && arg_16 == arg_262 && arg_16 == arg_326 && arg_16 == arg_192 && arg_16 == arg_26 && arg_16 == arg_66 && arg_16 == arg_114 && arg_16 == arg_278 && arg_16 == arg_382 && arg_16 == arg_242 && arg_16 == arg_48 && arg_16 == arg_84 && arg_16 == arg_142 && arg_16 == arg_336 && arg_16 == arg_228 && arg_16 == arg_220 && arg_16 == arg_120 && arg_16 == arg_252 && arg_16 == arg_350 && arg_16 == arg_314 && arg_16 == arg_346 && arg_16 == arg_124 && arg_16 == arg_94 && arg_16 == arg_210 && arg_16 == arg_288 && arg_16 == arg_136 && arg_16 == arg_38 && arg_16 == arg_256 && arg_16 == arg_284 && arg_16 == arg_322 && arg_16 == arg_156 && arg_16 == arg_146 && arg_16 == arg_170 && arg_16 == arg_182 && arg_16 == arg_188 && arg_16 == arg_206 && arg_16 == arg_356 && arg_16 == arg_304 && arg_16 == arg_300 && arg_16 == arg_266 && arg_16 == arg_238 && arg_16 == arg_30 && arg_16 == arg_360 && arg_16 == arg_332 && arg_16 == arg_110 && arg_16 == arg_274 && arg_16 == arg_368 && arg_16 == arg_310 && arg_16 == arg_42 && arg_16 == arg_378 && arg_16 == arg_178 && arg_16 == arg_216 && arg_16 == arg_76 && arg_98 == arg_132 && arg_98 == arg_160 && arg_98 == arg_262 && arg_98 == arg_326 && arg_98 == arg_192 && arg_98 == arg_26 && arg_98 == arg_66 && arg_98 == arg_114 && arg_98 == arg_278 && arg_98 == arg_382 && arg_98 == arg_242 && arg_98 == arg_48 && arg_98 == arg_84 && arg_98 == arg_142 && arg_98 == arg_336 && arg_98 == arg_228 && arg_98 == arg_220 && arg_98 == arg_120 && arg_98 == arg_252 && arg_98 == arg_350 && arg_98 == arg_314 && arg_98 == arg_346 && arg_98 == arg_124 && arg_98 == arg_94 && arg_98 == arg_210 && arg_98 == arg_288 && arg_98 == arg_136 && arg_98 == arg_38 && arg_98 == arg_256 && arg_98 == arg_284 && arg_98 == arg_322 && arg_98 == arg_156 && arg_98 == arg_146 && arg_98 == arg_170 && arg_98 == arg_182 && arg_98 == arg_188 && arg_98 == arg_206 && arg_98 == arg_356 && arg_98 == arg_304 && arg_98 == arg_300 && arg_98 == arg_266 && arg_98 == arg_238 && arg_98 == arg_30 && arg_98 == arg_360 && arg_98 == arg_332 && arg_98 == arg_110 && arg_98 == arg_274 && arg_98 == arg_368 && arg_98 == arg_310 && arg_98 == arg_42 && arg_98 == arg_378 && arg_98 == arg_178 && arg_98 == arg_216 && arg_98 == arg_76 && arg_132 == arg_160 && arg_132 == arg_262 && arg_132 == arg_326 && arg_132 == arg_192 && arg_132 == arg_26 && arg_132 == arg_66 && arg_132 == arg_114 && arg_132 == arg_278 && arg_132 == arg_382 && arg_132 == arg_242 && arg_132 == arg_48 && arg_132 == arg_84 && arg_132 == arg_142 && arg_132 == arg_336 && arg_132 == arg_228 && arg_132 == arg_220 && arg_132 == arg_120 && arg_132 == arg_252 && arg_132 == arg_350 && arg_132 == arg_314 && arg_132 == arg_346 && arg_132 == arg_124 && arg_132 == arg_94 && arg_132 == arg_210 && arg_132 == arg_288 && arg_132 == arg_136 && arg_132 == arg_38 && arg_132 == arg_256 && arg_132 == arg_284 && arg_132 == arg_322 && arg_132 == arg_156 && arg_132 == arg_146 && arg_132 == arg_170 && arg_132 == arg_182 && arg_132 == arg_188 && arg_132 == arg_206 && arg_132 == arg_356 && arg_132 == arg_304 && arg_132 == arg_300 && arg_132 == arg_266 && arg_132 == arg_238 && arg_132 == arg_30 && arg_132 == arg_360 && arg_132 == arg_332 && arg_132 == arg_110 && arg_132 == arg_274 && arg_132 == arg_368 && arg_132 == arg_310 && arg_132 == arg_42 && arg_132 == arg_378 && arg_132 == arg_178 && arg_132 == arg_216 && arg_132 == arg_76 && arg_160 == arg_262 && arg_160 == arg_326 && arg_160 == arg_192 && arg_160 == arg_26 && arg_160 == arg_66 && arg_160 == arg_114 && arg_160 == arg_278 && arg_160 == arg_382 && arg_160 == arg_242 && arg_160 == arg_48 && arg_160 == arg_84 && arg_160 == arg_142 && arg_160 == arg_336 && arg_160 == arg_228 && arg_160 == arg_220 && arg_160 == arg_120 && arg_160 == arg_252 && arg_160 == arg_350 && arg_160 == arg_314 && arg_160 == arg_346 && arg_160 == arg_124 && arg_160 == arg_94 && arg_160 == arg_210 && arg_160 == arg_288 && arg_160 == arg_136 && arg_160 == arg_38 && arg_160 == arg_256 && arg_160 == arg_284 && arg_160 == arg_322 && arg_160 == arg_156 && arg_160 == arg_146 && arg_160 == arg_170 && arg_160 == arg_182 && arg_160 == arg_188 && arg_160 == arg_206 && arg_160 == arg_356 && arg_160 == arg_304 && arg_160 == arg_300 && arg_160 == arg_266 && arg_160 == arg_238 && arg_160 == arg_30 && arg_160 == arg_360 && arg_160 == arg_332 && arg_160 == arg_110 && arg_160 == arg_274 && arg_160 == arg_368 && arg_160 == arg_310 && arg_160 == arg_42 && arg_160 == arg_378 && arg_160 == arg_178 && arg_160 == arg_216 && arg_160 == arg_76 && arg_262 == arg_326 && arg_262 == arg_192 && arg_262 == arg_26 && arg_262 == arg_66 && arg_262 == arg_114 && arg_262 == arg_278 && arg_262 == arg_382 && arg_262 == arg_242 && arg_262 == arg_48 && arg_262 == arg_84 && arg_262 == arg_142 && arg_262 == arg_336 && arg_262 == arg_228 && arg_262 == arg_220 && arg_262 == arg_120 && arg_262 == arg_252 && arg_262 == arg_350 && arg_262 == arg_314 && arg_262 == arg_346 && arg_262 == arg_124 && arg_262 == arg_94 && arg_262 == arg_210 && arg_262 == arg_288 && arg_262 == arg_136 && arg_262 == arg_38 && arg_262 == arg_256 && arg_262 == arg_284 && arg_262 == arg_322 && arg_262 == arg_156 && arg_262 == arg_146 && arg_262 == arg_170 && arg_262 == arg_182 && arg_262 == arg_188 && arg_262 == arg_206 && arg_262 == arg_356 && arg_262 == arg_304 && arg_262 == arg_300 && arg_262 == arg_266 && arg_262 == arg_238 && arg_262 == arg_30 && arg_262 == arg_360 && arg_262 == arg_332 && arg_262 == arg_110 && arg_262 == arg_274 && arg_262 == arg_368 && arg_262 == arg_310 && arg_262 == arg_42 && arg_262 == arg_378 && arg_262 == arg_178 && arg_262 == arg_216 && arg_262 == arg_76 && arg_326 == arg_192 && arg_326 == arg_26 && arg_326 == arg_66 && arg_326 == arg_114 && arg_326 == arg_278 && arg_326 == arg_382 && arg_326 == arg_242 && arg_326 == arg_48 && arg_326 == arg_84 && arg_326 == arg_142 && arg_326 == arg_336 && arg_326 == arg_228 && arg_326 == arg_220 && arg_326 == arg_120 && arg_326 == arg_252 && arg_326 == arg_350 && arg_326 == arg_314 && arg_326 == arg_346 && arg_326 == arg_124 && arg_326 == arg_94 && arg_326 == arg_210 && arg_326 == arg_288 && arg_326 == arg_136 && arg_326 == arg_38 && arg_326 == arg_256 && arg_326 == arg_284 && arg_326 == arg_322 && arg_326 == arg_156 && arg_326 == arg_146 && arg_326 == arg_170 && arg_326 == arg_182 && arg_326 == arg_188 && arg_326 == arg_206 && arg_326 == arg_356 && arg_326 == arg_304 && arg_326 == arg_300 && arg_326 == arg_266 && arg_326 == arg_238 && arg_326 == arg_30 && arg_326 == arg_360 && arg_326 == arg_332 && arg_326 == arg_110 && arg_326 == arg_274 && arg_326 == arg_368 && arg_326 == arg_310 && arg_326 == arg_42 && arg_326 == arg_378 && arg_326 == arg_178 && arg_326 == arg_216 && arg_326 == arg_76 && arg_192 == arg_26 && arg_192 == arg_66 && arg_192 == arg_114 && arg_192 == arg_278 && arg_192 == arg_382 && arg_192 == arg_242 && arg_192 == arg_48 && arg_192 == arg_84 && arg_192 == arg_142 && arg_192 == arg_336 && arg_192 == arg_228 && arg_192 == arg_220 && arg_192 == arg_120 && arg_192 == arg_252 && arg_192 == arg_350 && arg_192 == arg_314 && arg_192 == arg_346 && arg_192 == arg_124 && arg_192 == arg_94 && arg_192 == arg_210 && arg_192 == arg_288 && arg_192 == arg_136 && arg_192 == arg_38 && arg_192 == arg_256 && arg_192 == arg_284 && arg_192 == arg_322 && arg_192 == arg_156 && arg_192 == arg_146 && arg_192 == arg_170 && arg_192 == arg_182 && arg_192 == arg_188 && arg_192 == arg_206 && arg_192 == arg_356 && arg_192 == arg_304 && arg_192 == arg_300 && arg_192 == arg_266 && arg_192 == arg_238 && arg_192 == arg_30 && arg_192 == arg_360 && arg_192 == arg_332 && arg_192 == arg_110 && arg_192 == arg_274 && arg_192 == arg_368 && arg_192 == arg_310 && arg_192 == arg_42 && arg_192 == arg_378 && arg_192 == arg_178 && arg_192 == arg_216 && arg_192 == arg_76 && arg_26 == arg_66 && arg_26 == arg_114 && arg_26 == arg_278 && arg_26 == arg_382 && arg_26 == arg_242 && arg_26 == arg_48 && arg_26 == arg_84 && arg_26 == arg_142 && arg_26 == arg_336 && arg_26 == arg_228 && arg_26 == arg_220 && arg_26 == arg_120 && arg_26 == arg_252 && arg_26 == arg_350 && arg_26 == arg_314 && arg_26 == arg_346 && arg_26 == arg_124 && arg_26 == arg_94 && arg_26 == arg_210 && arg_26 == arg_288 && arg_26 == arg_136 && arg_26 == arg_38 && arg_26 == arg_256 && arg_26 == arg_284 && arg_26 == arg_322 && arg_26 == arg_156 && arg_26 == arg_146 && arg_26 == arg_170 && arg_26 == arg_182 && arg_26 == arg_188 && arg_26 == arg_206 && arg_26 == arg_356 && arg_26 == arg_304 && arg_26 == arg_300 && arg_26 == arg_266 && arg_26 == arg_238 && arg_26 == arg_30 && arg_26 == arg_360 && arg_26 == arg_332 && arg_26 == arg_110 && arg_26 == arg_274 && arg_26 == arg_368 && arg_26 == arg_310 && arg_26 == arg_42 && arg_26 == arg_378 && arg_26 == arg_178 && arg_26 == arg_216 && arg_26 == arg_76 && arg_66 == arg_114 && arg_66 == arg_278 && arg_66 == arg_382 && arg_66 == arg_242 && arg_66 == arg_48 && arg_66 == arg_84 && arg_66 == arg_142 && arg_66 == arg_336 && arg_66 == arg_228 && arg_66 == arg_220 && arg_66 == arg_120 && arg_66 == arg_252 && arg_66 == arg_350 && arg_66 == arg_314 && arg_66 == arg_346 && arg_66 == arg_124 && arg_66 == arg_94 && arg_66 == arg_210 && arg_66 == arg_288 && arg_66 == arg_136 && arg_66 == arg_38 && arg_66 == arg_256 && arg_66 == arg_284 && arg_66 == arg_322 && arg_66 == arg_156 && arg_66 == arg_146 && arg_66 == arg_170 && arg_66 == arg_182 && arg_66 == arg_188 && arg_66 == arg_206 && arg_66 == arg_356 && arg_66 == arg_304 && arg_66 == arg_300 && arg_66 == arg_266 && arg_66 == arg_238 && arg_66 == arg_30 && arg_66 == arg_360 && arg_66 == arg_332 && arg_66 == arg_110 && arg_66 == arg_274 && arg_66 == arg_368 && arg_66 == arg_310 && arg_66 == arg_42 && arg_66 == arg_378 && arg_66 == arg_178 && arg_66 == arg_216 && arg_66 == arg_76 && arg_114 == arg_278 && arg_114 == arg_382 && arg_114 == arg_242 && arg_114 == arg_48 && arg_114 == arg_84 && arg_114 == arg_142 && arg_114 == arg_336 && arg_114 == arg_228 && arg_114 == arg_220 && arg_114 == arg_120 && arg_114 == arg_252 && arg_114 == arg_350 && arg_114 == arg_314 && arg_114 == arg_346 && arg_114 == arg_124 && arg_114 == arg_94 && arg_114 == arg_210 && arg_114 == arg_288 && arg_114 == arg_136 && arg_114 == arg_38 && arg_114 == arg_256 && arg_114 == arg_284 && arg_114 == arg_322 && arg_114 == arg_156 && arg_114 == arg_146 && arg_114 == arg_170 && arg_114 == arg_182 && arg_114 == arg_188 && arg_114 == arg_206 && arg_114 == arg_356 && arg_114 == arg_304 && arg_114 == arg_300 && arg_114 == arg_266 && arg_114 == arg_238 && arg_114 == arg_30 && arg_114 == arg_360 && arg_114 == arg_332 && arg_114 == arg_110 && arg_114 == arg_274 && arg_114 == arg_368 && arg_114 == arg_310 && arg_114 == arg_42 && arg_114 == arg_378 && arg_114 == arg_178 && arg_114 == arg_216 && arg_114 == arg_76 && arg_278 == arg_382 && arg_278 == arg_242 && arg_278 == arg_48 && arg_278 == arg_84 && arg_278 == arg_142 && arg_278 == arg_336 && arg_278 == arg_228 && arg_278 == arg_220 && arg_278 == arg_120 && arg_278 == arg_252 && arg_278 == arg_350 && arg_278 == arg_314 && arg_278 == arg_346 && arg_278 == arg_124 && arg_278 == arg_94 && arg_278 == arg_210 && arg_278 == arg_288 && arg_278 == arg_136 && arg_278 == arg_38 && arg_278 == arg_256 && arg_278 == arg_284 && arg_278 == arg_322 && arg_278 == arg_156 && arg_278 == arg_146 && arg_278 == arg_170 && arg_278 == arg_182 && arg_278 == arg_188 && arg_278 == arg_206 && arg_278 == arg_356 && arg_278 == arg_304 && arg_278 == arg_300 && arg_278 == arg_266 && arg_278 == arg_238 && arg_278 == arg_30 && arg_278 == arg_360 && arg_278 == arg_332 && arg_278 == arg_110 && arg_278 == arg_274 && arg_278 == arg_368 && arg_278 == arg_310 && arg_278 == arg_42 && arg_278 == arg_378 && arg_278 == arg_178 && arg_278 == arg_216 && arg_278 == arg_76 && arg_382 == arg_242 && arg_382 == arg_48 && arg_382 == arg_84 && arg_382 == arg_142 && arg_382 == arg_336 && arg_382 == arg_228 && arg_382 == arg_220 && arg_382 == arg_120 && arg_382 == arg_252 && arg_382 == arg_350 && arg_382 == arg_314 && arg_382 == arg_346 && arg_382 == arg_124 && arg_382 == arg_94 && arg_382 == arg_210 && arg_382 == arg_288 && arg_382 == arg_136 && arg_382 == arg_38 && arg_382 == arg_256 && arg_382 == arg_284 && arg_382 == arg_322 && arg_382 == arg_156 && arg_382 == arg_146 && arg_382 == arg_170 && arg_382 == arg_182 && arg_382 == arg_188 && arg_382 == arg_206 && arg_382 == arg_356 && arg_382 == arg_304 && arg_382 == arg_300 && arg_382 == arg_266 && arg_382 == arg_238 && arg_382 == arg_30 && arg_382 == arg_360 && arg_382 == arg_332 && arg_382 == arg_110 && arg_382 == arg_274 && arg_382 == arg_368 && arg_382 == arg_310 && arg_382 == arg_42 && arg_382 == arg_378 && arg_382 == arg_178 && arg_382 == arg_216 && arg_382 == arg_76 && arg_242 == arg_48 && arg_242 == arg_84 && arg_242 == arg_142 && arg_242 == arg_336 && arg_242 == arg_228 && arg_242 == arg_220 && arg_242 == arg_120 && arg_242 == arg_252 && arg_242 == arg_350 && arg_242 == arg_314 && arg_242 == arg_346 && arg_242 == arg_124 && arg_242 == arg_94 && arg_242 == arg_210 && arg_242 == arg_288 && arg_242 == arg_136 && arg_242 == arg_38 && arg_242 == arg_256 && arg_242 == arg_284 && arg_242 == arg_322 && arg_242 == arg_156 && arg_242 == arg_146 && arg_242 == arg_170 && arg_242 == arg_182 && arg_242 == arg_188 && arg_242 == arg_206 && arg_242 == arg_356 && arg_242 == arg_304 && arg_242 == arg_300 && arg_242 == arg_266 && arg_242 == arg_238 && arg_242 == arg_30 && arg_242 == arg_360 && arg_242 == arg_332 && arg_242 == arg_110 && arg_242 == arg_274 && arg_242 == arg_368 && arg_242 == arg_310 && arg_242 == arg_42 && arg_242 == arg_378 && arg_242 == arg_178 && arg_242 == arg_216 && arg_242 == arg_76 && arg_48 == arg_84 && arg_48 == arg_142 && arg_48 == arg_336 && arg_48 == arg_228 && arg_48 == arg_220 && arg_48 == arg_120 && arg_48 == arg_252 && arg_48 == arg_350 && arg_48 == arg_314 && arg_48 == arg_346 && arg_48 == arg_124 && arg_48 == arg_94 && arg_48 == arg_210 && arg_48 == arg_288 && arg_48 == arg_136 && arg_48 == arg_38 && arg_48 == arg_256 && arg_48 == arg_284 && arg_48 == arg_322 && arg_48 == arg_156 && arg_48 == arg_146 && arg_48 == arg_170 && arg_48 == arg_182 && arg_48 == arg_188 && arg_48 == arg_206 && arg_48 == arg_356 && arg_48 == arg_304 && arg_48 == arg_300 && arg_48 == arg_266 && arg_48 == arg_238 && arg_48 == arg_30 && arg_48 == arg_360 && arg_48 == arg_332 && arg_48 == arg_110 && arg_48 == arg_274 && arg_48 == arg_368 && arg_48 == arg_310 && arg_48 == arg_42 && arg_48 == arg_378 && arg_48 == arg_178 && arg_48 == arg_216 && arg_48 == arg_76 && arg_84 == arg_142 && arg_84 == arg_336 && arg_84 == arg_228 && arg_84 == arg_220 && arg_84 == arg_120 && arg_84 == arg_252 && arg_84 == arg_350 && arg_84 == arg_314 && arg_84 == arg_346 && arg_84 == arg_124 && arg_84 == arg_94 && arg_84 == arg_210 && arg_84 == arg_288 && arg_84 == arg_136 && arg_84 == arg_38 && arg_84 == arg_256 && arg_84 == arg_284 && arg_84 == arg_322 && arg_84 == arg_156 && arg_84 == arg_146 && arg_84 == arg_170 && arg_84 == arg_182 && arg_84 == arg_188 && arg_84 == arg_206 && arg_84 == arg_356 && arg_84 == arg_304 && arg_84 == arg_300 && arg_84 == arg_266 && arg_84 == arg_238 && arg_84 == arg_30 && arg_84 == arg_360 && arg_84 == arg_332 && arg_84 == arg_110 && arg_84 == arg_274 && arg_84 == arg_368 && arg_84 == arg_310 && arg_84 == arg_42 && arg_84 == arg_378 && arg_84 == arg_178 && arg_84 == arg_216 && arg_84 == arg_76 && arg_142 == arg_336 && arg_142 == arg_228 && arg_142 == arg_220 && arg_142 == arg_120 && arg_142 == arg_252 && arg_142 == arg_350 && arg_142 == arg_314 && arg_142 == arg_346 && arg_142 == arg_124 && arg_142 == arg_94 && arg_142 == arg_210 && arg_142 == arg_288 && arg_142 == arg_136 && arg_142 == arg_38 && arg_142 == arg_256 && arg_142 == arg_284 && arg_142 == arg_322 && arg_142 == arg_156 && arg_142 == arg_146 && arg_142 == arg_170 && arg_142 == arg_182 && arg_142 == arg_188 && arg_142 == arg_206 && arg_142 == arg_356 && arg_142 == arg_304 && arg_142 == arg_300 && arg_142 == arg_266 && arg_142 == arg_238 && arg_142 == arg_30 && arg_142 == arg_360 && arg_142 == arg_332 && arg_142 == arg_110 && arg_142 == arg_274 && arg_142 == arg_368 && arg_142 == arg_310 && arg_142 == arg_42 && arg_142 == arg_378 && arg_142 == arg_178 && arg_142 == arg_216 && arg_142 == arg_76 && arg_336 == arg_228 && arg_336 == arg_220 && arg_336 == arg_120 && arg_336 == arg_252 && arg_336 == arg_350 && arg_336 == arg_314 && arg_336 == arg_346 && arg_336 == arg_124 && arg_336 == arg_94 && arg_336 == arg_210 && arg_336 == arg_288 && arg_336 == arg_136 && arg_336 == arg_38 && arg_336 == arg_256 && arg_336 == arg_284 && arg_336 == arg_322 && arg_336 == arg_156 && arg_336 == arg_146 && arg_336 == arg_170 && arg_336 == arg_182 && arg_336 == arg_188 && arg_336 == arg_206 && arg_336 == arg_356 && arg_336 == arg_304 && arg_336 == arg_300 && arg_336 == arg_266 && arg_336 == arg_238 && arg_336 == arg_30 && arg_336 == arg_360 && arg_336 == arg_332 && arg_336 == arg_110 && arg_336 == arg_274 && arg_336 == arg_368 && arg_336 == arg_310 && arg_336 == arg_42 && arg_336 == arg_378 && arg_336 == arg_178 && arg_336 == arg_216 && arg_336 == arg_76 && arg_228 == arg_220 && arg_228 == arg_120 && arg_228 == arg_252 && arg_228 == arg_350 && arg_228 == arg_314 && arg_228 == arg_346 && arg_228 == arg_124 && arg_228 == arg_94 && arg_228 == arg_210 && arg_228 == arg_288 && arg_228 == arg_136 && arg_228 == arg_38 && arg_228 == arg_256 && arg_228 == arg_284 && arg_228 == arg_322 && arg_228 == arg_156 && arg_228 == arg_146 && arg_228 == arg_170 && arg_228 == arg_182 && arg_228 == arg_188 && arg_228 == arg_206 && arg_228 == arg_356 && arg_228 == arg_304 && arg_228 == arg_300 && arg_228 == arg_266 && arg_228 == arg_238 && arg_228 == arg_30 && arg_228 == arg_360 && arg_228 == arg_332 && arg_228 == arg_110 && arg_228 == arg_274 && arg_228 == arg_368 && arg_228 == arg_310 && arg_228 == arg_42 && arg_228 == arg_378 && arg_228 == arg_178 && arg_228 == arg_216 && arg_228 == arg_76 && arg_220 == arg_120 && arg_220 == arg_252 && arg_220 == arg_350 && arg_220 == arg_314 && arg_220 == arg_346 && arg_220 == arg_124 && arg_220 == arg_94 && arg_220 == arg_210 && arg_220 == arg_288 && arg_220 == arg_136 && arg_220 == arg_38 && arg_220 == arg_256 && arg_220 == arg_284 && arg_220 == arg_322 && arg_220 == arg_156 && arg_220 == arg_146 && arg_220 == arg_170 && arg_220 == arg_182 && arg_220 == arg_188 && arg_220 == arg_206 && arg_220 == arg_356 && arg_220 == arg_304 && arg_220 == arg_300 && arg_220 == arg_266 && arg_220 == arg_238 && arg_220 == arg_30 && arg_220 == arg_360 && arg_220 == arg_332 && arg_220 == arg_110 && arg_220 == arg_274 && arg_220 == arg_368 && arg_220 == arg_310 && arg_220 == arg_42 && arg_220 == arg_378 && arg_220 == arg_178 && arg_220 == arg_216 && arg_220 == arg_76 && arg_120 == arg_252 && arg_120 == arg_350 && arg_120 == arg_314 && arg_120 == arg_346 && arg_120 == arg_124 && arg_120 == arg_94 && arg_120 == arg_210 && arg_120 == arg_288 && arg_120 == arg_136 && arg_120 == arg_38 && arg_120 == arg_256 && arg_120 == arg_284 && arg_120 == arg_322 && arg_120 == arg_156 && arg_120 == arg_146 && arg_120 == arg_170 && arg_120 == arg_182 && arg_120 == arg_188 && arg_120 == arg_206 && arg_120 == arg_356 && arg_120 == arg_304 && arg_120 == arg_300 && arg_120 == arg_266 && arg_120 == arg_238 && arg_120 == arg_30 && arg_120 == arg_360 && arg_120 == arg_332 && arg_120 == arg_110 && arg_120 == arg_274 && arg_120 == arg_368 && arg_120 == arg_310 && arg_120 == arg_42 && arg_120 == arg_378 && arg_120 == arg_178 && arg_120 == arg_216 && arg_120 == arg_76 && arg_252 == arg_350 && arg_252 == arg_314 && arg_252 == arg_346 && arg_252 == arg_124 && arg_252 == arg_94 && arg_252 == arg_210 && arg_252 == arg_288 && arg_252 == arg_136 && arg_252 == arg_38 && arg_252 == arg_256 && arg_252 == arg_284 && arg_252 == arg_322 && arg_252 == arg_156 && arg_252 == arg_146 && arg_252 == arg_170 && arg_252 == arg_182 && arg_252 == arg_188 && arg_252 == arg_206 && arg_252 == arg_356 && arg_252 == arg_304 && arg_252 == arg_300 && arg_252 == arg_266 && arg_252 == arg_238 && arg_252 == arg_30 && arg_252 == arg_360 && arg_252 == arg_332 && arg_252 == arg_110 && arg_252 == arg_274 && arg_252 == arg_368 && arg_252 == arg_310 && arg_252 == arg_42 && arg_252 == arg_378 && arg_252 == arg_178 && arg_252 == arg_216 && arg_252 == arg_76 && arg_350 == arg_314 && arg_350 == arg_346 && arg_350 == arg_124 && arg_350 == arg_94 && arg_350 == arg_210 && arg_350 == arg_288 && arg_350 == arg_136 && arg_350 == arg_38 && arg_350 == arg_256 && arg_350 == arg_284 && arg_350 == arg_322 && arg_350 == arg_156 && arg_350 == arg_146 && arg_350 == arg_170 && arg_350 == arg_182 && arg_350 == arg_188 && arg_350 == arg_206 && arg_350 == arg_356 && arg_350 == arg_304 && arg_350 == arg_300 && arg_350 == arg_266 && arg_350 == arg_238 && arg_350 == arg_30 && arg_350 == arg_360 && arg_350 == arg_332 && arg_350 == arg_110 && arg_350 == arg_274 && arg_350 == arg_368 && arg_350 == arg_310 && arg_350 == arg_42 && arg_350 == arg_378 && arg_350 == arg_178 && arg_350 == arg_216 && arg_350 == arg_76 && arg_314 == arg_346 && arg_314 == arg_124 && arg_314 == arg_94 && arg_314 == arg_210 && arg_314 == arg_288 && arg_314 == arg_136 && arg_314 == arg_38 && arg_314 == arg_256 && arg_314 == arg_284 && arg_314 == arg_322 && arg_314 == arg_156 && arg_314 == arg_146 && arg_314 == arg_170 && arg_314 == arg_182 && arg_314 == arg_188 && arg_314 == arg_206 && arg_314 == arg_356 && arg_314 == arg_304 && arg_314 == arg_300 && arg_314 == arg_266 && arg_314 == arg_238 && arg_314 == arg_30 && arg_314 == arg_360 && arg_314 == arg_332 && arg_314 == arg_110 && arg_314 == arg_274 && arg_314 == arg_368 && arg_314 == arg_310 && arg_314 == arg_42 && arg_314 == arg_378 && arg_314 == arg_178 && arg_314 == arg_216 && arg_314 == arg_76 && arg_346 == arg_124 && arg_346 == arg_94 && arg_346 == arg_210 && arg_346 == arg_288 && arg_346 == arg_136 && arg_346 == arg_38 && arg_346 == arg_256 && arg_346 == arg_284 && arg_346 == arg_322 && arg_346 == arg_156 && arg_346 == arg_146 && arg_346 == arg_170 && arg_346 == arg_182 && arg_346 == arg_188 && arg_346 == arg_206 && arg_346 == arg_356 && arg_346 == arg_304 && arg_346 == arg_300 && arg_346 == arg_266 && arg_346 == arg_238 && arg_346 == arg_30 && arg_346 == arg_360 && arg_346 == arg_332 && arg_346 == arg_110 && arg_346 == arg_274 && arg_346 == arg_368 && arg_346 == arg_310 && arg_346 == arg_42 && arg_346 == arg_378 && arg_346 == arg_178 && arg_346 == arg_216 && arg_346 == arg_76 && arg_124 == arg_94 && arg_124 == arg_210 && arg_124 == arg_288 && arg_124 == arg_136 && arg_124 == arg_38 && arg_124 == arg_256 && arg_124 == arg_284 && arg_124 == arg_322 && arg_124 == arg_156 && arg_124 == arg_146 && arg_124 == arg_170 && arg_124 == arg_182 && arg_124 == arg_188 && arg_124 == arg_206 && arg_124 == arg_356 && arg_124 == arg_304 && arg_124 == arg_300 && arg_124 == arg_266 && arg_124 == arg_238 && arg_124 == arg_30 && arg_124 == arg_360 && arg_124 == arg_332 && arg_124 == arg_110 && arg_124 == arg_274 && arg_124 == arg_368 && arg_124 == arg_310 && arg_124 == arg_42 && arg_124 == arg_378 && arg_124 == arg_178 && arg_124 == arg_216 && arg_124 == arg_76 && arg_94 == arg_210 && arg_94 == arg_288 && arg_94 == arg_136 && arg_94 == arg_38 && arg_94 == arg_256 && arg_94 == arg_284 && arg_94 == arg_322 && arg_94 == arg_156 && arg_94 == arg_146 && arg_94 == arg_170 && arg_94 == arg_182 && arg_94 == arg_188 && arg_94 == arg_206 && arg_94 == arg_356 && arg_94 == arg_304 && arg_94 == arg_300 && arg_94 == arg_266 && arg_94 == arg_238 && arg_94 == arg_30 && arg_94 == arg_360 && arg_94 == arg_332 && arg_94 == arg_110 && arg_94 == arg_274 && arg_94 == arg_368 && arg_94 == arg_310 && arg_94 == arg_42 && arg_94 == arg_378 && arg_94 == arg_178 && arg_94 == arg_216 && arg_94 == arg_76 && arg_210 == arg_288 && arg_210 == arg_136 && arg_210 == arg_38 && arg_210 == arg_256 && arg_210 == arg_284 && arg_210 == arg_322 && arg_210 == arg_156 && arg_210 == arg_146 && arg_210 == arg_170 && arg_210 == arg_182 && arg_210 == arg_188 && arg_210 == arg_206 && arg_210 == arg_356 && arg_210 == arg_304 && arg_210 == arg_300 && arg_210 == arg_266 && arg_210 == arg_238 && arg_210 == arg_30 && arg_210 == arg_360 && arg_210 == arg_332 && arg_210 == arg_110 && arg_210 == arg_274 && arg_210 == arg_368 && arg_210 == arg_310 && arg_210 == arg_42 && arg_210 == arg_378 && arg_210 == arg_178 && arg_210 == arg_216 && arg_210 == arg_76 && arg_288 == arg_136 && arg_288 == arg_38 && arg_288 == arg_256 && arg_288 == arg_284 && arg_288 == arg_322 && arg_288 == arg_156 && arg_288 == arg_146 && arg_288 == arg_170 && arg_288 == arg_182 && arg_288 == arg_188 && arg_288 == arg_206 && arg_288 == arg_356 && arg_288 == arg_304 && arg_288 == arg_300 && arg_288 == arg_266 && arg_288 == arg_238 && arg_288 == arg_30 && arg_288 == arg_360 && arg_288 == arg_332 && arg_288 == arg_110 && arg_288 == arg_274 && arg_288 == arg_368 && arg_288 == arg_310 && arg_288 == arg_42 && arg_288 == arg_378 && arg_288 == arg_178 && arg_288 == arg_216 && arg_288 == arg_76 && arg_136 == arg_38 && arg_136 == arg_256 && arg_136 == arg_284 && arg_136 == arg_322 && arg_136 == arg_156 && arg_136 == arg_146 && arg_136 == arg_170 && arg_136 == arg_182 && arg_136 == arg_188 && arg_136 == arg_206 && arg_136 == arg_356 && arg_136 == arg_304 && arg_136 == arg_300 && arg_136 == arg_266 && arg_136 == arg_238 && arg_136 == arg_30 && arg_136 == arg_360 && arg_136 == arg_332 && arg_136 == arg_110 && arg_136 == arg_274 && arg_136 == arg_368 && arg_136 == arg_310 && arg_136 == arg_42 && arg_136 == arg_378 && arg_136 == arg_178 && arg_136 == arg_216 && arg_136 == arg_76 && arg_38 == arg_256 && arg_38 == arg_284 && arg_38 == arg_322 && arg_38 == arg_156 && arg_38 == arg_146 && arg_38 == arg_170 && arg_38 == arg_182 && arg_38 == arg_188 && arg_38 == arg_206 && arg_38 == arg_356 && arg_38 == arg_304 && arg_38 == arg_300 && arg_38 == arg_266 && arg_38 == arg_238 && arg_38 == arg_30 && arg_38 == arg_360 && arg_38 == arg_332 && arg_38 == arg_110 && arg_38 == arg_274 && arg_38 == arg_368 && arg_38 == arg_310 && arg_38 == arg_42 && arg_38 == arg_378 && arg_38 == arg_178 && arg_38 == arg_216 && arg_38 == arg_76 && arg_256 == arg_284 && arg_256 == arg_322 && arg_256 == arg_156 && arg_256 == arg_146 && arg_256 == arg_170 && arg_256 == arg_182 && arg_256 == arg_188 && arg_256 == arg_206 && arg_256 == arg_356 && arg_256 == arg_304 && arg_256 == arg_300 && arg_256 == arg_266 && arg_256 == arg_238 && arg_256 == arg_30 && arg_256 == arg_360 && arg_256 == arg_332 && arg_256 == arg_110 && arg_256 == arg_274 && arg_256 == arg_368 && arg_256 == arg_310 && arg_256 == arg_42 && arg_256 == arg_378 && arg_256 == arg_178 && arg_256 == arg_216 && arg_256 == arg_76 && arg_284 == arg_322 && arg_284 == arg_156 && arg_284 == arg_146 && arg_284 == arg_170 && arg_284 == arg_182 && arg_284 == arg_188 && arg_284 == arg_206 && arg_284 == arg_356 && arg_284 == arg_304 && arg_284 == arg_300 && arg_284 == arg_266 && arg_284 == arg_238 && arg_284 == arg_30 && arg_284 == arg_360 && arg_284 == arg_332 && arg_284 == arg_110 && arg_284 == arg_274 && arg_284 == arg_368 && arg_284 == arg_310 && arg_284 == arg_42 && arg_284 == arg_378 && arg_284 == arg_178 && arg_284 == arg_216 && arg_284 == arg_76 && arg_322 == arg_156 && arg_322 == arg_146 && arg_322 == arg_170 && arg_322 == arg_182 && arg_322 == arg_188 && arg_322 == arg_206 && arg_322 == arg_356 && arg_322 == arg_304 && arg_322 == arg_300 && arg_322 == arg_266 && arg_322 == arg_238 && arg_322 == arg_30 && arg_322 == arg_360 && arg_322 == arg_332 && arg_322 == arg_110 && arg_322 == arg_274 && arg_322 == arg_368 && arg_322 == arg_310 && arg_322 == arg_42 && arg_322 == arg_378 && arg_322 == arg_178 && arg_322 == arg_216 && arg_322 == arg_76 && arg_156 == arg_146 && arg_156 == arg_170 && arg_156 == arg_182 && arg_156 == arg_188 && arg_156 == arg_206 && arg_156 == arg_356 && arg_156 == arg_304 && arg_156 == arg_300 && arg_156 == arg_266 && arg_156 == arg_238 && arg_156 == arg_30 && arg_156 == arg_360 && arg_156 == arg_332 && arg_156 == arg_110 && arg_156 == arg_274 && arg_156 == arg_368 && arg_156 == arg_310 && arg_156 == arg_42 && arg_156 == arg_378 && arg_156 == arg_178 && arg_156 == arg_216 && arg_156 == arg_76 && arg_146 == arg_170 && arg_146 == arg_182 && arg_146 == arg_188 && arg_146 == arg_206 && arg_146 == arg_356 && arg_146 == arg_304 && arg_146 == arg_300 && arg_146 == arg_266 && arg_146 == arg_238 && arg_146 == arg_30 && arg_146 == arg_360 && arg_146 == arg_332 && arg_146 == arg_110 && arg_146 == arg_274 && arg_146 == arg_368 && arg_146 == arg_310 && arg_146 == arg_42 && arg_146 == arg_378 && arg_146 == arg_178 && arg_146 == arg_216 && arg_146 == arg_76 && arg_170 == arg_182 && arg_170 == arg_188 && arg_170 == arg_206 && arg_170 == arg_356 && arg_170 == arg_304 && arg_170 == arg_300 && arg_170 == arg_266 && arg_170 == arg_238 && arg_170 == arg_30 && arg_170 == arg_360 && arg_170 == arg_332 && arg_170 == arg_110 && arg_170 == arg_274 && arg_170 == arg_368 && arg_170 == arg_310 && arg_170 == arg_42 && arg_170 == arg_378 && arg_170 == arg_178 && arg_170 == arg_216 && arg_170 == arg_76 && arg_182 == arg_188 && arg_182 == arg_206 && arg_182 == arg_356 && arg_182 == arg_304 && arg_182 == arg_300 && arg_182 == arg_266 && arg_182 == arg_238 && arg_182 == arg_30 && arg_182 == arg_360 && arg_182 == arg_332 && arg_182 == arg_110 && arg_182 == arg_274 && arg_182 == arg_368 && arg_182 == arg_310 && arg_182 == arg_42 && arg_182 == arg_378 && arg_182 == arg_178 && arg_182 == arg_216 && arg_182 == arg_76 && arg_188 == arg_206 && arg_188 == arg_356 && arg_188 == arg_304 && arg_188 == arg_300 && arg_188 == arg_266 && arg_188 == arg_238 && arg_188 == arg_30 && arg_188 == arg_360 && arg_188 == arg_332 && arg_188 == arg_110 && arg_188 == arg_274 && arg_188 == arg_368 && arg_188 == arg_310 && arg_188 == arg_42 && arg_188 == arg_378 && arg_188 == arg_178 && arg_188 == arg_216 && arg_188 == arg_76 && arg_206 == arg_356 && arg_206 == arg_304 && arg_206 == arg_300 && arg_206 == arg_266 && arg_206 == arg_238 && arg_206 == arg_30 && arg_206 == arg_360 && arg_206 == arg_332 && arg_206 == arg_110 && arg_206 == arg_274 && arg_206 == arg_368 && arg_206 == arg_310 && arg_206 == arg_42 && arg_206 == arg_378 && arg_206 == arg_178 && arg_206 == arg_216 && arg_206 == arg_76 && arg_356 == arg_304 && arg_356 == arg_300 && arg_356 == arg_266 && arg_356 == arg_238 && arg_356 == arg_30 && arg_356 == arg_360 && arg_356 == arg_332 && arg_356 == arg_110 && arg_356 == arg_274 && arg_356 == arg_368 && arg_356 == arg_310 && arg_356 == arg_42 && arg_356 == arg_378 && arg_356 == arg_178 && arg_356 == arg_216 && arg_356 == arg_76 && arg_304 == arg_300 && arg_304 == arg_266 && arg_304 == arg_238 && arg_304 == arg_30 && arg_304 == arg_360 && arg_304 == arg_332 && arg_304 == arg_110 && arg_304 == arg_274 && arg_304 == arg_368 && arg_304 == arg_310 && arg_304 == arg_42 && arg_304 == arg_378 && arg_304 == arg_178 && arg_304 == arg_216 && arg_304 == arg_76 && arg_300 == arg_266 && arg_300 == arg_238 && arg_300 == arg_30 && arg_300 == arg_360 && arg_300 == arg_332 && arg_300 == arg_110 && arg_300 == arg_274 && arg_300 == arg_368 && arg_300 == arg_310 && arg_300 == arg_42 && arg_300 == arg_378 && arg_300 == arg_178 && arg_300 == arg_216 && arg_300 == arg_76 && arg_266 == arg_238 && arg_266 == arg_30 && arg_266 == arg_360 && arg_266 == arg_332 && arg_266 == arg_110 && arg_266 == arg_274 && arg_266 == arg_368 && arg_266 == arg_310 && arg_266 == arg_42 && arg_266 == arg_378 && arg_266 == arg_178 && arg_266 == arg_216 && arg_266 == arg_76 && arg_238 == arg_30 && arg_238 == arg_360 && arg_238 == arg_332 && arg_238 == arg_110 && arg_238 == arg_274 && arg_238 == arg_368 && arg_238 == arg_310 && arg_238 == arg_42 && arg_238 == arg_378 && arg_238 == arg_178 && arg_238 == arg_216 && arg_238 == arg_76 && arg_30 == arg_360 && arg_30 == arg_332 && arg_30 == arg_110 && arg_30 == arg_274 && arg_30 == arg_368 && arg_30 == arg_310 && arg_30 == arg_42 && arg_30 == arg_378 && arg_30 == arg_178 && arg_30 == arg_216 && arg_30 == arg_76 && arg_360 == arg_332 && arg_360 == arg_110 && arg_360 == arg_274 && arg_360 == arg_368 && arg_360 == arg_310 && arg_360 == arg_42 && arg_360 == arg_378 && arg_360 == arg_178 && arg_360 == arg_216 && arg_360 == arg_76 && arg_332 == arg_110 && arg_332 == arg_274 && arg_332 == arg_368 && arg_332 == arg_310 && arg_332 == arg_42 && arg_332 == arg_378 && arg_332 == arg_178 && arg_332 == arg_216 && arg_332 == arg_76 && arg_110 == arg_274 && arg_110 == arg_368 && arg_110 == arg_310 && arg_110 == arg_42 && arg_110 == arg_378 && arg_110 == arg_178 && arg_110 == arg_216 && arg_110 == arg_76 && arg_274 == arg_368 && arg_274 == arg_310 && arg_274 == arg_42 && arg_274 == arg_378 && arg_274 == arg_178 && arg_274 == arg_216 && arg_274 == arg_76 && arg_368 == arg_310 && arg_368 == arg_42 && arg_368 == arg_378 && arg_368 == arg_178 && arg_368 == arg_216 && arg_368 == arg_76 && arg_310 == arg_42 && arg_310 == arg_378 && arg_310 == arg_178 && arg_310 == arg_216 && arg_310 == arg_76 && arg_42 == arg_378 && arg_42 == arg_178 && arg_42 == arg_216 && arg_42 == arg_76 && arg_378 == arg_178 && arg_378 == arg_216 && arg_378 == arg_76 && arg_178 == arg_216 && arg_178 == arg_76 && arg_216 == arg_76 {
let rhs_inst_19 = pos.ins().irsub_imm(arg_2, 18446744073709551614_u64 as i64);
pos.func.dfg.replace(inst).bnot(rhs_inst_19);

}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1406(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
let arg_0 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_0[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_3 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_3[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_4 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_4[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_5) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_6 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_6[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_7 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_2 == 0 {
if rhs_1 == -1 {
match pos.func.dfg.value_def(arg_4[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_8) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_9 = arg;
let rhs_6 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_9) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_10 = arg;
let rhs_7 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_10) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_11 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_11[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_12 = arg;
let rhs_8 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_8 == 0 {
if rhs_7 == -1 {
if rhs_6 == 12 {
if rhs_5 == 16 {
match pos.func.dfg.value_def(arg_3[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_13 = arg;
let rhs_13 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_13) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_14 = arg;
let rhs_14 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_14) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_15 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_15[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_16 = arg;
let rhs_15 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_16) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_17 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_17[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_18 = arg;
let rhs_16 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_16 == 0 {
if rhs_15 == -1 {
match pos.func.dfg.value_def(arg_15[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_19 = arg;
let rhs_19 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_19) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_20 = arg;
let rhs_20 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_20) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_21 = arg;
let rhs_21 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_21) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_22 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_22[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_23 = arg;
let rhs_22 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_22 == 0 {
if rhs_21 == -1 {
if rhs_20 == 12 {
if rhs_19 == 16 {
if rhs_14 == 5 {
if rhs_13 == 8 {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_24 = arg;
let rhs_29 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_24) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_25 = arg;
let rhs_30 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_25) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_26 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_26[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_27 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_27[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_28 = arg;
let rhs_31 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_28) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_29 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_29[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_30 = arg;
let rhs_32 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_32 == 0 {
if rhs_31 == -1 {
match pos.func.dfg.value_def(arg_27[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_31 = arg;
let rhs_35 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_31) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_32 = arg;
let rhs_36 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_32) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_33 = arg;
let rhs_37 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_33) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_34 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_34[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_35 = arg;
let rhs_38 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_38 == 0 {
if rhs_37 == -1 {
if rhs_36 == 12 {
if rhs_35 == 16 {
match pos.func.dfg.value_def(arg_26[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_36 = arg;
let rhs_43 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_36) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_37 = arg;
let rhs_44 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_37) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_38 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_38[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_39 = arg;
let rhs_45 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_39) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_40 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_40[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_41 = arg;
let rhs_46 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_46 == 0 {
if rhs_45 == -1 {
match pos.func.dfg.value_def(arg_38[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_42 = arg;
let rhs_49 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_42) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_43 = arg;
let rhs_50 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_43) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_44 = arg;
let rhs_51 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_44) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_45 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_45[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_46 = arg;
let rhs_52 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_52 == 0 {
if rhs_51 == -1 {
if rhs_50 == 12 {
if rhs_49 == 16 {
if rhs_44 == 5 {
if rhs_43 == 8 {
if rhs_30 == 2 {
if rhs_29 == 4 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_47 = arg;
let rhs_61 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_47) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_48 = arg;
let rhs_62 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_48) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_49 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_49[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_50 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_50[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_51 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_51[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_52 = arg;
let rhs_63 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_52) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_53 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_53[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_54 = arg;
let rhs_64 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_64 == 0 {
if rhs_63 == -1 {
match pos.func.dfg.value_def(arg_51[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_55 = arg;
let rhs_67 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_55) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_56 = arg;
let rhs_68 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_56) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_57 = arg;
let rhs_69 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_57) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_58 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_58[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_59 = arg;
let rhs_70 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_70 == 0 {
if rhs_69 == -1 {
if rhs_68 == 12 {
if rhs_67 == 16 {
match pos.func.dfg.value_def(arg_50[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_60 = arg;
let rhs_75 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_60) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_61 = arg;
let rhs_76 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_61) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_62 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_62[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_63 = arg;
let rhs_77 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_63) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_64 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_64[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_65 = arg;
let rhs_78 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_78 == 0 {
if rhs_77 == -1 {
match pos.func.dfg.value_def(arg_62[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_66 = arg;
let rhs_81 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_66) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_67 = arg;
let rhs_82 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_67) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_68 = arg;
let rhs_83 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_68) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_69 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_69[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_70 = arg;
let rhs_84 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_84 == 0 {
if rhs_83 == -1 {
if rhs_82 == 12 {
if rhs_81 == 16 {
if rhs_76 == 5 {
if rhs_75 == 8 {
match pos.func.dfg.value_def(arg_49[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_71 = arg;
let rhs_91 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_71) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_72 = arg;
let rhs_92 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_72) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_73 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_73[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_74 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_74[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_75 = arg;
let rhs_93 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_75) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_76 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_76[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_77 = arg;
let rhs_94 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_94 == 0 {
if rhs_93 == -1 {
match pos.func.dfg.value_def(arg_74[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_78 = arg;
let rhs_97 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_78) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_79 = arg;
let rhs_98 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_79) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_80 = arg;
let rhs_99 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_80) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_81 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_81[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_82 = arg;
let rhs_100 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_100 == 0 {
if rhs_99 == -1 {
if rhs_98 == 12 {
if rhs_97 == 16 {
match pos.func.dfg.value_def(arg_73[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_83 = arg;
let rhs_105 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_83) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_84 = arg;
let rhs_106 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_84) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_85 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_85[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_86 = arg;
let rhs_107 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_86) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_87 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_87[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_88 = arg;
let rhs_108 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_108 == 0 {
if rhs_107 == -1 {
match pos.func.dfg.value_def(arg_85[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_89 = arg;
let rhs_111 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_89) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_90 = arg;
let rhs_112 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_90) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_91 = arg;
let rhs_113 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_91) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_92 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_92[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_93 = arg;
let rhs_114 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_114 == 0 {
if rhs_113 == -1 {
if rhs_112 == 12 {
if rhs_111 == 16 {
if rhs_106 == 5 {
if rhs_105 == 8 {
if rhs_92 == 2 {
if rhs_91 == 4 {
if rhs_62 == 1 {
if rhs_61 == 2 {
match pos.func.dfg.value_def(arg_0[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_94 = arg;
let rhs_125 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_94) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_95 = arg;
let rhs_126 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_95) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_96 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_96[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_97 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_97[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_98 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_98[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_99 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_99[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_100 = arg;
let rhs_127 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_100) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_101 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_101[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_102 = arg;
let rhs_128 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_128 == 0 {
if rhs_127 == -1 {
match pos.func.dfg.value_def(arg_99[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_103 = arg;
let rhs_131 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_103) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_104 = arg;
let rhs_132 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_104) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_105 = arg;
let rhs_133 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_105) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_106 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_106[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_107 = arg;
let rhs_134 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_134 == 0 {
if rhs_133 == -1 {
if rhs_132 == 12 {
if rhs_131 == 16 {
match pos.func.dfg.value_def(arg_98[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_108 = arg;
let rhs_139 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_108) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_109 = arg;
let rhs_140 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_109) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_110 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_110[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_111 = arg;
let rhs_141 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_111) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_112 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_112[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_113 = arg;
let rhs_142 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_142 == 0 {
if rhs_141 == -1 {
match pos.func.dfg.value_def(arg_110[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_114 = arg;
let rhs_145 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_114) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_115 = arg;
let rhs_146 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_115) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_116 = arg;
let rhs_147 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_116) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_117 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_117[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_118 = arg;
let rhs_148 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_148 == 0 {
if rhs_147 == -1 {
if rhs_146 == 12 {
if rhs_145 == 16 {
if rhs_140 == 5 {
if rhs_139 == 8 {
match pos.func.dfg.value_def(arg_97[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_119 = arg;
let rhs_155 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_119) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_120 = arg;
let rhs_156 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_120) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_121 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_121[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_122 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_122[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_123 = arg;
let rhs_157 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_123) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_124 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_124[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_125 = arg;
let rhs_158 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_158 == 0 {
if rhs_157 == -1 {
match pos.func.dfg.value_def(arg_122[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_126 = arg;
let rhs_161 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_126) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_127 = arg;
let rhs_162 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_127) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_128 = arg;
let rhs_163 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_128) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_129 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_129[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_130 = arg;
let rhs_164 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_164 == 0 {
if rhs_163 == -1 {
if rhs_162 == 12 {
if rhs_161 == 16 {
match pos.func.dfg.value_def(arg_121[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_131 = arg;
let rhs_169 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_131) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_132 = arg;
let rhs_170 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_132) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_133 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_133[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_134 = arg;
let rhs_171 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_134) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_135 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_135[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_136 = arg;
let rhs_172 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_172 == 0 {
if rhs_171 == -1 {
match pos.func.dfg.value_def(arg_133[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_137 = arg;
let rhs_175 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_137) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_138 = arg;
let rhs_176 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_138) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_139 = arg;
let rhs_177 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_139) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_140 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_140[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_141 = arg;
let rhs_178 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_178 == 0 {
if rhs_177 == -1 {
if rhs_176 == 12 {
if rhs_175 == 16 {
if rhs_170 == 5 {
if rhs_169 == 8 {
if rhs_156 == 2 {
if rhs_155 == 4 {
match pos.func.dfg.value_def(arg_96[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_142 = arg;
let rhs_187 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_142) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_143 = arg;
let rhs_188 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_143) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_144 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_144[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_145 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_145[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_146 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_146[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_147 = arg;
let rhs_189 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_147) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_148 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_148[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_149 = arg;
let rhs_190 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_190 == 0 {
if rhs_189 == -1 {
match pos.func.dfg.value_def(arg_146[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_150 = arg;
let rhs_193 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_150) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_151 = arg;
let rhs_194 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_151) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_152 = arg;
let rhs_195 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_152) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_153 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_153[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_154 = arg;
let rhs_196 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_196 == 0 {
if rhs_195 == -1 {
if rhs_194 == 12 {
if rhs_193 == 16 {
match pos.func.dfg.value_def(arg_145[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_155 = arg;
let rhs_201 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_155) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_156 = arg;
let rhs_202 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_156) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_157 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_157[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_158 = arg;
let rhs_203 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_158) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_159 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_159[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_160 = arg;
let rhs_204 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_204 == 0 {
if rhs_203 == -1 {
match pos.func.dfg.value_def(arg_157[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_161 = arg;
let rhs_207 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_161) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_162 = arg;
let rhs_208 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_162) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_163 = arg;
let rhs_209 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_163) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_164 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_164[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_165 = arg;
let rhs_210 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_210 == 0 {
if rhs_209 == -1 {
if rhs_208 == 12 {
if rhs_207 == 16 {
if rhs_202 == 5 {
if rhs_201 == 8 {
match pos.func.dfg.value_def(arg_144[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_166 = arg;
let rhs_217 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_166) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_167 = arg;
let rhs_218 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_167) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_168 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_168[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_169 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_169[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_170 = arg;
let rhs_219 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_170) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_171 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_171[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_172 = arg;
let rhs_220 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_220 == 0 {
if rhs_219 == -1 {
match pos.func.dfg.value_def(arg_169[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_173 = arg;
let rhs_223 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_173) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_174 = arg;
let rhs_224 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_174) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_175 = arg;
let rhs_225 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_175) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_176 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_176[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_177 = arg;
let rhs_226 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_226 == 0 {
if rhs_225 == -1 {
if rhs_224 == 12 {
if rhs_223 == 16 {
match pos.func.dfg.value_def(arg_168[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_178 = arg;
let rhs_231 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_178) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_179 = arg;
let rhs_232 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_179) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_180 = args;
match opcode {
Opcode::Ushr => {
match pos.func.dfg.value_def(arg_180[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_181 = arg;
let rhs_233 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_181) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_182 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_182[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_183 = arg;
let rhs_234 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_234 == 0 {
if rhs_233 == -1 {
match pos.func.dfg.value_def(arg_180[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_184 = arg;
let rhs_237 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_184) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_185 = arg;
let rhs_238 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_185) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_186 = arg;
let rhs_239 : i64 = imm.into();
match opcode {
Opcode::IaddImm => {
match pos.func.dfg.value_def(arg_186) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_187 = args;
match opcode {
Opcode::Band => {
match pos.func.dfg.value_def(arg_187[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_188 = arg;
let rhs_240 : i64 = imm.into();
match opcode {
Opcode::IrsubImm => {
if rhs_240 == 0 {
if rhs_239 == -1 {
if rhs_238 == 12 {
if rhs_237 == 16 {
if rhs_232 == 5 {
if rhs_231 == 8 {
if rhs_218 == 2 {
if rhs_217 == 4 {
if rhs_188 == 1 {
if rhs_187 == 2 {
if rhs_126 == 1 {
if rhs_125 == 1 {
if arg_35 == arg_130 && arg_35 == arg_154 && arg_35 == arg_177 && arg_35 == arg_30 && arg_35 == arg_58[0] && arg_35 == arg_140[0] && arg_35 == arg_165 && arg_35 == arg_11[0] && arg_35 == arg_64[0] && arg_35 == arg_125 && arg_35 == arg_17[0] && arg_35 == arg_117[0] && arg_35 == arg_148[0] && arg_35 == arg_183 && arg_35 == arg_141 && arg_35 == arg_34[0] && arg_35 == arg_87[0] && arg_35 == arg_129[0] && arg_35 == arg_159[0] && arg_35 == arg_29[0] && arg_35 == arg_46 && arg_35 == arg_81[0] && arg_35 == arg_7 && arg_35 == arg_12 && arg_35 == arg_164[0] && arg_35 == arg_23 && arg_35 == arg_54 && arg_35 == arg_65 && arg_35 == arg_188 && arg_35 == arg_136 && arg_35 == arg_45[0] && arg_35 == arg_160 && arg_35 == arg_88 && arg_35 == arg_101[0] && arg_35 == arg_82 && arg_35 == arg_149 && arg_35 == arg_53[0] && arg_35 == arg_76[0] && arg_35 == arg_124[0] && arg_35 == arg_6[0] && arg_35 == arg_77 && arg_35 == arg_92[0] && arg_35 == arg_135[0] && arg_35 == arg_70 && arg_35 == arg_113 && arg_35 == arg_172 && arg_35 == arg_106[0] && arg_35 == arg_182[0] && arg_35 == arg_118 && arg_35 == arg_171[0] && arg_35 == arg_18 && arg_35 == arg_93 && arg_35 == arg_41 && arg_35 == arg_176[0] && arg_35 == arg_69[0] && arg_35 == arg_59 && arg_35 == arg_102 && arg_35 == arg_187[0] && arg_35 == arg_153[0] && arg_35 == arg_107 && arg_35 == arg_112[0] && arg_35 == arg_22[0] && arg_35 == arg_40[0] && arg_130 == arg_154 && arg_130 == arg_177 && arg_130 == arg_30 && arg_130 == arg_58[0] && arg_130 == arg_140[0] && arg_130 == arg_165 && arg_130 == arg_11[0] && arg_130 == arg_64[0] && arg_130 == arg_125 && arg_130 == arg_17[0] && arg_130 == arg_117[0] && arg_130 == arg_148[0] && arg_130 == arg_183 && arg_130 == arg_141 && arg_130 == arg_34[0] && arg_130 == arg_87[0] && arg_130 == arg_129[0] && arg_130 == arg_159[0] && arg_130 == arg_29[0] && arg_130 == arg_46 && arg_130 == arg_81[0] && arg_130 == arg_7 && arg_130 == arg_12 && arg_130 == arg_164[0] && arg_130 == arg_23 && arg_130 == arg_54 && arg_130 == arg_65 && arg_130 == arg_188 && arg_130 == arg_136 && arg_130 == arg_45[0] && arg_130 == arg_160 && arg_130 == arg_88 && arg_130 == arg_101[0] && arg_130 == arg_82 && arg_130 == arg_149 && arg_130 == arg_53[0] && arg_130 == arg_76[0] && arg_130 == arg_124[0] && arg_130 == arg_6[0] && arg_130 == arg_77 && arg_130 == arg_92[0] && arg_130 == arg_135[0] && arg_130 == arg_70 && arg_130 == arg_113 && arg_130 == arg_172 && arg_130 == arg_106[0] && arg_130 == arg_182[0] && arg_130 == arg_118 && arg_130 == arg_171[0] && arg_130 == arg_18 && arg_130 == arg_93 && arg_130 == arg_41 && arg_130 == arg_176[0] && arg_130 == arg_69[0] && arg_130 == arg_59 && arg_130 == arg_102 && arg_130 == arg_187[0] && arg_130 == arg_153[0] && arg_130 == arg_107 && arg_130 == arg_112[0] && arg_130 == arg_22[0] && arg_130 == arg_40[0] && arg_154 == arg_177 && arg_154 == arg_30 && arg_154 == arg_58[0] && arg_154 == arg_140[0] && arg_154 == arg_165 && arg_154 == arg_11[0] && arg_154 == arg_64[0] && arg_154 == arg_125 && arg_154 == arg_17[0] && arg_154 == arg_117[0] && arg_154 == arg_148[0] && arg_154 == arg_183 && arg_154 == arg_141 && arg_154 == arg_34[0] && arg_154 == arg_87[0] && arg_154 == arg_129[0] && arg_154 == arg_159[0] && arg_154 == arg_29[0] && arg_154 == arg_46 && arg_154 == arg_81[0] && arg_154 == arg_7 && arg_154 == arg_12 && arg_154 == arg_164[0] && arg_154 == arg_23 && arg_154 == arg_54 && arg_154 == arg_65 && arg_154 == arg_188 && arg_154 == arg_136 && arg_154 == arg_45[0] && arg_154 == arg_160 && arg_154 == arg_88 && arg_154 == arg_101[0] && arg_154 == arg_82 && arg_154 == arg_149 && arg_154 == arg_53[0] && arg_154 == arg_76[0] && arg_154 == arg_124[0] && arg_154 == arg_6[0] && arg_154 == arg_77 && arg_154 == arg_92[0] && arg_154 == arg_135[0] && arg_154 == arg_70 && arg_154 == arg_113 && arg_154 == arg_172 && arg_154 == arg_106[0] && arg_154 == arg_182[0] && arg_154 == arg_118 && arg_154 == arg_171[0] && arg_154 == arg_18 && arg_154 == arg_93 && arg_154 == arg_41 && arg_154 == arg_176[0] && arg_154 == arg_69[0] && arg_154 == arg_59 && arg_154 == arg_102 && arg_154 == arg_187[0] && arg_154 == arg_153[0] && arg_154 == arg_107 && arg_154 == arg_112[0] && arg_154 == arg_22[0] && arg_154 == arg_40[0] && arg_177 == arg_30 && arg_177 == arg_58[0] && arg_177 == arg_140[0] && arg_177 == arg_165 && arg_177 == arg_11[0] && arg_177 == arg_64[0] && arg_177 == arg_125 && arg_177 == arg_17[0] && arg_177 == arg_117[0] && arg_177 == arg_148[0] && arg_177 == arg_183 && arg_177 == arg_141 && arg_177 == arg_34[0] && arg_177 == arg_87[0] && arg_177 == arg_129[0] && arg_177 == arg_159[0] && arg_177 == arg_29[0] && arg_177 == arg_46 && arg_177 == arg_81[0] && arg_177 == arg_7 && arg_177 == arg_12 && arg_177 == arg_164[0] && arg_177 == arg_23 && arg_177 == arg_54 && arg_177 == arg_65 && arg_177 == arg_188 && arg_177 == arg_136 && arg_177 == arg_45[0] && arg_177 == arg_160 && arg_177 == arg_88 && arg_177 == arg_101[0] && arg_177 == arg_82 && arg_177 == arg_149 && arg_177 == arg_53[0] && arg_177 == arg_76[0] && arg_177 == arg_124[0] && arg_177 == arg_6[0] && arg_177 == arg_77 && arg_177 == arg_92[0] && arg_177 == arg_135[0] && arg_177 == arg_70 && arg_177 == arg_113 && arg_177 == arg_172 && arg_177 == arg_106[0] && arg_177 == arg_182[0] && arg_177 == arg_118 && arg_177 == arg_171[0] && arg_177 == arg_18 && arg_177 == arg_93 && arg_177 == arg_41 && arg_177 == arg_176[0] && arg_177 == arg_69[0] && arg_177 == arg_59 && arg_177 == arg_102 && arg_177 == arg_187[0] && arg_177 == arg_153[0] && arg_177 == arg_107 && arg_177 == arg_112[0] && arg_177 == arg_22[0] && arg_177 == arg_40[0] && arg_30 == arg_58[0] && arg_30 == arg_140[0] && arg_30 == arg_165 && arg_30 == arg_11[0] && arg_30 == arg_64[0] && arg_30 == arg_125 && arg_30 == arg_17[0] && arg_30 == arg_117[0] && arg_30 == arg_148[0] && arg_30 == arg_183 && arg_30 == arg_141 && arg_30 == arg_34[0] && arg_30 == arg_87[0] && arg_30 == arg_129[0] && arg_30 == arg_159[0] && arg_30 == arg_29[0] && arg_30 == arg_46 && arg_30 == arg_81[0] && arg_30 == arg_7 && arg_30 == arg_12 && arg_30 == arg_164[0] && arg_30 == arg_23 && arg_30 == arg_54 && arg_30 == arg_65 && arg_30 == arg_188 && arg_30 == arg_136 && arg_30 == arg_45[0] && arg_30 == arg_160 && arg_30 == arg_88 && arg_30 == arg_101[0] && arg_30 == arg_82 && arg_30 == arg_149 && arg_30 == arg_53[0] && arg_30 == arg_76[0] && arg_30 == arg_124[0] && arg_30 == arg_6[0] && arg_30 == arg_77 && arg_30 == arg_92[0] && arg_30 == arg_135[0] && arg_30 == arg_70 && arg_30 == arg_113 && arg_30 == arg_172 && arg_30 == arg_106[0] && arg_30 == arg_182[0] && arg_30 == arg_118 && arg_30 == arg_171[0] && arg_30 == arg_18 && arg_30 == arg_93 && arg_30 == arg_41 && arg_30 == arg_176[0] && arg_30 == arg_69[0] && arg_30 == arg_59 && arg_30 == arg_102 && arg_30 == arg_187[0] && arg_30 == arg_153[0] && arg_30 == arg_107 && arg_30 == arg_112[0] && arg_30 == arg_22[0] && arg_30 == arg_40[0] && arg_58[0] == arg_140[0] && arg_58[0] == arg_165 && arg_58[0] == arg_11[0] && arg_58[0] == arg_64[0] && arg_58[0] == arg_125 && arg_58[0] == arg_17[0] && arg_58[0] == arg_117[0] && arg_58[0] == arg_148[0] && arg_58[0] == arg_183 && arg_58[0] == arg_141 && arg_58[0] == arg_34[0] && arg_58[0] == arg_87[0] && arg_58[0] == arg_129[0] && arg_58[0] == arg_159[0] && arg_58[0] == arg_29[0] && arg_58[0] == arg_46 && arg_58[0] == arg_81[0] && arg_58[0] == arg_7 && arg_58[0] == arg_12 && arg_58[0] == arg_164[0] && arg_58[0] == arg_23 && arg_58[0] == arg_54 && arg_58[0] == arg_65 && arg_58[0] == arg_188 && arg_58[0] == arg_136 && arg_58[0] == arg_45[0] && arg_58[0] == arg_160 && arg_58[0] == arg_88 && arg_58[0] == arg_101[0] && arg_58[0] == arg_82 && arg_58[0] == arg_149 && arg_58[0] == arg_53[0] && arg_58[0] == arg_76[0] && arg_58[0] == arg_124[0] && arg_58[0] == arg_6[0] && arg_58[0] == arg_77 && arg_58[0] == arg_92[0] && arg_58[0] == arg_135[0] && arg_58[0] == arg_70 && arg_58[0] == arg_113 && arg_58[0] == arg_172 && arg_58[0] == arg_106[0] && arg_58[0] == arg_182[0] && arg_58[0] == arg_118 && arg_58[0] == arg_171[0] && arg_58[0] == arg_18 && arg_58[0] == arg_93 && arg_58[0] == arg_41 && arg_58[0] == arg_176[0] && arg_58[0] == arg_69[0] && arg_58[0] == arg_59 && arg_58[0] == arg_102 && arg_58[0] == arg_187[0] && arg_58[0] == arg_153[0] && arg_58[0] == arg_107 && arg_58[0] == arg_112[0] && arg_58[0] == arg_22[0] && arg_58[0] == arg_40[0] && arg_140[0] == arg_165 && arg_140[0] == arg_11[0] && arg_140[0] == arg_64[0] && arg_140[0] == arg_125 && arg_140[0] == arg_17[0] && arg_140[0] == arg_117[0] && arg_140[0] == arg_148[0] && arg_140[0] == arg_183 && arg_140[0] == arg_141 && arg_140[0] == arg_34[0] && arg_140[0] == arg_87[0] && arg_140[0] == arg_129[0] && arg_140[0] == arg_159[0] && arg_140[0] == arg_29[0] && arg_140[0] == arg_46 && arg_140[0] == arg_81[0] && arg_140[0] == arg_7 && arg_140[0] == arg_12 && arg_140[0] == arg_164[0] && arg_140[0] == arg_23 && arg_140[0] == arg_54 && arg_140[0] == arg_65 && arg_140[0] == arg_188 && arg_140[0] == arg_136 && arg_140[0] == arg_45[0] && arg_140[0] == arg_160 && arg_140[0] == arg_88 && arg_140[0] == arg_101[0] && arg_140[0] == arg_82 && arg_140[0] == arg_149 && arg_140[0] == arg_53[0] && arg_140[0] == arg_76[0] && arg_140[0] == arg_124[0] && arg_140[0] == arg_6[0] && arg_140[0] == arg_77 && arg_140[0] == arg_92[0] && arg_140[0] == arg_135[0] && arg_140[0] == arg_70 && arg_140[0] == arg_113 && arg_140[0] == arg_172 && arg_140[0] == arg_106[0] && arg_140[0] == arg_182[0] && arg_140[0] == arg_118 && arg_140[0] == arg_171[0] && arg_140[0] == arg_18 && arg_140[0] == arg_93 && arg_140[0] == arg_41 && arg_140[0] == arg_176[0] && arg_140[0] == arg_69[0] && arg_140[0] == arg_59 && arg_140[0] == arg_102 && arg_140[0] == arg_187[0] && arg_140[0] == arg_153[0] && arg_140[0] == arg_107 && arg_140[0] == arg_112[0] && arg_140[0] == arg_22[0] && arg_140[0] == arg_40[0] && arg_165 == arg_11[0] && arg_165 == arg_64[0] && arg_165 == arg_125 && arg_165 == arg_17[0] && arg_165 == arg_117[0] && arg_165 == arg_148[0] && arg_165 == arg_183 && arg_165 == arg_141 && arg_165 == arg_34[0] && arg_165 == arg_87[0] && arg_165 == arg_129[0] && arg_165 == arg_159[0] && arg_165 == arg_29[0] && arg_165 == arg_46 && arg_165 == arg_81[0] && arg_165 == arg_7 && arg_165 == arg_12 && arg_165 == arg_164[0] && arg_165 == arg_23 && arg_165 == arg_54 && arg_165 == arg_65 && arg_165 == arg_188 && arg_165 == arg_136 && arg_165 == arg_45[0] && arg_165 == arg_160 && arg_165 == arg_88 && arg_165 == arg_101[0] && arg_165 == arg_82 && arg_165 == arg_149 && arg_165 == arg_53[0] && arg_165 == arg_76[0] && arg_165 == arg_124[0] && arg_165 == arg_6[0] && arg_165 == arg_77 && arg_165 == arg_92[0] && arg_165 == arg_135[0] && arg_165 == arg_70 && arg_165 == arg_113 && arg_165 == arg_172 && arg_165 == arg_106[0] && arg_165 == arg_182[0] && arg_165 == arg_118 && arg_165 == arg_171[0] && arg_165 == arg_18 && arg_165 == arg_93 && arg_165 == arg_41 && arg_165 == arg_176[0] && arg_165 == arg_69[0] && arg_165 == arg_59 && arg_165 == arg_102 && arg_165 == arg_187[0] && arg_165 == arg_153[0] && arg_165 == arg_107 && arg_165 == arg_112[0] && arg_165 == arg_22[0] && arg_165 == arg_40[0] && arg_11[0] == arg_64[0] && arg_11[0] == arg_125 && arg_11[0] == arg_17[0] && arg_11[0] == arg_117[0] && arg_11[0] == arg_148[0] && arg_11[0] == arg_183 && arg_11[0] == arg_141 && arg_11[0] == arg_34[0] && arg_11[0] == arg_87[0] && arg_11[0] == arg_129[0] && arg_11[0] == arg_159[0] && arg_11[0] == arg_29[0] && arg_11[0] == arg_46 && arg_11[0] == arg_81[0] && arg_11[0] == arg_7 && arg_11[0] == arg_12 && arg_11[0] == arg_164[0] && arg_11[0] == arg_23 && arg_11[0] == arg_54 && arg_11[0] == arg_65 && arg_11[0] == arg_188 && arg_11[0] == arg_136 && arg_11[0] == arg_45[0] && arg_11[0] == arg_160 && arg_11[0] == arg_88 && arg_11[0] == arg_101[0] && arg_11[0] == arg_82 && arg_11[0] == arg_149 && arg_11[0] == arg_53[0] && arg_11[0] == arg_76[0] && arg_11[0] == arg_124[0] && arg_11[0] == arg_6[0] && arg_11[0] == arg_77 && arg_11[0] == arg_92[0] && arg_11[0] == arg_135[0] && arg_11[0] == arg_70 && arg_11[0] == arg_113 && arg_11[0] == arg_172 && arg_11[0] == arg_106[0] && arg_11[0] == arg_182[0] && arg_11[0] == arg_118 && arg_11[0] == arg_171[0] && arg_11[0] == arg_18 && arg_11[0] == arg_93 && arg_11[0] == arg_41 && arg_11[0] == arg_176[0] && arg_11[0] == arg_69[0] && arg_11[0] == arg_59 && arg_11[0] == arg_102 && arg_11[0] == arg_187[0] && arg_11[0] == arg_153[0] && arg_11[0] == arg_107 && arg_11[0] == arg_112[0] && arg_11[0] == arg_22[0] && arg_11[0] == arg_40[0] && arg_64[0] == arg_125 && arg_64[0] == arg_17[0] && arg_64[0] == arg_117[0] && arg_64[0] == arg_148[0] && arg_64[0] == arg_183 && arg_64[0] == arg_141 && arg_64[0] == arg_34[0] && arg_64[0] == arg_87[0] && arg_64[0] == arg_129[0] && arg_64[0] == arg_159[0] && arg_64[0] == arg_29[0] && arg_64[0] == arg_46 && arg_64[0] == arg_81[0] && arg_64[0] == arg_7 && arg_64[0] == arg_12 && arg_64[0] == arg_164[0] && arg_64[0] == arg_23 && arg_64[0] == arg_54 && arg_64[0] == arg_65 && arg_64[0] == arg_188 && arg_64[0] == arg_136 && arg_64[0] == arg_45[0] && arg_64[0] == arg_160 && arg_64[0] == arg_88 && arg_64[0] == arg_101[0] && arg_64[0] == arg_82 && arg_64[0] == arg_149 && arg_64[0] == arg_53[0] && arg_64[0] == arg_76[0] && arg_64[0] == arg_124[0] && arg_64[0] == arg_6[0] && arg_64[0] == arg_77 && arg_64[0] == arg_92[0] && arg_64[0] == arg_135[0] && arg_64[0] == arg_70 && arg_64[0] == arg_113 && arg_64[0] == arg_172 && arg_64[0] == arg_106[0] && arg_64[0] == arg_182[0] && arg_64[0] == arg_118 && arg_64[0] == arg_171[0] && arg_64[0] == arg_18 && arg_64[0] == arg_93 && arg_64[0] == arg_41 && arg_64[0] == arg_176[0] && arg_64[0] == arg_69[0] && arg_64[0] == arg_59 && arg_64[0] == arg_102 && arg_64[0] == arg_187[0] && arg_64[0] == arg_153[0] && arg_64[0] == arg_107 && arg_64[0] == arg_112[0] && arg_64[0] == arg_22[0] && arg_64[0] == arg_40[0] && arg_125 == arg_17[0] && arg_125 == arg_117[0] && arg_125 == arg_148[0] && arg_125 == arg_183 && arg_125 == arg_141 && arg_125 == arg_34[0] && arg_125 == arg_87[0] && arg_125 == arg_129[0] && arg_125 == arg_159[0] && arg_125 == arg_29[0] && arg_125 == arg_46 && arg_125 == arg_81[0] && arg_125 == arg_7 && arg_125 == arg_12 && arg_125 == arg_164[0] && arg_125 == arg_23 && arg_125 == arg_54 && arg_125 == arg_65 && arg_125 == arg_188 && arg_125 == arg_136 && arg_125 == arg_45[0] && arg_125 == arg_160 && arg_125 == arg_88 && arg_125 == arg_101[0] && arg_125 == arg_82 && arg_125 == arg_149 && arg_125 == arg_53[0] && arg_125 == arg_76[0] && arg_125 == arg_124[0] && arg_125 == arg_6[0] && arg_125 == arg_77 && arg_125 == arg_92[0] && arg_125 == arg_135[0] && arg_125 == arg_70 && arg_125 == arg_113 && arg_125 == arg_172 && arg_125 == arg_106[0] && arg_125 == arg_182[0] && arg_125 == arg_118 && arg_125 == arg_171[0] && arg_125 == arg_18 && arg_125 == arg_93 && arg_125 == arg_41 && arg_125 == arg_176[0] && arg_125 == arg_69[0] && arg_125 == arg_59 && arg_125 == arg_102 && arg_125 == arg_187[0] && arg_125 == arg_153[0] && arg_125 == arg_107 && arg_125 == arg_112[0] && arg_125 == arg_22[0] && arg_125 == arg_40[0] && arg_17[0] == arg_117[0] && arg_17[0] == arg_148[0] && arg_17[0] == arg_183 && arg_17[0] == arg_141 && arg_17[0] == arg_34[0] && arg_17[0] == arg_87[0] && arg_17[0] == arg_129[0] && arg_17[0] == arg_159[0] && arg_17[0] == arg_29[0] && arg_17[0] == arg_46 && arg_17[0] == arg_81[0] && arg_17[0] == arg_7 && arg_17[0] == arg_12 && arg_17[0] == arg_164[0] && arg_17[0] == arg_23 && arg_17[0] == arg_54 && arg_17[0] == arg_65 && arg_17[0] == arg_188 && arg_17[0] == arg_136 && arg_17[0] == arg_45[0] && arg_17[0] == arg_160 && arg_17[0] == arg_88 && arg_17[0] == arg_101[0] && arg_17[0] == arg_82 && arg_17[0] == arg_149 && arg_17[0] == arg_53[0] && arg_17[0] == arg_76[0] && arg_17[0] == arg_124[0] && arg_17[0] == arg_6[0] && arg_17[0] == arg_77 && arg_17[0] == arg_92[0] && arg_17[0] == arg_135[0] && arg_17[0] == arg_70 && arg_17[0] == arg_113 && arg_17[0] == arg_172 && arg_17[0] == arg_106[0] && arg_17[0] == arg_182[0] && arg_17[0] == arg_118 && arg_17[0] == arg_171[0] && arg_17[0] == arg_18 && arg_17[0] == arg_93 && arg_17[0] == arg_41 && arg_17[0] == arg_176[0] && arg_17[0] == arg_69[0] && arg_17[0] == arg_59 && arg_17[0] == arg_102 && arg_17[0] == arg_187[0] && arg_17[0] == arg_153[0] && arg_17[0] == arg_107 && arg_17[0] == arg_112[0] && arg_17[0] == arg_22[0] && arg_17[0] == arg_40[0] && arg_117[0] == arg_148[0] && arg_117[0] == arg_183 && arg_117[0] == arg_141 && arg_117[0] == arg_34[0] && arg_117[0] == arg_87[0] && arg_117[0] == arg_129[0] && arg_117[0] == arg_159[0] && arg_117[0] == arg_29[0] && arg_117[0] == arg_46 && arg_117[0] == arg_81[0] && arg_117[0] == arg_7 && arg_117[0] == arg_12 && arg_117[0] == arg_164[0] && arg_117[0] == arg_23 && arg_117[0] == arg_54 && arg_117[0] == arg_65 && arg_117[0] == arg_188 && arg_117[0] == arg_136 && arg_117[0] == arg_45[0] && arg_117[0] == arg_160 && arg_117[0] == arg_88 && arg_117[0] == arg_101[0] && arg_117[0] == arg_82 && arg_117[0] == arg_149 && arg_117[0] == arg_53[0] && arg_117[0] == arg_76[0] && arg_117[0] == arg_124[0] && arg_117[0] == arg_6[0] && arg_117[0] == arg_77 && arg_117[0] == arg_92[0] && arg_117[0] == arg_135[0] && arg_117[0] == arg_70 && arg_117[0] == arg_113 && arg_117[0] == arg_172 && arg_117[0] == arg_106[0] && arg_117[0] == arg_182[0] && arg_117[0] == arg_118 && arg_117[0] == arg_171[0] && arg_117[0] == arg_18 && arg_117[0] == arg_93 && arg_117[0] == arg_41 && arg_117[0] == arg_176[0] && arg_117[0] == arg_69[0] && arg_117[0] == arg_59 && arg_117[0] == arg_102 && arg_117[0] == arg_187[0] && arg_117[0] == arg_153[0] && arg_117[0] == arg_107 && arg_117[0] == arg_112[0] && arg_117[0] == arg_22[0] && arg_117[0] == arg_40[0] && arg_148[0] == arg_183 && arg_148[0] == arg_141 && arg_148[0] == arg_34[0] && arg_148[0] == arg_87[0] && arg_148[0] == arg_129[0] && arg_148[0] == arg_159[0] && arg_148[0] == arg_29[0] && arg_148[0] == arg_46 && arg_148[0] == arg_81[0] && arg_148[0] == arg_7 && arg_148[0] == arg_12 && arg_148[0] == arg_164[0] && arg_148[0] == arg_23 && arg_148[0] == arg_54 && arg_148[0] == arg_65 && arg_148[0] == arg_188 && arg_148[0] == arg_136 && arg_148[0] == arg_45[0] && arg_148[0] == arg_160 && arg_148[0] == arg_88 && arg_148[0] == arg_101[0] && arg_148[0] == arg_82 && arg_148[0] == arg_149 && arg_148[0] == arg_53[0] && arg_148[0] == arg_76[0] && arg_148[0] == arg_124[0] && arg_148[0] == arg_6[0] && arg_148[0] == arg_77 && arg_148[0] == arg_92[0] && arg_148[0] == arg_135[0] && arg_148[0] == arg_70 && arg_148[0] == arg_113 && arg_148[0] == arg_172 && arg_148[0] == arg_106[0] && arg_148[0] == arg_182[0] && arg_148[0] == arg_118 && arg_148[0] == arg_171[0] && arg_148[0] == arg_18 && arg_148[0] == arg_93 && arg_148[0] == arg_41 && arg_148[0] == arg_176[0] && arg_148[0] == arg_69[0] && arg_148[0] == arg_59 && arg_148[0] == arg_102 && arg_148[0] == arg_187[0] && arg_148[0] == arg_153[0] && arg_148[0] == arg_107 && arg_148[0] == arg_112[0] && arg_148[0] == arg_22[0] && arg_148[0] == arg_40[0] && arg_183 == arg_141 && arg_183 == arg_34[0] && arg_183 == arg_87[0] && arg_183 == arg_129[0] && arg_183 == arg_159[0] && arg_183 == arg_29[0] && arg_183 == arg_46 && arg_183 == arg_81[0] && arg_183 == arg_7 && arg_183 == arg_12 && arg_183 == arg_164[0] && arg_183 == arg_23 && arg_183 == arg_54 && arg_183 == arg_65 && arg_183 == arg_188 && arg_183 == arg_136 && arg_183 == arg_45[0] && arg_183 == arg_160 && arg_183 == arg_88 && arg_183 == arg_101[0] && arg_183 == arg_82 && arg_183 == arg_149 && arg_183 == arg_53[0] && arg_183 == arg_76[0] && arg_183 == arg_124[0] && arg_183 == arg_6[0] && arg_183 == arg_77 && arg_183 == arg_92[0] && arg_183 == arg_135[0] && arg_183 == arg_70 && arg_183 == arg_113 && arg_183 == arg_172 && arg_183 == arg_106[0] && arg_183 == arg_182[0] && arg_183 == arg_118 && arg_183 == arg_171[0] && arg_183 == arg_18 && arg_183 == arg_93 && arg_183 == arg_41 && arg_183 == arg_176[0] && arg_183 == arg_69[0] && arg_183 == arg_59 && arg_183 == arg_102 && arg_183 == arg_187[0] && arg_183 == arg_153[0] && arg_183 == arg_107 && arg_183 == arg_112[0] && arg_183 == arg_22[0] && arg_183 == arg_40[0] && arg_141 == arg_34[0] && arg_141 == arg_87[0] && arg_141 == arg_129[0] && arg_141 == arg_159[0] && arg_141 == arg_29[0] && arg_141 == arg_46 && arg_141 == arg_81[0] && arg_141 == arg_7 && arg_141 == arg_12 && arg_141 == arg_164[0] && arg_141 == arg_23 && arg_141 == arg_54 && arg_141 == arg_65 && arg_141 == arg_188 && arg_141 == arg_136 && arg_141 == arg_45[0] && arg_141 == arg_160 && arg_141 == arg_88 && arg_141 == arg_101[0] && arg_141 == arg_82 && arg_141 == arg_149 && arg_141 == arg_53[0] && arg_141 == arg_76[0] && arg_141 == arg_124[0] && arg_141 == arg_6[0] && arg_141 == arg_77 && arg_141 == arg_92[0] && arg_141 == arg_135[0] && arg_141 == arg_70 && arg_141 == arg_113 && arg_141 == arg_172 && arg_141 == arg_106[0] && arg_141 == arg_182[0] && arg_141 == arg_118 && arg_141 == arg_171[0] && arg_141 == arg_18 && arg_141 == arg_93 && arg_141 == arg_41 && arg_141 == arg_176[0] && arg_141 == arg_69[0] && arg_141 == arg_59 && arg_141 == arg_102 && arg_141 == arg_187[0] && arg_141 == arg_153[0] && arg_141 == arg_107 && arg_141 == arg_112[0] && arg_141 == arg_22[0] && arg_141 == arg_40[0] && arg_34[0] == arg_87[0] && arg_34[0] == arg_129[0] && arg_34[0] == arg_159[0] && arg_34[0] == arg_29[0] && arg_34[0] == arg_46 && arg_34[0] == arg_81[0] && arg_34[0] == arg_7 && arg_34[0] == arg_12 && arg_34[0] == arg_164[0] && arg_34[0] == arg_23 && arg_34[0] == arg_54 && arg_34[0] == arg_65 && arg_34[0] == arg_188 && arg_34[0] == arg_136 && arg_34[0] == arg_45[0] && arg_34[0] == arg_160 && arg_34[0] == arg_88 && arg_34[0] == arg_101[0] && arg_34[0] == arg_82 && arg_34[0] == arg_149 && arg_34[0] == arg_53[0] && arg_34[0] == arg_76[0] && arg_34[0] == arg_124[0] && arg_34[0] == arg_6[0] && arg_34[0] == arg_77 && arg_34[0] == arg_92[0] && arg_34[0] == arg_135[0] && arg_34[0] == arg_70 && arg_34[0] == arg_113 && arg_34[0] == arg_172 && arg_34[0] == arg_106[0] && arg_34[0] == arg_182[0] && arg_34[0] == arg_118 && arg_34[0] == arg_171[0] && arg_34[0] == arg_18 && arg_34[0] == arg_93 && arg_34[0] == arg_41 && arg_34[0] == arg_176[0] && arg_34[0] == arg_69[0] && arg_34[0] == arg_59 && arg_34[0] == arg_102 && arg_34[0] == arg_187[0] && arg_34[0] == arg_153[0] && arg_34[0] == arg_107 && arg_34[0] == arg_112[0] && arg_34[0] == arg_22[0] && arg_34[0] == arg_40[0] && arg_87[0] == arg_129[0] && arg_87[0] == arg_159[0] && arg_87[0] == arg_29[0] && arg_87[0] == arg_46 && arg_87[0] == arg_81[0] && arg_87[0] == arg_7 && arg_87[0] == arg_12 && arg_87[0] == arg_164[0] && arg_87[0] == arg_23 && arg_87[0] == arg_54 && arg_87[0] == arg_65 && arg_87[0] == arg_188 && arg_87[0] == arg_136 && arg_87[0] == arg_45[0] && arg_87[0] == arg_160 && arg_87[0] == arg_88 && arg_87[0] == arg_101[0] && arg_87[0] == arg_82 && arg_87[0] == arg_149 && arg_87[0] == arg_53[0] && arg_87[0] == arg_76[0] && arg_87[0] == arg_124[0] && arg_87[0] == arg_6[0] && arg_87[0] == arg_77 && arg_87[0] == arg_92[0] && arg_87[0] == arg_135[0] && arg_87[0] == arg_70 && arg_87[0] == arg_113 && arg_87[0] == arg_172 && arg_87[0] == arg_106[0] && arg_87[0] == arg_182[0] && arg_87[0] == arg_118 && arg_87[0] == arg_171[0] && arg_87[0] == arg_18 && arg_87[0] == arg_93 && arg_87[0] == arg_41 && arg_87[0] == arg_176[0] && arg_87[0] == arg_69[0] && arg_87[0] == arg_59 && arg_87[0] == arg_102 && arg_87[0] == arg_187[0] && arg_87[0] == arg_153[0] && arg_87[0] == arg_107 && arg_87[0] == arg_112[0] && arg_87[0] == arg_22[0] && arg_87[0] == arg_40[0] && arg_129[0] == arg_159[0] && arg_129[0] == arg_29[0] && arg_129[0] == arg_46 && arg_129[0] == arg_81[0] && arg_129[0] == arg_7 && arg_129[0] == arg_12 && arg_129[0] == arg_164[0] && arg_129[0] == arg_23 && arg_129[0] == arg_54 && arg_129[0] == arg_65 && arg_129[0] == arg_188 && arg_129[0] == arg_136 && arg_129[0] == arg_45[0] && arg_129[0] == arg_160 && arg_129[0] == arg_88 && arg_129[0] == arg_101[0] && arg_129[0] == arg_82 && arg_129[0] == arg_149 && arg_129[0] == arg_53[0] && arg_129[0] == arg_76[0] && arg_129[0] == arg_124[0] && arg_129[0] == arg_6[0] && arg_129[0] == arg_77 && arg_129[0] == arg_92[0] && arg_129[0] == arg_135[0] && arg_129[0] == arg_70 && arg_129[0] == arg_113 && arg_129[0] == arg_172 && arg_129[0] == arg_106[0] && arg_129[0] == arg_182[0] && arg_129[0] == arg_118 && arg_129[0] == arg_171[0] && arg_129[0] == arg_18 && arg_129[0] == arg_93 && arg_129[0] == arg_41 && arg_129[0] == arg_176[0] && arg_129[0] == arg_69[0] && arg_129[0] == arg_59 && arg_129[0] == arg_102 && arg_129[0] == arg_187[0] && arg_129[0] == arg_153[0] && arg_129[0] == arg_107 && arg_129[0] == arg_112[0] && arg_129[0] == arg_22[0] && arg_129[0] == arg_40[0] && arg_159[0] == arg_29[0] && arg_159[0] == arg_46 && arg_159[0] == arg_81[0] && arg_159[0] == arg_7 && arg_159[0] == arg_12 && arg_159[0] == arg_164[0] && arg_159[0] == arg_23 && arg_159[0] == arg_54 && arg_159[0] == arg_65 && arg_159[0] == arg_188 && arg_159[0] == arg_136 && arg_159[0] == arg_45[0] && arg_159[0] == arg_160 && arg_159[0] == arg_88 && arg_159[0] == arg_101[0] && arg_159[0] == arg_82 && arg_159[0] == arg_149 && arg_159[0] == arg_53[0] && arg_159[0] == arg_76[0] && arg_159[0] == arg_124[0] && arg_159[0] == arg_6[0] && arg_159[0] == arg_77 && arg_159[0] == arg_92[0] && arg_159[0] == arg_135[0] && arg_159[0] == arg_70 && arg_159[0] == arg_113 && arg_159[0] == arg_172 && arg_159[0] == arg_106[0] && arg_159[0] == arg_182[0] && arg_159[0] == arg_118 && arg_159[0] == arg_171[0] && arg_159[0] == arg_18 && arg_159[0] == arg_93 && arg_159[0] == arg_41 && arg_159[0] == arg_176[0] && arg_159[0] == arg_69[0] && arg_159[0] == arg_59 && arg_159[0] == arg_102 && arg_159[0] == arg_187[0] && arg_159[0] == arg_153[0] && arg_159[0] == arg_107 && arg_159[0] == arg_112[0] && arg_159[0] == arg_22[0] && arg_159[0] == arg_40[0] && arg_29[0] == arg_46 && arg_29[0] == arg_81[0] && arg_29[0] == arg_7 && arg_29[0] == arg_12 && arg_29[0] == arg_164[0] && arg_29[0] == arg_23 && arg_29[0] == arg_54 && arg_29[0] == arg_65 && arg_29[0] == arg_188 && arg_29[0] == arg_136 && arg_29[0] == arg_45[0] && arg_29[0] == arg_160 && arg_29[0] == arg_88 && arg_29[0] == arg_101[0] && arg_29[0] == arg_82 && arg_29[0] == arg_149 && arg_29[0] == arg_53[0] && arg_29[0] == arg_76[0] && arg_29[0] == arg_124[0] && arg_29[0] == arg_6[0] && arg_29[0] == arg_77 && arg_29[0] == arg_92[0] && arg_29[0] == arg_135[0] && arg_29[0] == arg_70 && arg_29[0] == arg_113 && arg_29[0] == arg_172 && arg_29[0] == arg_106[0] && arg_29[0] == arg_182[0] && arg_29[0] == arg_118 && arg_29[0] == arg_171[0] && arg_29[0] == arg_18 && arg_29[0] == arg_93 && arg_29[0] == arg_41 && arg_29[0] == arg_176[0] && arg_29[0] == arg_69[0] && arg_29[0] == arg_59 && arg_29[0] == arg_102 && arg_29[0] == arg_187[0] && arg_29[0] == arg_153[0] && arg_29[0] == arg_107 && arg_29[0] == arg_112[0] && arg_29[0] == arg_22[0] && arg_29[0] == arg_40[0] && arg_46 == arg_81[0] && arg_46 == arg_7 && arg_46 == arg_12 && arg_46 == arg_164[0] && arg_46 == arg_23 && arg_46 == arg_54 && arg_46 == arg_65 && arg_46 == arg_188 && arg_46 == arg_136 && arg_46 == arg_45[0] && arg_46 == arg_160 && arg_46 == arg_88 && arg_46 == arg_101[0] && arg_46 == arg_82 && arg_46 == arg_149 && arg_46 == arg_53[0] && arg_46 == arg_76[0] && arg_46 == arg_124[0] && arg_46 == arg_6[0] && arg_46 == arg_77 && arg_46 == arg_92[0] && arg_46 == arg_135[0] && arg_46 == arg_70 && arg_46 == arg_113 && arg_46 == arg_172 && arg_46 == arg_106[0] && arg_46 == arg_182[0] && arg_46 == arg_118 && arg_46 == arg_171[0] && arg_46 == arg_18 && arg_46 == arg_93 && arg_46 == arg_41 && arg_46 == arg_176[0] && arg_46 == arg_69[0] && arg_46 == arg_59 && arg_46 == arg_102 && arg_46 == arg_187[0] && arg_46 == arg_153[0] && arg_46 == arg_107 && arg_46 == arg_112[0] && arg_46 == arg_22[0] && arg_46 == arg_40[0] && arg_81[0] == arg_7 && arg_81[0] == arg_12 && arg_81[0] == arg_164[0] && arg_81[0] == arg_23 && arg_81[0] == arg_54 && arg_81[0] == arg_65 && arg_81[0] == arg_188 && arg_81[0] == arg_136 && arg_81[0] == arg_45[0] && arg_81[0] == arg_160 && arg_81[0] == arg_88 && arg_81[0] == arg_101[0] && arg_81[0] == arg_82 && arg_81[0] == arg_149 && arg_81[0] == arg_53[0] && arg_81[0] == arg_76[0] && arg_81[0] == arg_124[0] && arg_81[0] == arg_6[0] && arg_81[0] == arg_77 && arg_81[0] == arg_92[0] && arg_81[0] == arg_135[0] && arg_81[0] == arg_70 && arg_81[0] == arg_113 && arg_81[0] == arg_172 && arg_81[0] == arg_106[0] && arg_81[0] == arg_182[0] && arg_81[0] == arg_118 && arg_81[0] == arg_171[0] && arg_81[0] == arg_18 && arg_81[0] == arg_93 && arg_81[0] == arg_41 && arg_81[0] == arg_176[0] && arg_81[0] == arg_69[0] && arg_81[0] == arg_59 && arg_81[0] == arg_102 && arg_81[0] == arg_187[0] && arg_81[0] == arg_153[0] && arg_81[0] == arg_107 && arg_81[0] == arg_112[0] && arg_81[0] == arg_22[0] && arg_81[0] == arg_40[0] && arg_7 == arg_12 && arg_7 == arg_164[0] && arg_7 == arg_23 && arg_7 == arg_54 && arg_7 == arg_65 && arg_7 == arg_188 && arg_7 == arg_136 && arg_7 == arg_45[0] && arg_7 == arg_160 && arg_7 == arg_88 && arg_7 == arg_101[0] && arg_7 == arg_82 && arg_7 == arg_149 && arg_7 == arg_53[0] && arg_7 == arg_76[0] && arg_7 == arg_124[0] && arg_7 == arg_6[0] && arg_7 == arg_77 && arg_7 == arg_92[0] && arg_7 == arg_135[0] && arg_7 == arg_70 && arg_7 == arg_113 && arg_7 == arg_172 && arg_7 == arg_106[0] && arg_7 == arg_182[0] && arg_7 == arg_118 && arg_7 == arg_171[0] && arg_7 == arg_18 && arg_7 == arg_93 && arg_7 == arg_41 && arg_7 == arg_176[0] && arg_7 == arg_69[0] && arg_7 == arg_59 && arg_7 == arg_102 && arg_7 == arg_187[0] && arg_7 == arg_153[0] && arg_7 == arg_107 && arg_7 == arg_112[0] && arg_7 == arg_22[0] && arg_7 == arg_40[0] && arg_12 == arg_164[0] && arg_12 == arg_23 && arg_12 == arg_54 && arg_12 == arg_65 && arg_12 == arg_188 && arg_12 == arg_136 && arg_12 == arg_45[0] && arg_12 == arg_160 && arg_12 == arg_88 && arg_12 == arg_101[0] && arg_12 == arg_82 && arg_12 == arg_149 && arg_12 == arg_53[0] && arg_12 == arg_76[0] && arg_12 == arg_124[0] && arg_12 == arg_6[0] && arg_12 == arg_77 && arg_12 == arg_92[0] && arg_12 == arg_135[0] && arg_12 == arg_70 && arg_12 == arg_113 && arg_12 == arg_172 && arg_12 == arg_106[0] && arg_12 == arg_182[0] && arg_12 == arg_118 && arg_12 == arg_171[0] && arg_12 == arg_18 && arg_12 == arg_93 && arg_12 == arg_41 && arg_12 == arg_176[0] && arg_12 == arg_69[0] && arg_12 == arg_59 && arg_12 == arg_102 && arg_12 == arg_187[0] && arg_12 == arg_153[0] && arg_12 == arg_107 && arg_12 == arg_112[0] && arg_12 == arg_22[0] && arg_12 == arg_40[0] && arg_164[0] == arg_23 && arg_164[0] == arg_54 && arg_164[0] == arg_65 && arg_164[0] == arg_188 && arg_164[0] == arg_136 && arg_164[0] == arg_45[0] && arg_164[0] == arg_160 && arg_164[0] == arg_88 && arg_164[0] == arg_101[0] && arg_164[0] == arg_82 && arg_164[0] == arg_149 && arg_164[0] == arg_53[0] && arg_164[0] == arg_76[0] && arg_164[0] == arg_124[0] && arg_164[0] == arg_6[0] && arg_164[0] == arg_77 && arg_164[0] == arg_92[0] && arg_164[0] == arg_135[0] && arg_164[0] == arg_70 && arg_164[0] == arg_113 && arg_164[0] == arg_172 && arg_164[0] == arg_106[0] && arg_164[0] == arg_182[0] && arg_164[0] == arg_118 && arg_164[0] == arg_171[0] && arg_164[0] == arg_18 && arg_164[0] == arg_93 && arg_164[0] == arg_41 && arg_164[0] == arg_176[0] && arg_164[0] == arg_69[0] && arg_164[0] == arg_59 && arg_164[0] == arg_102 && arg_164[0] == arg_187[0] && arg_164[0] == arg_153[0] && arg_164[0] == arg_107 && arg_164[0] == arg_112[0] && arg_164[0] == arg_22[0] && arg_164[0] == arg_40[0] && arg_23 == arg_54 && arg_23 == arg_65 && arg_23 == arg_188 && arg_23 == arg_136 && arg_23 == arg_45[0] && arg_23 == arg_160 && arg_23 == arg_88 && arg_23 == arg_101[0] && arg_23 == arg_82 && arg_23 == arg_149 && arg_23 == arg_53[0] && arg_23 == arg_76[0] && arg_23 == arg_124[0] && arg_23 == arg_6[0] && arg_23 == arg_77 && arg_23 == arg_92[0] && arg_23 == arg_135[0] && arg_23 == arg_70 && arg_23 == arg_113 && arg_23 == arg_172 && arg_23 == arg_106[0] && arg_23 == arg_182[0] && arg_23 == arg_118 && arg_23 == arg_171[0] && arg_23 == arg_18 && arg_23 == arg_93 && arg_23 == arg_41 && arg_23 == arg_176[0] && arg_23 == arg_69[0] && arg_23 == arg_59 && arg_23 == arg_102 && arg_23 == arg_187[0] && arg_23 == arg_153[0] && arg_23 == arg_107 && arg_23 == arg_112[0] && arg_23 == arg_22[0] && arg_23 == arg_40[0] && arg_54 == arg_65 && arg_54 == arg_188 && arg_54 == arg_136 && arg_54 == arg_45[0] && arg_54 == arg_160 && arg_54 == arg_88 && arg_54 == arg_101[0] && arg_54 == arg_82 && arg_54 == arg_149 && arg_54 == arg_53[0] && arg_54 == arg_76[0] && arg_54 == arg_124[0] && arg_54 == arg_6[0] && arg_54 == arg_77 && arg_54 == arg_92[0] && arg_54 == arg_135[0] && arg_54 == arg_70 && arg_54 == arg_113 && arg_54 == arg_172 && arg_54 == arg_106[0] && arg_54 == arg_182[0] && arg_54 == arg_118 && arg_54 == arg_171[0] && arg_54 == arg_18 && arg_54 == arg_93 && arg_54 == arg_41 && arg_54 == arg_176[0] && arg_54 == arg_69[0] && arg_54 == arg_59 && arg_54 == arg_102 && arg_54 == arg_187[0] && arg_54 == arg_153[0] && arg_54 == arg_107 && arg_54 == arg_112[0] && arg_54 == arg_22[0] && arg_54 == arg_40[0] && arg_65 == arg_188 && arg_65 == arg_136 && arg_65 == arg_45[0] && arg_65 == arg_160 && arg_65 == arg_88 && arg_65 == arg_101[0] && arg_65 == arg_82 && arg_65 == arg_149 && arg_65 == arg_53[0] && arg_65 == arg_76[0] && arg_65 == arg_124[0] && arg_65 == arg_6[0] && arg_65 == arg_77 && arg_65 == arg_92[0] && arg_65 == arg_135[0] && arg_65 == arg_70 && arg_65 == arg_113 && arg_65 == arg_172 && arg_65 == arg_106[0] && arg_65 == arg_182[0] && arg_65 == arg_118 && arg_65 == arg_171[0] && arg_65 == arg_18 && arg_65 == arg_93 && arg_65 == arg_41 && arg_65 == arg_176[0] && arg_65 == arg_69[0] && arg_65 == arg_59 && arg_65 == arg_102 && arg_65 == arg_187[0] && arg_65 == arg_153[0] && arg_65 == arg_107 && arg_65 == arg_112[0] && arg_65 == arg_22[0] && arg_65 == arg_40[0] && arg_188 == arg_136 && arg_188 == arg_45[0] && arg_188 == arg_160 && arg_188 == arg_88 && arg_188 == arg_101[0] && arg_188 == arg_82 && arg_188 == arg_149 && arg_188 == arg_53[0] && arg_188 == arg_76[0] && arg_188 == arg_124[0] && arg_188 == arg_6[0] && arg_188 == arg_77 && arg_188 == arg_92[0] && arg_188 == arg_135[0] && arg_188 == arg_70 && arg_188 == arg_113 && arg_188 == arg_172 && arg_188 == arg_106[0] && arg_188 == arg_182[0] && arg_188 == arg_118 && arg_188 == arg_171[0] && arg_188 == arg_18 && arg_188 == arg_93 && arg_188 == arg_41 && arg_188 == arg_176[0] && arg_188 == arg_69[0] && arg_188 == arg_59 && arg_188 == arg_102 && arg_188 == arg_187[0] && arg_188 == arg_153[0] && arg_188 == arg_107 && arg_188 == arg_112[0] && arg_188 == arg_22[0] && arg_188 == arg_40[0] && arg_136 == arg_45[0] && arg_136 == arg_160 && arg_136 == arg_88 && arg_136 == arg_101[0] && arg_136 == arg_82 && arg_136 == arg_149 && arg_136 == arg_53[0] && arg_136 == arg_76[0] && arg_136 == arg_124[0] && arg_136 == arg_6[0] && arg_136 == arg_77 && arg_136 == arg_92[0] && arg_136 == arg_135[0] && arg_136 == arg_70 && arg_136 == arg_113 && arg_136 == arg_172 && arg_136 == arg_106[0] && arg_136 == arg_182[0] && arg_136 == arg_118 && arg_136 == arg_171[0] && arg_136 == arg_18 && arg_136 == arg_93 && arg_136 == arg_41 && arg_136 == arg_176[0] && arg_136 == arg_69[0] && arg_136 == arg_59 && arg_136 == arg_102 && arg_136 == arg_187[0] && arg_136 == arg_153[0] && arg_136 == arg_107 && arg_136 == arg_112[0] && arg_136 == arg_22[0] && arg_136 == arg_40[0] && arg_45[0] == arg_160 && arg_45[0] == arg_88 && arg_45[0] == arg_101[0] && arg_45[0] == arg_82 && arg_45[0] == arg_149 && arg_45[0] == arg_53[0] && arg_45[0] == arg_76[0] && arg_45[0] == arg_124[0] && arg_45[0] == arg_6[0] && arg_45[0] == arg_77 && arg_45[0] == arg_92[0] && arg_45[0] == arg_135[0] && arg_45[0] == arg_70 && arg_45[0] == arg_113 && arg_45[0] == arg_172 && arg_45[0] == arg_106[0] && arg_45[0] == arg_182[0] && arg_45[0] == arg_118 && arg_45[0] == arg_171[0] && arg_45[0] == arg_18 && arg_45[0] == arg_93 && arg_45[0] == arg_41 && arg_45[0] == arg_176[0] && arg_45[0] == arg_69[0] && arg_45[0] == arg_59 && arg_45[0] == arg_102 && arg_45[0] == arg_187[0] && arg_45[0] == arg_153[0] && arg_45[0] == arg_107 && arg_45[0] == arg_112[0] && arg_45[0] == arg_22[0] && arg_45[0] == arg_40[0] && arg_160 == arg_88 && arg_160 == arg_101[0] && arg_160 == arg_82 && arg_160 == arg_149 && arg_160 == arg_53[0] && arg_160 == arg_76[0] && arg_160 == arg_124[0] && arg_160 == arg_6[0] && arg_160 == arg_77 && arg_160 == arg_92[0] && arg_160 == arg_135[0] && arg_160 == arg_70 && arg_160 == arg_113 && arg_160 == arg_172 && arg_160 == arg_106[0] && arg_160 == arg_182[0] && arg_160 == arg_118 && arg_160 == arg_171[0] && arg_160 == arg_18 && arg_160 == arg_93 && arg_160 == arg_41 && arg_160 == arg_176[0] && arg_160 == arg_69[0] && arg_160 == arg_59 && arg_160 == arg_102 && arg_160 == arg_187[0] && arg_160 == arg_153[0] && arg_160 == arg_107 && arg_160 == arg_112[0] && arg_160 == arg_22[0] && arg_160 == arg_40[0] && arg_88 == arg_101[0] && arg_88 == arg_82 && arg_88 == arg_149 && arg_88 == arg_53[0] && arg_88 == arg_76[0] && arg_88 == arg_124[0] && arg_88 == arg_6[0] && arg_88 == arg_77 && arg_88 == arg_92[0] && arg_88 == arg_135[0] && arg_88 == arg_70 && arg_88 == arg_113 && arg_88 == arg_172 && arg_88 == arg_106[0] && arg_88 == arg_182[0] && arg_88 == arg_118 && arg_88 == arg_171[0] && arg_88 == arg_18 && arg_88 == arg_93 && arg_88 == arg_41 && arg_88 == arg_176[0] && arg_88 == arg_69[0] && arg_88 == arg_59 && arg_88 == arg_102 && arg_88 == arg_187[0] && arg_88 == arg_153[0] && arg_88 == arg_107 && arg_88 == arg_112[0] && arg_88 == arg_22[0] && arg_88 == arg_40[0] && arg_101[0] == arg_82 && arg_101[0] == arg_149 && arg_101[0] == arg_53[0] && arg_101[0] == arg_76[0] && arg_101[0] == arg_124[0] && arg_101[0] == arg_6[0] && arg_101[0] == arg_77 && arg_101[0] == arg_92[0] && arg_101[0] == arg_135[0] && arg_101[0] == arg_70 && arg_101[0] == arg_113 && arg_101[0] == arg_172 && arg_101[0] == arg_106[0] && arg_101[0] == arg_182[0] && arg_101[0] == arg_118 && arg_101[0] == arg_171[0] && arg_101[0] == arg_18 && arg_101[0] == arg_93 && arg_101[0] == arg_41 && arg_101[0] == arg_176[0] && arg_101[0] == arg_69[0] && arg_101[0] == arg_59 && arg_101[0] == arg_102 && arg_101[0] == arg_187[0] && arg_101[0] == arg_153[0] && arg_101[0] == arg_107 && arg_101[0] == arg_112[0] && arg_101[0] == arg_22[0] && arg_101[0] == arg_40[0] && arg_82 == arg_149 && arg_82 == arg_53[0] && arg_82 == arg_76[0] && arg_82 == arg_124[0] && arg_82 == arg_6[0] && arg_82 == arg_77 && arg_82 == arg_92[0] && arg_82 == arg_135[0] && arg_82 == arg_70 && arg_82 == arg_113 && arg_82 == arg_172 && arg_82 == arg_106[0] && arg_82 == arg_182[0] && arg_82 == arg_118 && arg_82 == arg_171[0] && arg_82 == arg_18 && arg_82 == arg_93 && arg_82 == arg_41 && arg_82 == arg_176[0] && arg_82 == arg_69[0] && arg_82 == arg_59 && arg_82 == arg_102 && arg_82 == arg_187[0] && arg_82 == arg_153[0] && arg_82 == arg_107 && arg_82 == arg_112[0] && arg_82 == arg_22[0] && arg_82 == arg_40[0] && arg_149 == arg_53[0] && arg_149 == arg_76[0] && arg_149 == arg_124[0] && arg_149 == arg_6[0] && arg_149 == arg_77 && arg_149 == arg_92[0] && arg_149 == arg_135[0] && arg_149 == arg_70 && arg_149 == arg_113 && arg_149 == arg_172 && arg_149 == arg_106[0] && arg_149 == arg_182[0] && arg_149 == arg_118 && arg_149 == arg_171[0] && arg_149 == arg_18 && arg_149 == arg_93 && arg_149 == arg_41 && arg_149 == arg_176[0] && arg_149 == arg_69[0] && arg_149 == arg_59 && arg_149 == arg_102 && arg_149 == arg_187[0] && arg_149 == arg_153[0] && arg_149 == arg_107 && arg_149 == arg_112[0] && arg_149 == arg_22[0] && arg_149 == arg_40[0] && arg_53[0] == arg_76[0] && arg_53[0] == arg_124[0] && arg_53[0] == arg_6[0] && arg_53[0] == arg_77 && arg_53[0] == arg_92[0] && arg_53[0] == arg_135[0] && arg_53[0] == arg_70 && arg_53[0] == arg_113 && arg_53[0] == arg_172 && arg_53[0] == arg_106[0] && arg_53[0] == arg_182[0] && arg_53[0] == arg_118 && arg_53[0] == arg_171[0] && arg_53[0] == arg_18 && arg_53[0] == arg_93 && arg_53[0] == arg_41 && arg_53[0] == arg_176[0] && arg_53[0] == arg_69[0] && arg_53[0] == arg_59 && arg_53[0] == arg_102 && arg_53[0] == arg_187[0] && arg_53[0] == arg_153[0] && arg_53[0] == arg_107 && arg_53[0] == arg_112[0] && arg_53[0] == arg_22[0] && arg_53[0] == arg_40[0] && arg_76[0] == arg_124[0] && arg_76[0] == arg_6[0] && arg_76[0] == arg_77 && arg_76[0] == arg_92[0] && arg_76[0] == arg_135[0] && arg_76[0] == arg_70 && arg_76[0] == arg_113 && arg_76[0] == arg_172 && arg_76[0] == arg_106[0] && arg_76[0] == arg_182[0] && arg_76[0] == arg_118 && arg_76[0] == arg_171[0] && arg_76[0] == arg_18 && arg_76[0] == arg_93 && arg_76[0] == arg_41 && arg_76[0] == arg_176[0] && arg_76[0] == arg_69[0] && arg_76[0] == arg_59 && arg_76[0] == arg_102 && arg_76[0] == arg_187[0] && arg_76[0] == arg_153[0] && arg_76[0] == arg_107 && arg_76[0] == arg_112[0] && arg_76[0] == arg_22[0] && arg_76[0] == arg_40[0] && arg_124[0] == arg_6[0] && arg_124[0] == arg_77 && arg_124[0] == arg_92[0] && arg_124[0] == arg_135[0] && arg_124[0] == arg_70 && arg_124[0] == arg_113 && arg_124[0] == arg_172 && arg_124[0] == arg_106[0] && arg_124[0] == arg_182[0] && arg_124[0] == arg_118 && arg_124[0] == arg_171[0] && arg_124[0] == arg_18 && arg_124[0] == arg_93 && arg_124[0] == arg_41 && arg_124[0] == arg_176[0] && arg_124[0] == arg_69[0] && arg_124[0] == arg_59 && arg_124[0] == arg_102 && arg_124[0] == arg_187[0] && arg_124[0] == arg_153[0] && arg_124[0] == arg_107 && arg_124[0] == arg_112[0] && arg_124[0] == arg_22[0] && arg_124[0] == arg_40[0] && arg_6[0] == arg_77 && arg_6[0] == arg_92[0] && arg_6[0] == arg_135[0] && arg_6[0] == arg_70 && arg_6[0] == arg_113 && arg_6[0] == arg_172 && arg_6[0] == arg_106[0] && arg_6[0] == arg_182[0] && arg_6[0] == arg_118 && arg_6[0] == arg_171[0] && arg_6[0] == arg_18 && arg_6[0] == arg_93 && arg_6[0] == arg_41 && arg_6[0] == arg_176[0] && arg_6[0] == arg_69[0] && arg_6[0] == arg_59 && arg_6[0] == arg_102 && arg_6[0] == arg_187[0] && arg_6[0] == arg_153[0] && arg_6[0] == arg_107 && arg_6[0] == arg_112[0] && arg_6[0] == arg_22[0] && arg_6[0] == arg_40[0] && arg_77 == arg_92[0] && arg_77 == arg_135[0] && arg_77 == arg_70 && arg_77 == arg_113 && arg_77 == arg_172 && arg_77 == arg_106[0] && arg_77 == arg_182[0] && arg_77 == arg_118 && arg_77 == arg_171[0] && arg_77 == arg_18 && arg_77 == arg_93 && arg_77 == arg_41 && arg_77 == arg_176[0] && arg_77 == arg_69[0] && arg_77 == arg_59 && arg_77 == arg_102 && arg_77 == arg_187[0] && arg_77 == arg_153[0] && arg_77 == arg_107 && arg_77 == arg_112[0] && arg_77 == arg_22[0] && arg_77 == arg_40[0] && arg_92[0] == arg_135[0] && arg_92[0] == arg_70 && arg_92[0] == arg_113 && arg_92[0] == arg_172 && arg_92[0] == arg_106[0] && arg_92[0] == arg_182[0] && arg_92[0] == arg_118 && arg_92[0] == arg_171[0] && arg_92[0] == arg_18 && arg_92[0] == arg_93 && arg_92[0] == arg_41 && arg_92[0] == arg_176[0] && arg_92[0] == arg_69[0] && arg_92[0] == arg_59 && arg_92[0] == arg_102 && arg_92[0] == arg_187[0] && arg_92[0] == arg_153[0] && arg_92[0] == arg_107 && arg_92[0] == arg_112[0] && arg_92[0] == arg_22[0] && arg_92[0] == arg_40[0] && arg_135[0] == arg_70 && arg_135[0] == arg_113 && arg_135[0] == arg_172 && arg_135[0] == arg_106[0] && arg_135[0] == arg_182[0] && arg_135[0] == arg_118 && arg_135[0] == arg_171[0] && arg_135[0] == arg_18 && arg_135[0] == arg_93 && arg_135[0] == arg_41 && arg_135[0] == arg_176[0] && arg_135[0] == arg_69[0] && arg_135[0] == arg_59 && arg_135[0] == arg_102 && arg_135[0] == arg_187[0] && arg_135[0] == arg_153[0] && arg_135[0] == arg_107 && arg_135[0] == arg_112[0] && arg_135[0] == arg_22[0] && arg_135[0] == arg_40[0] && arg_70 == arg_113 && arg_70 == arg_172 && arg_70 == arg_106[0] && arg_70 == arg_182[0] && arg_70 == arg_118 && arg_70 == arg_171[0] && arg_70 == arg_18 && arg_70 == arg_93 && arg_70 == arg_41 && arg_70 == arg_176[0] && arg_70 == arg_69[0] && arg_70 == arg_59 && arg_70 == arg_102 && arg_70 == arg_187[0] && arg_70 == arg_153[0] && arg_70 == arg_107 && arg_70 == arg_112[0] && arg_70 == arg_22[0] && arg_70 == arg_40[0] && arg_113 == arg_172 && arg_113 == arg_106[0] && arg_113 == arg_182[0] && arg_113 == arg_118 && arg_113 == arg_171[0] && arg_113 == arg_18 && arg_113 == arg_93 && arg_113 == arg_41 && arg_113 == arg_176[0] && arg_113 == arg_69[0] && arg_113 == arg_59 && arg_113 == arg_102 && arg_113 == arg_187[0] && arg_113 == arg_153[0] && arg_113 == arg_107 && arg_113 == arg_112[0] && arg_113 == arg_22[0] && arg_113 == arg_40[0] && arg_172 == arg_106[0] && arg_172 == arg_182[0] && arg_172 == arg_118 && arg_172 == arg_171[0] && arg_172 == arg_18 && arg_172 == arg_93 && arg_172 == arg_41 && arg_172 == arg_176[0] && arg_172 == arg_69[0] && arg_172 == arg_59 && arg_172 == arg_102 && arg_172 == arg_187[0] && arg_172 == arg_153[0] && arg_172 == arg_107 && arg_172 == arg_112[0] && arg_172 == arg_22[0] && arg_172 == arg_40[0] && arg_106[0] == arg_182[0] && arg_106[0] == arg_118 && arg_106[0] == arg_171[0] && arg_106[0] == arg_18 && arg_106[0] == arg_93 && arg_106[0] == arg_41 && arg_106[0] == arg_176[0] && arg_106[0] == arg_69[0] && arg_106[0] == arg_59 && arg_106[0] == arg_102 && arg_106[0] == arg_187[0] && arg_106[0] == arg_153[0] && arg_106[0] == arg_107 && arg_106[0] == arg_112[0] && arg_106[0] == arg_22[0] && arg_106[0] == arg_40[0] && arg_182[0] == arg_118 && arg_182[0] == arg_171[0] && arg_182[0] == arg_18 && arg_182[0] == arg_93 && arg_182[0] == arg_41 && arg_182[0] == arg_176[0] && arg_182[0] == arg_69[0] && arg_182[0] == arg_59 && arg_182[0] == arg_102 && arg_182[0] == arg_187[0] && arg_182[0] == arg_153[0] && arg_182[0] == arg_107 && arg_182[0] == arg_112[0] && arg_182[0] == arg_22[0] && arg_182[0] == arg_40[0] && arg_118 == arg_171[0] && arg_118 == arg_18 && arg_118 == arg_93 && arg_118 == arg_41 && arg_118 == arg_176[0] && arg_118 == arg_69[0] && arg_118 == arg_59 && arg_118 == arg_102 && arg_118 == arg_187[0] && arg_118 == arg_153[0] && arg_118 == arg_107 && arg_118 == arg_112[0] && arg_118 == arg_22[0] && arg_118 == arg_40[0] && arg_171[0] == arg_18 && arg_171[0] == arg_93 && arg_171[0] == arg_41 && arg_171[0] == arg_176[0] && arg_171[0] == arg_69[0] && arg_171[0] == arg_59 && arg_171[0] == arg_102 && arg_171[0] == arg_187[0] && arg_171[0] == arg_153[0] && arg_171[0] == arg_107 && arg_171[0] == arg_112[0] && arg_171[0] == arg_22[0] && arg_171[0] == arg_40[0] && arg_18 == arg_93 && arg_18 == arg_41 && arg_18 == arg_176[0] && arg_18 == arg_69[0] && arg_18 == arg_59 && arg_18 == arg_102 && arg_18 == arg_187[0] && arg_18 == arg_153[0] && arg_18 == arg_107 && arg_18 == arg_112[0] && arg_18 == arg_22[0] && arg_18 == arg_40[0] && arg_93 == arg_41 && arg_93 == arg_176[0] && arg_93 == arg_69[0] && arg_93 == arg_59 && arg_93 == arg_102 && arg_93 == arg_187[0] && arg_93 == arg_153[0] && arg_93 == arg_107 && arg_93 == arg_112[0] && arg_93 == arg_22[0] && arg_93 == arg_40[0] && arg_41 == arg_176[0] && arg_41 == arg_69[0] && arg_41 == arg_59 && arg_41 == arg_102 && arg_41 == arg_187[0] && arg_41 == arg_153[0] && arg_41 == arg_107 && arg_41 == arg_112[0] && arg_41 == arg_22[0] && arg_41 == arg_40[0] && arg_176[0] == arg_69[0] && arg_176[0] == arg_59 && arg_176[0] == arg_102 && arg_176[0] == arg_187[0] && arg_176[0] == arg_153[0] && arg_176[0] == arg_107 && arg_176[0] == arg_112[0] && arg_176[0] == arg_22[0] && arg_176[0] == arg_40[0] && arg_69[0] == arg_59 && arg_69[0] == arg_102 && arg_69[0] == arg_187[0] && arg_69[0] == arg_153[0] && arg_69[0] == arg_107 && arg_69[0] == arg_112[0] && arg_69[0] == arg_22[0] && arg_69[0] == arg_40[0] && arg_59 == arg_102 && arg_59 == arg_187[0] && arg_59 == arg_153[0] && arg_59 == arg_107 && arg_59 == arg_112[0] && arg_59 == arg_22[0] && arg_59 == arg_40[0] && arg_102 == arg_187[0] && arg_102 == arg_153[0] && arg_102 == arg_107 && arg_102 == arg_112[0] && arg_102 == arg_22[0] && arg_102 == arg_40[0] && arg_187[0] == arg_153[0] && arg_187[0] == arg_107 && arg_187[0] == arg_112[0] && arg_187[0] == arg_22[0] && arg_187[0] == arg_40[0] && arg_153[0] == arg_107 && arg_153[0] == arg_112[0] && arg_153[0] == arg_22[0] && arg_153[0] == arg_40[0] && arg_107 == arg_112[0] && arg_107 == arg_22[0] && arg_107 == arg_40[0] && arg_112[0] == arg_22[0] && arg_112[0] == arg_40[0] && arg_22[0] == arg_40[0] {
let rhs_inst_20 = pos.ins().band_imm(arg_167, 1_u64 as i64);
let rhs_inst_21 = pos.ins().bnot(rhs_inst_20);
pos.func.dfg.replace(inst).bnot(rhs_inst_21);

}
}
}
}
}
}
}
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1407(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_3 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_3[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 56 {
match pos.func.dfg.value_def(arg_3[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_5) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_5 == 40 {
if rhs_4 == 71776119061217280 {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_7 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_7[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_8 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_8) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_9 = arg;
let rhs_9 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_9 == 24 {
if rhs_8 == 280375465082880 {
match pos.func.dfg.value_def(arg_7[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_10 = arg;
let rhs_12 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_10) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_11 = arg;
let rhs_13 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_13 == 8 {
if rhs_12 == 1095216660480 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_12 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_12[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_13 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_13[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_14 = arg;
let rhs_16 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_14) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_15 = arg;
let rhs_17 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_17 == 8 {
if rhs_16 == 4278190080 {
match pos.func.dfg.value_def(arg_13[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_16 = arg;
let rhs_20 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_16) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_17 = arg;
let rhs_21 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_21 == 24 {
if rhs_20 == 16711680 {
match pos.func.dfg.value_def(arg_12[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_18 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_18[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_19 = arg;
let rhs_24 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_19) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_20 = arg;
let rhs_25 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_25 == 40 {
if rhs_24 == 65280 {
match pos.func.dfg.value_def(arg_18[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_21 = arg;
let rhs_28 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_28 == 56 {
if rhs_1 == 3 {
if arg_15 == arg_17 && arg_15 == arg_9 && arg_15 == arg_20 && arg_15 == arg_4 && arg_15 == arg_21 && arg_15 == arg_11 && arg_15 == arg_6 && arg_17 == arg_9 && arg_17 == arg_20 && arg_17 == arg_4 && arg_17 == arg_21 && arg_17 == arg_11 && arg_17 == arg_6 && arg_9 == arg_20 && arg_9 == arg_4 && arg_9 == arg_21 && arg_9 == arg_11 && arg_9 == arg_6 && arg_20 == arg_4 && arg_20 == arg_21 && arg_20 == arg_11 && arg_20 == arg_6 && arg_4 == arg_21 && arg_4 == arg_11 && arg_4 == arg_6 && arg_21 == arg_11 && arg_21 == arg_6 && arg_11 == arg_6 {
let rhs_inst_24 = pos.ins().band_imm(arg_12[1], 3_u64 as i64);
let rhs_inst_25 = pos.ins().bnot(rhs_inst_24);
pos.func.dfg.replace(inst).bnot(rhs_inst_25);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1408(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_3 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_3[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 56 {
match pos.func.dfg.value_def(arg_3[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_5) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_5 == 40 {
if rhs_4 == 71776119061217280 {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_7 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_7[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_8 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_8) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_9 = arg;
let rhs_9 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_9 == 24 {
if rhs_8 == 280375465082880 {
match pos.func.dfg.value_def(arg_7[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_10 = arg;
let rhs_12 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_10) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_11 = arg;
let rhs_13 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_13 == 8 {
if rhs_12 == 1095216660480 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_12 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_12[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_13 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_13[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_14 = arg;
let rhs_16 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_14) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_15 = arg;
let rhs_17 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_17 == 8 {
if rhs_16 == 4278190080 {
match pos.func.dfg.value_def(arg_13[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_16 = arg;
let rhs_20 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_16) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_17 = arg;
let rhs_21 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_21 == 24 {
if rhs_20 == 16711680 {
match pos.func.dfg.value_def(arg_12[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_18 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_18[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_19 = arg;
let rhs_24 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_19) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_20 = arg;
let rhs_25 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_25 == 40 {
if rhs_24 == 65280 {
match pos.func.dfg.value_def(arg_18[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_21 = arg;
let rhs_28 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_28 == 56 {
if rhs_1 == 2 {
if arg_21 == arg_6 && arg_21 == arg_9 && arg_21 == arg_11 && arg_21 == arg_15 && arg_21 == arg_20 && arg_21 == arg_17 && arg_21 == arg_4 && arg_6 == arg_9 && arg_6 == arg_11 && arg_6 == arg_15 && arg_6 == arg_20 && arg_6 == arg_17 && arg_6 == arg_4 && arg_9 == arg_11 && arg_9 == arg_15 && arg_9 == arg_20 && arg_9 == arg_17 && arg_9 == arg_4 && arg_11 == arg_15 && arg_11 == arg_20 && arg_11 == arg_17 && arg_11 == arg_4 && arg_15 == arg_20 && arg_15 == arg_17 && arg_15 == arg_4 && arg_20 == arg_17 && arg_20 == arg_4 && arg_17 == arg_4 {
let rhs_inst_24 = pos.ins().band_imm(arg_12[1], 2_u64 as i64);
let rhs_inst_25 = pos.ins().bnot(rhs_inst_24);
pos.func.dfg.replace(inst).bnot(rhs_inst_25);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1409(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_3 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_3[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 56 {
match pos.func.dfg.value_def(arg_3[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_5) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_5 == 40 {
if rhs_4 == 71776119061217280 {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_7 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_7[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_8 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_8) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_9 = arg;
let rhs_9 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_9 == 24 {
if rhs_8 == 280375465082880 {
match pos.func.dfg.value_def(arg_7[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_10 = arg;
let rhs_12 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_10) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_11 = arg;
let rhs_13 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_13 == 8 {
if rhs_12 == 1095216660480 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_12 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_12[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_13 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_13[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_14 = arg;
let rhs_16 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_14) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_15 = arg;
let rhs_17 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_17 == 8 {
if rhs_16 == 4278190080 {
match pos.func.dfg.value_def(arg_13[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_16 = arg;
let rhs_20 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_16) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_17 = arg;
let rhs_21 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_21 == 24 {
if rhs_20 == 16711680 {
match pos.func.dfg.value_def(arg_12[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_18 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_18[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_19 = arg;
let rhs_24 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_19) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_20 = arg;
let rhs_25 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_25 == 40 {
if rhs_24 == 65280 {
match pos.func.dfg.value_def(arg_18[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_21 = arg;
let rhs_28 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_28 == 56 {
if rhs_1 == 1 {
if arg_15 == arg_4 && arg_15 == arg_11 && arg_15 == arg_20 && arg_15 == arg_21 && arg_15 == arg_17 && arg_15 == arg_6 && arg_15 == arg_9 && arg_4 == arg_11 && arg_4 == arg_20 && arg_4 == arg_21 && arg_4 == arg_17 && arg_4 == arg_6 && arg_4 == arg_9 && arg_11 == arg_20 && arg_11 == arg_21 && arg_11 == arg_17 && arg_11 == arg_6 && arg_11 == arg_9 && arg_20 == arg_21 && arg_20 == arg_17 && arg_20 == arg_6 && arg_20 == arg_9 && arg_21 == arg_17 && arg_21 == arg_6 && arg_21 == arg_9 && arg_17 == arg_6 && arg_17 == arg_9 && arg_6 == arg_9 {
let rhs_inst_24 = pos.ins().band_imm(arg_12[1], 1_u64 as i64);
let rhs_inst_25 = pos.ins().bnot(rhs_inst_24);
pos.func.dfg.replace(inst).bnot(rhs_inst_25);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1410(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_3 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_3[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 56 {
match pos.func.dfg.value_def(arg_3[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_5) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_5 == 40 {
if rhs_4 == 71776119061217280 {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_7 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_7[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_8 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_8) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_9 = arg;
let rhs_9 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_9 == 24 {
if rhs_8 == 280375465082880 {
match pos.func.dfg.value_def(arg_7[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_10 = arg;
let rhs_12 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_10) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_11 = arg;
let rhs_13 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_13 == 8 {
if rhs_12 == 1095216660480 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_12 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_12[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_13 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_13[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_14 = arg;
let rhs_16 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_14) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_15 = arg;
let rhs_17 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_17 == 8 {
if rhs_16 == 4278190080 {
match pos.func.dfg.value_def(arg_13[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_16 = arg;
let rhs_20 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_16) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_17 = arg;
let rhs_21 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_21 == 24 {
if rhs_20 == 16711680 {
match pos.func.dfg.value_def(arg_12[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_18 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_18[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_19 = arg;
let rhs_24 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_19) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_20 = arg;
let rhs_25 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_25 == 40 {
if rhs_24 == 65280 {
match pos.func.dfg.value_def(arg_18[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_21 = arg;
let rhs_28 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_28 == 56 {
if rhs_1 == 4 {
if arg_9 == arg_15 && arg_9 == arg_17 && arg_9 == arg_21 && arg_9 == arg_6 && arg_9 == arg_4 && arg_9 == arg_11 && arg_9 == arg_20 && arg_15 == arg_17 && arg_15 == arg_21 && arg_15 == arg_6 && arg_15 == arg_4 && arg_15 == arg_11 && arg_15 == arg_20 && arg_17 == arg_21 && arg_17 == arg_6 && arg_17 == arg_4 && arg_17 == arg_11 && arg_17 == arg_20 && arg_21 == arg_6 && arg_21 == arg_4 && arg_21 == arg_11 && arg_21 == arg_20 && arg_6 == arg_4 && arg_6 == arg_11 && arg_6 == arg_20 && arg_4 == arg_11 && arg_4 == arg_20 && arg_11 == arg_20 {
let rhs_inst_24 = pos.ins().band_imm(arg_12[1], 4_u64 as i64);
let rhs_inst_25 = pos.ins().bnot(rhs_inst_24);
pos.func.dfg.replace(inst).bnot(rhs_inst_25);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1411(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_3 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_3[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 56 {
match pos.func.dfg.value_def(arg_3[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_5) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_5 == 40 {
if rhs_4 == 71776119061217280 {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_7 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_7[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_8 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_8) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_9 = arg;
let rhs_9 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_9 == 24 {
if rhs_8 == 280375465082880 {
match pos.func.dfg.value_def(arg_7[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_10 = arg;
let rhs_12 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_10) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_11 = arg;
let rhs_13 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_13 == 8 {
if rhs_12 == 1095216660480 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_12 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_12[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_13 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_13[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_14 = arg;
let rhs_16 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_14) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_15 = arg;
let rhs_17 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_17 == 8 {
if rhs_16 == 4278190080 {
match pos.func.dfg.value_def(arg_13[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_16 = arg;
let rhs_20 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_16) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_17 = arg;
let rhs_21 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_21 == 24 {
if rhs_20 == 16711680 {
match pos.func.dfg.value_def(arg_12[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_18 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_18[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_19 = arg;
let rhs_24 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_19) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_20 = arg;
let rhs_25 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_25 == 40 {
if rhs_24 == 65280 {
match pos.func.dfg.value_def(arg_18[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_21 = arg;
let rhs_28 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_28 == 56 {
if rhs_1 == 56 {
if arg_17 == arg_20 && arg_17 == arg_11 && arg_17 == arg_4 && arg_17 == arg_21 && arg_17 == arg_15 && arg_17 == arg_9 && arg_17 == arg_6 && arg_20 == arg_11 && arg_20 == arg_4 && arg_20 == arg_21 && arg_20 == arg_15 && arg_20 == arg_9 && arg_20 == arg_6 && arg_11 == arg_4 && arg_11 == arg_21 && arg_11 == arg_15 && arg_11 == arg_9 && arg_11 == arg_6 && arg_4 == arg_21 && arg_4 == arg_15 && arg_4 == arg_9 && arg_4 == arg_6 && arg_21 == arg_15 && arg_21 == arg_9 && arg_21 == arg_6 && arg_15 == arg_9 && arg_15 == arg_6 && arg_9 == arg_6 {
let rhs_inst_24 = pos.ins().ushr_imm(arg_2[0], 56_u64 as i64);
let rhs_inst_25 = pos.ins().bnot(rhs_inst_24);
pos.func.dfg.replace(inst).bnot(rhs_inst_25);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1412(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_3 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_3[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 56 {
match pos.func.dfg.value_def(arg_3[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_5) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_5 == 40 {
if rhs_4 == 71776119061217280 {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_7 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_7[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_8 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_8) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_9 = arg;
let rhs_9 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_9 == 24 {
if rhs_8 == 280375465082880 {
match pos.func.dfg.value_def(arg_7[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_10 = arg;
let rhs_12 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_10) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_11 = arg;
let rhs_13 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_13 == 8 {
if rhs_12 == 1095216660480 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_12 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_12[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_13 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_13[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_14 = arg;
let rhs_16 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_14) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_15 = arg;
let rhs_17 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_17 == 8 {
if rhs_16 == 4278190080 {
match pos.func.dfg.value_def(arg_13[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_16 = arg;
let rhs_20 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_16) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_17 = arg;
let rhs_21 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_21 == 24 {
if rhs_20 == 16711680 {
match pos.func.dfg.value_def(arg_12[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_18 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_18[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_19 = arg;
let rhs_24 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_19) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_20 = arg;
let rhs_25 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_25 == 40 {
if rhs_24 == 65280 {
match pos.func.dfg.value_def(arg_18[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_21 = arg;
let rhs_28 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_28 == 56 {
if rhs_1 == 40 {
if arg_6 == arg_21 && arg_6 == arg_11 && arg_6 == arg_15 && arg_6 == arg_9 && arg_6 == arg_20 && arg_6 == arg_4 && arg_6 == arg_17 && arg_21 == arg_11 && arg_21 == arg_15 && arg_21 == arg_9 && arg_21 == arg_20 && arg_21 == arg_4 && arg_21 == arg_17 && arg_11 == arg_15 && arg_11 == arg_9 && arg_11 == arg_20 && arg_11 == arg_4 && arg_11 == arg_17 && arg_15 == arg_9 && arg_15 == arg_20 && arg_15 == arg_4 && arg_15 == arg_17 && arg_9 == arg_20 && arg_9 == arg_4 && arg_9 == arg_17 && arg_20 == arg_4 && arg_20 == arg_17 && arg_4 == arg_17 {
let rhs_inst_24 = pos.ins().ushr_imm(arg_1[0], 40_u64 as i64);
let rhs_inst_25 = pos.ins().bnot(rhs_inst_24);
pos.func.dfg.replace(inst).bnot(rhs_inst_25);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
fn superopt_1413(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_0 = arg;
let rhs_1 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
match pos.func.dfg.value_def(arg_0) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_1 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_1[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_2 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_2[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_3 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_3[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_4 = arg;
let rhs_2 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_2 == 56 {
match pos.func.dfg.value_def(arg_3[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_5 = arg;
let rhs_4 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_5) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_6 = arg;
let rhs_5 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_5 == 40 {
if rhs_4 == 71776119061217280 {
match pos.func.dfg.value_def(arg_2[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_7 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_7[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_8 = arg;
let rhs_8 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_8) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_9 = arg;
let rhs_9 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_9 == 24 {
if rhs_8 == 280375465082880 {
match pos.func.dfg.value_def(arg_7[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_10 = arg;
let rhs_12 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_10) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_11 = arg;
let rhs_13 : i64 = imm.into();
match opcode {
Opcode::IshlImm => {
if rhs_13 == 8 {
if rhs_12 == 1095216660480 {
match pos.func.dfg.value_def(arg_1[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_12 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_12[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_13 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_13[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_14 = arg;
let rhs_16 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_14) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_15 = arg;
let rhs_17 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_17 == 8 {
if rhs_16 == 4278190080 {
match pos.func.dfg.value_def(arg_13[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_16 = arg;
let rhs_20 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_16) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_17 = arg;
let rhs_21 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_21 == 24 {
if rhs_20 == 16711680 {
match pos.func.dfg.value_def(arg_12[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::Binary { opcode, args } => {
let arg_18 = args;
match opcode {
Opcode::Bor => {
match pos.func.dfg.value_def(arg_18[0]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_19 = arg;
let rhs_24 : i64 = imm.into();
match opcode {
Opcode::BandImm => {
match pos.func.dfg.value_def(arg_19) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_20 = arg;
let rhs_25 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_25 == 40 {
if rhs_24 == 65280 {
match pos.func.dfg.value_def(arg_18[1]) {

ValueDef::Result(arg_ty, _) => {
match pos.func.dfg[arg_ty] {
InstructionData::BinaryImm64 { opcode, arg, imm } => {
let arg_21 = arg;
let rhs_28 : i64 = imm.into();
match opcode {
Opcode::UshrImm => {
if rhs_28 == 56 {
if rhs_1 == 32 {
if arg_11 == arg_21 && arg_11 == arg_17 && arg_11 == arg_4 && arg_11 == arg_15 && arg_11 == arg_20 && arg_11 == arg_9 && arg_11 == arg_6 && arg_21 == arg_17 && arg_21 == arg_4 && arg_21 == arg_15 && arg_21 == arg_20 && arg_21 == arg_9 && arg_21 == arg_6 && arg_17 == arg_4 && arg_17 == arg_15 && arg_17 == arg_20 && arg_17 == arg_9 && arg_17 == arg_6 && arg_4 == arg_15 && arg_4 == arg_20 && arg_4 == arg_9 && arg_4 == arg_6 && arg_15 == arg_20 && arg_15 == arg_9 && arg_15 == arg_6 && arg_20 == arg_9 && arg_20 == arg_6 && arg_9 == arg_6 {
let rhs_inst_24 = pos.ins().imul_imm(arg_1[1], 4294967296_u64 as i64);
let rhs_inst_25 = pos.ins().bnot(rhs_inst_24);
pos.func.dfg.replace(inst).bnot(rhs_inst_25);

}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
},
_ => {},
}
}

/// The main superoptimization baseline pass.
pub fn do_superopt_baseline(func: &mut Function) {
    let _tt = timing::superopt_baseline();
    let mut pos = FuncCursor::new(func);

    while let Some(_block) = pos.next_block() {
        while let Some(inst) = pos.next_inst() {
superopt_1(&mut pos, inst);
superopt_2(&mut pos, inst);
superopt_3(&mut pos, inst);
superopt_4(&mut pos, inst);
superopt_5(&mut pos, inst);
superopt_6(&mut pos, inst);
superopt_7(&mut pos, inst);
superopt_8(&mut pos, inst);
superopt_9(&mut pos, inst);
superopt_10(&mut pos, inst);
superopt_11(&mut pos, inst);
superopt_12(&mut pos, inst);
superopt_13(&mut pos, inst);
superopt_14(&mut pos, inst);
superopt_15(&mut pos, inst);
superopt_16(&mut pos, inst);
superopt_17(&mut pos, inst);
superopt_18(&mut pos, inst);
superopt_19(&mut pos, inst);
superopt_20(&mut pos, inst);
superopt_21(&mut pos, inst);
superopt_22(&mut pos, inst);
superopt_23(&mut pos, inst);
superopt_24(&mut pos, inst);
superopt_25(&mut pos, inst);
superopt_26(&mut pos, inst);
superopt_27(&mut pos, inst);
superopt_28(&mut pos, inst);
superopt_29(&mut pos, inst);
superopt_30(&mut pos, inst);
superopt_31(&mut pos, inst);
superopt_32(&mut pos, inst);
superopt_33(&mut pos, inst);
superopt_34(&mut pos, inst);
superopt_35(&mut pos, inst);
superopt_36(&mut pos, inst);
superopt_37(&mut pos, inst);
superopt_38(&mut pos, inst);
superopt_39(&mut pos, inst);
superopt_40(&mut pos, inst);
superopt_41(&mut pos, inst);
superopt_42(&mut pos, inst);
superopt_43(&mut pos, inst);
superopt_44(&mut pos, inst);
superopt_45(&mut pos, inst);
superopt_46(&mut pos, inst);
superopt_47(&mut pos, inst);
superopt_48(&mut pos, inst);
superopt_49(&mut pos, inst);
superopt_50(&mut pos, inst);
superopt_51(&mut pos, inst);
superopt_52(&mut pos, inst);
superopt_53(&mut pos, inst);
superopt_54(&mut pos, inst);
superopt_55(&mut pos, inst);
superopt_56(&mut pos, inst);
superopt_57(&mut pos, inst);
superopt_58(&mut pos, inst);
superopt_59(&mut pos, inst);
superopt_60(&mut pos, inst);
superopt_61(&mut pos, inst);
superopt_62(&mut pos, inst);
superopt_63(&mut pos, inst);
superopt_64(&mut pos, inst);
superopt_65(&mut pos, inst);
superopt_66(&mut pos, inst);
superopt_67(&mut pos, inst);
superopt_68(&mut pos, inst);
superopt_69(&mut pos, inst);
superopt_70(&mut pos, inst);
superopt_71(&mut pos, inst);
superopt_72(&mut pos, inst);
superopt_73(&mut pos, inst);
superopt_74(&mut pos, inst);
superopt_75(&mut pos, inst);
superopt_76(&mut pos, inst);
superopt_77(&mut pos, inst);
superopt_78(&mut pos, inst);
superopt_79(&mut pos, inst);
superopt_80(&mut pos, inst);
superopt_81(&mut pos, inst);
superopt_82(&mut pos, inst);
superopt_83(&mut pos, inst);
superopt_84(&mut pos, inst);
superopt_85(&mut pos, inst);
superopt_86(&mut pos, inst);
superopt_87(&mut pos, inst);
superopt_88(&mut pos, inst);
superopt_89(&mut pos, inst);
superopt_90(&mut pos, inst);
superopt_91(&mut pos, inst);
superopt_92(&mut pos, inst);
superopt_93(&mut pos, inst);
superopt_94(&mut pos, inst);
superopt_95(&mut pos, inst);
superopt_96(&mut pos, inst);
superopt_97(&mut pos, inst);
superopt_98(&mut pos, inst);
superopt_99(&mut pos, inst);
superopt_100(&mut pos, inst);
superopt_101(&mut pos, inst);
superopt_102(&mut pos, inst);
superopt_103(&mut pos, inst);
superopt_104(&mut pos, inst);
superopt_105(&mut pos, inst);
superopt_106(&mut pos, inst);
superopt_107(&mut pos, inst);
superopt_108(&mut pos, inst);
superopt_109(&mut pos, inst);
superopt_110(&mut pos, inst);
superopt_111(&mut pos, inst);
superopt_112(&mut pos, inst);
superopt_113(&mut pos, inst);
superopt_114(&mut pos, inst);
superopt_115(&mut pos, inst);
superopt_116(&mut pos, inst);
superopt_117(&mut pos, inst);
superopt_118(&mut pos, inst);
superopt_119(&mut pos, inst);
superopt_120(&mut pos, inst);
superopt_121(&mut pos, inst);
superopt_122(&mut pos, inst);
superopt_123(&mut pos, inst);
superopt_124(&mut pos, inst);
superopt_125(&mut pos, inst);
superopt_126(&mut pos, inst);
superopt_127(&mut pos, inst);
superopt_128(&mut pos, inst);
superopt_129(&mut pos, inst);
superopt_130(&mut pos, inst);
superopt_131(&mut pos, inst);
superopt_132(&mut pos, inst);
superopt_133(&mut pos, inst);
superopt_134(&mut pos, inst);
superopt_135(&mut pos, inst);
superopt_136(&mut pos, inst);
superopt_137(&mut pos, inst);
superopt_138(&mut pos, inst);
superopt_139(&mut pos, inst);
superopt_140(&mut pos, inst);
superopt_141(&mut pos, inst);
superopt_142(&mut pos, inst);
superopt_143(&mut pos, inst);
superopt_144(&mut pos, inst);
superopt_145(&mut pos, inst);
superopt_146(&mut pos, inst);
superopt_147(&mut pos, inst);
superopt_148(&mut pos, inst);
superopt_149(&mut pos, inst);
superopt_150(&mut pos, inst);
superopt_151(&mut pos, inst);
superopt_152(&mut pos, inst);
superopt_153(&mut pos, inst);
superopt_154(&mut pos, inst);
superopt_155(&mut pos, inst);
superopt_156(&mut pos, inst);
superopt_157(&mut pos, inst);
superopt_158(&mut pos, inst);
superopt_159(&mut pos, inst);
superopt_160(&mut pos, inst);
superopt_161(&mut pos, inst);
superopt_162(&mut pos, inst);
superopt_163(&mut pos, inst);
superopt_164(&mut pos, inst);
superopt_165(&mut pos, inst);
superopt_166(&mut pos, inst);
superopt_167(&mut pos, inst);
superopt_168(&mut pos, inst);
superopt_169(&mut pos, inst);
superopt_170(&mut pos, inst);
superopt_171(&mut pos, inst);
superopt_172(&mut pos, inst);
superopt_173(&mut pos, inst);
superopt_174(&mut pos, inst);
superopt_175(&mut pos, inst);
superopt_176(&mut pos, inst);
superopt_177(&mut pos, inst);
superopt_178(&mut pos, inst);
superopt_179(&mut pos, inst);
superopt_180(&mut pos, inst);
superopt_181(&mut pos, inst);
superopt_182(&mut pos, inst);
superopt_183(&mut pos, inst);
superopt_184(&mut pos, inst);
superopt_185(&mut pos, inst);
superopt_186(&mut pos, inst);
superopt_187(&mut pos, inst);
superopt_188(&mut pos, inst);
superopt_189(&mut pos, inst);
superopt_190(&mut pos, inst);
superopt_191(&mut pos, inst);
superopt_192(&mut pos, inst);
superopt_193(&mut pos, inst);
superopt_194(&mut pos, inst);
superopt_195(&mut pos, inst);
superopt_196(&mut pos, inst);
superopt_197(&mut pos, inst);
superopt_198(&mut pos, inst);
superopt_199(&mut pos, inst);
superopt_200(&mut pos, inst);
superopt_201(&mut pos, inst);
superopt_202(&mut pos, inst);
superopt_203(&mut pos, inst);
superopt_204(&mut pos, inst);
superopt_205(&mut pos, inst);
superopt_206(&mut pos, inst);
superopt_207(&mut pos, inst);
superopt_208(&mut pos, inst);
superopt_209(&mut pos, inst);
superopt_210(&mut pos, inst);
superopt_211(&mut pos, inst);
superopt_212(&mut pos, inst);
superopt_213(&mut pos, inst);
superopt_214(&mut pos, inst);
superopt_215(&mut pos, inst);
superopt_216(&mut pos, inst);
superopt_217(&mut pos, inst);
superopt_218(&mut pos, inst);
superopt_219(&mut pos, inst);
superopt_220(&mut pos, inst);
superopt_221(&mut pos, inst);
superopt_222(&mut pos, inst);
superopt_223(&mut pos, inst);
superopt_224(&mut pos, inst);
superopt_225(&mut pos, inst);
superopt_226(&mut pos, inst);
superopt_227(&mut pos, inst);
superopt_228(&mut pos, inst);
superopt_229(&mut pos, inst);
superopt_230(&mut pos, inst);
superopt_231(&mut pos, inst);
superopt_232(&mut pos, inst);
superopt_233(&mut pos, inst);
superopt_234(&mut pos, inst);
superopt_235(&mut pos, inst);
superopt_236(&mut pos, inst);
superopt_237(&mut pos, inst);
superopt_238(&mut pos, inst);
superopt_239(&mut pos, inst);
superopt_240(&mut pos, inst);
superopt_241(&mut pos, inst);
superopt_242(&mut pos, inst);
superopt_243(&mut pos, inst);
superopt_244(&mut pos, inst);
superopt_245(&mut pos, inst);
superopt_246(&mut pos, inst);
superopt_247(&mut pos, inst);
superopt_248(&mut pos, inst);
superopt_249(&mut pos, inst);
superopt_250(&mut pos, inst);
superopt_251(&mut pos, inst);
superopt_252(&mut pos, inst);
superopt_253(&mut pos, inst);
superopt_254(&mut pos, inst);
superopt_255(&mut pos, inst);
superopt_256(&mut pos, inst);
superopt_257(&mut pos, inst);
superopt_258(&mut pos, inst);
superopt_259(&mut pos, inst);
superopt_260(&mut pos, inst);
superopt_261(&mut pos, inst);
superopt_262(&mut pos, inst);
superopt_263(&mut pos, inst);
superopt_264(&mut pos, inst);
superopt_265(&mut pos, inst);
superopt_266(&mut pos, inst);
superopt_267(&mut pos, inst);
superopt_268(&mut pos, inst);
superopt_269(&mut pos, inst);
superopt_270(&mut pos, inst);
superopt_271(&mut pos, inst);
superopt_272(&mut pos, inst);
superopt_273(&mut pos, inst);
superopt_274(&mut pos, inst);
superopt_275(&mut pos, inst);
superopt_276(&mut pos, inst);
superopt_277(&mut pos, inst);
superopt_278(&mut pos, inst);
superopt_279(&mut pos, inst);
superopt_280(&mut pos, inst);
superopt_281(&mut pos, inst);
superopt_282(&mut pos, inst);
superopt_283(&mut pos, inst);
superopt_284(&mut pos, inst);
superopt_285(&mut pos, inst);
superopt_286(&mut pos, inst);
superopt_287(&mut pos, inst);
superopt_288(&mut pos, inst);
superopt_289(&mut pos, inst);
superopt_290(&mut pos, inst);
superopt_291(&mut pos, inst);
superopt_292(&mut pos, inst);
superopt_293(&mut pos, inst);
superopt_294(&mut pos, inst);
superopt_295(&mut pos, inst);
superopt_296(&mut pos, inst);
superopt_297(&mut pos, inst);
superopt_298(&mut pos, inst);
superopt_299(&mut pos, inst);
superopt_300(&mut pos, inst);
superopt_301(&mut pos, inst);
superopt_302(&mut pos, inst);
superopt_303(&mut pos, inst);
superopt_304(&mut pos, inst);
superopt_305(&mut pos, inst);
superopt_306(&mut pos, inst);
superopt_307(&mut pos, inst);
superopt_308(&mut pos, inst);
superopt_309(&mut pos, inst);
superopt_310(&mut pos, inst);
superopt_311(&mut pos, inst);
superopt_312(&mut pos, inst);
superopt_313(&mut pos, inst);
superopt_314(&mut pos, inst);
superopt_315(&mut pos, inst);
superopt_316(&mut pos, inst);
superopt_317(&mut pos, inst);
superopt_318(&mut pos, inst);
superopt_319(&mut pos, inst);
superopt_320(&mut pos, inst);
superopt_321(&mut pos, inst);
superopt_322(&mut pos, inst);
superopt_323(&mut pos, inst);
superopt_324(&mut pos, inst);
superopt_325(&mut pos, inst);
superopt_326(&mut pos, inst);
superopt_327(&mut pos, inst);
superopt_328(&mut pos, inst);
superopt_329(&mut pos, inst);
superopt_330(&mut pos, inst);
superopt_331(&mut pos, inst);
superopt_332(&mut pos, inst);
superopt_333(&mut pos, inst);
superopt_334(&mut pos, inst);
superopt_335(&mut pos, inst);
superopt_336(&mut pos, inst);
superopt_337(&mut pos, inst);
superopt_338(&mut pos, inst);
superopt_339(&mut pos, inst);
superopt_340(&mut pos, inst);
superopt_341(&mut pos, inst);
superopt_342(&mut pos, inst);
superopt_343(&mut pos, inst);
superopt_344(&mut pos, inst);
superopt_345(&mut pos, inst);
superopt_346(&mut pos, inst);
superopt_347(&mut pos, inst);
superopt_348(&mut pos, inst);
superopt_349(&mut pos, inst);
superopt_350(&mut pos, inst);
superopt_351(&mut pos, inst);
superopt_352(&mut pos, inst);
superopt_353(&mut pos, inst);
superopt_354(&mut pos, inst);
superopt_355(&mut pos, inst);
superopt_356(&mut pos, inst);
superopt_357(&mut pos, inst);
superopt_358(&mut pos, inst);
superopt_359(&mut pos, inst);
superopt_360(&mut pos, inst);
superopt_361(&mut pos, inst);
superopt_362(&mut pos, inst);
superopt_363(&mut pos, inst);
superopt_364(&mut pos, inst);
superopt_365(&mut pos, inst);
superopt_366(&mut pos, inst);
superopt_367(&mut pos, inst);
superopt_368(&mut pos, inst);
superopt_369(&mut pos, inst);
superopt_370(&mut pos, inst);
superopt_371(&mut pos, inst);
superopt_372(&mut pos, inst);
superopt_373(&mut pos, inst);
superopt_374(&mut pos, inst);
superopt_375(&mut pos, inst);
superopt_376(&mut pos, inst);
superopt_377(&mut pos, inst);
superopt_378(&mut pos, inst);
superopt_379(&mut pos, inst);
superopt_380(&mut pos, inst);
superopt_381(&mut pos, inst);
superopt_382(&mut pos, inst);
superopt_383(&mut pos, inst);
superopt_384(&mut pos, inst);
superopt_385(&mut pos, inst);
superopt_386(&mut pos, inst);
superopt_387(&mut pos, inst);
superopt_388(&mut pos, inst);
superopt_389(&mut pos, inst);
superopt_390(&mut pos, inst);
superopt_391(&mut pos, inst);
superopt_392(&mut pos, inst);
superopt_393(&mut pos, inst);
superopt_394(&mut pos, inst);
superopt_395(&mut pos, inst);
superopt_396(&mut pos, inst);
superopt_397(&mut pos, inst);
superopt_398(&mut pos, inst);
superopt_399(&mut pos, inst);
superopt_400(&mut pos, inst);
superopt_401(&mut pos, inst);
superopt_402(&mut pos, inst);
superopt_403(&mut pos, inst);
superopt_404(&mut pos, inst);
superopt_405(&mut pos, inst);
superopt_406(&mut pos, inst);
superopt_407(&mut pos, inst);
superopt_408(&mut pos, inst);
superopt_409(&mut pos, inst);
superopt_410(&mut pos, inst);
superopt_411(&mut pos, inst);
superopt_412(&mut pos, inst);
superopt_413(&mut pos, inst);
superopt_414(&mut pos, inst);
superopt_415(&mut pos, inst);
superopt_416(&mut pos, inst);
superopt_417(&mut pos, inst);
superopt_418(&mut pos, inst);
superopt_419(&mut pos, inst);
superopt_420(&mut pos, inst);
superopt_421(&mut pos, inst);
superopt_422(&mut pos, inst);
superopt_423(&mut pos, inst);
superopt_424(&mut pos, inst);
superopt_425(&mut pos, inst);
superopt_426(&mut pos, inst);
superopt_427(&mut pos, inst);
superopt_428(&mut pos, inst);
superopt_429(&mut pos, inst);
superopt_430(&mut pos, inst);
superopt_431(&mut pos, inst);
superopt_432(&mut pos, inst);
superopt_433(&mut pos, inst);
superopt_434(&mut pos, inst);
superopt_435(&mut pos, inst);
superopt_436(&mut pos, inst);
superopt_437(&mut pos, inst);
superopt_438(&mut pos, inst);
superopt_439(&mut pos, inst);
superopt_440(&mut pos, inst);
superopt_441(&mut pos, inst);
superopt_442(&mut pos, inst);
superopt_443(&mut pos, inst);
superopt_444(&mut pos, inst);
superopt_445(&mut pos, inst);
superopt_446(&mut pos, inst);
superopt_447(&mut pos, inst);
superopt_448(&mut pos, inst);
superopt_449(&mut pos, inst);
superopt_450(&mut pos, inst);
superopt_451(&mut pos, inst);
superopt_452(&mut pos, inst);
superopt_453(&mut pos, inst);
superopt_454(&mut pos, inst);
superopt_455(&mut pos, inst);
superopt_456(&mut pos, inst);
superopt_457(&mut pos, inst);
superopt_458(&mut pos, inst);
superopt_459(&mut pos, inst);
superopt_460(&mut pos, inst);
superopt_461(&mut pos, inst);
superopt_462(&mut pos, inst);
superopt_463(&mut pos, inst);
superopt_464(&mut pos, inst);
superopt_465(&mut pos, inst);
superopt_466(&mut pos, inst);
superopt_467(&mut pos, inst);
superopt_468(&mut pos, inst);
superopt_469(&mut pos, inst);
superopt_470(&mut pos, inst);
superopt_471(&mut pos, inst);
superopt_472(&mut pos, inst);
superopt_473(&mut pos, inst);
superopt_474(&mut pos, inst);
superopt_475(&mut pos, inst);
superopt_476(&mut pos, inst);
superopt_477(&mut pos, inst);
superopt_478(&mut pos, inst);
superopt_479(&mut pos, inst);
superopt_480(&mut pos, inst);
superopt_481(&mut pos, inst);
superopt_482(&mut pos, inst);
superopt_483(&mut pos, inst);
superopt_484(&mut pos, inst);
superopt_485(&mut pos, inst);
superopt_486(&mut pos, inst);
superopt_487(&mut pos, inst);
superopt_488(&mut pos, inst);
superopt_489(&mut pos, inst);
superopt_490(&mut pos, inst);
superopt_491(&mut pos, inst);
superopt_492(&mut pos, inst);
superopt_493(&mut pos, inst);
superopt_494(&mut pos, inst);
superopt_495(&mut pos, inst);
superopt_496(&mut pos, inst);
superopt_497(&mut pos, inst);
superopt_498(&mut pos, inst);
superopt_499(&mut pos, inst);
superopt_500(&mut pos, inst);
superopt_501(&mut pos, inst);
superopt_502(&mut pos, inst);
superopt_503(&mut pos, inst);
superopt_504(&mut pos, inst);
superopt_505(&mut pos, inst);
superopt_506(&mut pos, inst);
superopt_507(&mut pos, inst);
superopt_508(&mut pos, inst);
superopt_509(&mut pos, inst);
superopt_510(&mut pos, inst);
superopt_511(&mut pos, inst);
superopt_512(&mut pos, inst);
superopt_513(&mut pos, inst);
superopt_514(&mut pos, inst);
superopt_515(&mut pos, inst);
superopt_516(&mut pos, inst);
superopt_517(&mut pos, inst);
superopt_518(&mut pos, inst);
superopt_519(&mut pos, inst);
superopt_520(&mut pos, inst);
superopt_521(&mut pos, inst);
superopt_522(&mut pos, inst);
superopt_523(&mut pos, inst);
superopt_524(&mut pos, inst);
superopt_525(&mut pos, inst);
superopt_526(&mut pos, inst);
superopt_527(&mut pos, inst);
superopt_528(&mut pos, inst);
superopt_529(&mut pos, inst);
superopt_530(&mut pos, inst);
superopt_531(&mut pos, inst);
superopt_532(&mut pos, inst);
superopt_533(&mut pos, inst);
superopt_534(&mut pos, inst);
superopt_535(&mut pos, inst);
superopt_536(&mut pos, inst);
superopt_537(&mut pos, inst);
superopt_538(&mut pos, inst);
superopt_539(&mut pos, inst);
superopt_540(&mut pos, inst);
superopt_541(&mut pos, inst);
superopt_542(&mut pos, inst);
superopt_543(&mut pos, inst);
superopt_544(&mut pos, inst);
superopt_545(&mut pos, inst);
superopt_546(&mut pos, inst);
superopt_547(&mut pos, inst);
superopt_548(&mut pos, inst);
superopt_549(&mut pos, inst);
superopt_550(&mut pos, inst);
superopt_551(&mut pos, inst);
superopt_552(&mut pos, inst);
superopt_553(&mut pos, inst);
superopt_554(&mut pos, inst);
superopt_555(&mut pos, inst);
superopt_556(&mut pos, inst);
superopt_557(&mut pos, inst);
superopt_558(&mut pos, inst);
superopt_559(&mut pos, inst);
superopt_560(&mut pos, inst);
superopt_561(&mut pos, inst);
superopt_562(&mut pos, inst);
superopt_563(&mut pos, inst);
superopt_564(&mut pos, inst);
superopt_565(&mut pos, inst);
superopt_566(&mut pos, inst);
superopt_567(&mut pos, inst);
superopt_568(&mut pos, inst);
superopt_569(&mut pos, inst);
superopt_570(&mut pos, inst);
superopt_571(&mut pos, inst);
superopt_572(&mut pos, inst);
superopt_573(&mut pos, inst);
superopt_574(&mut pos, inst);
superopt_575(&mut pos, inst);
superopt_576(&mut pos, inst);
superopt_577(&mut pos, inst);
superopt_578(&mut pos, inst);
superopt_579(&mut pos, inst);
superopt_580(&mut pos, inst);
superopt_581(&mut pos, inst);
superopt_582(&mut pos, inst);
superopt_583(&mut pos, inst);
superopt_584(&mut pos, inst);
superopt_585(&mut pos, inst);
superopt_586(&mut pos, inst);
superopt_587(&mut pos, inst);
superopt_588(&mut pos, inst);
superopt_589(&mut pos, inst);
superopt_590(&mut pos, inst);
superopt_591(&mut pos, inst);
superopt_592(&mut pos, inst);
superopt_593(&mut pos, inst);
superopt_594(&mut pos, inst);
superopt_595(&mut pos, inst);
superopt_596(&mut pos, inst);
superopt_597(&mut pos, inst);
superopt_598(&mut pos, inst);
superopt_599(&mut pos, inst);
superopt_600(&mut pos, inst);
superopt_601(&mut pos, inst);
superopt_602(&mut pos, inst);
superopt_603(&mut pos, inst);
superopt_604(&mut pos, inst);
superopt_605(&mut pos, inst);
superopt_606(&mut pos, inst);
superopt_607(&mut pos, inst);
superopt_608(&mut pos, inst);
superopt_609(&mut pos, inst);
superopt_610(&mut pos, inst);
superopt_611(&mut pos, inst);
superopt_612(&mut pos, inst);
superopt_613(&mut pos, inst);
superopt_614(&mut pos, inst);
superopt_615(&mut pos, inst);
superopt_616(&mut pos, inst);
superopt_617(&mut pos, inst);
superopt_618(&mut pos, inst);
superopt_619(&mut pos, inst);
superopt_620(&mut pos, inst);
superopt_621(&mut pos, inst);
superopt_622(&mut pos, inst);
superopt_623(&mut pos, inst);
superopt_624(&mut pos, inst);
superopt_625(&mut pos, inst);
superopt_626(&mut pos, inst);
superopt_627(&mut pos, inst);
superopt_628(&mut pos, inst);
superopt_629(&mut pos, inst);
superopt_630(&mut pos, inst);
superopt_631(&mut pos, inst);
superopt_632(&mut pos, inst);
superopt_633(&mut pos, inst);
superopt_634(&mut pos, inst);
superopt_635(&mut pos, inst);
superopt_636(&mut pos, inst);
superopt_637(&mut pos, inst);
superopt_638(&mut pos, inst);
superopt_639(&mut pos, inst);
superopt_640(&mut pos, inst);
superopt_641(&mut pos, inst);
superopt_642(&mut pos, inst);
superopt_643(&mut pos, inst);
superopt_644(&mut pos, inst);
superopt_645(&mut pos, inst);
superopt_646(&mut pos, inst);
superopt_647(&mut pos, inst);
superopt_648(&mut pos, inst);
superopt_649(&mut pos, inst);
superopt_650(&mut pos, inst);
superopt_651(&mut pos, inst);
superopt_652(&mut pos, inst);
superopt_653(&mut pos, inst);
superopt_654(&mut pos, inst);
superopt_655(&mut pos, inst);
superopt_656(&mut pos, inst);
superopt_657(&mut pos, inst);
superopt_658(&mut pos, inst);
superopt_659(&mut pos, inst);
superopt_660(&mut pos, inst);
superopt_661(&mut pos, inst);
superopt_662(&mut pos, inst);
superopt_663(&mut pos, inst);
superopt_664(&mut pos, inst);
superopt_665(&mut pos, inst);
superopt_666(&mut pos, inst);
superopt_667(&mut pos, inst);
superopt_668(&mut pos, inst);
superopt_669(&mut pos, inst);
superopt_670(&mut pos, inst);
superopt_671(&mut pos, inst);
superopt_672(&mut pos, inst);
superopt_673(&mut pos, inst);
superopt_674(&mut pos, inst);
superopt_675(&mut pos, inst);
superopt_676(&mut pos, inst);
superopt_677(&mut pos, inst);
superopt_678(&mut pos, inst);
superopt_679(&mut pos, inst);
superopt_680(&mut pos, inst);
superopt_681(&mut pos, inst);
superopt_682(&mut pos, inst);
superopt_683(&mut pos, inst);
superopt_684(&mut pos, inst);
superopt_685(&mut pos, inst);
superopt_686(&mut pos, inst);
superopt_687(&mut pos, inst);
superopt_688(&mut pos, inst);
superopt_689(&mut pos, inst);
superopt_690(&mut pos, inst);
superopt_691(&mut pos, inst);
superopt_692(&mut pos, inst);
superopt_693(&mut pos, inst);
superopt_694(&mut pos, inst);
superopt_695(&mut pos, inst);
superopt_696(&mut pos, inst);
superopt_697(&mut pos, inst);
superopt_698(&mut pos, inst);
superopt_699(&mut pos, inst);
superopt_700(&mut pos, inst);
superopt_701(&mut pos, inst);
superopt_702(&mut pos, inst);
superopt_703(&mut pos, inst);
superopt_704(&mut pos, inst);
superopt_705(&mut pos, inst);
superopt_706(&mut pos, inst);
superopt_707(&mut pos, inst);
superopt_708(&mut pos, inst);
superopt_709(&mut pos, inst);
superopt_710(&mut pos, inst);
superopt_711(&mut pos, inst);
superopt_712(&mut pos, inst);
superopt_713(&mut pos, inst);
superopt_714(&mut pos, inst);
superopt_715(&mut pos, inst);
superopt_716(&mut pos, inst);
superopt_717(&mut pos, inst);
superopt_718(&mut pos, inst);
superopt_719(&mut pos, inst);
superopt_720(&mut pos, inst);
superopt_721(&mut pos, inst);
superopt_722(&mut pos, inst);
superopt_723(&mut pos, inst);
superopt_724(&mut pos, inst);
superopt_725(&mut pos, inst);
superopt_726(&mut pos, inst);
superopt_727(&mut pos, inst);
superopt_728(&mut pos, inst);
superopt_729(&mut pos, inst);
superopt_730(&mut pos, inst);
superopt_731(&mut pos, inst);
superopt_732(&mut pos, inst);
superopt_733(&mut pos, inst);
superopt_734(&mut pos, inst);
superopt_735(&mut pos, inst);
superopt_736(&mut pos, inst);
superopt_737(&mut pos, inst);
superopt_738(&mut pos, inst);
superopt_739(&mut pos, inst);
superopt_740(&mut pos, inst);
superopt_741(&mut pos, inst);
superopt_742(&mut pos, inst);
superopt_743(&mut pos, inst);
superopt_744(&mut pos, inst);
superopt_745(&mut pos, inst);
superopt_746(&mut pos, inst);
superopt_747(&mut pos, inst);
superopt_748(&mut pos, inst);
superopt_749(&mut pos, inst);
superopt_750(&mut pos, inst);
superopt_751(&mut pos, inst);
superopt_752(&mut pos, inst);
superopt_753(&mut pos, inst);
superopt_754(&mut pos, inst);
superopt_755(&mut pos, inst);
superopt_756(&mut pos, inst);
superopt_757(&mut pos, inst);
superopt_758(&mut pos, inst);
superopt_759(&mut pos, inst);
superopt_760(&mut pos, inst);
superopt_761(&mut pos, inst);
superopt_762(&mut pos, inst);
superopt_763(&mut pos, inst);
superopt_764(&mut pos, inst);
superopt_765(&mut pos, inst);
superopt_766(&mut pos, inst);
superopt_767(&mut pos, inst);
superopt_768(&mut pos, inst);
superopt_769(&mut pos, inst);
superopt_770(&mut pos, inst);
superopt_771(&mut pos, inst);
superopt_772(&mut pos, inst);
superopt_773(&mut pos, inst);
superopt_774(&mut pos, inst);
superopt_775(&mut pos, inst);
superopt_776(&mut pos, inst);
superopt_777(&mut pos, inst);
superopt_778(&mut pos, inst);
superopt_779(&mut pos, inst);
superopt_780(&mut pos, inst);
superopt_781(&mut pos, inst);
superopt_782(&mut pos, inst);
superopt_783(&mut pos, inst);
superopt_784(&mut pos, inst);
superopt_785(&mut pos, inst);
superopt_786(&mut pos, inst);
superopt_787(&mut pos, inst);
superopt_788(&mut pos, inst);
superopt_789(&mut pos, inst);
superopt_790(&mut pos, inst);
superopt_791(&mut pos, inst);
superopt_792(&mut pos, inst);
superopt_793(&mut pos, inst);
superopt_794(&mut pos, inst);
superopt_795(&mut pos, inst);
superopt_796(&mut pos, inst);
superopt_797(&mut pos, inst);
superopt_798(&mut pos, inst);
superopt_799(&mut pos, inst);
superopt_800(&mut pos, inst);
superopt_801(&mut pos, inst);
superopt_802(&mut pos, inst);
superopt_803(&mut pos, inst);
superopt_804(&mut pos, inst);
superopt_805(&mut pos, inst);
superopt_806(&mut pos, inst);
superopt_807(&mut pos, inst);
superopt_808(&mut pos, inst);
superopt_809(&mut pos, inst);
superopt_810(&mut pos, inst);
superopt_811(&mut pos, inst);
superopt_812(&mut pos, inst);
superopt_813(&mut pos, inst);
superopt_814(&mut pos, inst);
superopt_815(&mut pos, inst);
superopt_816(&mut pos, inst);
superopt_817(&mut pos, inst);
superopt_818(&mut pos, inst);
superopt_819(&mut pos, inst);
superopt_820(&mut pos, inst);
superopt_821(&mut pos, inst);
superopt_822(&mut pos, inst);
superopt_823(&mut pos, inst);
superopt_824(&mut pos, inst);
superopt_825(&mut pos, inst);
superopt_826(&mut pos, inst);
superopt_827(&mut pos, inst);
superopt_828(&mut pos, inst);
superopt_829(&mut pos, inst);
superopt_830(&mut pos, inst);
superopt_831(&mut pos, inst);
superopt_832(&mut pos, inst);
superopt_833(&mut pos, inst);
superopt_834(&mut pos, inst);
superopt_835(&mut pos, inst);
superopt_836(&mut pos, inst);
superopt_837(&mut pos, inst);
superopt_838(&mut pos, inst);
superopt_839(&mut pos, inst);
superopt_840(&mut pos, inst);
superopt_841(&mut pos, inst);
superopt_842(&mut pos, inst);
superopt_843(&mut pos, inst);
superopt_844(&mut pos, inst);
superopt_845(&mut pos, inst);
superopt_846(&mut pos, inst);
superopt_847(&mut pos, inst);
superopt_848(&mut pos, inst);
superopt_849(&mut pos, inst);
superopt_850(&mut pos, inst);
superopt_851(&mut pos, inst);
superopt_852(&mut pos, inst);
superopt_853(&mut pos, inst);
superopt_854(&mut pos, inst);
superopt_855(&mut pos, inst);
superopt_856(&mut pos, inst);
superopt_857(&mut pos, inst);
superopt_858(&mut pos, inst);
superopt_859(&mut pos, inst);
superopt_860(&mut pos, inst);
superopt_861(&mut pos, inst);
superopt_862(&mut pos, inst);
superopt_863(&mut pos, inst);
superopt_864(&mut pos, inst);
superopt_865(&mut pos, inst);
superopt_866(&mut pos, inst);
superopt_867(&mut pos, inst);
superopt_868(&mut pos, inst);
superopt_869(&mut pos, inst);
superopt_870(&mut pos, inst);
superopt_871(&mut pos, inst);
superopt_872(&mut pos, inst);
superopt_873(&mut pos, inst);
superopt_874(&mut pos, inst);
superopt_875(&mut pos, inst);
superopt_876(&mut pos, inst);
superopt_877(&mut pos, inst);
superopt_878(&mut pos, inst);
superopt_879(&mut pos, inst);
superopt_880(&mut pos, inst);
superopt_881(&mut pos, inst);
superopt_882(&mut pos, inst);
superopt_883(&mut pos, inst);
superopt_884(&mut pos, inst);
superopt_885(&mut pos, inst);
superopt_886(&mut pos, inst);
superopt_887(&mut pos, inst);
superopt_888(&mut pos, inst);
superopt_889(&mut pos, inst);
superopt_890(&mut pos, inst);
superopt_891(&mut pos, inst);
superopt_892(&mut pos, inst);
superopt_893(&mut pos, inst);
superopt_894(&mut pos, inst);
superopt_895(&mut pos, inst);
superopt_896(&mut pos, inst);
superopt_897(&mut pos, inst);
superopt_898(&mut pos, inst);
superopt_899(&mut pos, inst);
superopt_900(&mut pos, inst);
superopt_901(&mut pos, inst);
superopt_902(&mut pos, inst);
superopt_903(&mut pos, inst);
superopt_904(&mut pos, inst);
superopt_905(&mut pos, inst);
superopt_906(&mut pos, inst);
superopt_907(&mut pos, inst);
superopt_908(&mut pos, inst);
superopt_909(&mut pos, inst);
superopt_910(&mut pos, inst);
superopt_911(&mut pos, inst);
superopt_912(&mut pos, inst);
superopt_913(&mut pos, inst);
superopt_914(&mut pos, inst);
superopt_915(&mut pos, inst);
superopt_916(&mut pos, inst);
superopt_917(&mut pos, inst);
superopt_918(&mut pos, inst);
superopt_919(&mut pos, inst);
superopt_920(&mut pos, inst);
superopt_921(&mut pos, inst);
superopt_922(&mut pos, inst);
superopt_923(&mut pos, inst);
superopt_924(&mut pos, inst);
superopt_925(&mut pos, inst);
superopt_926(&mut pos, inst);
superopt_927(&mut pos, inst);
superopt_928(&mut pos, inst);
superopt_929(&mut pos, inst);
superopt_930(&mut pos, inst);
superopt_931(&mut pos, inst);
superopt_932(&mut pos, inst);
superopt_933(&mut pos, inst);
superopt_934(&mut pos, inst);
superopt_935(&mut pos, inst);
superopt_936(&mut pos, inst);
superopt_937(&mut pos, inst);
superopt_938(&mut pos, inst);
superopt_939(&mut pos, inst);
superopt_940(&mut pos, inst);
superopt_941(&mut pos, inst);
superopt_942(&mut pos, inst);
superopt_943(&mut pos, inst);
superopt_944(&mut pos, inst);
superopt_945(&mut pos, inst);
superopt_946(&mut pos, inst);
superopt_947(&mut pos, inst);
superopt_948(&mut pos, inst);
superopt_949(&mut pos, inst);
superopt_950(&mut pos, inst);
superopt_951(&mut pos, inst);
superopt_952(&mut pos, inst);
superopt_953(&mut pos, inst);
superopt_954(&mut pos, inst);
superopt_955(&mut pos, inst);
superopt_956(&mut pos, inst);
superopt_957(&mut pos, inst);
superopt_958(&mut pos, inst);
superopt_959(&mut pos, inst);
superopt_960(&mut pos, inst);
superopt_961(&mut pos, inst);
superopt_962(&mut pos, inst);
superopt_963(&mut pos, inst);
superopt_964(&mut pos, inst);
superopt_965(&mut pos, inst);
superopt_966(&mut pos, inst);
superopt_967(&mut pos, inst);
superopt_968(&mut pos, inst);
superopt_969(&mut pos, inst);
superopt_970(&mut pos, inst);
superopt_971(&mut pos, inst);
superopt_972(&mut pos, inst);
superopt_973(&mut pos, inst);
superopt_974(&mut pos, inst);
superopt_975(&mut pos, inst);
superopt_976(&mut pos, inst);
superopt_977(&mut pos, inst);
superopt_978(&mut pos, inst);
superopt_979(&mut pos, inst);
superopt_980(&mut pos, inst);
superopt_981(&mut pos, inst);
superopt_982(&mut pos, inst);
superopt_983(&mut pos, inst);
superopt_984(&mut pos, inst);
superopt_985(&mut pos, inst);
superopt_986(&mut pos, inst);
superopt_987(&mut pos, inst);
superopt_988(&mut pos, inst);
superopt_989(&mut pos, inst);
superopt_990(&mut pos, inst);
superopt_991(&mut pos, inst);
superopt_992(&mut pos, inst);
superopt_993(&mut pos, inst);
superopt_994(&mut pos, inst);
superopt_995(&mut pos, inst);
superopt_996(&mut pos, inst);
superopt_997(&mut pos, inst);
superopt_998(&mut pos, inst);
superopt_999(&mut pos, inst);
superopt_1000(&mut pos, inst);
superopt_1001(&mut pos, inst);
superopt_1002(&mut pos, inst);
superopt_1003(&mut pos, inst);
superopt_1004(&mut pos, inst);
superopt_1005(&mut pos, inst);
superopt_1006(&mut pos, inst);
superopt_1007(&mut pos, inst);
superopt_1008(&mut pos, inst);
superopt_1009(&mut pos, inst);
superopt_1010(&mut pos, inst);
superopt_1011(&mut pos, inst);
superopt_1012(&mut pos, inst);
superopt_1013(&mut pos, inst);
superopt_1014(&mut pos, inst);
superopt_1015(&mut pos, inst);
superopt_1016(&mut pos, inst);
superopt_1017(&mut pos, inst);
superopt_1018(&mut pos, inst);
superopt_1019(&mut pos, inst);
superopt_1020(&mut pos, inst);
superopt_1021(&mut pos, inst);
superopt_1022(&mut pos, inst);
superopt_1023(&mut pos, inst);
superopt_1024(&mut pos, inst);
superopt_1025(&mut pos, inst);
superopt_1026(&mut pos, inst);
superopt_1027(&mut pos, inst);
superopt_1028(&mut pos, inst);
superopt_1029(&mut pos, inst);
superopt_1030(&mut pos, inst);
superopt_1031(&mut pos, inst);
superopt_1032(&mut pos, inst);
superopt_1033(&mut pos, inst);
superopt_1034(&mut pos, inst);
superopt_1035(&mut pos, inst);
superopt_1036(&mut pos, inst);
superopt_1037(&mut pos, inst);
superopt_1038(&mut pos, inst);
superopt_1039(&mut pos, inst);
superopt_1040(&mut pos, inst);
superopt_1041(&mut pos, inst);
superopt_1042(&mut pos, inst);
superopt_1043(&mut pos, inst);
superopt_1044(&mut pos, inst);
superopt_1045(&mut pos, inst);
superopt_1046(&mut pos, inst);
superopt_1047(&mut pos, inst);
superopt_1048(&mut pos, inst);
superopt_1049(&mut pos, inst);
superopt_1050(&mut pos, inst);
superopt_1051(&mut pos, inst);
superopt_1052(&mut pos, inst);
superopt_1053(&mut pos, inst);
superopt_1054(&mut pos, inst);
superopt_1055(&mut pos, inst);
superopt_1056(&mut pos, inst);
superopt_1057(&mut pos, inst);
superopt_1058(&mut pos, inst);
superopt_1059(&mut pos, inst);
superopt_1060(&mut pos, inst);
superopt_1061(&mut pos, inst);
superopt_1062(&mut pos, inst);
superopt_1063(&mut pos, inst);
superopt_1064(&mut pos, inst);
superopt_1065(&mut pos, inst);
superopt_1066(&mut pos, inst);
superopt_1067(&mut pos, inst);
superopt_1068(&mut pos, inst);
superopt_1069(&mut pos, inst);
superopt_1070(&mut pos, inst);
superopt_1071(&mut pos, inst);
superopt_1072(&mut pos, inst);
superopt_1073(&mut pos, inst);
superopt_1074(&mut pos, inst);
superopt_1075(&mut pos, inst);
superopt_1076(&mut pos, inst);
superopt_1077(&mut pos, inst);
superopt_1078(&mut pos, inst);
superopt_1079(&mut pos, inst);
superopt_1080(&mut pos, inst);
superopt_1081(&mut pos, inst);
superopt_1082(&mut pos, inst);
superopt_1083(&mut pos, inst);
superopt_1084(&mut pos, inst);
superopt_1085(&mut pos, inst);
superopt_1086(&mut pos, inst);
superopt_1087(&mut pos, inst);
superopt_1088(&mut pos, inst);
superopt_1089(&mut pos, inst);
superopt_1090(&mut pos, inst);
superopt_1091(&mut pos, inst);
superopt_1092(&mut pos, inst);
superopt_1093(&mut pos, inst);
superopt_1094(&mut pos, inst);
superopt_1095(&mut pos, inst);
superopt_1096(&mut pos, inst);
superopt_1097(&mut pos, inst);
superopt_1098(&mut pos, inst);
superopt_1099(&mut pos, inst);
superopt_1100(&mut pos, inst);
superopt_1101(&mut pos, inst);
superopt_1102(&mut pos, inst);
superopt_1103(&mut pos, inst);
superopt_1104(&mut pos, inst);
superopt_1105(&mut pos, inst);
superopt_1106(&mut pos, inst);
superopt_1107(&mut pos, inst);
superopt_1108(&mut pos, inst);
superopt_1109(&mut pos, inst);
superopt_1110(&mut pos, inst);
superopt_1111(&mut pos, inst);
superopt_1112(&mut pos, inst);
superopt_1113(&mut pos, inst);
superopt_1114(&mut pos, inst);
superopt_1115(&mut pos, inst);
superopt_1116(&mut pos, inst);
superopt_1117(&mut pos, inst);
superopt_1118(&mut pos, inst);
superopt_1119(&mut pos, inst);
superopt_1120(&mut pos, inst);
superopt_1121(&mut pos, inst);
superopt_1122(&mut pos, inst);
superopt_1123(&mut pos, inst);
superopt_1124(&mut pos, inst);
superopt_1125(&mut pos, inst);
superopt_1126(&mut pos, inst);
superopt_1127(&mut pos, inst);
superopt_1128(&mut pos, inst);
superopt_1129(&mut pos, inst);
superopt_1130(&mut pos, inst);
superopt_1131(&mut pos, inst);
superopt_1132(&mut pos, inst);
superopt_1133(&mut pos, inst);
superopt_1134(&mut pos, inst);
superopt_1135(&mut pos, inst);
superopt_1136(&mut pos, inst);
superopt_1137(&mut pos, inst);
superopt_1138(&mut pos, inst);
superopt_1139(&mut pos, inst);
superopt_1140(&mut pos, inst);
superopt_1141(&mut pos, inst);
superopt_1142(&mut pos, inst);
superopt_1143(&mut pos, inst);
superopt_1144(&mut pos, inst);
superopt_1145(&mut pos, inst);
superopt_1146(&mut pos, inst);
superopt_1147(&mut pos, inst);
superopt_1148(&mut pos, inst);
superopt_1149(&mut pos, inst);
superopt_1150(&mut pos, inst);
superopt_1151(&mut pos, inst);
superopt_1152(&mut pos, inst);
superopt_1153(&mut pos, inst);
superopt_1154(&mut pos, inst);
superopt_1155(&mut pos, inst);
superopt_1156(&mut pos, inst);
superopt_1157(&mut pos, inst);
superopt_1158(&mut pos, inst);
superopt_1159(&mut pos, inst);
superopt_1160(&mut pos, inst);
superopt_1161(&mut pos, inst);
superopt_1162(&mut pos, inst);
superopt_1163(&mut pos, inst);
superopt_1164(&mut pos, inst);
superopt_1165(&mut pos, inst);
superopt_1166(&mut pos, inst);
superopt_1167(&mut pos, inst);
superopt_1168(&mut pos, inst);
superopt_1169(&mut pos, inst);
superopt_1170(&mut pos, inst);
superopt_1171(&mut pos, inst);
superopt_1172(&mut pos, inst);
superopt_1173(&mut pos, inst);
superopt_1174(&mut pos, inst);
superopt_1175(&mut pos, inst);
superopt_1176(&mut pos, inst);
superopt_1177(&mut pos, inst);
superopt_1178(&mut pos, inst);
superopt_1179(&mut pos, inst);
superopt_1180(&mut pos, inst);
superopt_1181(&mut pos, inst);
superopt_1182(&mut pos, inst);
superopt_1183(&mut pos, inst);
superopt_1184(&mut pos, inst);
superopt_1185(&mut pos, inst);
superopt_1186(&mut pos, inst);
superopt_1187(&mut pos, inst);
superopt_1188(&mut pos, inst);
superopt_1189(&mut pos, inst);
superopt_1190(&mut pos, inst);
superopt_1191(&mut pos, inst);
superopt_1192(&mut pos, inst);
superopt_1193(&mut pos, inst);
superopt_1194(&mut pos, inst);
superopt_1195(&mut pos, inst);
superopt_1196(&mut pos, inst);
superopt_1197(&mut pos, inst);
superopt_1198(&mut pos, inst);
superopt_1199(&mut pos, inst);
superopt_1200(&mut pos, inst);
superopt_1201(&mut pos, inst);
superopt_1202(&mut pos, inst);
superopt_1203(&mut pos, inst);
superopt_1204(&mut pos, inst);
superopt_1205(&mut pos, inst);
superopt_1206(&mut pos, inst);
superopt_1207(&mut pos, inst);
superopt_1208(&mut pos, inst);
superopt_1209(&mut pos, inst);
superopt_1210(&mut pos, inst);
superopt_1211(&mut pos, inst);
superopt_1212(&mut pos, inst);
superopt_1213(&mut pos, inst);
superopt_1214(&mut pos, inst);
superopt_1215(&mut pos, inst);
superopt_1216(&mut pos, inst);
superopt_1217(&mut pos, inst);
superopt_1218(&mut pos, inst);
superopt_1219(&mut pos, inst);
superopt_1220(&mut pos, inst);
superopt_1221(&mut pos, inst);
superopt_1222(&mut pos, inst);
superopt_1223(&mut pos, inst);
superopt_1224(&mut pos, inst);
superopt_1225(&mut pos, inst);
superopt_1226(&mut pos, inst);
superopt_1227(&mut pos, inst);
superopt_1228(&mut pos, inst);
superopt_1229(&mut pos, inst);
superopt_1230(&mut pos, inst);
superopt_1231(&mut pos, inst);
superopt_1232(&mut pos, inst);
superopt_1233(&mut pos, inst);
superopt_1234(&mut pos, inst);
superopt_1235(&mut pos, inst);
superopt_1236(&mut pos, inst);
superopt_1237(&mut pos, inst);
superopt_1238(&mut pos, inst);
superopt_1239(&mut pos, inst);
superopt_1240(&mut pos, inst);
superopt_1241(&mut pos, inst);
superopt_1242(&mut pos, inst);
superopt_1243(&mut pos, inst);
superopt_1244(&mut pos, inst);
superopt_1245(&mut pos, inst);
superopt_1246(&mut pos, inst);
superopt_1247(&mut pos, inst);
superopt_1248(&mut pos, inst);
superopt_1249(&mut pos, inst);
superopt_1250(&mut pos, inst);
superopt_1251(&mut pos, inst);
superopt_1252(&mut pos, inst);
superopt_1253(&mut pos, inst);
superopt_1254(&mut pos, inst);
superopt_1255(&mut pos, inst);
superopt_1256(&mut pos, inst);
superopt_1257(&mut pos, inst);
superopt_1258(&mut pos, inst);
superopt_1259(&mut pos, inst);
superopt_1260(&mut pos, inst);
superopt_1261(&mut pos, inst);
superopt_1262(&mut pos, inst);
superopt_1263(&mut pos, inst);
superopt_1264(&mut pos, inst);
superopt_1265(&mut pos, inst);
superopt_1266(&mut pos, inst);
superopt_1267(&mut pos, inst);
superopt_1268(&mut pos, inst);
superopt_1269(&mut pos, inst);
superopt_1270(&mut pos, inst);
superopt_1271(&mut pos, inst);
superopt_1272(&mut pos, inst);
superopt_1273(&mut pos, inst);
superopt_1274(&mut pos, inst);
superopt_1275(&mut pos, inst);
superopt_1276(&mut pos, inst);
superopt_1277(&mut pos, inst);
superopt_1278(&mut pos, inst);
superopt_1279(&mut pos, inst);
superopt_1280(&mut pos, inst);
superopt_1281(&mut pos, inst);
superopt_1282(&mut pos, inst);
superopt_1283(&mut pos, inst);
superopt_1284(&mut pos, inst);
superopt_1285(&mut pos, inst);
superopt_1286(&mut pos, inst);
superopt_1287(&mut pos, inst);
superopt_1288(&mut pos, inst);
superopt_1289(&mut pos, inst);
superopt_1290(&mut pos, inst);
superopt_1291(&mut pos, inst);
superopt_1292(&mut pos, inst);
superopt_1293(&mut pos, inst);
superopt_1294(&mut pos, inst);
superopt_1295(&mut pos, inst);
superopt_1296(&mut pos, inst);
superopt_1297(&mut pos, inst);
superopt_1298(&mut pos, inst);
superopt_1299(&mut pos, inst);
superopt_1300(&mut pos, inst);
superopt_1301(&mut pos, inst);
superopt_1302(&mut pos, inst);
superopt_1303(&mut pos, inst);
superopt_1304(&mut pos, inst);
superopt_1305(&mut pos, inst);
superopt_1306(&mut pos, inst);
superopt_1307(&mut pos, inst);
superopt_1308(&mut pos, inst);
superopt_1309(&mut pos, inst);
superopt_1310(&mut pos, inst);
superopt_1311(&mut pos, inst);
superopt_1312(&mut pos, inst);
superopt_1313(&mut pos, inst);
superopt_1314(&mut pos, inst);
superopt_1315(&mut pos, inst);
superopt_1316(&mut pos, inst);
superopt_1317(&mut pos, inst);
superopt_1318(&mut pos, inst);
superopt_1319(&mut pos, inst);
superopt_1320(&mut pos, inst);
superopt_1321(&mut pos, inst);
superopt_1322(&mut pos, inst);
superopt_1323(&mut pos, inst);
superopt_1324(&mut pos, inst);
superopt_1325(&mut pos, inst);
superopt_1326(&mut pos, inst);
superopt_1327(&mut pos, inst);
superopt_1328(&mut pos, inst);
superopt_1329(&mut pos, inst);
superopt_1330(&mut pos, inst);
superopt_1331(&mut pos, inst);
superopt_1332(&mut pos, inst);
superopt_1333(&mut pos, inst);
superopt_1334(&mut pos, inst);
superopt_1335(&mut pos, inst);
superopt_1336(&mut pos, inst);
superopt_1337(&mut pos, inst);
superopt_1338(&mut pos, inst);
superopt_1339(&mut pos, inst);
superopt_1340(&mut pos, inst);
superopt_1341(&mut pos, inst);
superopt_1342(&mut pos, inst);
superopt_1343(&mut pos, inst);
superopt_1344(&mut pos, inst);
superopt_1345(&mut pos, inst);
superopt_1346(&mut pos, inst);
superopt_1347(&mut pos, inst);
superopt_1348(&mut pos, inst);
superopt_1349(&mut pos, inst);
superopt_1350(&mut pos, inst);
superopt_1351(&mut pos, inst);
superopt_1352(&mut pos, inst);
superopt_1353(&mut pos, inst);
superopt_1354(&mut pos, inst);
superopt_1355(&mut pos, inst);
superopt_1356(&mut pos, inst);
superopt_1357(&mut pos, inst);
superopt_1358(&mut pos, inst);
superopt_1359(&mut pos, inst);
superopt_1360(&mut pos, inst);
superopt_1361(&mut pos, inst);
superopt_1362(&mut pos, inst);
superopt_1363(&mut pos, inst);
superopt_1364(&mut pos, inst);
superopt_1365(&mut pos, inst);
superopt_1366(&mut pos, inst);
superopt_1367(&mut pos, inst);
superopt_1368(&mut pos, inst);
superopt_1369(&mut pos, inst);
superopt_1370(&mut pos, inst);
superopt_1371(&mut pos, inst);
superopt_1372(&mut pos, inst);
superopt_1373(&mut pos, inst);
superopt_1374(&mut pos, inst);
superopt_1375(&mut pos, inst);
superopt_1376(&mut pos, inst);
superopt_1377(&mut pos, inst);
superopt_1378(&mut pos, inst);
superopt_1379(&mut pos, inst);
superopt_1380(&mut pos, inst);
superopt_1381(&mut pos, inst);
superopt_1382(&mut pos, inst);
superopt_1383(&mut pos, inst);
superopt_1384(&mut pos, inst);
superopt_1385(&mut pos, inst);
superopt_1386(&mut pos, inst);
superopt_1387(&mut pos, inst);
superopt_1388(&mut pos, inst);
superopt_1389(&mut pos, inst);
superopt_1390(&mut pos, inst);
superopt_1391(&mut pos, inst);
superopt_1392(&mut pos, inst);
superopt_1393(&mut pos, inst);
superopt_1394(&mut pos, inst);
superopt_1395(&mut pos, inst);
superopt_1396(&mut pos, inst);
superopt_1397(&mut pos, inst);
superopt_1398(&mut pos, inst);
superopt_1399(&mut pos, inst);
superopt_1400(&mut pos, inst);
superopt_1401(&mut pos, inst);
superopt_1402(&mut pos, inst);
superopt_1403(&mut pos, inst);
superopt_1404(&mut pos, inst);
superopt_1405(&mut pos, inst);
superopt_1406(&mut pos, inst);
superopt_1407(&mut pos, inst);
superopt_1408(&mut pos, inst);
superopt_1409(&mut pos, inst);
superopt_1410(&mut pos, inst);
superopt_1411(&mut pos, inst);
superopt_1412(&mut pos, inst);
superopt_1413(&mut pos, inst);

        }
    }
}
